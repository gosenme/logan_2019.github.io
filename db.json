{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/辛普森公式法.png","path":"img/辛普森公式法.png","modified":0,"renderable":0},{"_id":"source/img/梯型公式法.png","path":"img/梯型公式法.png","modified":0,"renderable":0},{"_id":"source/img/变长梯型公式法.png","path":"img/变长梯型公式法.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"source/img/pad.png","path":"img/pad.png","modified":0,"renderable":0},{"_id":"source/img/stride.png","path":"img/stride.png","modified":0,"renderable":0},{"_id":"source/img/常见激活函数.png","path":"img/常见激活函数.png","modified":0,"renderable":0},{"_id":"source/img/BatchNorm.png","path":"img/BatchNorm.png","modified":0,"renderable":0},{"_id":"source/img/BatchNorm层的优点.png","path":"img/BatchNorm层的优点.png","modified":0,"renderable":0},{"_id":"source/img/ReLU.png","path":"img/ReLU.png","modified":0,"renderable":0},{"_id":"source/img/池化.png","path":"img/池化.png","modified":0,"renderable":0},{"_id":"source/img/tensorflow使用BatchNorm层.png","path":"img/tensorflow使用BatchNorm层.png","modified":0,"renderable":0},{"_id":"source/img/190530解决携程房型拼接属性不兼容问题.jpg","path":"img/190530解决携程房型拼接属性不兼容问题.jpg","modified":0,"renderable":0},{"_id":"source/img/Python常用内置数据结构与算法.jpg","path":"img/Python常用内置数据结构与算法.jpg","modified":0,"renderable":0},{"_id":"source/img/golang_keywords.png","path":"img/golang_keywords.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1554081277000},{"_id":"themes/landscape/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1554081277000},{"_id":"themes/landscape/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1554081277000},{"_id":"themes/landscape/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1554081277000},{"_id":"themes/landscape/_config.yml","hash":"c986259b700208a4205f739fd89e74e7b6777c8e","modified":1554126582204},{"_id":"themes/landscape/README.md","hash":"859d11941c46be4f7b4a6d62297ccbeb4f732bc9","modified":1554081277000},{"_id":"themes/landscape/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1554081277000},{"_id":"themes/landscape/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1554081277000},{"_id":"source/_posts/动态规划05.md","hash":"64cc4da343731a4e7857a6d2f4e9e5b40e73168a","modified":1555311720837},{"_id":"source/_posts/动态规划法01.md","hash":"47c3340e73c21c2bdc60ed848e8880aad379d09e","modified":1554992096057},{"_id":"source/_posts/28天训练营课程表.md","hash":"572ce8a78986c23466692dc0e4c849d6e3062d52","modified":1554112789319},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1554081324453},{"_id":"source/_posts/unpacking_tuple_of_lists.md","hash":"b9889c4867550424875abc30fe2f3fff04217b52","modified":1558764226792},{"_id":"source/_posts/基础卡01-贪婪法.md","hash":"d04f26d2b691ebb7617bb9e029cfc98b313aae9d","modified":1554266810040},{"_id":"source/_posts/基础卡02-分治法.md","hash":"8d6b0e8d65b5c9d3d1a7f50440f281a8b34e7254","modified":1554127979024},{"_id":"source/_posts/基础卡03-动态规划.md","hash":"8885bee18843096d6a789545349e7c0c67e8adf6","modified":1554275857311},{"_id":"source/_posts/基础卡04-穷举法.md","hash":"c324918126bd59517f1f79b5b729b484b293438e","modified":1554272156591},{"_id":"source/_posts/基础卡05-迭代法.md","hash":"94a14272caff73ed343b382fae33dc44546a1c53","modified":1554459120665},{"_id":"source/_posts/游戏算法卡01-A*算法.md","hash":"4bc0ce2a8556f871ec1d5d720c30174dd2f4d1f8","modified":1555649341314},{"_id":"source/_posts/基础卡06-基础开胃菜.md","hash":"b4939934aa6fd31a7e53590c73700c434912672c","modified":1554391424593},{"_id":"source/_posts/挂载硬盘的一些命令.md","hash":"be9f1701caf7f20056adcd73180c906038ec17d1","modified":1554356588786},{"_id":"source/_posts/热身卡01-开篇词：算法是程序的灵魂.md","hash":"eb4e6e6f6fca03f106bc16b57e0f7b153dc3bc98","modified":1554112789338},{"_id":"source/_posts/热身卡02-入门测试题.md","hash":"cccf8a298396f91a4ff4c58facf7c5195dcd53cd","modified":1554112789330},{"_id":"source/_posts/热身卡03-如何\"玩\"算法.md","hash":"55e7657d06c17567ebe1fdf35e3dfd8400f79086","modified":1554112789335},{"_id":"source/_posts/穷举搜索卡01.md","hash":"210233ac9951cf2d15d9fa0d3ad66bfef2561aa7","modified":1554555081328},{"_id":"source/_posts/开营仪式.md","hash":"baddb420d6ebbc321702b61b1e706d5c10c3a0a4","modified":1554127140284},{"_id":"source/_posts/穷举搜索卡03.md","hash":"69eb1be397251d14ae262d70d1fcf0014b6e18a1","modified":1554642815552},{"_id":"source/_posts/穷举搜索卡04.md","hash":"850e020f8e574f41bdc15816a230cbdb10e30385","modified":1554643509670},{"_id":"source/_posts/穷举搜索卡02.md","hash":"0a1b49996b5e505f56f74c621fcaa77f51c65853","modified":1554559752518},{"_id":"source/_posts/穷举搜索法05.md","hash":"d66e42b8e15e3556a94f510bf8a33c1a0cb866ac","modified":1554732494224},{"_id":"source/_posts/穷举搜索法06.md","hash":"3a8cf3c3a187e42df9d56ddf515c216ff498f2da","modified":1554741949390},{"_id":"source/_posts/穷举搜索法08.md","hash":"6e83a52d06624cf3af3d7c5f84e12b8d55a0839e","modified":1554822330183},{"_id":"source/_posts/穷举搜索法07.md","hash":"61fd2649d3effee2b78c61f7b26cb98747c7dfbc","modified":1554818058913},{"_id":"source/_posts/穷举搜索法09.md","hash":"114d3fd1a7dfecbf60f0e3decc42ff6eea642372","modified":1554902773369},{"_id":"source/_posts/穷举搜索法10.md","hash":"0fe0fe2bd186f9517f900ab703fb4fffa187c268","modified":1554902881068},{"_id":"source/_posts/迭代递推卡01.md","hash":"5fcdca9bb8f3be94ac352d674e87ea7aa875c94d","modified":1554465356750},{"_id":"source/_posts/迭代递推卡03.md","hash":"3f679fb0f6eb8b168c05a2165475143f0cf5fab1","modified":1554468014491},{"_id":"source/_posts/迭代递推卡02.md","hash":"815aa79d1a71591e6a8b3dce828af13b4f761f91","modified":1554466176409},{"_id":"themes/landscape/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1554081277000},{"_id":"source/img/辛普森公式法.png","hash":"bdfdc4ec6767f6b6f69d6fe321dfdf2a44319c84","modified":1554467817506},{"_id":"themes/landscape/languages/default.yml","hash":"ca5582329d9721d58fe8504725108769080e9993","modified":1554081277000},{"_id":"themes/landscape/languages/en.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1554081277000},{"_id":"themes/landscape/languages/default_old.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1554081277000},{"_id":"themes/landscape/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1554081277000},{"_id":"themes/landscape/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1554081277000},{"_id":"themes/landscape/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1554081277000},{"_id":"themes/landscape/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1554081277000},{"_id":"themes/landscape/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1554081277000},{"_id":"themes/landscape/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1554081277000},{"_id":"themes/landscape/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1554081277000},{"_id":"themes/landscape/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1554081277000},{"_id":"themes/landscape/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1554081277000},{"_id":"themes/landscape/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1554081277000},{"_id":"themes/landscape/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1554081277000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1554081277000},{"_id":"themes/landscape/layout/index.ejs","hash":"c53484094a7c30ab82b0ea984404157ab9711e71","modified":1554081277000},{"_id":"themes/landscape/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1554081277000},{"_id":"themes/landscape/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1554081277000},{"_id":"themes/landscape/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1554081277000},{"_id":"themes/landscape/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1554081277000},{"_id":"themes/landscape/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1554081277000},{"_id":"themes/landscape/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1554081277000},{"_id":"themes/landscape/layout/post.ejs","hash":"a7d164ce888a60cd3eddd9c04bc6762428fa66bb","modified":1554081277000},{"_id":"source/img/梯型公式法.png","hash":"8342a1d9226a276e3d033e1490fce6ddc16e5887","modified":1554467201498},{"_id":"source/img/变长梯型公式法.png","hash":"74d6534f051befad7fd9849099a9993ab6a4e5b2","modified":1554467657180},{"_id":"themes/landscape/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"753dcb513c6f21f6f46e673942c7261cf50da886","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"9b2b7d6e9ab514107adf408c7ec8530fd612b3d5","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/scripts.ejs","hash":"78e3e290ab8bb6450a04b2a9c7c5b7b3da74abb8","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1554081277000},{"_id":"themes/landscape/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1554081277000},{"_id":"themes/landscape/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1554081277000},{"_id":"themes/landscape/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1554081277000},{"_id":"themes/landscape/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1554081277000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"2c8751d132e62f5f068dc3a184d160670737ba1f","modified":1554081277000},{"_id":"themes/landscape/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1554081277000},{"_id":"themes/landscape/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1554081277000},{"_id":"themes/landscape/source/css/style.styl","hash":"d9be82f7e7145cde78e04183afc8ff13d6a16059","modified":1554081277000},{"_id":"themes/landscape/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1554081277000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1554081277000},{"_id":"themes/landscape/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1554081277000},{"_id":"themes/landscape/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1554081277000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1554081277000},{"_id":"themes/landscape/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1554081277000},{"_id":"themes/landscape/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1554081277000},{"_id":"themes/landscape/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1554081277000},{"_id":"themes/landscape/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1554081277000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1554081277000},{"_id":"themes/landscape/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1554081277000},{"_id":"themes/landscape/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1554081277000},{"_id":"themes/landscape/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1554081277000},{"_id":"themes/landscape/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1554081277000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"d9b13e402808175dc90761cc4fdfe3d4808034f8","modified":1554081277000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"7ff5b6a28dc3f2cd4ebfc4f5351054a18800bf96","modified":1554081277000},{"_id":"themes/landscape/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1554081277000},{"_id":"themes/landscape/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1554081277000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"662667942cc9a2caf55caa84a0fc73617d0c3aa4","modified":1554081277000},{"_id":"themes/landscape/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1554081277000},{"_id":"themes/landscape/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1554081277000},{"_id":"themes/landscape/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1554081277000},{"_id":"themes/landscape/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1554081277000},{"_id":"themes/landscape/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1554081277000},{"_id":"themes/landscape/source/css/_partial/post/actions_desktop.styl","hash":"4ef72ea70f7c840b2843bf7717aaafae3b6fc241","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1554081277000},{"_id":"themes/landscape/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1554081277000},{"_id":"themes/landscape/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1554081277000},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1554081277000},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1554081277000},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1554081277000},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1554081277000},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1554081277000},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1554081277000},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1554081277000},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1554081277000},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1554081277000},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1554081277000},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1554081277000},{"_id":"themes/landscape/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1554081277000},{"_id":"themes/landscape/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1554081277000},{"_id":"public/2019/04/19/游戏算法卡01-A*算法/index.html","hash":"3842123c1ef474ef7ec0ed09fece87f99eb6468f","modified":1558765569143},{"_id":"public/2019/04/15/动态规划05/index.html","hash":"42f9cfa25244a5600c605be5bbc48ebc4e1a5144","modified":1558763174829},{"_id":"public/2019/04/11/动态规划法01/index.html","hash":"9d8efc415c7f97867c52d424457d18e829445417","modified":1558763174829},{"_id":"public/2019/04/10/穷举搜索法10/index.html","hash":"bb8515e229e67beae5ffc59af8f1507fec87b7e7","modified":1558763174829},{"_id":"public/2019/04/10/穷举搜索法09/index.html","hash":"165a83d79a3b3b5980421ae04631844bdadcf526","modified":1558763174830},{"_id":"public/2019/04/09/穷举搜索法08/index.html","hash":"8ae0ec71581d50855cc5575f2718e599741ab30d","modified":1558763174830},{"_id":"public/2019/04/09/穷举搜索法07/index.html","hash":"177e419cc2fea6b9c32b82624291b46f809b6d32","modified":1558763174830},{"_id":"public/2019/04/08/穷举搜索法05/index.html","hash":"d51db647a4ca71f7d1fdd354f25412b6b48c1fe2","modified":1558765569144},{"_id":"public/2019/04/08/unpacking_tuple_of_lists/index.html","hash":"5ce7772b1909be4acd492d0d50b5aed89fd51727","modified":1558763174830},{"_id":"public/2019/04/07/穷举搜索卡04/index.html","hash":"a70befa44aa4708b62ba04ae3300e807cc473fa1","modified":1558765569173},{"_id":"public/2019/04/07/穷举搜索卡03/index.html","hash":"469652429c98dcb22e47ac0aee732d45a8469423","modified":1558763174830},{"_id":"public/2019/04/06/穷举搜索卡01/index.html","hash":"c4d4694569b7637caa33250e0ac65fff55baf0d1","modified":1558763174830},{"_id":"public/2019/04/05/迭代递推卡03/index.html","hash":"bb7ccece278ae650b91d7415f0edde9c8f7d33ac","modified":1558763174830},{"_id":"public/2019/04/05/迭代递推卡02/index.html","hash":"ace1129b556c1d72dae003d9de104cd5d1ea25b6","modified":1558763174830},{"_id":"public/2019/04/05/迭代递推卡01/index.html","hash":"6417c13e73e703c6d0339e3a3f7880246e892b93","modified":1558763174830},{"_id":"public/2019/04/04/基础卡06-基础开胃菜/index.html","hash":"81e8bb4d1af9746e515bf860c20a817a0490091a","modified":1558763174830},{"_id":"public/2019/04/04/挂载硬盘的一些命令/index.html","hash":"2041406828cf4ae86ae7d21719b0a3e605d5574e","modified":1559523788563},{"_id":"public/2019/04/01/开营仪式/index.html","hash":"60d661d6b649ee162a10cb197a2a6053002df4b1","modified":1558763174831},{"_id":"public/2019/04/01/热身卡01-开篇词：算法是程序的灵魂/index.html","hash":"5365cd2cb5cc87f5b44d1a96ff62b7687d89e88b","modified":1558763174831},{"_id":"public/2019/04/01/热身卡03-如何\"玩\"算法/index.html","hash":"14716c7babdf6b60d1d1d1a1b17fef4c2e3fed14","modified":1558763174831},{"_id":"public/2019/04/01/28天训练营课程表/index.html","hash":"c26eac356c83b417737471cf8e389dcd32b63add","modified":1558765569173},{"_id":"public/2019/04/01/hello-world/index.html","hash":"25163ac5467791b1fb6719a1915a8799db571c22","modified":1558763174831},{"_id":"public/archives/index.html","hash":"8b83882358b9ebd25ae9957dfa9d46fc260f0a63","modified":1560487778548},{"_id":"public/archives/page/2/index.html","hash":"430c898d36aa1800c6248d2a9cd7e417a9304c84","modified":1560487778548},{"_id":"public/archives/page/3/index.html","hash":"9edc76e372cd835e83329f8239804b6c5719fcb0","modified":1560487778564},{"_id":"public/archives/2019/index.html","hash":"bb1070fee45d8fc3fba2953518fdad747d31e670","modified":1560487778564},{"_id":"public/archives/2019/page/2/index.html","hash":"ebae641e93143446175478ad3eca98a2e076c9cb","modified":1560487778564},{"_id":"public/archives/2019/page/3/index.html","hash":"af73f21c9fee2716f8388e02b9b4241a8bdf9671","modified":1560487778564},{"_id":"public/archives/2019/04/index.html","hash":"79a78b19071fc7898490d9d7c5140264277f1922","modified":1559523788570},{"_id":"public/archives/2019/04/page/2/index.html","hash":"67cc20665a7bf68052b7343e5b703f0b144d2ef4","modified":1559523788570},{"_id":"public/archives/2019/04/page/3/index.html","hash":"63ff85b9dc0fa123a33a504281f9326cf35981de","modified":1559523788570},{"_id":"public/index.html","hash":"e6fe5b0dec891c74c39e4861a309b99ecac2f872","modified":1560487778565},{"_id":"public/page/2/index.html","hash":"0825d24ee7da6d493ea19c140db2862704c6b2db","modified":1560487778565},{"_id":"public/page/3/index.html","hash":"1fe0f51bbdb4697fbcec5344e31c1751ae54d39d","modified":1560487778565},{"_id":"public/2019/04/09/穷举搜索法06/index.html","hash":"6c1fc09ea611610eb7993c9aa4631cce6b5dbd18","modified":1558763174832},{"_id":"public/2019/04/06/穷举搜索卡02/index.html","hash":"944312374b373426266d0069cd0635bde8d7f91d","modified":1558763174832},{"_id":"public/2019/04/05/基础卡05-迭代法/index.html","hash":"d101ee37e5593f9c6be3bf78e74dddfd90d37a7c","modified":1558763174832},{"_id":"public/2019/04/03/基础卡03-动态规划/index.html","hash":"bcf02e32736e4923a42824f9d0d01621c62db1b5","modified":1558763174832},{"_id":"public/2019/04/03/基础卡04-穷举法/index.html","hash":"a8af4b3f01647d43216298674a8dde6820f47b45","modified":1558763174832},{"_id":"public/2019/04/03/基础卡01-贪婪法/index.html","hash":"8e0127d4be7e2cbfacca3bd194af9c7621e8541a","modified":1558763174832},{"_id":"public/2019/04/01/基础卡02-分治法/index.html","hash":"b8a458c45c4ee8cadff94079438e76254a1159f5","modified":1558763174832},{"_id":"public/2019/04/01/热身卡02-入门测试题/index.html","hash":"e85cfe49af3d5ac8870d017710022817f8d0408a","modified":1558767433044},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1558763174843},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1558763174843},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1558763174843},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1558763174843},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1558763174843},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1558763174843},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1558763174843},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1558763174844},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1558763174844},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1558763174844},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1558763174844},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1558763174844},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1558763174844},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1558763174844},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1558763174844},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1558763174844},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1558763174844},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1558763174844},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1558763174844},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1558763174845},{"_id":"public/img/辛普森公式法.png","hash":"bdfdc4ec6767f6b6f69d6fe321dfdf2a44319c84","modified":1558763175080},{"_id":"public/img/梯型公式法.png","hash":"8342a1d9226a276e3d033e1490fce6ddc16e5887","modified":1558763175080},{"_id":"public/img/变长梯型公式法.png","hash":"74d6534f051befad7fd9849099a9993ab6a4e5b2","modified":1558763175081},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1558763175081},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1558763175081},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1558763175081},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1558763175081},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1558763175081},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1558763175081},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1558763175081},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1558763175082},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1558763175082},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1558763175082},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1558763175082},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1558763175082},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1558763175082},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1558763175082},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1558763175082},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1558763175082},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1558763175083},{"_id":"public/css/rtl.css","hash":"c2c2bc4ce311b3129275e009e903088b45e7ed77","modified":1558763175088},{"_id":"public/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1558763175088},{"_id":"public/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1558763175088},{"_id":"public/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1558763175088},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1558763175088},{"_id":"public/css/style.css","hash":"65a6371478e578f261dfabd29cc430ea48e8445e","modified":1558763175088},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1558763175094},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1558763175094},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1558763175098},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1558763175098},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1558763175103},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1558763175108},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1558763175108},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1558763175108},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1558763175113},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1558763175113},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1558763175113},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1558763175118},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1558763175118},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1558763175119},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1558763175120},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1558763175126},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1558763175126},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1558763175129},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1558763175134},{"_id":"public/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1558763175135},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1558763175139},{"_id":"source/_posts/安装步骤.md","hash":"014939865334f9276b8e44ab74384cbf5544fe3b","modified":1558765559300},{"_id":"public/2019/05/25/安装步骤/index.html","hash":"cd918c4c1b07102b3167ff024ab749e58a2f98a7","modified":1558767433033},{"_id":"public/2019/05/25/unpacking_tuple_of_lists/index.html","hash":"2f0ddd1899200462437c9b603d298bb64d923b9d","modified":1559523788198},{"_id":"public/archives/2019/05/index.html","hash":"22a13395b3331ddbc8a9d62f5f5b75a3444144ea","modified":1559523788570},{"_id":"source/_posts/将26个小写字母与阿拉伯数字对应.md","hash":"cd4dd5e11ca83a8a5d615478f7f785eb05adcf6b","modified":1558780931179},{"_id":"public/2019/05/25/将26个小写字母与阿拉伯数字对应/index.html","hash":"af2f2d709d81a73348c172a8a611bc9b884865ea","modified":1559523788198},{"_id":"source/_posts/卷积中的重要参数.md","hash":"311366b508560f0c8a123f36b6fc0937e6d1f6c4","modified":1558860228991},{"_id":"source/img/pad.png","hash":"7c2c51394c0163d44be8182baf9fc4b42dd84cbc","modified":1558857057884},{"_id":"source/img/stride.png","hash":"eb95dd01016f11199ddf05a8fb6b2eb97c5001b0","modified":1558856821977},{"_id":"public/2019/05/26/卷积中的重要参数/index.html","hash":"404646d47296badd40bd7ba162eabf4b3fbef3f5","modified":1558860508971},{"_id":"public/page/4/index.html","hash":"e0ed79a831bc0f04b2d7334939c9b8c7fec53686","modified":1560487778565},{"_id":"public/archives/page/4/index.html","hash":"067e54d313654c7487840fecc0954c7957a009ae","modified":1560487778564},{"_id":"public/archives/2019/page/4/index.html","hash":"a766595cf9c641fd9c3dc48c735757c79bf75324","modified":1560487778565},{"_id":"public/img/stride.png","hash":"eb95dd01016f11199ddf05a8fb6b2eb97c5001b0","modified":1558857417784},{"_id":"public/img/pad.png","hash":"7c2c51394c0163d44be8182baf9fc4b42dd84cbc","modified":1558857417786},{"_id":"source/_posts/BatchNorm层.md","hash":"a826fc3a85e47695044a92f4ec8a2395a074b017","modified":1558860451272},{"_id":"source/_posts/池化层.md","hash":"97dbe507b31eec80fa13afbc5a95e3f866c10fdd","modified":1558858037487},{"_id":"source/_posts/激活层.md","hash":"15d1eca9ccbd4696110bd6d88278a2a1315698fd","modified":1558859674446},{"_id":"source/img/常见激活函数.png","hash":"13ac9413c5da89e6bff9a5efa8b5ff40437c587c","modified":1558858329448},{"_id":"source/img/BatchNorm.png","hash":"e6083d642d9c9e81b1d4931d1f8b36d3466b5347","modified":1558859982001},{"_id":"source/img/BatchNorm层的优点.png","hash":"4bd722f49230daf8799474d4c8bc3e02cf7482e4","modified":1558860124075},{"_id":"source/img/ReLU.png","hash":"1d6e48e2764d293a595623a1cbf6d60f4d615c5b","modified":1558859639746},{"_id":"source/img/池化.png","hash":"331cd73a3de111542eb427519fc4eb0986e31370","modified":1558857739367},{"_id":"source/img/tensorflow使用BatchNorm层.png","hash":"03e54d09b6cc05668eadddb338593d3f1d3d7238","modified":1558860402166},{"_id":"public/2019/05/26/BatchNorm层/index.html","hash":"5638fa5e54304c69e81a0d1dcf61ae12cbca48cf","modified":1559126362269},{"_id":"public/2019/05/26/激活层/index.html","hash":"651e41d70dff63a0a2d173dcc6b9babef71a86ad","modified":1558860509005},{"_id":"public/2019/05/26/池化层/index.html","hash":"60719d4547d4e906a4147837c9e2dbb60dbda7f8","modified":1558860509005},{"_id":"public/img/常见激活函数.png","hash":"13ac9413c5da89e6bff9a5efa8b5ff40437c587c","modified":1558860509007},{"_id":"public/img/BatchNorm.png","hash":"e6083d642d9c9e81b1d4931d1f8b36d3466b5347","modified":1558860509012},{"_id":"public/img/BatchNorm层的优点.png","hash":"4bd722f49230daf8799474d4c8bc3e02cf7482e4","modified":1558860509012},{"_id":"public/img/ReLU.png","hash":"1d6e48e2764d293a595623a1cbf6d60f4d615c5b","modified":1558860509012},{"_id":"public/img/池化.png","hash":"331cd73a3de111542eb427519fc4eb0986e31370","modified":1558860509012},{"_id":"public/img/tensorflow使用BatchNorm层.png","hash":"03e54d09b6cc05668eadddb338593d3f1d3d7238","modified":1558860509015},{"_id":"source/_posts/work0528.md","hash":"5535aeef0b48ad85eb631791026342abaf93746b","modified":1559108564637},{"_id":"source/_posts/work0529.md","hash":"fedbf66145f239fb6494fe551f6f0bfb3f027b57","modified":1559182366134},{"_id":"public/2019/05/29/work0529/index.html","hash":"531042de5e5613287d698f1392959e5011334f41","modified":1559126362286},{"_id":"public/2019/05/29/work0528/index.html","hash":"3d5ae6aaabb519b898a524d830dcb416c7031ea4","modified":1559196128808},{"_id":"source/_posts/work0530.md","hash":"4be6a49e7720fe4d6bcd633ef134b1a252eb690d","modified":1559264994383},{"_id":"source/img/190530解决携程房型拼接属性不兼容问题.jpg","hash":"cea22ada86a390443420d47bec79ee650bbb1a92","modified":1559183431361},{"_id":"source/_posts/3编程概论.html","hash":"5a5e57a0b1139ede6a531273709f4db7163ec3a8","modified":1559196302909},{"_id":"public/2019/05/30/work0530/index.html","hash":"da03c8473d2869658676609d5fb4e1e94d4687ce","modified":1559196628421},{"_id":"public/2019/05/30/work0529/index.html","hash":"1ebd09d7dc6d8909fd999d5b0ce21585606f94a9","modified":1559278160970},{"_id":"public/archives/2019/05/page/2/index.html","hash":"cb42ae3309339ea974dc6d98e2530be111baf062","modified":1559368537130},{"_id":"public/2019/05/30/3编程概论/index.html","hash":"85abe1c52c0822a89eb4e9f3fbd45500e40a5059","modified":1559196307906},{"_id":"public/img/190530解决携程房型拼接属性不兼容问题.jpg","hash":"cea22ada86a390443420d47bec79ee650bbb1a92","modified":1559196128897},{"_id":"source/_posts/3_python_coding_introduction.html","hash":"5a5e57a0b1139ede6a531273709f4db7163ec3a8","modified":1559196302909},{"_id":"public/2019/05/30/3_python_coding_introduction/index.html","hash":"fffd61a43ef00800c6a0c3829ea8b81988b590b9","modified":1559278161003},{"_id":"source/_posts/4_function.html","hash":"cb9f9827a9da2b6b7e2a89251ee76edf17c7a3c3","modified":1559278106278},{"_id":"public/2019/05/31/work0530/index.html","hash":"e89aa3935613a9692753f659d589628ad033c6dd","modified":1559278161004},{"_id":"public/2019/05/31/4_function/index.html","hash":"13fb422eb653e73f448e7e58700edaec33602967","modified":1559281600393},{"_id":"source/_posts/python_asyncio_guidelines.html","hash":"e469c32a403f245024e30dd8e9a7881200eb1b97","modified":1559281660753},{"_id":"public/2019/05/31/python_asyncio_guidelines/index.html","hash":"18d6a64377481c8c990efd00a2872230ab0a152f","modified":1559281996428},{"_id":"source/_posts/python_coroutine.html","hash":"0e9677ac949990853b5e4aa4a84ec917f01dfabf","modified":1559281992548},{"_id":"public/archives/page/5/index.html","hash":"4eb4efe1ed35cc19de8ba71be47b4c90d0ee1c30","modified":1560487778564},{"_id":"public/archives/2019/page/5/index.html","hash":"038ce84dded23e465928f3c70cd6f4cdcb714feb","modified":1560487778565},{"_id":"public/page/5/index.html","hash":"edcdf6c42a179cf82ec51cab23c91f417334c8ac","modified":1560487778565},{"_id":"public/2019/05/31/python_coroutine/index.html","hash":"1b4bc70ec3667341bd2ed4d7b9f6cb163bf9c6f7","modified":1559368537130},{"_id":"source/_posts/Python学习路线.md","hash":"c367d5fd8fc7ed868218a4040ef12c8ba6b40a47","modified":1559368770524},{"_id":"source/_posts/work_0531.md","hash":"b3e57c2d056726020bc605246b17d4c800c2b48f","modified":1559297992748},{"_id":"public/2019/05/31/work_0531/index.html","hash":"06a2b1ed1de281802323a13bdc2bb227e278f333","modified":1559368537131},{"_id":"public/archives/2019/06/index.html","hash":"ac1a8a46833c55472d766e16704531a1a24e0665","modified":1560487778565},{"_id":"public/2019/06/01/Python学习路线/index.html","hash":"a7a73b454ea805a733d2d2715ab5f97e8a611721","modified":1559523788570},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1559369087436},{"_id":"source/_posts/test/1.md","hash":"aee9d44bd9068a1c71fc45d43ea1f56c4a57f2dd","modified":1559369187113},{"_id":"source/_posts/Python3_TensorFlow_WechatApplet/1.md","hash":"aee9d44bd9068a1c71fc45d43ea1f56c4a57f2dd","modified":1559369187113},{"_id":"source/_posts/Python3_TensorFlow_WechatApplet/BatchNorm层.md","hash":"81f3f481780125bdbccbc70052ec075b4665910a","modified":1559369527160},{"_id":"source/_posts/Python3_TensorFlow_WechatApplet/卷积中的重要参数.md","hash":"d99ffdba94b085424ab7bffd9f78348885560c70","modified":1559369527165},{"_id":"source/_posts/Python3_TensorFlow_WechatApplet/池化层.md","hash":"265d4a91d01fd0b69980ad8cbe652861aa4a1dbc","modified":1559369527157},{"_id":"source/_posts/Python3_TensorFlow_WechatApplet/激活层.md","hash":"c6c0a28e2b1788037b1d4919ec82f7aa458491b3","modified":1559369527167},{"_id":"source/_posts/Python无师自通/4_function.html","hash":"cb9f9827a9da2b6b7e2a89251ee76edf17c7a3c3","modified":1559278106278},{"_id":"source/_posts/gitchat/python_asyncio_guidelines.html","hash":"e469c32a403f245024e30dd8e9a7881200eb1b97","modified":1559281660753},{"_id":"source/_posts/gitchat/python_coroutine.html","hash":"0e9677ac949990853b5e4aa4a84ec917f01dfabf","modified":1559281992548},{"_id":"source/_posts/work_coding/work0528.md","hash":"5535aeef0b48ad85eb631791026342abaf93746b","modified":1559108564637},{"_id":"source/_posts/work_coding/work0529.md","hash":"fedbf66145f239fb6494fe551f6f0bfb3f027b57","modified":1559182366134},{"_id":"source/_posts/work_coding/work0530.md","hash":"67adbb4459af4e4596988dc883213ebf7a742516","modified":1559369527170},{"_id":"source/_posts/work_coding/work_0531.md","hash":"b3e57c2d056726020bc605246b17d4c800c2b48f","modified":1559297992748},{"_id":"source/_posts/训练营/动态规划05.md","hash":"64cc4da343731a4e7857a6d2f4e9e5b40e73168a","modified":1555311720837},{"_id":"source/_posts/训练营/动态规划法01.md","hash":"47c3340e73c21c2bdc60ed848e8880aad379d09e","modified":1554992096057},{"_id":"source/_posts/训练营/基础卡01-贪婪法.md","hash":"d04f26d2b691ebb7617bb9e029cfc98b313aae9d","modified":1554266810040},{"_id":"source/_posts/训练营/基础卡02-分治法.md","hash":"8d6b0e8d65b5c9d3d1a7f50440f281a8b34e7254","modified":1554127979024},{"_id":"source/_posts/训练营/基础卡03-动态规划.md","hash":"8885bee18843096d6a789545349e7c0c67e8adf6","modified":1554275857311},{"_id":"source/_posts/训练营/基础卡04-穷举法.md","hash":"c324918126bd59517f1f79b5b729b484b293438e","modified":1554272156591},{"_id":"source/_posts/训练营/基础卡05-迭代法.md","hash":"94a14272caff73ed343b382fae33dc44546a1c53","modified":1554459120665},{"_id":"source/_posts/训练营/基础卡06-基础开胃菜.md","hash":"b4939934aa6fd31a7e53590c73700c434912672c","modified":1554391424593},{"_id":"source/_posts/训练营/开营仪式.md","hash":"baddb420d6ebbc321702b61b1e706d5c10c3a0a4","modified":1554127140284},{"_id":"source/_posts/训练营/游戏算法卡01-A*算法.md","hash":"4bc0ce2a8556f871ec1d5d720c30174dd2f4d1f8","modified":1555649341314},{"_id":"source/_posts/训练营/热身卡01-开篇词：算法是程序的灵魂.md","hash":"eb4e6e6f6fca03f106bc16b57e0f7b153dc3bc98","modified":1554112789338},{"_id":"source/_posts/训练营/热身卡02-入门测试题.md","hash":"cccf8a298396f91a4ff4c58facf7c5195dcd53cd","modified":1554112789330},{"_id":"source/_posts/训练营/热身卡03-如何\"玩\"算法.md","hash":"55e7657d06c17567ebe1fdf35e3dfd8400f79086","modified":1554112789335},{"_id":"source/_posts/训练营/穷举搜索卡01.md","hash":"210233ac9951cf2d15d9fa0d3ad66bfef2561aa7","modified":1554555081328},{"_id":"source/_posts/训练营/穷举搜索卡02.md","hash":"0a1b49996b5e505f56f74c621fcaa77f51c65853","modified":1554559752518},{"_id":"source/_posts/训练营/穷举搜索卡03.md","hash":"69eb1be397251d14ae262d70d1fcf0014b6e18a1","modified":1554642815552},{"_id":"source/_posts/训练营/穷举搜索卡04.md","hash":"850e020f8e574f41bdc15816a230cbdb10e30385","modified":1554643509670},{"_id":"source/_posts/训练营/穷举搜索法05.md","hash":"d66e42b8e15e3556a94f510bf8a33c1a0cb866ac","modified":1554732494224},{"_id":"source/_posts/训练营/穷举搜索法06.md","hash":"3a8cf3c3a187e42df9d56ddf515c216ff498f2da","modified":1554741949390},{"_id":"source/_posts/训练营/穷举搜索法07.md","hash":"61fd2649d3effee2b78c61f7b26cb98747c7dfbc","modified":1554818058913},{"_id":"source/_posts/训练营/穷举搜索法08.md","hash":"6e83a52d06624cf3af3d7c5f84e12b8d55a0839e","modified":1554822330183},{"_id":"source/_posts/训练营/穷举搜索法09.md","hash":"114d3fd1a7dfecbf60f0e3decc42ff6eea642372","modified":1554902773369},{"_id":"source/_posts/训练营/穷举搜索法10.md","hash":"0fe0fe2bd186f9517f900ab703fb4fffa187c268","modified":1554902881068},{"_id":"source/_posts/训练营/迭代递推卡01.md","hash":"5fcdca9bb8f3be94ac352d674e87ea7aa875c94d","modified":1554465356750},{"_id":"source/_posts/训练营/迭代递推卡02.md","hash":"815aa79d1a71591e6a8b3dce828af13b4f761f91","modified":1554466176409},{"_id":"source/_posts/训练营/迭代递推卡03.md","hash":"30d38e0d626a811974fe4dfe8a5e6e65d1ec6d79","modified":1559369527162},{"_id":"source/_posts/Python无师自通/3_python_coding_introduction.html","hash":"5a5e57a0b1139ede6a531273709f4db7163ec3a8","modified":1559196302909},{"_id":"source/img/Python常用内置数据结构与算法.jpg","hash":"6ffb961baab2b1050bf72910b383a5f7e4bad13d","modified":1559472106549},{"_id":"source/_posts/Python3_TensorFlow_WechatApplet/全连接层.md","hash":"704fd1019bcb387c8d214a73cc36ec69e8170b50","modified":1559387916065},{"_id":"source/_posts/Python服务端面试/常考的内置结构与算法.md","hash":"bd87c346ba0bbe5163d8ebaa61cd6dbc42086ab1","modified":1559480874237},{"_id":"source/_posts/work_coding/work0602.md","hash":"926d28cb603abdf6e3ed9618cb4f3fd2ba1ba16a","modified":1559483259222},{"_id":"public/2019/06/02/work_coding/work0602/index.html","hash":"535fc9c88f283697cb1873e59870cbd342b50c9d","modified":1559534020281},{"_id":"public/2019/06/01/Python3_TensorFlow_WechatApplet/全连接层/index.html","hash":"b3b80b74fbe36f3046efea62fa06e64d20a7833a","modified":1559523788574},{"_id":"public/2019/06/01/work_coding/work0530/index.html","hash":"e0157b67017658a4754400bc4b3a8903cd7b54ed","modified":1559523788574},{"_id":"public/2019/06/01/Python3_TensorFlow_WechatApplet/激活层/index.html","hash":"a534f9ad7aefa7615fd427c1f118ca8d24397a61","modified":1559523788574},{"_id":"public/2019/06/01/Python3_TensorFlow_WechatApplet/卷积中的重要参数/index.html","hash":"54dcd3ea8f81fc0134fdbedb2ef90d52a5a9c843","modified":1559523788574},{"_id":"public/2019/06/01/训练营/迭代递推卡03/index.html","hash":"5aa519b5d03d989be4e7593d64cbf0df9585c6a1","modified":1559523788575},{"_id":"public/2019/06/01/Python3_TensorFlow_WechatApplet/BatchNorm层/index.html","hash":"b968e627bacc06e4fbb998de6f74a174c10ca6fd","modified":1559523788575},{"_id":"public/2019/06/01/Python3_TensorFlow_WechatApplet/池化层/index.html","hash":"3a4b7851a13ad4221d8e5d81d562dac4bb0363d4","modified":1559523788575},{"_id":"public/2019/05/31/work_coding/work_0531/index.html","hash":"b8d2b596b588ac529c0e88665ea89b4d5bfc2268","modified":1559523788575},{"_id":"public/2019/05/30/work_coding/work0529/index.html","hash":"681ca0d440f9bf26dd0c88a8b867f157aa607218","modified":1559523788575},{"_id":"public/2019/05/29/work_coding/work0528/index.html","hash":"4bc44080b50ca03cf151ed9da96f2f28c5ccb37d","modified":1559523788575},{"_id":"public/2019/04/19/训练营/游戏算法卡01-A*算法/index.html","hash":"e52dabb4f9deba99749dd5871752d6369d8880f5","modified":1559523788575},{"_id":"public/2019/04/15/训练营/动态规划05/index.html","hash":"5388e020a2e723994992ff22f9227071bff834b1","modified":1559523788575},{"_id":"public/2019/04/11/训练营/动态规划法01/index.html","hash":"48d9c7439deeb9dbd07ec9bb44bbeac2bf45f8a5","modified":1559523788575},{"_id":"public/2019/04/10/训练营/穷举搜索法10/index.html","hash":"aa73d0f1432474c6da0cf86bd9efe6beeef37ae5","modified":1559523788575},{"_id":"public/2019/04/10/训练营/穷举搜索法09/index.html","hash":"025dda16aeb0c7ba6f56def4844c0d248944c8f8","modified":1559523788575},{"_id":"public/2019/04/09/训练营/穷举搜索法08/index.html","hash":"f68f0d724745b3b76c6c48d35a299f39510146a8","modified":1559523788575},{"_id":"public/2019/04/09/训练营/穷举搜索法07/index.html","hash":"f08a4413492369846c89304a3c6589ac691dda82","modified":1559523788575},{"_id":"public/2019/04/08/训练营/穷举搜索法05/index.html","hash":"ec7fad56094ced57ad56958fef421dd0a310515e","modified":1559523788575},{"_id":"public/2019/04/07/训练营/穷举搜索卡04/index.html","hash":"7dc4a0954ce55817f837ce9e7e3fb201a4c338f0","modified":1559523788576},{"_id":"public/2019/04/07/训练营/穷举搜索卡03/index.html","hash":"b8939a53a1d27844853085a712035e5d38c6ae2e","modified":1559523788576},{"_id":"public/2019/04/06/训练营/穷举搜索卡01/index.html","hash":"f751e4e5a79729a22764765da1402b4e093f51ba","modified":1559523788576},{"_id":"public/2019/04/05/训练营/迭代递推卡02/index.html","hash":"3fb3097e0454635907fcc581e15e9e31e401fb3c","modified":1559523788576},{"_id":"public/2019/04/05/训练营/迭代递推卡01/index.html","hash":"ee8dad7627017f17cac97832160ebeba1b227f63","modified":1559523788576},{"_id":"public/2019/04/04/训练营/基础卡06-基础开胃菜/index.html","hash":"d024561f6429604a20cb163678cb77b7c873b98d","modified":1559523788576},{"_id":"public/2019/04/01/训练营/开营仪式/index.html","hash":"bc32bf6d02ae2a6a89ec25140a77d62325ea2cee","modified":1559523788576},{"_id":"public/2019/04/01/训练营/热身卡01-开篇词：算法是程序的灵魂/index.html","hash":"9f1019b4f70b2007c0607c2d84c1d8dd513336a6","modified":1559523788576},{"_id":"public/2019/04/01/训练营/热身卡03-如何\"玩\"算法/index.html","hash":"90f109d0be19f0c8e45d5b491f5d1d806d7de1d0","modified":1559523788576},{"_id":"public/2019/06/02/Python服务端面试/常考的内置结构与算法/index.html","hash":"a982361c77aa446af6744cfe53ce24986fe330af","modified":1559523788576},{"_id":"public/2019/05/31/gitchat/python_coroutine/index.html","hash":"d3907675b3e4f1b9a381433da018af3ce258ccb6","modified":1559523788576},{"_id":"public/2019/05/31/gitchat/python_asyncio_guidelines/index.html","hash":"ae6fda55000aa3bfb640b4c3dd310975688aa1ce","modified":1559523788576},{"_id":"public/2019/05/31/Python无师自通/4_function/index.html","hash":"99016a460ad3f4293ae7fe7548ae5cb85a8ef979","modified":1559523788576},{"_id":"public/2019/05/30/Python无师自通/3_python_coding_introduction/index.html","hash":"bf9565cdcc2e67a5349d9044fdeb75963de5f4f3","modified":1559523788576},{"_id":"public/2019/04/09/训练营/穷举搜索法06/index.html","hash":"d9edf04b583dbe99a52f34ad9bda97c2ce9fdbc6","modified":1559523788577},{"_id":"public/2019/04/06/训练营/穷举搜索卡02/index.html","hash":"4d3f7243c247710864bcfebcbd36d83e6738ceee","modified":1559523788577},{"_id":"public/2019/04/05/训练营/基础卡05-迭代法/index.html","hash":"6737be9f51bbb894c5973610da3c12493571299c","modified":1559523788577},{"_id":"public/2019/04/03/训练营/基础卡03-动态规划/index.html","hash":"07b9655ec58597715769ba2b0b15c5e5ec6f461d","modified":1559523788577},{"_id":"public/2019/04/03/训练营/基础卡04-穷举法/index.html","hash":"74506ed27c6b0b3ac097c72c83fda94573f83371","modified":1559523788577},{"_id":"public/2019/04/03/训练营/基础卡01-贪婪法/index.html","hash":"0d5918141d02abbcde4bfff5ecd1e6aa2e973d99","modified":1559523788577},{"_id":"public/2019/04/01/训练营/基础卡02-分治法/index.html","hash":"98c39bd1a50ad95ff687279f08239e1522da8570","modified":1559523788577},{"_id":"public/2019/04/01/训练营/热身卡02-入门测试题/index.html","hash":"b12a8883e978009c6a6ba6e2b8889e1969a1d36b","modified":1559523788577},{"_id":"public/img/Python常用内置数据结构与算法.jpg","hash":"6ffb961baab2b1050bf72910b383a5f7e4bad13d","modified":1559523788584},{"_id":"source/_posts/Python无师自通/5_container.html","hash":"6cc920a512b5b52a33af3fac5279b3dd21668429","modified":1559533984178},{"_id":"public/archives/2019/06/page/2/index.html","hash":"c39c9414f6c42a3f0a581e1a4e885373e72dac7c","modified":1560487778565},{"_id":"public/2019/06/03/Python无师自通/5_container/index.html","hash":"1381cbd90a02c5f34e2bb693099f1a85d96a7bba","modified":1559624023999},{"_id":"source/_posts/Python无师自通/strings.html","hash":"7018bbcb0f05ec85c88cad8f5f30ed02116f7bb2","modified":1559624138512},{"_id":"source/_posts/work_coding/work0603.md","hash":"30396b2b2cc1047c62a24cc633b68ba67c920e0c","modified":1559613948446},{"_id":"public/2019/06/04/work_coding/work0603/index.html","hash":"3b52a38c36fb7eb26d4141656bd15c032c862695","modified":1559709414184},{"_id":"public/2019/06/04/Python无师自通/strings/index.html","hash":"050ce9caa328128b0b852646cd61ab8973095eac","modified":1559642809878},{"_id":"source/_posts/gitchat/python_Interview_120.html","hash":"fb945f524f2dc50499c55c938ae7b26f74e34142","modified":1559642804455},{"_id":"public/2019/06/04/gitchat/python_Interview_120/index.html","hash":"9c525a5a1a395abc15c9b277f41fb7f80334d39f","modified":1559709414228},{"_id":"source/_posts/work_coding/work0604.md","hash":"29ad26d9925db7182f59aea0255bd2c5ed14d338","modified":1559662274275},{"_id":"public/2019/06/04/work_coding/work0604/index.html","hash":"df7f8cad3e7a450c353ab145b2e60f7117e51d7a","modified":1559709414184},{"_id":"public/archives/page/6/index.html","hash":"cacd3ba06032c37dff0d5ab0e35d7b0b4e31b232","modified":1560487778564},{"_id":"public/archives/2019/page/6/index.html","hash":"dac31f5f83a3d203ffd7b17b5c890f2824213e9a","modified":1560487778565},{"_id":"public/page/6/index.html","hash":"c80c6775b8cbae9a10170ddef58fc42aa9c74568","modified":1560487778566},{"_id":"source/_posts/Python无师自通/6_strings.html","hash":"7018bbcb0f05ec85c88cad8f5f30ed02116f7bb2","modified":1559624138512},{"_id":"source/_posts/Python无师自通/7_loop.html","hash":"1cda3955ae8bf54ad45482e8ba2d206a66c4b61d","modified":1559709393627},{"_id":"public/2019/06/05/Python无师自通/7_loop/index.html","hash":"332a50ea81ed8de3b301b920714f9ae4e5655718","modified":1559800737923},{"_id":"public/2019/06/04/Python无师自通/6_strings/index.html","hash":"73fc0ff4117c42fce22c7328ee530d2cd74f0f20","modified":1559709414230},{"_id":"source/_posts/Python无师自通/8_modules.html","hash":"37b0d0427b0e45c445514998959ddcea4ba61a51","modified":1559800725855},{"_id":"public/2019/06/06/Python无师自通/8_modules/index.html","hash":"cb061d933f2202a96bfa7a71927f4f31f9b43513","modified":1559872250340},{"_id":"source/_posts/Python无师自通/9_file.html","hash":"4052c70283c3c2a854fd269ad400907879f0b812","modified":1559872239988},{"_id":"public/2019/06/07/Python无师自通/9_file/index.html","hash":"f1049f78ee6110b3d560b9c6c98a540c377ba951","modified":1560049807492},{"_id":"source/_posts/golang/start.md","hash":"685102f9d19fa3ebb8bdec5a1599abdc999bd325","modified":1559980454265},{"_id":"public/2019/06/07/golang/start/index.html","hash":"3471f70603bfd3c9d76785b75426736548fd22f7","modified":1559975331490},{"_id":"source/_posts/Python无师自通/10_practice.html","hash":"c513efb56dd9ef99a7bb370d779f4b927152be97","modified":1559975316873},{"_id":"public/2019/06/08/Python无师自通/10_practice/index.html","hash":"b9f2a7cdc99dfb13b6444846454814fa26e79257","modified":1560049807492},{"_id":"source/_posts/Python无师自通/11_testing.html","hash":"d53b2b189b3128261584daa10b8e1ad954a9ac0e","modified":1560049790835},{"_id":"source/_posts/golang/base.md","hash":"88908f1f455f3bf83af1012c010a1e36449ec3f4","modified":1559980561517},{"_id":"source/img/golang_keywords.png","hash":"4034ab74b7af97105afe86e484ed640d6c81a731","modified":1559980145566},{"_id":"public/2019/06/09/Python无师自通/11_testing/index.html","hash":"2831a4c1c09f3e392201227ee17fe1e809be9ca9","modified":1560089485928},{"_id":"public/2019/06/08/golang/start/index.html","hash":"a4a565d157f292627c349c03baccc4c2f039e690","modified":1560049807494},{"_id":"public/archives/2019/06/page/3/index.html","hash":"e732f313fe89448a9f05bddc7db73873e0e07668","modified":1560487778565},{"_id":"public/2019/06/08/golang/base/index.html","hash":"1286cdccfbfcb1b2fe89efe30c3905ec0315abe8","modified":1560049807494},{"_id":"public/img/golang_keywords.png","hash":"4034ab74b7af97105afe86e484ed640d6c81a731","modified":1560049807496},{"_id":"source/_posts/work_coding/work_0609.md","hash":"a5c3d4e857a349da7623bb68b24f1c87c9dfae4e","modified":1560085910395},{"_id":"source/_posts/golang/data_type.md","hash":"3479de98583d119b8feab87f924e8353afc630a2","modified":1560081963424},{"_id":"public/2019/06/09/work_coding/work_0609/index.html","hash":"921e9b4965a02073ed66f5a3e455e57c7c4abb37","modified":1560148383269},{"_id":"public/2019/06/09/golang/data_type/index.html","hash":"1eca69d39aa3daf29e6ecf80527e1afe500e0b45","modified":1560089485972},{"_id":"source/_posts/Python无师自通/12_oop.html","hash":"cd4cff5f005671fbb39ca591ff3ef9a6919b8b53","modified":1560148369023},{"_id":"public/archives/page/7/index.html","hash":"9f6bbf53705bd3bf5489534ab2b8a04e25e3054a","modified":1560487778564},{"_id":"public/archives/2019/page/7/index.html","hash":"a1dbefd7ac0a66701c116d4f0d88aacf712942e7","modified":1560487778565},{"_id":"public/page/7/index.html","hash":"2570e4adb2e24160e5db72819a0a8be968cbd107","modified":1560487778566},{"_id":"public/2019/06/10/Python无师自通/12_oop/index.html","hash":"9286eca532df8577b215c9855aba13a88e96b5af","modified":1560157295255},{"_id":"source/_posts/git/commit.md","hash":"bd928833a47b68d043f68193925ec21d13f7ea7e","modified":1560157287637},{"_id":"public/2019/06/10/git/commit/index.html","hash":"b02910109d08632835e561930bbae374904db3ed","modified":1560179807776},{"_id":"source/_posts/golang/sort.md","hash":"74c11e3bdfcdc7fc12344c637fb98be6fa426a4a","modified":1560179418776},{"_id":"public/2019/06/10/golang/sort/index.html","hash":"5a9ddf97fe205465b807a8486fef48a53c9cc7ef","modified":1560228297693},{"_id":"source/_posts/Python无师自通/13_4_pillars.html","hash":"c64624c23a835b381aee6c91c144ef00c69072e0","modified":1560228289427},{"_id":"public/2019/06/11/Python无师自通/13_4_pillars/index.html","hash":"97fd1dbf3cdda2dea8980f248f189b141c0d019b","modified":1560314195789},{"_id":"source/_posts/Python无师自通/14_depp_opp.html","hash":"37a3922adb704a70b71af00b3f802ae0b30559fa","modified":1560314174881},{"_id":"source/_posts/kafka/start.md","hash":"0f05b0aaaddca26f4efd731a0dd97130cf23b4c4","modified":1560246158058},{"_id":"public/2019/06/11/kafka/start/index.html","hash":"2127643a1b586642624db73dc9a6e2ef47e3a1b8","modified":1560314195791},{"_id":"public/2019/06/12/Python无师自通/14_depp_opp/index.html","hash":"95b01fd5eaff0bb9271ff522a35ba671f025686c","modified":1560353348192},{"_id":"source/_posts/golang/data_structuer.md","hash":"04bdb4cee6b5a3d4d342eb79a4cdbedd16df0664","modified":1560353338904},{"_id":"public/archives/2019/06/page/4/index.html","hash":"cc8a5c5844e98cf3c95e5945b1775e777b3bcfa4","modified":1560487778565},{"_id":"public/2019/06/12/golang/data_structuer/index.html","hash":"ca02ef25ac5a6d3c8a97500b1949719084f1beba","modified":1560402350514},{"_id":"source/_posts/Python无师自通/15_opp_testing.html","hash":"645fdacb9b75404b24ffd63450294536eb687816","modified":1560402328992},{"_id":"public/2019/06/13/Python无师自通/15_opp_testing/index.html","hash":"3ea6e9e63dd2cd9faf5ce62f12fd7226096736eb","modified":1560441131671},{"_id":"source/_posts/me.md","hash":"0348a0a31d23ac71db1d37990726eadaad6532aa","modified":1560441530697},{"_id":"public/2019/06/13/me/index.html","hash":"5a43c72198b4bd4fb92baf38f12f651e52d4a7ac","modified":1560487778566},{"_id":"source/_posts/Python无师自通/16_bash.html","hash":"f9b27f08046335c56fd08638bb1c7a0d5dffd123","modified":1560487768566},{"_id":"public/2019/06/14/Python无师自通/16_bash/index.html","hash":"bd11b4f0fa4c2803090f38ecfa7d44a1d28cb712","modified":1560487778567}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"unpacking tuple of list","_content":"\n[原文地址](https://www.geeksforgeeks.org/python-unpacking-tuple-of-lists/)\n\n第四种方法\n```python\ndef unpack_tuple(tups):\n    res = list()\n    for lst in tups:\n        res.extend(lst)\n    return res\n```","source":"_posts/unpacking_tuple_of_lists.md","raw":"---\ntitle: unpacking tuple of list\n---\n\n[原文地址](https://www.geeksforgeeks.org/python-unpacking-tuple-of-lists/)\n\n第四种方法\n```python\ndef unpack_tuple(tups):\n    res = list()\n    for lst in tups:\n        res.extend(lst)\n    return res\n```","slug":"unpacking_tuple_of_lists","published":1,"date":"2019-05-25T06:03:46.792Z","updated":"2019-05-25T06:03:46.792Z","_id":"cjw32rpcn0003vw72rz5rgdpb","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.geeksforgeeks.org/python-unpacking-tuple-of-lists/\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<p>第四种方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unpack_tuple</span><span class=\"params\">(tups)</span>:</span></span><br><span class=\"line\">    res = list()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> lst <span class=\"keyword\">in</span> tups:</span><br><span class=\"line\">        res.extend(lst)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.geeksforgeeks.org/python-unpacking-tuple-of-lists/\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<p>第四种方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unpack_tuple</span><span class=\"params\">(tups)</span>:</span></span><br><span class=\"line\">    res = list()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> lst <span class=\"keyword\">in</span> tups:</span><br><span class=\"line\">        res.extend(lst)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure></p>\n"},{"_content":"查看硬盘分区列表\n\n    diskutil list\n    \n进行挂载\n    \n    diskutil mount 硬盘号","source":"_posts/挂载硬盘的一些命令.md","raw":"查看硬盘分区列表\n\n    diskutil list\n    \n进行挂载\n    \n    diskutil mount 硬盘号","slug":"挂载硬盘的一些命令","published":1,"date":"2019-04-04T05:43:08.785Z","updated":"2019-04-04T05:43:08.786Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw32rpcy000cvw72sia0h04d","content":"<p>查看硬盘分区列表</p>\n<pre><code>diskutil list\n</code></pre><p>进行挂载</p>\n<pre><code>diskutil mount 硬盘号\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>查看硬盘分区列表</p>\n<pre><code>diskutil list\n</code></pre><p>进行挂载</p>\n<pre><code>diskutil mount 硬盘号\n</code></pre>"},{"title":"start blog","_content":"1. 安装node\n2. 安装git\n3. 在GitHub上创建格式为 BlogName.github.io的项目\n4. 使用npm install hexo -g 安装hexo\n5. 切换到博客并使用命令 hexo init初始化项目\n6. npm install 安装所需组件\n7. hexo g 首次使用需要编译\n8. hexo s 开启服务\n9. 设置Git的user name和email\n    \n       git config --global user.name \"YourUserName\"\n       git config --global user.email \"YourEmail\"\n\n10. ssh环境准备\n    \n        cd ~/.ssh\n        ssh-keygen -t rsa -C \"YourUserName\"\n        eval \"$(ssh-agent -s)\"\n        ssh-add ~/.ssh/id_rsa\n\n11. 上GitHub配置 ssh key\n        \n        新建ssh key 并将本地 id_rsa.pub的文件内容复制进去\n        \n12. 在本地执行 ssh -T git@github.com，如果显示出用户名则成功， 否则需要重新配置ssh-key\n\n13. 在项目中找到_config.yml文件修改以下参数\n\n        deploy:\n              type: git\n              repository: 项目的ssh链接\n              branch: master\n\n14. 安装git扩展 npm install hexo-deployer-git --save\n15. hexo d -g 生成以及部署了","source":"_posts/安装步骤.md","raw":"---\ntitle: start blog\n---\n1. 安装node\n2. 安装git\n3. 在GitHub上创建格式为 BlogName.github.io的项目\n4. 使用npm install hexo -g 安装hexo\n5. 切换到博客并使用命令 hexo init初始化项目\n6. npm install 安装所需组件\n7. hexo g 首次使用需要编译\n8. hexo s 开启服务\n9. 设置Git的user name和email\n    \n       git config --global user.name \"YourUserName\"\n       git config --global user.email \"YourEmail\"\n\n10. ssh环境准备\n    \n        cd ~/.ssh\n        ssh-keygen -t rsa -C \"YourUserName\"\n        eval \"$(ssh-agent -s)\"\n        ssh-add ~/.ssh/id_rsa\n\n11. 上GitHub配置 ssh key\n        \n        新建ssh key 并将本地 id_rsa.pub的文件内容复制进去\n        \n12. 在本地执行 ssh -T git@github.com，如果显示出用户名则成功， 否则需要重新配置ssh-key\n\n13. 在项目中找到_config.yml文件修改以下参数\n\n        deploy:\n              type: git\n              repository: 项目的ssh链接\n              branch: master\n\n14. 安装git扩展 npm install hexo-deployer-git --save\n15. hexo d -g 生成以及部署了","slug":"安装步骤","published":1,"date":"2019-05-25T06:25:59.300Z","updated":"2019-05-25T06:25:59.300Z","_id":"cjw347hl800007o72z113o69q","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li>安装node</li>\n<li>安装git</li>\n<li>在GitHub上创建格式为 BlogName.github.io的项目</li>\n<li>使用npm install hexo -g 安装hexo</li>\n<li>切换到博客并使用命令 hexo init初始化项目</li>\n<li>npm install 安装所需组件</li>\n<li>hexo g 首次使用需要编译</li>\n<li>hexo s 开启服务</li>\n<li><p>设置Git的user name和email</p>\n<pre><code>git config --global user.name &quot;YourUserName&quot;\ngit config --global user.email &quot;YourEmail&quot;\n</code></pre></li>\n<li><p>ssh环境准备</p>\n<pre><code>cd ~/.ssh\nssh-keygen -t rsa -C &quot;YourUserName&quot;\neval &quot;$(ssh-agent -s)&quot;\nssh-add ~/.ssh/id_rsa\n</code></pre></li>\n<li><p>上GitHub配置 ssh key</p>\n<pre><code>新建ssh key 并将本地 id_rsa.pub的文件内容复制进去\n</code></pre></li>\n<li><p>在本地执行 ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>，如果显示出用户名则成功， 否则需要重新配置ssh-key</p>\n</li>\n<li><p>在项目中找到_config.yml文件修改以下参数</p>\n<pre><code>deploy:\n      type: git\n      repository: 项目的ssh链接\n      branch: master\n</code></pre></li>\n<li><p>安装git扩展 npm install hexo-deployer-git –save</p>\n</li>\n<li>hexo d -g 生成以及部署了</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>安装node</li>\n<li>安装git</li>\n<li>在GitHub上创建格式为 BlogName.github.io的项目</li>\n<li>使用npm install hexo -g 安装hexo</li>\n<li>切换到博客并使用命令 hexo init初始化项目</li>\n<li>npm install 安装所需组件</li>\n<li>hexo g 首次使用需要编译</li>\n<li>hexo s 开启服务</li>\n<li><p>设置Git的user name和email</p>\n<pre><code>git config --global user.name &quot;YourUserName&quot;\ngit config --global user.email &quot;YourEmail&quot;\n</code></pre></li>\n<li><p>ssh环境准备</p>\n<pre><code>cd ~/.ssh\nssh-keygen -t rsa -C &quot;YourUserName&quot;\neval &quot;$(ssh-agent -s)&quot;\nssh-add ~/.ssh/id_rsa\n</code></pre></li>\n<li><p>上GitHub配置 ssh key</p>\n<pre><code>新建ssh key 并将本地 id_rsa.pub的文件内容复制进去\n</code></pre></li>\n<li><p>在本地执行 ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>，如果显示出用户名则成功， 否则需要重新配置ssh-key</p>\n</li>\n<li><p>在项目中找到_config.yml文件修改以下参数</p>\n<pre><code>deploy:\n      type: git\n      repository: 项目的ssh链接\n      branch: master\n</code></pre></li>\n<li><p>安装git扩展 npm install hexo-deployer-git –save</p>\n</li>\n<li>hexo d -g 生成以及部署了</li>\n</ol>\n"},{"title":"week_1","_content":"\n#### 测试题\n将26个小写字母按顺序与数字1～26对应，以字典形式保存。\n```python\nres = {chr(v): i+1 for i, v in enumerate(range(97, 97+26))}\n```\n\n[推荐视频](https://www.icourse163.org/course/BIT-268001)","source":"_posts/将26个小写字母与阿拉伯数字对应.md","raw":"---\ntitle: week_1\n---\n\n#### 测试题\n将26个小写字母按顺序与数字1～26对应，以字典形式保存。\n```python\nres = {chr(v): i+1 for i, v in enumerate(range(97, 97+26))}\n```\n\n[推荐视频](https://www.icourse163.org/course/BIT-268001)","slug":"将26个小写字母与阿拉伯数字对应","published":1,"date":"2019-05-25T10:42:11.179Z","updated":"2019-05-25T10:42:11.179Z","_id":"cjw35vsb20000go72bwx87dx8","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"测试题\"><a href=\"#测试题\" class=\"headerlink\" title=\"测试题\"></a>测试题</h4><p>将26个小写字母按顺序与数字1～26对应，以字典形式保存。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = &#123;chr(v): i+<span class=\"number\">1</span> <span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> enumerate(range(<span class=\"number\">97</span>, <span class=\"number\">97</span>+<span class=\"number\">26</span>))&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://www.icourse163.org/course/BIT-268001\" target=\"_blank\" rel=\"noopener\">推荐视频</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"测试题\"><a href=\"#测试题\" class=\"headerlink\" title=\"测试题\"></a>测试题</h4><p>将26个小写字母按顺序与数字1～26对应，以字典形式保存。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = &#123;chr(v): i+<span class=\"number\">1</span> <span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> enumerate(range(<span class=\"number\">97</span>, <span class=\"number\">97</span>+<span class=\"number\">26</span>))&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://www.icourse163.org/course/BIT-268001\" target=\"_blank\" rel=\"noopener\">推荐视频</a></p>\n"},{"title":"Python学习路线","_content":"\n## 语法\n\n### 菜鸟教程 https://www.runoob.com/python3/python3-tutorial.html\n\n### 免费课程https://www.icourse163.org/course/BIT-268001\n\n### 推荐书籍《Python编程无师自通》\n\n## 必备\n\n### GitHub账号\n\n### git基本命令\n\n- clone\n- push\n- pull\n- status\n- checkout\n\n### Unix/Linux\n\n## 数据\n\n### MySQL\n\n### Redis\n\n### MongoDB\n\n### Numpy\n\n### Pandas\n\n### JSON\n\n### XML\n\n## 系统学习\n\n### 黑马程序员培训课程链接: https://pan.baidu.com/s/16rRmNF4qCL2UVDS_V0pFPA 提取码: t7t3 复制这段内容后打开百度网盘手机App，操作更方便哦\n\n## 项目开发工具\n\n### Pycharm\n\n### Docker\n\n## 进阶\n\n### 进程/线程/协程\n\n### 《数据结构与算法Python语言实现》\n\n### Python书籍《流畅的Python》\n\n### 推荐视频链接: https://pan.baidu.com/s/15W92DB2uq4DBvzzZWCHG7A 提取码: ijsc 复制这段内容后打开百度网盘手机App，操作更方便哦\n\n## 博客\n\n### 推荐使用GitHub托管并搭建免费的技术博客\n\n### 我的博客地址https://1005281342.github.io/\n","source":"_posts/Python学习路线.md","raw":"---\ntitle: Python学习路线\n---\n\n## 语法\n\n### 菜鸟教程 https://www.runoob.com/python3/python3-tutorial.html\n\n### 免费课程https://www.icourse163.org/course/BIT-268001\n\n### 推荐书籍《Python编程无师自通》\n\n## 必备\n\n### GitHub账号\n\n### git基本命令\n\n- clone\n- push\n- pull\n- status\n- checkout\n\n### Unix/Linux\n\n## 数据\n\n### MySQL\n\n### Redis\n\n### MongoDB\n\n### Numpy\n\n### Pandas\n\n### JSON\n\n### XML\n\n## 系统学习\n\n### 黑马程序员培训课程链接: https://pan.baidu.com/s/16rRmNF4qCL2UVDS_V0pFPA 提取码: t7t3 复制这段内容后打开百度网盘手机App，操作更方便哦\n\n## 项目开发工具\n\n### Pycharm\n\n### Docker\n\n## 进阶\n\n### 进程/线程/协程\n\n### 《数据结构与算法Python语言实现》\n\n### Python书籍《流畅的Python》\n\n### 推荐视频链接: https://pan.baidu.com/s/15W92DB2uq4DBvzzZWCHG7A 提取码: ijsc 复制这段内容后打开百度网盘手机App，操作更方便哦\n\n## 博客\n\n### 推荐使用GitHub托管并搭建免费的技术博客\n\n### 我的博客地址https://1005281342.github.io/\n","slug":"Python学习路线","published":1,"date":"2019-06-01T05:59:30.524Z","updated":"2019-06-01T05:59:30.524Z","_id":"cjwd3riv60000pr72d25jiwd2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><h3 id=\"菜鸟教程-https-www-runoob-com-python3-python3-tutorial-html\"><a href=\"#菜鸟教程-https-www-runoob-com-python3-python3-tutorial-html\" class=\"headerlink\" title=\"菜鸟教程 https://www.runoob.com/python3/python3-tutorial.html\"></a>菜鸟教程 <a href=\"https://www.runoob.com/python3/python3-tutorial.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/python3/python3-tutorial.html</a></h3><h3 id=\"免费课程https-www-icourse163-org-course-BIT-268001\"><a href=\"#免费课程https-www-icourse163-org-course-BIT-268001\" class=\"headerlink\" title=\"免费课程https://www.icourse163.org/course/BIT-268001\"></a>免费课程<a href=\"https://www.icourse163.org/course/BIT-268001\" target=\"_blank\" rel=\"noopener\">https://www.icourse163.org/course/BIT-268001</a></h3><h3 id=\"推荐书籍《Python编程无师自通》\"><a href=\"#推荐书籍《Python编程无师自通》\" class=\"headerlink\" title=\"推荐书籍《Python编程无师自通》\"></a>推荐书籍《Python编程无师自通》</h3><h2 id=\"必备\"><a href=\"#必备\" class=\"headerlink\" title=\"必备\"></a>必备</h2><h3 id=\"GitHub账号\"><a href=\"#GitHub账号\" class=\"headerlink\" title=\"GitHub账号\"></a>GitHub账号</h3><h3 id=\"git基本命令\"><a href=\"#git基本命令\" class=\"headerlink\" title=\"git基本命令\"></a>git基本命令</h3><ul>\n<li>clone</li>\n<li>push</li>\n<li>pull</li>\n<li>status</li>\n<li>checkout</li>\n</ul>\n<h3 id=\"Unix-Linux\"><a href=\"#Unix-Linux\" class=\"headerlink\" title=\"Unix/Linux\"></a>Unix/Linux</h3><h2 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h2><h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><h3 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h3><h3 id=\"Numpy\"><a href=\"#Numpy\" class=\"headerlink\" title=\"Numpy\"></a>Numpy</h3><h3 id=\"Pandas\"><a href=\"#Pandas\" class=\"headerlink\" title=\"Pandas\"></a>Pandas</h3><h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><h3 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h3><h2 id=\"系统学习\"><a href=\"#系统学习\" class=\"headerlink\" title=\"系统学习\"></a>系统学习</h2><h3 id=\"黑马程序员培训课程链接-https-pan-baidu-com-s-16rRmNF4qCL2UVDS-V0pFPA-提取码-t7t3-复制这段内容后打开百度网盘手机App，操作更方便哦\"><a href=\"#黑马程序员培训课程链接-https-pan-baidu-com-s-16rRmNF4qCL2UVDS-V0pFPA-提取码-t7t3-复制这段内容后打开百度网盘手机App，操作更方便哦\" class=\"headerlink\" title=\"黑马程序员培训课程链接: https://pan.baidu.com/s/16rRmNF4qCL2UVDS_V0pFPA 提取码: t7t3 复制这段内容后打开百度网盘手机App，操作更方便哦\"></a>黑马程序员培训课程链接: <a href=\"https://pan.baidu.com/s/16rRmNF4qCL2UVDS_V0pFPA\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/16rRmNF4qCL2UVDS_V0pFPA</a> 提取码: t7t3 复制这段内容后打开百度网盘手机App，操作更方便哦</h3><h2 id=\"项目开发工具\"><a href=\"#项目开发工具\" class=\"headerlink\" title=\"项目开发工具\"></a>项目开发工具</h2><h3 id=\"Pycharm\"><a href=\"#Pycharm\" class=\"headerlink\" title=\"Pycharm\"></a>Pycharm</h3><h3 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h3><h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><h3 id=\"进程-线程-协程\"><a href=\"#进程-线程-协程\" class=\"headerlink\" title=\"进程/线程/协程\"></a>进程/线程/协程</h3><h3 id=\"《数据结构与算法Python语言实现》\"><a href=\"#《数据结构与算法Python语言实现》\" class=\"headerlink\" title=\"《数据结构与算法Python语言实现》\"></a>《数据结构与算法Python语言实现》</h3><h3 id=\"Python书籍《流畅的Python》\"><a href=\"#Python书籍《流畅的Python》\" class=\"headerlink\" title=\"Python书籍《流畅的Python》\"></a>Python书籍《流畅的Python》</h3><h3 id=\"推荐视频链接-https-pan-baidu-com-s-15W92DB2uq4DBvzzZWCHG7A-提取码-ijsc-复制这段内容后打开百度网盘手机App，操作更方便哦\"><a href=\"#推荐视频链接-https-pan-baidu-com-s-15W92DB2uq4DBvzzZWCHG7A-提取码-ijsc-复制这段内容后打开百度网盘手机App，操作更方便哦\" class=\"headerlink\" title=\"推荐视频链接: https://pan.baidu.com/s/15W92DB2uq4DBvzzZWCHG7A 提取码: ijsc 复制这段内容后打开百度网盘手机App，操作更方便哦\"></a>推荐视频链接: <a href=\"https://pan.baidu.com/s/15W92DB2uq4DBvzzZWCHG7A\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/15W92DB2uq4DBvzzZWCHG7A</a> 提取码: ijsc 复制这段内容后打开百度网盘手机App，操作更方便哦</h3><h2 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h2><h3 id=\"推荐使用GitHub托管并搭建免费的技术博客\"><a href=\"#推荐使用GitHub托管并搭建免费的技术博客\" class=\"headerlink\" title=\"推荐使用GitHub托管并搭建免费的技术博客\"></a>推荐使用GitHub托管并搭建免费的技术博客</h3><h3 id=\"我的博客地址https-1005281342-github-io\"><a href=\"#我的博客地址https-1005281342-github-io\" class=\"headerlink\" title=\"我的博客地址https://1005281342.github.io/\"></a>我的博客地址<a href=\"https://1005281342.github.io/\" target=\"_blank\" rel=\"noopener\">https://1005281342.github.io/</a></h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><h3 id=\"菜鸟教程-https-www-runoob-com-python3-python3-tutorial-html\"><a href=\"#菜鸟教程-https-www-runoob-com-python3-python3-tutorial-html\" class=\"headerlink\" title=\"菜鸟教程 https://www.runoob.com/python3/python3-tutorial.html\"></a>菜鸟教程 <a href=\"https://www.runoob.com/python3/python3-tutorial.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/python3/python3-tutorial.html</a></h3><h3 id=\"免费课程https-www-icourse163-org-course-BIT-268001\"><a href=\"#免费课程https-www-icourse163-org-course-BIT-268001\" class=\"headerlink\" title=\"免费课程https://www.icourse163.org/course/BIT-268001\"></a>免费课程<a href=\"https://www.icourse163.org/course/BIT-268001\" target=\"_blank\" rel=\"noopener\">https://www.icourse163.org/course/BIT-268001</a></h3><h3 id=\"推荐书籍《Python编程无师自通》\"><a href=\"#推荐书籍《Python编程无师自通》\" class=\"headerlink\" title=\"推荐书籍《Python编程无师自通》\"></a>推荐书籍《Python编程无师自通》</h3><h2 id=\"必备\"><a href=\"#必备\" class=\"headerlink\" title=\"必备\"></a>必备</h2><h3 id=\"GitHub账号\"><a href=\"#GitHub账号\" class=\"headerlink\" title=\"GitHub账号\"></a>GitHub账号</h3><h3 id=\"git基本命令\"><a href=\"#git基本命令\" class=\"headerlink\" title=\"git基本命令\"></a>git基本命令</h3><ul>\n<li>clone</li>\n<li>push</li>\n<li>pull</li>\n<li>status</li>\n<li>checkout</li>\n</ul>\n<h3 id=\"Unix-Linux\"><a href=\"#Unix-Linux\" class=\"headerlink\" title=\"Unix/Linux\"></a>Unix/Linux</h3><h2 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h2><h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><h3 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h3><h3 id=\"Numpy\"><a href=\"#Numpy\" class=\"headerlink\" title=\"Numpy\"></a>Numpy</h3><h3 id=\"Pandas\"><a href=\"#Pandas\" class=\"headerlink\" title=\"Pandas\"></a>Pandas</h3><h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><h3 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h3><h2 id=\"系统学习\"><a href=\"#系统学习\" class=\"headerlink\" title=\"系统学习\"></a>系统学习</h2><h3 id=\"黑马程序员培训课程链接-https-pan-baidu-com-s-16rRmNF4qCL2UVDS-V0pFPA-提取码-t7t3-复制这段内容后打开百度网盘手机App，操作更方便哦\"><a href=\"#黑马程序员培训课程链接-https-pan-baidu-com-s-16rRmNF4qCL2UVDS-V0pFPA-提取码-t7t3-复制这段内容后打开百度网盘手机App，操作更方便哦\" class=\"headerlink\" title=\"黑马程序员培训课程链接: https://pan.baidu.com/s/16rRmNF4qCL2UVDS_V0pFPA 提取码: t7t3 复制这段内容后打开百度网盘手机App，操作更方便哦\"></a>黑马程序员培训课程链接: <a href=\"https://pan.baidu.com/s/16rRmNF4qCL2UVDS_V0pFPA\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/16rRmNF4qCL2UVDS_V0pFPA</a> 提取码: t7t3 复制这段内容后打开百度网盘手机App，操作更方便哦</h3><h2 id=\"项目开发工具\"><a href=\"#项目开发工具\" class=\"headerlink\" title=\"项目开发工具\"></a>项目开发工具</h2><h3 id=\"Pycharm\"><a href=\"#Pycharm\" class=\"headerlink\" title=\"Pycharm\"></a>Pycharm</h3><h3 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h3><h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><h3 id=\"进程-线程-协程\"><a href=\"#进程-线程-协程\" class=\"headerlink\" title=\"进程/线程/协程\"></a>进程/线程/协程</h3><h3 id=\"《数据结构与算法Python语言实现》\"><a href=\"#《数据结构与算法Python语言实现》\" class=\"headerlink\" title=\"《数据结构与算法Python语言实现》\"></a>《数据结构与算法Python语言实现》</h3><h3 id=\"Python书籍《流畅的Python》\"><a href=\"#Python书籍《流畅的Python》\" class=\"headerlink\" title=\"Python书籍《流畅的Python》\"></a>Python书籍《流畅的Python》</h3><h3 id=\"推荐视频链接-https-pan-baidu-com-s-15W92DB2uq4DBvzzZWCHG7A-提取码-ijsc-复制这段内容后打开百度网盘手机App，操作更方便哦\"><a href=\"#推荐视频链接-https-pan-baidu-com-s-15W92DB2uq4DBvzzZWCHG7A-提取码-ijsc-复制这段内容后打开百度网盘手机App，操作更方便哦\" class=\"headerlink\" title=\"推荐视频链接: https://pan.baidu.com/s/15W92DB2uq4DBvzzZWCHG7A 提取码: ijsc 复制这段内容后打开百度网盘手机App，操作更方便哦\"></a>推荐视频链接: <a href=\"https://pan.baidu.com/s/15W92DB2uq4DBvzzZWCHG7A\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/15W92DB2uq4DBvzzZWCHG7A</a> 提取码: ijsc 复制这段内容后打开百度网盘手机App，操作更方便哦</h3><h2 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h2><h3 id=\"推荐使用GitHub托管并搭建免费的技术博客\"><a href=\"#推荐使用GitHub托管并搭建免费的技术博客\" class=\"headerlink\" title=\"推荐使用GitHub托管并搭建免费的技术博客\"></a>推荐使用GitHub托管并搭建免费的技术博客</h3><h3 id=\"我的博客地址https-1005281342-github-io\"><a href=\"#我的博客地址https-1005281342-github-io\" class=\"headerlink\" title=\"我的博客地址https://1005281342.github.io/\"></a>我的博客地址<a href=\"https://1005281342.github.io/\" target=\"_blank\" rel=\"noopener\">https://1005281342.github.io/</a></h3>"},{"title":"卷积中的重要参数","_content":"\n权值共享与局部连接\n\n    1. 卷积运算作用在局部, 因此在这个区域是权值共享的, 而上一级节点与下一级节点的连接关系则称为局部连接, 若下一级节点与上一级的所有节点都有连接关系则称为全连接。\n    2. Feature map使用同一个卷积核运算后得到一种特征。\n    3. 多种特征采用多个卷积核(channel), 具体为多少个卷积核取决于num_out。\n    \n\n卷积的参数量以及计算量\n    \n    1. 参数量： (k_w*k_h*in_channel+1)*Out_Channel, 其中+1项由偏置操作产生。\n    2. 计算量： in_w*in_h*(k_w*k_h*in_channel+1)*Out_Channel\n\n防止过拟合的策略\n\n    1. 正则化\n    2. 早停DorpOut\n    3. 增大数据集\n    4. 减少参数量\n    5. 增加BatchNorm层\n    \n步长stride, 不会影响卷积核的参数量, 但是会影响卷积计算的计算量\n![](../../img/stride.png)\n\n    1. 在pooling层下采样过程中会直接受stride参数影响\n    2. 在同一个卷积核的情况下，stride设置不同计算所得的Feature Map也会不同\n    3. stride越大计算量会小，一般设置为1或者2，设置为2时，长、宽下采样都会增大至2倍，整体下采样则增大至4倍\n    \n    Output size: (N-F)/stride+1\n    e.g. N=7, F=3\n    stride 1    =>  (7-3)/1 + 1 = 5\n    stride 2    =>  (7-3)/2 + 1 = 3\n    stride 3    =>  (7-3)/3 + 1 = 2.33\n\n    \npad 确保Feature Map整数倍变化，对尺度相关的任务非常重要\n![](../../img/pad.png)\n    ","source":"_posts/Python3_TensorFlow_WechatApplet/卷积中的重要参数.md","raw":"---\ntitle: 卷积中的重要参数\n---\n\n权值共享与局部连接\n\n    1. 卷积运算作用在局部, 因此在这个区域是权值共享的, 而上一级节点与下一级节点的连接关系则称为局部连接, 若下一级节点与上一级的所有节点都有连接关系则称为全连接。\n    2. Feature map使用同一个卷积核运算后得到一种特征。\n    3. 多种特征采用多个卷积核(channel), 具体为多少个卷积核取决于num_out。\n    \n\n卷积的参数量以及计算量\n    \n    1. 参数量： (k_w*k_h*in_channel+1)*Out_Channel, 其中+1项由偏置操作产生。\n    2. 计算量： in_w*in_h*(k_w*k_h*in_channel+1)*Out_Channel\n\n防止过拟合的策略\n\n    1. 正则化\n    2. 早停DorpOut\n    3. 增大数据集\n    4. 减少参数量\n    5. 增加BatchNorm层\n    \n步长stride, 不会影响卷积核的参数量, 但是会影响卷积计算的计算量\n![](../../img/stride.png)\n\n    1. 在pooling层下采样过程中会直接受stride参数影响\n    2. 在同一个卷积核的情况下，stride设置不同计算所得的Feature Map也会不同\n    3. stride越大计算量会小，一般设置为1或者2，设置为2时，长、宽下采样都会增大至2倍，整体下采样则增大至4倍\n    \n    Output size: (N-F)/stride+1\n    e.g. N=7, F=3\n    stride 1    =>  (7-3)/1 + 1 = 5\n    stride 2    =>  (7-3)/2 + 1 = 3\n    stride 3    =>  (7-3)/3 + 1 = 2.33\n\n    \npad 确保Feature Map整数倍变化，对尺度相关的任务非常重要\n![](../../img/pad.png)\n    ","slug":"Python3_TensorFlow_WechatApplet/卷积中的重要参数","published":1,"date":"2019-06-01T06:12:07.165Z","updated":"2019-06-01T06:12:07.165Z","_id":"cjwd48fwn0002sv72nhaxgt4u","comments":1,"layout":"post","photos":[],"link":"","content":"<p>权值共享与局部连接</p>\n<pre><code>1. 卷积运算作用在局部, 因此在这个区域是权值共享的, 而上一级节点与下一级节点的连接关系则称为局部连接, 若下一级节点与上一级的所有节点都有连接关系则称为全连接。\n2. Feature map使用同一个卷积核运算后得到一种特征。\n3. 多种特征采用多个卷积核(channel), 具体为多少个卷积核取决于num_out。\n</code></pre><p>卷积的参数量以及计算量</p>\n<pre><code>1. 参数量： (k_w*k_h*in_channel+1)*Out_Channel, 其中+1项由偏置操作产生。\n2. 计算量： in_w*in_h*(k_w*k_h*in_channel+1)*Out_Channel\n</code></pre><p>防止过拟合的策略</p>\n<pre><code>1. 正则化\n2. 早停DorpOut\n3. 增大数据集\n4. 减少参数量\n5. 增加BatchNorm层\n</code></pre><p>步长stride, 不会影响卷积核的参数量, 但是会影响卷积计算的计算量<br><img src=\"../../img/stride.png\" alt></p>\n<pre><code>1. 在pooling层下采样过程中会直接受stride参数影响\n2. 在同一个卷积核的情况下，stride设置不同计算所得的Feature Map也会不同\n3. stride越大计算量会小，一般设置为1或者2，设置为2时，长、宽下采样都会增大至2倍，整体下采样则增大至4倍\n\nOutput size: (N-F)/stride+1\ne.g. N=7, F=3\nstride 1    =&gt;  (7-3)/1 + 1 = 5\nstride 2    =&gt;  (7-3)/2 + 1 = 3\nstride 3    =&gt;  (7-3)/3 + 1 = 2.33\n</code></pre><p>pad 确保Feature Map整数倍变化，对尺度相关的任务非常重要<br><img src=\"../../img/pad.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>权值共享与局部连接</p>\n<pre><code>1. 卷积运算作用在局部, 因此在这个区域是权值共享的, 而上一级节点与下一级节点的连接关系则称为局部连接, 若下一级节点与上一级的所有节点都有连接关系则称为全连接。\n2. Feature map使用同一个卷积核运算后得到一种特征。\n3. 多种特征采用多个卷积核(channel), 具体为多少个卷积核取决于num_out。\n</code></pre><p>卷积的参数量以及计算量</p>\n<pre><code>1. 参数量： (k_w*k_h*in_channel+1)*Out_Channel, 其中+1项由偏置操作产生。\n2. 计算量： in_w*in_h*(k_w*k_h*in_channel+1)*Out_Channel\n</code></pre><p>防止过拟合的策略</p>\n<pre><code>1. 正则化\n2. 早停DorpOut\n3. 增大数据集\n4. 减少参数量\n5. 增加BatchNorm层\n</code></pre><p>步长stride, 不会影响卷积核的参数量, 但是会影响卷积计算的计算量<br><img src=\"../../img/stride.png\" alt></p>\n<pre><code>1. 在pooling层下采样过程中会直接受stride参数影响\n2. 在同一个卷积核的情况下，stride设置不同计算所得的Feature Map也会不同\n3. stride越大计算量会小，一般设置为1或者2，设置为2时，长、宽下采样都会增大至2倍，整体下采样则增大至4倍\n\nOutput size: (N-F)/stride+1\ne.g. N=7, F=3\nstride 1    =&gt;  (7-3)/1 + 1 = 5\nstride 2    =&gt;  (7-3)/2 + 1 = 3\nstride 3    =&gt;  (7-3)/3 + 1 = 2.33\n</code></pre><p>pad 确保Feature Map整数倍变化，对尺度相关的任务非常重要<br><img src=\"../../img/pad.png\" alt></p>\n"},{"title":"激活函数","_content":"\n作用\n    \n    增加网络的非线性，进而提升网络的表达能力\n    \n激活函数的特点\n    \n    非线性\n    单调性\n    可微性\n    取值范围\n\n常见的激活函数\n\n![](../../img/常见激活函数.png)\n\n    Sigmoid\n    Tanh\n    ReLU\n\n![](../../img/ReLU.png)","source":"_posts/Python3_TensorFlow_WechatApplet/激活层.md","raw":"---\ntitle: 激活函数\n---\n\n作用\n    \n    增加网络的非线性，进而提升网络的表达能力\n    \n激活函数的特点\n    \n    非线性\n    单调性\n    可微性\n    取值范围\n\n常见的激活函数\n\n![](../../img/常见激活函数.png)\n\n    Sigmoid\n    Tanh\n    ReLU\n\n![](../../img/ReLU.png)","slug":"Python3_TensorFlow_WechatApplet/激活层","published":1,"date":"2019-06-01T06:12:07.167Z","updated":"2019-06-01T06:12:07.167Z","_id":"cjwd48fwq0003sv72mqi1swzb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>作用</p>\n<pre><code>增加网络的非线性，进而提升网络的表达能力\n</code></pre><p>激活函数的特点</p>\n<pre><code>非线性\n单调性\n可微性\n取值范围\n</code></pre><p>常见的激活函数</p>\n<p><img src=\"../../img/常见激活函数.png\" alt></p>\n<pre><code>Sigmoid\nTanh\nReLU\n</code></pre><p><img src=\"../../img/ReLU.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>作用</p>\n<pre><code>增加网络的非线性，进而提升网络的表达能力\n</code></pre><p>激活函数的特点</p>\n<pre><code>非线性\n单调性\n可微性\n取值范围\n</code></pre><p>常见的激活函数</p>\n<p><img src=\"../../img/常见激活函数.png\" alt></p>\n<pre><code>Sigmoid\nTanh\nReLU\n</code></pre><p><img src=\"../../img/ReLU.png\" alt></p>\n"},{"title":"池化层","_content":"\n基本概念\n\n    池化：对输入的特征图进行压缩\n    \n![](../../img/池化.png)\n\n池化作用\n    \n    使得特征图变小，简化网络计算复杂度\n    进行特征压缩，提取主要特征\n    增大感受野\n    \n常见池化策略\n\n    一般有最大池化、平均池化、随机池化\n    池化层是无参的，在BP过程中池化层是不会被参数优化的","source":"_posts/Python3_TensorFlow_WechatApplet/池化层.md","raw":"---\ntitle: 池化层\n---\n\n基本概念\n\n    池化：对输入的特征图进行压缩\n    \n![](../../img/池化.png)\n\n池化作用\n    \n    使得特征图变小，简化网络计算复杂度\n    进行特征压缩，提取主要特征\n    增大感受野\n    \n常见池化策略\n\n    一般有最大池化、平均池化、随机池化\n    池化层是无参的，在BP过程中池化层是不会被参数优化的","slug":"Python3_TensorFlow_WechatApplet/池化层","published":1,"date":"2019-06-01T06:12:07.157Z","updated":"2019-06-01T06:12:07.157Z","_id":"cjwd48fwr0004sv72i38evgq6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>基本概念</p>\n<pre><code>池化：对输入的特征图进行压缩\n</code></pre><p><img src=\"../../img/池化.png\" alt></p>\n<p>池化作用</p>\n<pre><code>使得特征图变小，简化网络计算复杂度\n进行特征压缩，提取主要特征\n增大感受野\n</code></pre><p>常见池化策略</p>\n<pre><code>一般有最大池化、平均池化、随机池化\n池化层是无参的，在BP过程中池化层是不会被参数优化的\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>基本概念</p>\n<pre><code>池化：对输入的特征图进行压缩\n</code></pre><p><img src=\"../../img/池化.png\" alt></p>\n<p>池化作用</p>\n<pre><code>使得特征图变小，简化网络计算复杂度\n进行特征压缩，提取主要特征\n增大感受野\n</code></pre><p>常见池化策略</p>\n<pre><code>一般有最大池化、平均池化、随机池化\n池化层是无参的，在BP过程中池化层是不会被参数优化的\n</code></pre>"},{"title":"BatchNorm","_content":"\n基本概念\n    \n    通过一定的规范化手段，把每层神经网络任意神经元的输入值的分布强行拉回到均值为0方差为1的标准正态分布\n    \n![](../../img/BatchNorm.png)\n\nBatchNorm层的优点\n![](../../img/BatchNorm层的优点.png)\n\nBatchNorm层的使用\n![](../../img/tensorflow使用BatchNorm层.png)","source":"_posts/Python3_TensorFlow_WechatApplet/BatchNorm层.md","raw":"---\ntitle: BatchNorm\n---\n\n基本概念\n    \n    通过一定的规范化手段，把每层神经网络任意神经元的输入值的分布强行拉回到均值为0方差为1的标准正态分布\n    \n![](../../img/BatchNorm.png)\n\nBatchNorm层的优点\n![](../../img/BatchNorm层的优点.png)\n\nBatchNorm层的使用\n![](../../img/tensorflow使用BatchNorm层.png)","slug":"Python3_TensorFlow_WechatApplet/BatchNorm层","published":1,"date":"2019-06-01T06:12:07.160Z","updated":"2019-06-01T06:12:07.160Z","_id":"cjwd48fzl0005sv72l055vs4o","comments":1,"layout":"post","photos":[],"link":"","content":"<p>基本概念</p>\n<pre><code>通过一定的规范化手段，把每层神经网络任意神经元的输入值的分布强行拉回到均值为0方差为1的标准正态分布\n</code></pre><p><img src=\"../../img/BatchNorm.png\" alt></p>\n<p>BatchNorm层的优点<br><img src=\"../../img/BatchNorm层的优点.png\" alt></p>\n<p>BatchNorm层的使用<br><img src=\"../../img/tensorflow使用BatchNorm层.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>基本概念</p>\n<pre><code>通过一定的规范化手段，把每层神经网络任意神经元的输入值的分布强行拉回到均值为0方差为1的标准正态分布\n</code></pre><p><img src=\"../../img/BatchNorm.png\" alt></p>\n<p>BatchNorm层的优点<br><img src=\"../../img/BatchNorm层的优点.png\" alt></p>\n<p>BatchNorm层的使用<br><img src=\"../../img/tensorflow使用BatchNorm层.png\" alt></p>\n"},{"title":"编程概论","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>编程概论</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#31\">3.1　示例</a></li>\n<li><a href=\"#32\">3.2　注释</a></li>\n<li><a href=\"#33\">3.3　打印</a></li>\n<li><a href=\"#34\">3.4　代码行</a></li>\n<li><a href=\"#35\">3.5　关键字</a></li>\n<li><a href=\"#36\">3.6　间距</a></li>\n<li><a href=\"#37\">3.7　数据类型</a></li>\n<li><a href=\"#38\">3.8　常量和变量</a></li>\n<li><a href=\"#39\">3.9　语法</a></li>\n<li><a href=\"#310\">3.10　错误与异常</a></li>\n<li><a href=\"#311\">3.11　算术操作符</a></li>\n<li><a href=\"#312\">3.12　比较操作符</a></li>\n<li><a href=\"#313\">3.13　逻辑操作符</a></li>\n<li><a href=\"#314\">3.14　条件语句</a></li>\n<li><a href=\"#315\">3.15　语句</a></li>\n<li><a href=\"#316\">3.16　术语表</a></li>\n<li><a href=\"#317\">3.17　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“这是我能想到的，唯一可以让我既当工程师又做艺术家的工作。它要求具备极其缜密的技术思维，因为你必须要完成精确的思考，这点我很喜欢。另一方面，它又鼓励你肆意挥洒自己的创意，只有你想不到没有你做不到的。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——安迪 · 赫兹菲尔德（Andy Hertzfeld）</span></p>\n</blockquote>\n<p>我们的第一个程序打印出了 <code>Hello, World!</code>。接下来打印 100 次。在交互式 shell 中输入如下代码（print 需要缩进 4 个空格符）：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/h79ob7s</span>\n2\n3\n4  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(100):\n5      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)</code></pre>\n<p>交互式 shell 应该会打印 <code>Hello, World!</code> 100 次。即使通常没有这样做的需要，但可以从这个例子中看出编程的强大。你能想到任何其他可以如此简单地做 100 遍的事情吗？我想不到。这就是编程的厉害之处。</p>\n<h3 id=\"31\">3.1　示例</h3>\n<p>从现在开始，代码示例会以如下形式出现：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4qntgk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">5</span>      print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n&gt;&gt; Hello, World!\n&gt;&gt; Hello, World!\n…</code></pre>\n<p>打开 http://tinyurl.com/h4qntqk 这个链接，就可以看到包含有示例代码的网页，这样如果无法让代码运行，你可以轻松地复制代码，并粘贴到 IDLE 的文本编辑器中。<code>&gt;&gt;</code> 的后面则是交互式 shell 的输出。全书的每一个编程示例中都会看到 <code>&gt;&gt;</code>，这代表了程序的输出结果（会在交互式 shell 中打印出来）。“...”表示“等等”。</p>\n<p>如果示例后没有 <code>&gt;&gt;</code>，就表示该程序没有输出，或者只是在解释概念，输出并不太重要。</p>\n<p>字体为 Courier New 的部分，都是某种形式的代码、代码输出或编程术语。例如，上个例子中提到的词 <code>for</code>，它就会是 Courier New 字体。</p>\n<p>Courier New 是一个固定宽度（不等比）的字体，常用来显示编程文本。每个字符的宽度都一致，因此代码对齐后可以很容易地发现缩进和其他特征。</p>\n<p>可以用交互式 shell 或 <code>.py</code> 文件来运行示例代码。但是要注意的是，正如之前提到的，交互式 shell 中的输出与文件运行的输出可能略有不同，因此如果没得到完全一致的输出，原因就在于此。如果有示例要打印输出，但是却没有 <code>print</code> 字样，表示应该直接在交互式 shell 中输入代码。如果示例中有 <code>print</code> 字样，则说明应该从 <code>.py</code> 文件运行代码。</p>\n<h3 id=\"32\">3.2　注释</h3>\n<p><strong>注释</strong>（comment）是用英文或其他自然语言写的一行（或一部分）代码，行首均有一个特殊标志告知编程语言忽略这行代码。Python 用井号（#）来创建注释。</p>\n<p>注释的目的是解释代码的功能。程序员通过注释，使得代码更易于阅读。在注释中，可以写下任何内容，只要保持为一行即可，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hut6nwu</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-comment\"># 这是一行注释</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>只有在代码中执行特别操作，或者代码不清晰易懂的情况下，才需要写注释。尽量少写注释——不要每行代码都写注释，有特殊情况才需要。下面是一个注释多余的例子：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/jpzlwqq</span>\n2\n3\n4  <span class=\"hljs-comment\"># 打印 Hello, World!</span>\n5  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n</code></pre>\n<p>注释之所以多余，是因为这行代码的功能已经非常明确。下面是一个注释合理的例子：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/z52c8z8</span></span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-keyword\">import</span></strong> math\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  # 对角线的长度\n<span class=\"hljs-number\">08</span>  l = <span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">09</span>  w = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">10</span>  d = math.<span class=\"hljs-built_in\">sqrt</span>(l**<span class=\"hljs-number\">2</span>+ w**<span class=\"hljs-number\">2</span>)</code></pre>\n<p>即使你完全理解了这段代码，也可能并不知道如何计算长方形的对角线长度，因此这里的注释就是有用的。</p>\n<h3 id=\"33\">3.3　打印</h3>\n<p>程序不止可以打印 <code>Hello, World!</code>，它可以打印任何内容，只要记得加上双引号。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zh5g2a3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Python\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Python\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hhwqva2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hola!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hola!\n</code></pre>\n<h3 id=\"34\">3.4　代码行</h3>\n<p>Python 程序是由一行一行的代码组成的。看下面这个程序：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/jq2w5ro</span>\n2\n3\n4  <span class=\"hljs-comment\"># 第一行</span>\n5  <span class=\"hljs-comment\"># 第二行</span>\n6  <span class=\"hljs-comment\"># 第三行</span>\n</code></pre>\n<p>程序共有 3 行代码。我们通常用代码所在的行数区别代码。在 IDLE 中，可以打开“编辑”菜单，选择“前往行”按钮，即可跳转至程序的指定行。在交互式 shell 中，一次只能输入一行代码，无法复制粘贴多行代码。</p>\n<p>有时一段代码比较长，超过了一行，可以用三引号、圆括号、方括号或者大括号扩展至新一行，示例如下：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcdx3yo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"\"\"This is a really really\n5        really really long line of\n6        code.\"\"\"</span>)\n</code></pre>\n<p>另外，还可以使用反斜杠 \\ 对代码进行换行：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hjcf2sa</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">print</span>\\\n<span class=\"hljs-number\">5</span>  (<span class=\"hljs-string\">\"\"\"This is a really really\n6   really long line of code.\"\"\"</span>)\n</code></pre>\n<p>上述两个例子的输出结果是一样的。反斜杠可以让我们将 <code>(\"\"\"This is a really really really long line of code.\"\"\")</code> 和 <code>print</code> 放在不同的行，这种情况一般是不允许的。</p>\n<h3 id=\"35\">3.5　关键字</h3>\n<p>Python 等编程语言中有一些具备特殊意义的字，即<strong>关键字</strong>（keyword）。前面见过的 <code>for</code> 就是一个关键字，用来多次执行代码。本章中还会学习更多的关键字。</p>\n<h3 id=\"36\">3.6　间距</h3>\n<p>我们再来回顾一下那个打印 <code>Hello, World!</code> 100 次的程序：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/glp9xq6</span>\n2\n3\n4  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(100):\n5      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)</code></pre>\n<p>前面已经提到，<code>print</code> 缩进了 4 个空格符。稍后会解释原因，缩进可以告诉 Python 解释器代码块的开始与结束。同时要注意，在本书示例中看到的缩进距离，都是 4 个空格符。如果代码间距不合理，程序将无法执行。</p>\n<p>其他编程语言没有类似的缩进要求；它们使用关键字或花括号来表示代码开始和结束。以下是用 JavaScript 编程语言编写的同一个程序：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hwa2zae</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\"># 这是一个 JavaScript 程序</span>\n<span class=\"hljs-number\">05</span>  <span class=\"hljs-comment\"># 不过没法执行</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-keyword\">for</span></strong> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) {\n<span class=\"hljs-number\">09</span>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello, World!\"</span>);\n<span class=\"hljs-number\">10</span>  }</code></pre>\n<p>Python 的支持者坚信使用必要的缩进可以让 Python 比其他语言更易读易写。正如上例所示，即使编程语言不强制使用空格，程序员为了让代码更便于阅读，也会倾向于使用空格来分隔代码。</p>\n<h3 id=\"37\">3.7　数据类型</h3>\n<p>Python 将数据划分成不同的类别，即<strong>数据类型</strong>（data type）。在 Python 中，每一个数据值，如 <code>2</code> 或 <code>\"Hello, World!\"</code>，被称为<strong>对象</strong>（object）。本书第二部分会详细介绍数据类型，现在可以把对象看作拥有 3 个属性的数据值：唯一标识（identity）、数据类型和值。对象的唯一标识，指的是其在计算机内存中的地址，该地址不会变化。对象的数据类型是对象所属的数据类别，这决定了对象的属性，也不会变化。对象的值是其表示的数据，例如数字 <code>2</code> 的值即为 2。</p>\n<p><code>\"Hello, World!\"</code> 这个对象的数据类型为<strong>字符串</strong>（str，string 的缩写），值为 <code>\"Hello, World!\"</code>。如果提及数据类型为 <code>str</code> 的对象，可以称其为字符串。字符串是由引号包括的一个或多个字符组成的序列。<strong>字符</strong>（character）是类似 <code>a</code> 或 <code>l</code> 这样的单个符号。可以使用单引号或双引号来表示字符串，但是前后的引号必须保持一致，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hh5kjwp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Hello, World!\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Hello, World!'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/heaxhsh</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">'Hello, World!'</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Hello, World!'</span>\n</code></pre>\n<p>字符串可用来表示文本，且有自己独特的属性。</p>\n<p>之前章节中用来计算的数字，也是对象，但不是字符串。整数（1，2，3，4 等）的数据类型为<strong>整型数据</strong>（<code>int</code>，全称为 integer）。与字符串一样，整型数据也有着独特的属性。例如，可以将两个整数相乘，但是不能相乘两个字符串。</p>\n<p>小数（带小数点的数字）的数据类型为 <code>float</code>。2.1、8.2 和 9.9999 都是数据类型为 <code>float</code> 的对象，我们称之为<strong>浮点数</strong>（floating-point number）。与其他所有数据类型一样，浮点数也有自己独有的属性，且一定程度上与整型数据类似。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/guoc4gy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2.2</span> + <span class=\"hljs-number\">2.2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4.4</span>\n</code></pre>\n<p>数据类型为 <strong>bool</strong> 的对象被称为<strong>布尔值</strong>（boolean），仅有 <code>True</code> 和 <code>False</code> 两个值。</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jyllj2k</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">True</span>\n\n&gt;&gt; <span class=\"hljs-keyword\">True</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jzgsxz4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">False</span>\n\n&gt;&gt; <span class=\"hljs-keyword\">False</span>\n</code></pre>\n<p>数据类型为 <strong>NoneType</strong> 的对象，其值永远为 <code>None</code>，用来表示数据缺失。</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/h8oqo5v</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  None\n</code></pre>\n<p>本章后续会介绍如何使用不同的数据类型。</p>\n<h3 id=\"38\">3.8　常量和变量</h3>\n<p>你可以把 Python 当成计算器来算术，做加、减、乘、除、幂等运算。在交互式 shell 中输入以下所有示例：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zs65dp8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gs9nwrw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hasegvj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">4</span> / <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2.0</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z8ok4q3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n</code></pre>\n<p><strong>常量</strong>（constant）是一个永远不会改变的值。上面示例中的每一个数字，都是常量；数字 2 永远表示的值为 2。<strong>变量</strong>（variable）则相反，指的是会改变的值。变量由一个或多个字符组成的名称构成，并使用<strong>赋值符</strong>（assignment operator）等号赋予了这个名称一个值。</p>\n<p>有些编程语言要求程序员编写变量“声明”，明确说明变量的数据类型。例如，在 C 语言中可以这样创建变量：</p>\n<pre><code class=\"hljs cs\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># 不用执行</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <span class=\"hljs-keyword\">int</span> a;\n<span class=\"hljs-number\">8</span>  a = <span class=\"hljs-number\">144</span>;\n</code></pre>\n<p>Python 的做法更简单；可以直接用赋值符，将某个值赋给变量，即可创建：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hw64mrr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  b = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">5</span>  b\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>下面介绍如何改变变量的值：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hw97que</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">5</span>  x\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  x = <span class=\"hljs-number\">200</span>\n<span class=\"hljs-number\">9</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">200</span>\n</code></pre>\n<p>还可以使用两个变量进行算术运算：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z8hv5j5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  y = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">6</span>  z = x + y\n<span class=\"hljs-number\">7</span>  z\n<span class=\"hljs-number\">8</span>  a = x - y\n<span class=\"hljs-number\">9</span>  a\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">20</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>编程时经常需要<strong>增加</strong>（increment）或<strong>减小</strong>（decrement）某个变量的值。考虑到这个操作非常普遍，Python 提供了特殊语法进行增减变量的值。如需增加变量的值，可将该变量赋予给自身，然后在等号的另一侧将变量与希望增加的值相加：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zvzf786</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x = x + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">11</span>\n</code></pre>\n<p>如需减小变量的值，可以执行同样的操作，唯一的区别是要减去所希望的值：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gmuzdr9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x = x - <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n</code></pre>\n<p>这些示例都是完全有效的，不过还有一种更简便的方法，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zdva5wq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">11</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jqw4m5r</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x -= <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n</code></pre>\n<p>变量不仅仅用于保存整型数的值，还可以表示任何数据类型，示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/jsygqcy</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  hi = <span class=\"hljs-string\">\"Hello, World!\"</span>\n\n<span class=\"hljs-number\">1</span>  # http:<span class=\"hljs-comment\">//tinyurl.com/h47ty49</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_float = <span class=\"hljs-number\">2.2</span>\n\n<span class=\"hljs-number\">1</span>  # http:<span class=\"hljs-comment\">//tinyurl.com/hx9xluq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_boolean = True\n</code></pre>\n<p>只要遵守以下 4 条原则，可以随意命名变量。</p>\n<p>1．变量名不能包含空格符。如果想在变量名中使用两个单子，可以在中间加入下划线，如 <code>my_variable = \"A string!\"</code>。</p>\n<p>2．变量名只能使用特定的字母、数字和下划线。</p>\n<p>3．变量名不能以数字开头。虽然可以使用下划线开头，但是这种命名方式有着特殊的意义，后面内容会提到。因此在此之前尽量避免这种情况。</p>\n<p>4．不能使用 Python 关键字作为变量名。可在网页 http://theselftaughtprogrammer.io/keywords 中查看所有关键字。</p>\n<h3 id=\"39\">3.9　语法</h3>\n<p><strong>语法（syntax）</strong>指的是规范一门语言中句子结构，尤其是字词顺序的一整套规则及流程。英语有语法，Python 也有。</p>\n<p>在 Python 中，字符串永远被包括在引号内。这就是 Python 的一个语法示例。下面是一个有效的 Python 程序：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/j7c2npf</span>\n2\n3\n4  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n</code></pre>\n<p>程序之所以有效，是因为遵守了 Python 的语法，在定义字符串时用引号包括了文本。如果只是在文本的一侧使用引号，就违背了 Python 的语法，代码将无法运行。</p>\n<h3 id=\"310\">3.10　错误与异常</h3>\n<p>如果在编写 Python 程序时无视其语法，那么在运行时将出现错误。Python 解释器将告知代码无法执行，并给出有关该错误的信息。如果只用一个引号定义字符串，看看会发生什么情况，示例如下：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/hp2plhs</span>\n2\n3\n4  <span class=\"hljs-comment\"># 该代码有一个错误</span>\n5\n6\n7  my_string = <span class=\"hljs-string\">\"Hello World.\n\n&gt;&gt; File \"</span>/Users/coryalthoff/PycharmProjects/se.py<span class=\"hljs-string\">\", line 1 my_string = 'd ^ SyntaxError: EOL while scanning string literal\n</span></code></pre>\n<p>这段信息表示程序中有一个语法错误。语法错误是致命的，将导致程序无法运行。如果强制执行，Python 会报错。错误信息会告诉你错误位于哪个文件，出现在哪一行，以及属于什么类型。尽管这个错误看上去很吓人，但却是很常见的。</p>\n<p>如果代码中有错误，首先要找到出错的那行代码，找到出错的地方。在本例中，你应该去找代码的第一行，观察一段时间后，会注意到里面只有一个引号。只要在字符串结尾再加上一个引号，即可解决该错误，然后可以重新运行。从这里开始，本书将这样表示错误输出：</p>\n<pre><code class=\"hljs cpp\">&gt;&gt; SyntaxError: EOL <span class=\"hljs-keyword\">while</span> scanning <span class=\"hljs-built_in\">string</span> literal\n</code></pre>\n<p>为了方便阅读，书中只显示错误信息的最后一行。</p>\n<p>Python 有两种错误：语法错误和异常。不属于语法错误的错误，就是<strong>异常</strong>（exception）。如果用 0 作为分母，则会出现“ZeroDivisionError”异常。</p>\n<p>与语法错误不同的是，异常并不一定是致命的（有办法让程序在即使出现异常时仍继续运行，这会在下一章学到）。出现异常时，Python 程序员会说“Python（或程序）报了一个异常”。下面是一个异常的示例：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jxpztcx</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 该代码有一个错误</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ZeroDivisionError:</span> division by zero\n</code></pre>\n<p>如果代码缩进不正确，程序会报“IdentationError”：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gtp6amr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 该代码有一个错误</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">8</span>          x =<span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">IndentationError:</span> unexpected indent\n</code></pre>\n<p>在学习编程的过程中，你会经常碰到语法错误和异常（包括书中没有讲到过的），但是出错的情况会逐渐减少。要记住，在碰到语法错误或异常时，先找到出现问题的那行代码，然后仔细检查并找到解决办法（如果没有头绪可以在网上搜索错误或异常提示信息）。</p>\n<h3 id=\"311\">3.11　算术操作符</h3>\n<p>之前，我们用 Python 做了简单的算术计算，如 4/2。这些示例中所使用到的符号被称为<strong>操作符</strong>（operator）。Python 将操作符分为多个类型，目前所见到的是<strong>算术操作符</strong>（arithmetic operator）。下面是 Python 中常用的一些算术操作符，见表 3-1。</p>\n<p>表3-1</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>含　　义</th>\n<th>示例</th>\n<th>运算结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>**</td>\n<td>指数运算</td>\n<td>2 ** 2</td>\n<td>4</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模运算</td>\n<td>14 % 4</td>\n<td>2</td>\n</tr>\n<tr>\n<td>//</td>\n<td>整除/地板除运算</td>\n<td>13 // 8</td>\n<td>1</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除法运算</td>\n<td>13 / 8</td>\n<td>1.625</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法运算</td>\n<td>8 * 2</td>\n<td>16</td>\n</tr>\n<tr>\n<td>−</td>\n<td>减法运算</td>\n<td>7 − 1</td>\n<td>6</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加法运算</td>\n<td>2 + 2</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<p>两个数相除时，会有一个商和一个余数。商就是除法运算的结果，余数即剩下的值。取模操作符返回的就是余数。例如，13 除以 5 的结果就是商 2 余 3，示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/qrdc195</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">// 5</span>\n\n&gt;&gt; <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zsqwukd</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">13</span> % <span class=\"hljs-number\">5</span>\n\n&gt;&gt; <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>对两个数取模时，如果没有余数（返回 0），则被取模的数字为另一个数字的倍数。如果有余数，则不是其倍数。因此取模运算被用于检验数字的奇偶性，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jerpe6u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 偶数</span>\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-number\">12</span> % <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gkudhcr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 奇数</span>\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-number\">11</span> % <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>有两个操作符用于除法运算。第一个是 // ，返回值为商：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/hh9fqzy</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">14</span> <span class=\"hljs-comment\">// 3</span>\n\n&gt; <span class=\"hljs-number\">4</span>\n</code></pre>\n<p>第二个是 / ，返回值为两个数相除的浮点数结果：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zlkjjdp</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">14</span> / <span class=\"hljs-number\">3</span>\n\n&gt; <span class=\"hljs-number\">4.666666666666667</span>\n</code></pre>\n<p>还可以使用指数运算符求幂：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h8vuwd4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">2</span> ** <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n</code></pre>\n<p>操作符两侧的值（以上示例中就是数字）被称为<strong>操作数</strong>（operand）。两个操作数和一个操作符共同构成一个<strong>表达式</strong>（expression）。程序运行时，Python 会对每个表达式求值，并返回一个值作为结果。如果在交互式 shell 中输入表达式 2 + 2，则返回结果 4。</p>\n<p><strong>运算顺序</strong>（order of operation），指的是数学计算中对表达式求值的一套规则。可使用 PEMDAS 方法，帮助记忆数学公式的运算顺序：括号（parentheses）、指数（exponents）、乘法（multiplication）、除法（division）、加法（addition）和减法（subtraction）。括号的优先级大于指数符号，后者又优先于乘法和除法，最后才是加法和减法。如果操作符的优先级相同，如 15 / 3 * 2，则按照从左到右的顺序求值。上述表达式中将 15 先除以 3，然后再乘以 2。Python 对数学表达式求值时，遵循的是同一套运算顺序：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hgjyj7o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsq7rcz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  (<span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>) * <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">8</span>\n</code></pre>\n<p>在第一个示例中，2 * 2 先进行求值，因为乘法的优先级大于加法。</p>\n<p>在第二个示例中，(2 + 2) 先求值，因为 Python 总是先对括号内的表达式求值。</p>\n<h3 id=\"312\">3.12　比较操作符</h3>\n<p><strong>比较操作符</strong>（comparison operator）是 Python 中的另一种操作符。与算术操作符类似，比较操作符可用于表达式任意一侧的操作数；不同的是，带有比较操作符的表达式最后求值的结果不是 <code>True</code> 就是 <code>False</code>。详情见表 3-2。</p>\n<p>表 3-2　　</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>含　　义</th>\n<th>示　　例</th>\n<th>运算结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>100 &gt; 10</td>\n<td>True</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>100 &lt; 10</td>\n<td>False</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于或等于</td>\n<td>2 &gt;= 2</td>\n<td>True</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于或等于</td>\n<td>1 &lt;= 4</td>\n<td>True</td>\n</tr>\n<tr>\n<td>==</td>\n<td>等于</td>\n<td>6 == 9</td>\n<td>False</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>3 != 2</td>\n<td>True</td>\n</tr>\n</tbody>\n</table>\n<p>在含有 &gt; 操作符的表达式中，如果左侧的数字大于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jm7cxzp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">100</span> &gt; <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n</code></pre>\n<p>在含有 &lt; 操作符的表达式中，如果左侧的数字小于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsdhr8q</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">100</span> &lt; <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n</code></pre>\n<p>在含有 &gt;= 操作符的表达式中，如果左侧的大于或等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jy2oefs</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">2</span> &gt;= <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n</code></pre>\n<p>在含有 &lt;= 操作符的表达式中，如果左侧的数字小于或等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jk599re</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> &gt;= <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n</code></pre>\n<p>在含有 == 操作符的表达式中，如果左侧的数字等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2tsz9u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j5mr2q2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n</code></pre>\n<p>在含有 != 操作符的表达式中，如果左侧的数字不等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsw3zoe</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> != <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z7pffk3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n</code></pre>\n<p>此前，如果使用 = 将数字赋值给了变量，如 x = 100。可能会将其理解为“x 等于 100”，但这是错误的。前面看到，= 是用来给变量赋值的，而不是检查相等性的操作符。因此 x = 100 应理解为“x 的值为 100”。比较操作符 == 是用于检查两侧是否相等的，因此如果看到 x == 100，含义即为“x 等于 100”。</p>\n<h3 id=\"313\">3.13　逻辑操作符</h3>\n<p><strong>逻辑操作符</strong>（logical operator）也是 Python 中的一类操作符。与比较操作符类似，逻辑操作符的求值结果也是 <code>True</code> 或 <code>False</code>。详情见表 3-3。</p>\n<p>表 3-3　　</p>\n<table>\n<thead>\n<tr>\n<th>操　作　符</th>\n<th>含　　义</th>\n<th>示　　例</th>\n<th>运算结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>and</td>\n<td>与</td>\n<td>True and True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>or</td>\n<td>或</td>\n<td>True or False</td>\n<td>True</td>\n</tr>\n<tr>\n<td>not</td>\n<td>非</td>\n<td>not True</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n<p>Python 关键字 and 可以连接两个表达式，如果二者均求值为 <code>True</code>，则返回 <code>True</code>。如果任意一个的值为 <code>False</code>，即返回 <code>False</code>：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zdqghb2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zkp2jzy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/honkev6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zjrxxrc</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n<p>可以在一个语句中多次使用 <code>and</code> 关键字：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zpvk56u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">10</span> != <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> &lt; <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>关键字 <code>or</code> 可连接两个或多个表达式，如果任意一个表达式的值为 <code>True</code>，即返回 <code>True</code>：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hosuh7c</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zj6q8h9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8ngufo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z728zxz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n<p>类似地，也可以在一个语句中多次使用 <code>or</code> 关键字：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ja9mech</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">3</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>该表达式的值为 <code>True</code>，因为 1 == 1 的值为 <code>True</code>，即使表达式其余的部分求值为 <code>False</code>，最终的值仍为 <code>True</code>。</p>\n<p>将关键字 <code>not</code> 放置在表达式的前面，将改变表达式的求值结果，逆转为原本结果的对立值。如果表达式原本的求值结果为 <code>True</code>，则加上 <code>not</code> 之后结果会变为 <code>False</code>：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h45eq6v</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">not</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsqj6og</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">not</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<h3 id=\"314\">3.14　条件语句</h3>\n<p>关键字 <code>if</code>、<code>elif</code> 和 <code>else</code> 用于<strong>条件语句</strong>（conditional statement）。条件语句是一种<strong>控制结构</strong>（control structure）：通过分析变量的值从而做出对应决定的代码块。条件语句是可根据条件执行额外代码的代码。为了方便理解，仔细看以下这个伪代码（pseudocode）示例（伪代码是用于解释说明示例代码的标记方法）：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># 不要执行</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">If</span> (expression) Then\n<span class=\"hljs-number\">5</span>              (code_area1)\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-keyword\">Else</span>\n<span class=\"hljs-number\">7</span>              (code_area2)\n</code></pre>\n<p>上述伪代码显示，可以定义两个条件语句。如果第一个条件语句中定义的表达式为 <code>True</code>，则执行 <code>code_area1</code>；否则执行 <code>code_area2</code>。示例中的第一部分被称为 <code>if</code> 语句，第二部分为 <code>else</code> 语句。两者共同组成一个 <code>if-else</code> 语句：程序员用来表达“如果出现这种情况，则这样做，否则那样做”的方法。下面是 Python 中的 <code>if-else</code> 语句示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/htvy6g3</span>\n2\n3\n4  home = <span class=\"hljs-string\">\"America\"</span>\n5  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"America\"</span>:\n6      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n7  <strong><span class=\"hljs-keyword\">else</span></strong>:\n8      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, America!</code></pre>\n<p>第 5 行和第 6 行共同组成了 <code>if</code> 语句。一个 <code>if</code> 语句中，包括一行以 <code>if</code> 关键字开头的代码行，<code>if</code> 关键字之后是一个表达式，还有冒号、缩进，以及一行或多行如果表达式为 <code>True</code> 的情况下将执行的代码。第 7 行和第 8 行共同组成了 <code>else</code> 语句。一个 <code>else</code> 语句的开头是 <code>else</code> 关键字，然后是冒号、缩进，以及一行或多行如果 <code>if</code> 语句中表达式为 <code>False</code> 时将执行的代码。</p>\n<p>二者共同组成了一个 <code>if-else</code> 语句。本例的打印输出结果为 <code>Hello, America!</code>，因为 <code>if</code> 语句中的表达式结果为 <code>True</code>。如果将变量 <code>home</code> 的值修改为 <code>Canada</code>，则 <code>if</code> 语句中的表达式结果为 <code>False</code>，将会执行 <code>else</code> 语句中的代码，程序会打印出 <code>Hello, World!</code>。</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/jytyg5x</span>\n2\n3\n4  home = <span class=\"hljs-string\">\"Canada\"</span>\n5  <strong><span class=\"hljs-keyword\">if</span></strong> home ==<strong> </strong><span class=\"hljs-string\">\"America\"</span>:\n6      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n7  <strong><span class=\"hljs-keyword\">else</span></strong>:\n8      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, World!</code></pre>\n<p>可以单独使用一个 <code>if</code> 语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jyg7dd2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  home = <span class=\"hljs-string\">\"America\"</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"America\"</span>:\n<span class=\"hljs-number\">6</span>      print(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, America!</code></pre>\n<p>也可以连续使用多个 <code>if</code> 语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z24ckye</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">05</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x == <span class=\"hljs-number\">2</span>:\n<span class=\"hljs-number\">06</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"The number is 2.\"</span>)\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">08</span>      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The number is even.\"</span>)\n<span class=\"hljs-number\">09</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"The number is odd.\"</span>)\n\n&gt;&gt; The number <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">2.</span>\n&gt;&gt; The number <span class=\"hljs-keyword\">is</span> even.</code></pre>\n<p>每个 <code>if</code> 语句只有在其表达式求值为 <code>True</code> 时，才会执行所有的代码。在本例中，前两个表达式的求值结果为 <code>True</code>，因此各自的代码都执行了，但是第 3 个表达式的结果为 <code>False</code>，所以没有执行。</p>\n<p>如果愿意，甚至还可以在 <code>if</code> 语句中再加入一个 <code>if</code> 语句（通常称之为嵌套）：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrodgne</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">05</span>  y = <span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  <strong><span class=\"hljs-keyword\">if</span></strong> x == <span class=\"hljs-number\">10</span>:\n09      <strong><span class=\"hljs-keyword\">if</span></strong> y == <span class=\"hljs-number\">11</span>:\n<span class=\"hljs-number\">10</span>          print(x + y)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">21</span></code></pre>\n<p>在本例中，只有在两个 <code>if</code> 语句的结果均为 <code>True</code> 时，才会打印 <code>x + y</code>。<code>else</code> 语句无法被单独使用，只能用在 <code>if-else</code> 语句的最后一部分。</p>\n<p>也可以使用 <code>elif</code> 关键字创建 <code>elif</code> 语句。<code>elif</code> 表示另外如果，该语句可无限添加到 <code>if-else</code> 语句中，使其支持更多的决策。</p>\n<p>如果一个 <code>if-else</code> 语句中包含有 <code>elif</code> 语句，则首先判断 <code>if</code> 语句。如果该语句中的表达式为 <code>True</code>，则只执行其中的代码。但是，如果其值为 <code>False</code>，每个之后的 <code>elif</code> 语句都将进行求值。只要有一个 <code>elif</code> 语句中的表达式结果为 <code>True</code>，则执行其中的代码并退出。如果没有任何一个 <code>elif</code> 语句的结果为 <code>True</code>，则执行 <code>else</code> 语句中的代码。下面是一个包含有 <code>elif</code> 语句的 <code>if-else</code> 语句示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/jpr265j</span>\n02\n03\n04  home = <span class=\"hljs-string\">\"Thailand\"</span>\n05  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"Japan\"</span>:\n06      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, Japan!\"</span>)\n07  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Thailand\"</span>:\n08      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, Thailand!\"</span>)\n09  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"India\"</span>:\n10      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, India!\"</span>)\n11  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"China\"</span>:\n12      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, China!\"</span>)\n13  <strong><span class=\"hljs-keyword\">else</span></strong>:\n14      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, Thailand!</code></pre>\n<p>下面这个示例中，所有的 <code>elif</code> 语句求值结果均不为 <code>True</code>，最后执行的是 <code>else</code> 语句中的代码。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/zdvuuhs</span>\n02\n03  home = <span class=\"hljs-string\">\"Mars\"</span>\n04  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"America\"</span>:\n05      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n06  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Canada\"</span>:\n07      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, Canada!\"</span>)\n08  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Thailand\"</span>:\n09      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, Thailand!\"</span>)\n10  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Mexico\"</span>:\n11      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, Mexico!\"</span>)\n12  <strong><span class=\"hljs-keyword\">else</span></strong>:\n13      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, World! </code></pre>\n<p>最后，可以连续使用多个 <code>if</code> 语句和 <code>elif</code> 语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/hzyxgf4</span>\n02\n03\n04  x = 100\n05  <strong><span class=\"hljs-keyword\">if</span></strong> x == 10:\n06      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"10!\"</span>)\n07  <strong><span class=\"hljs-keyword\">elif</span></strong> x == 20:\n08      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"20!\"</span>)\n09  <strong><span class=\"hljs-keyword\">else</span></strong>:\n10      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"I don't know!\"</span>)\n11\n12\n13  <strong><span class=\"hljs-keyword\">if</span></strong> x == 100:\n14      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is 100!\"</span>)\n15\n16\n17  <strong><span class=\"hljs-keyword\">if</span></strong> x % 2 == 0:\n18      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"x is even!\"</span>)\n19<strong>  <span class=\"hljs-keyword\">else</span></strong>:\n20      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is odd!\"</span>)\n\n&gt;&gt; I don<span class=\"hljs-string\">'t know!\n&gt;&gt; x is 100!\n&gt;&gt; x is even!</span></code></pre>\n<h3 id=\"315\">3.15　语句</h3>\n<p><strong>语句</strong>（statement）这个术语可用来描述 Python 语言的多种构成部分。可以将一个 Python 语句视作一个命令或计算。本节将详细介绍语句的语法。如果感觉部分内容初次学起来很难懂，也不用太担心，随着练习 Python 的时间变长，你就会慢慢理解。</p>\n<p>Python 中有两类语句：<strong>简单语句</strong>（simple statement）和<strong>复合语句</strong>（compound statement）。简单语句一般就是一行代码，而复合语句通常包括多行代码。下面是一些简单语句的示例：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jrowero</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2y549y</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n</code></pre>\n<p><code>if</code> 语句和 <code>if-else</code> 语句，以及本章编写的第一个程序（打印 <code>Hello, World!</code> 100 次）都是复合语句。</p>\n<p>复合语句由一个或多个<strong>从句</strong>（clause）组成。从句包括两行或多行代码：<strong>代码头</strong>（header）及紧随其后的<strong>配套代码</strong>（suite）。代码头指的是从句中包含关键字的那行代码，之后是一个冒号和一行或多行带缩进的代码。缩进之后，是一个或多个配套代码。配套代码就是从句中一行普通的代码。代码头控制配套代码的执行。打印 <code>Hello, World!</code> 100 次的程序，就是由一个复合语句组成。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zfz3eel</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">4</span>      print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n&gt;&gt; Hello, World!\n&gt;&gt; Hello, World!\n…</code></pre>\n<p>程序的第一行是代码头，包括关键字 <code>for</code>，之后是冒号。缩进之后是配套代码 <code>print(\"Hello, World!\")</code>。在上述示例中，代码头通过配套代码打印 <code>Hello, World!</code> 100 次，这是一个循环，将在第 7 章详细介绍。上述代码只有一个从句。</p>\n<p>复合语句可以由多个从句构成，你前面看到的 <code>if-else</code> 语句就是复合语句。<code>if</code> 语句之后如果带有一个 <code>else</code> 语句，就构成了一个由多个从句组成的复合语句。在包含多个从句的复合语句中，代码头从句共同控制代码执行。对于 <code>if-else</code> 语句，当 <code>if</code> 语句的值为 <code>True</code> 时，则执行 <code>if</code> 语句的配套代码，<code>else</code> 语句的配套代码不执行；当 <code>if</code> 语句的值为 <code>False</code> 时，则不执行 <code>if</code> 语句的配套代码，转而执行 <code>else</code> 语句的配套代码。上一节中的最后一个示例包含了 3 个复合语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/hpwkdo4</span>\n02\n03\n04  x = 100\n05  <strong><span class=\"hljs-keyword\">if</span></strong> x == 10:\n06      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"10!\"</span>)\n07  <strong><span class=\"hljs-keyword\">elif</span></strong> x == 20:\n08      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"20!\"</span>)\n09  <strong><span class=\"hljs-keyword\">else</span></strong>:\n10      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"I don't know!\"</span>)\n11\n12\n13  <strong><span class=\"hljs-keyword\">if</span></strong> x == 100:\n14      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"x is 100!\"</span>)\n15\n16\n17  <strong><span class=\"hljs-keyword\">if</span></strong> x % 2 == 0:\n18      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"x is even!\"</span>)\n19  <strong><span class=\"hljs-keyword\">else</span></strong>:\n20      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is odd!\"</span>)\n\n&gt;&gt; I don<span class=\"hljs-string\">'t know!\n&gt;&gt; x is 100!\n&gt;&gt; x is even!</span></code></pre>\n<p>第一个复合语句中有 3 个从句，第二个里有一个从句，最后一个则有两个从句。</p>\n<p>关于语句还有一点要注意，语句之间是可以有空格的，这不会影响代码的执行。空格有时被用来提高代码的可读性。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zlgcwoc</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  print(<span class=\"hljs-string\">\"Michael\"</span>)\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  print(<span class=\"hljs-string\">\"Jordan\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Michael\n<span class=\"hljs-meta\">&gt;&gt;</span> Jordan\n</code></pre>\n<h3 id=\"316\">3.16　术语表</h3>\n<p><strong>注释</strong>：用英文或其他自然语言写的一行（或一部分）代码，行首均有一个特殊标志告知编程语言忽略这行代码。</p>\n<p><strong>关键字</strong>：编程语言中具有特殊意义的词。可在 http://theselftaughtprogrammer.io/keywords 网页中查看所有 Python 的关键字。</p>\n<p><strong>数据类型</strong>：数据所属的类别。</p>\n<p><strong>对象</strong>：Python 中具有 3 个属性的数据值——唯一标识、数据类型和值。</p>\n<p><strong>Str</strong>：字符串的数据类型。</p>\n<p><strong>字符</strong>：a 或 l 等单个符号。</p>\n<p><strong>Int</strong>：整数的数据类型。</p>\n<p><strong>整型数据</strong>：数据类型为 int 的对象，其值为一个整数。</p>\n<p><strong>Float</strong>：小数的数据类型。</p>\n<p><strong>浮点数</strong>：数据类型为 <code>float</code> 的对象，其值为一个小数。</p>\n<p><strong>Bool</strong>：布尔对象的数据类型。</p>\n<p><strong>布尔值</strong>：数据类型为 <code>bool</code> 的对象，其值为 <code>True</code> 或 <code>False</code>。</p>\n<p><strong>NoneType</strong>：<code>None</code> 对象的数据类型。</p>\n<p><strong>None</strong>：数据类型为 <code>NoneType</code> 的对象，其值永远为 <code>None</code>。</p>\n<p><strong>常量</strong>：不会改变的值。</p>\n<p><strong>变量</strong>：使用赋值操作符赋予了一个值的名称。</p>\n<p><strong>赋值操作符</strong>：Python 中的 <code>=</code> 符号。</p>\n<p><strong>增加</strong>：增加一个变量的值。</p>\n<p><strong>减少</strong>：减少一个变量的值。</p>\n<p><strong>语法</strong>：规范一门语言中句子结构，尤其是字词顺序的一整套规则及流程。</p>\n<p><strong>语法错误</strong>：违反编程语言的语法，所导致的致命编程错误。</p>\n<p><strong>异常</strong>：非致命的编程错误。</p>\n<p><strong>操作符</strong>：在表达式中与操作符一起使用的符号。</p>\n<p><strong>算术操作符</strong>：数学表达式中使用的一类操作符。</p>\n<p><strong>操作数</strong>：操作符两侧的值。</p>\n<p><strong>表达式</strong>：操作符及两个操作数构成的代码。</p>\n<p><strong>运算顺序</strong>：数学计算中用来对表达式求值的一组规则。</p>\n<p><strong>比较操作符</strong>：表达式中用到的一类操作符，求值结果为 <code>True</code> 或 <code>False</code>。</p>\n<p><strong>逻辑操作符</strong>：对两个表达式求值的一类操作符，求值结果为 <code>True</code> 或 <code>False</code>。</p>\n<p><strong>条件语句</strong>：根据条件执行不同代码的代码。</p>\n<p><strong>控制结构</strong>：通过分析变量的值，来决定代码如何执行的代码块。</p>\n<p><strong>伪代码</strong>：用来演示逻辑的标记方法，与代码类似。</p>\n<p><strong>if-else 语句</strong>：程序员用来表达“如果出现这种情况，则这样做，否则那样做”的方法。</p>\n<p><strong>if 语句</strong>：<code>if-else</code> 语句的第一部分。</p>\n<p><strong>else 语句</strong>：<code>if-else</code> 语句的第二部分。</p>\n<p><strong>语句</strong>：一个命令或计算。</p>\n<p><strong>简单语句</strong>：可用一行代码表述的语句。</p>\n<p><strong>复合语句</strong>：通常包括多行代码的语句。</p>\n<p><strong>从句</strong>：复合语句的组成部分；一个从句由两行或多行代码构成，包括代码头及配套代码。</p>\n<p><strong>代码头</strong>：从句中包含关键字的那行代码，之后是一个冒号和一行或多行带缩进的代码。</p>\n<p><strong>配套代码</strong>：从句中由代码头控制的代码。</p>\n<h3 id=\"317\">3.17　挑战练习</h3>\n<p>1．请打印 3 个不同的字符串。</p>\n<p>2．编写程序：如果变量的值小于 10，打印一条消息；如果大于或等于 10，则打印不同的消息。</p>\n<p>3．编写程序：如果变量的值小于或等于 10，打印一条消息；如果大于 10 且小于或等于 25，则打印一条不同的消息；如果大于 25，则打印另一条不同的消息。</p>\n<p>4．编写一个将两个变量相除，并打印余数的程序。</p>\n<p>5．编写一个将两个变量相除，并打印商的程序。</p>\n<p>6．编写程序：为变量 age 赋予一个整数值，根据不同的数值打印不同的字符串说明。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","source":"_posts/Python无师自通/3_python_coding_introduction.html","raw":"---\ntitle: 编程概论\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>编程概论</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#31\">3.1　示例</a></li>\n<li><a href=\"#32\">3.2　注释</a></li>\n<li><a href=\"#33\">3.3　打印</a></li>\n<li><a href=\"#34\">3.4　代码行</a></li>\n<li><a href=\"#35\">3.5　关键字</a></li>\n<li><a href=\"#36\">3.6　间距</a></li>\n<li><a href=\"#37\">3.7　数据类型</a></li>\n<li><a href=\"#38\">3.8　常量和变量</a></li>\n<li><a href=\"#39\">3.9　语法</a></li>\n<li><a href=\"#310\">3.10　错误与异常</a></li>\n<li><a href=\"#311\">3.11　算术操作符</a></li>\n<li><a href=\"#312\">3.12　比较操作符</a></li>\n<li><a href=\"#313\">3.13　逻辑操作符</a></li>\n<li><a href=\"#314\">3.14　条件语句</a></li>\n<li><a href=\"#315\">3.15　语句</a></li>\n<li><a href=\"#316\">3.16　术语表</a></li>\n<li><a href=\"#317\">3.17　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“这是我能想到的，唯一可以让我既当工程师又做艺术家的工作。它要求具备极其缜密的技术思维，因为你必须要完成精确的思考，这点我很喜欢。另一方面，它又鼓励你肆意挥洒自己的创意，只有你想不到没有你做不到的。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——安迪 · 赫兹菲尔德（Andy Hertzfeld）</span></p>\n</blockquote>\n<p>我们的第一个程序打印出了 <code>Hello, World!</code>。接下来打印 100 次。在交互式 shell 中输入如下代码（print 需要缩进 4 个空格符）：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/h79ob7s</span>\n2\n3\n4  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(100):\n5      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)</code></pre>\n<p>交互式 shell 应该会打印 <code>Hello, World!</code> 100 次。即使通常没有这样做的需要，但可以从这个例子中看出编程的强大。你能想到任何其他可以如此简单地做 100 遍的事情吗？我想不到。这就是编程的厉害之处。</p>\n<h3 id=\"31\">3.1　示例</h3>\n<p>从现在开始，代码示例会以如下形式出现：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4qntgk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">5</span>      print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n&gt;&gt; Hello, World!\n&gt;&gt; Hello, World!\n…</code></pre>\n<p>打开 http://tinyurl.com/h4qntqk 这个链接，就可以看到包含有示例代码的网页，这样如果无法让代码运行，你可以轻松地复制代码，并粘贴到 IDLE 的文本编辑器中。<code>&gt;&gt;</code> 的后面则是交互式 shell 的输出。全书的每一个编程示例中都会看到 <code>&gt;&gt;</code>，这代表了程序的输出结果（会在交互式 shell 中打印出来）。“...”表示“等等”。</p>\n<p>如果示例后没有 <code>&gt;&gt;</code>，就表示该程序没有输出，或者只是在解释概念，输出并不太重要。</p>\n<p>字体为 Courier New 的部分，都是某种形式的代码、代码输出或编程术语。例如，上个例子中提到的词 <code>for</code>，它就会是 Courier New 字体。</p>\n<p>Courier New 是一个固定宽度（不等比）的字体，常用来显示编程文本。每个字符的宽度都一致，因此代码对齐后可以很容易地发现缩进和其他特征。</p>\n<p>可以用交互式 shell 或 <code>.py</code> 文件来运行示例代码。但是要注意的是，正如之前提到的，交互式 shell 中的输出与文件运行的输出可能略有不同，因此如果没得到完全一致的输出，原因就在于此。如果有示例要打印输出，但是却没有 <code>print</code> 字样，表示应该直接在交互式 shell 中输入代码。如果示例中有 <code>print</code> 字样，则说明应该从 <code>.py</code> 文件运行代码。</p>\n<h3 id=\"32\">3.2　注释</h3>\n<p><strong>注释</strong>（comment）是用英文或其他自然语言写的一行（或一部分）代码，行首均有一个特殊标志告知编程语言忽略这行代码。Python 用井号（#）来创建注释。</p>\n<p>注释的目的是解释代码的功能。程序员通过注释，使得代码更易于阅读。在注释中，可以写下任何内容，只要保持为一行即可，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hut6nwu</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-comment\"># 这是一行注释</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>只有在代码中执行特别操作，或者代码不清晰易懂的情况下，才需要写注释。尽量少写注释——不要每行代码都写注释，有特殊情况才需要。下面是一个注释多余的例子：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/jpzlwqq</span>\n2\n3\n4  <span class=\"hljs-comment\"># 打印 Hello, World!</span>\n5  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n</code></pre>\n<p>注释之所以多余，是因为这行代码的功能已经非常明确。下面是一个注释合理的例子：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/z52c8z8</span></span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-keyword\">import</span></strong> math\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  # 对角线的长度\n<span class=\"hljs-number\">08</span>  l = <span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">09</span>  w = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">10</span>  d = math.<span class=\"hljs-built_in\">sqrt</span>(l**<span class=\"hljs-number\">2</span>+ w**<span class=\"hljs-number\">2</span>)</code></pre>\n<p>即使你完全理解了这段代码，也可能并不知道如何计算长方形的对角线长度，因此这里的注释就是有用的。</p>\n<h3 id=\"33\">3.3　打印</h3>\n<p>程序不止可以打印 <code>Hello, World!</code>，它可以打印任何内容，只要记得加上双引号。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zh5g2a3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Python\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Python\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hhwqva2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hola!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hola!\n</code></pre>\n<h3 id=\"34\">3.4　代码行</h3>\n<p>Python 程序是由一行一行的代码组成的。看下面这个程序：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/jq2w5ro</span>\n2\n3\n4  <span class=\"hljs-comment\"># 第一行</span>\n5  <span class=\"hljs-comment\"># 第二行</span>\n6  <span class=\"hljs-comment\"># 第三行</span>\n</code></pre>\n<p>程序共有 3 行代码。我们通常用代码所在的行数区别代码。在 IDLE 中，可以打开“编辑”菜单，选择“前往行”按钮，即可跳转至程序的指定行。在交互式 shell 中，一次只能输入一行代码，无法复制粘贴多行代码。</p>\n<p>有时一段代码比较长，超过了一行，可以用三引号、圆括号、方括号或者大括号扩展至新一行，示例如下：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcdx3yo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"\"\"This is a really really\n5        really really long line of\n6        code.\"\"\"</span>)\n</code></pre>\n<p>另外，还可以使用反斜杠 \\ 对代码进行换行：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hjcf2sa</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">print</span>\\\n<span class=\"hljs-number\">5</span>  (<span class=\"hljs-string\">\"\"\"This is a really really\n6   really long line of code.\"\"\"</span>)\n</code></pre>\n<p>上述两个例子的输出结果是一样的。反斜杠可以让我们将 <code>(\"\"\"This is a really really really long line of code.\"\"\")</code> 和 <code>print</code> 放在不同的行，这种情况一般是不允许的。</p>\n<h3 id=\"35\">3.5　关键字</h3>\n<p>Python 等编程语言中有一些具备特殊意义的字，即<strong>关键字</strong>（keyword）。前面见过的 <code>for</code> 就是一个关键字，用来多次执行代码。本章中还会学习更多的关键字。</p>\n<h3 id=\"36\">3.6　间距</h3>\n<p>我们再来回顾一下那个打印 <code>Hello, World!</code> 100 次的程序：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/glp9xq6</span>\n2\n3\n4  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(100):\n5      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)</code></pre>\n<p>前面已经提到，<code>print</code> 缩进了 4 个空格符。稍后会解释原因，缩进可以告诉 Python 解释器代码块的开始与结束。同时要注意，在本书示例中看到的缩进距离，都是 4 个空格符。如果代码间距不合理，程序将无法执行。</p>\n<p>其他编程语言没有类似的缩进要求；它们使用关键字或花括号来表示代码开始和结束。以下是用 JavaScript 编程语言编写的同一个程序：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hwa2zae</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\"># 这是一个 JavaScript 程序</span>\n<span class=\"hljs-number\">05</span>  <span class=\"hljs-comment\"># 不过没法执行</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-keyword\">for</span></strong> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) {\n<span class=\"hljs-number\">09</span>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello, World!\"</span>);\n<span class=\"hljs-number\">10</span>  }</code></pre>\n<p>Python 的支持者坚信使用必要的缩进可以让 Python 比其他语言更易读易写。正如上例所示，即使编程语言不强制使用空格，程序员为了让代码更便于阅读，也会倾向于使用空格来分隔代码。</p>\n<h3 id=\"37\">3.7　数据类型</h3>\n<p>Python 将数据划分成不同的类别，即<strong>数据类型</strong>（data type）。在 Python 中，每一个数据值，如 <code>2</code> 或 <code>\"Hello, World!\"</code>，被称为<strong>对象</strong>（object）。本书第二部分会详细介绍数据类型，现在可以把对象看作拥有 3 个属性的数据值：唯一标识（identity）、数据类型和值。对象的唯一标识，指的是其在计算机内存中的地址，该地址不会变化。对象的数据类型是对象所属的数据类别，这决定了对象的属性，也不会变化。对象的值是其表示的数据，例如数字 <code>2</code> 的值即为 2。</p>\n<p><code>\"Hello, World!\"</code> 这个对象的数据类型为<strong>字符串</strong>（str，string 的缩写），值为 <code>\"Hello, World!\"</code>。如果提及数据类型为 <code>str</code> 的对象，可以称其为字符串。字符串是由引号包括的一个或多个字符组成的序列。<strong>字符</strong>（character）是类似 <code>a</code> 或 <code>l</code> 这样的单个符号。可以使用单引号或双引号来表示字符串，但是前后的引号必须保持一致，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hh5kjwp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Hello, World!\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Hello, World!'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/heaxhsh</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">'Hello, World!'</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Hello, World!'</span>\n</code></pre>\n<p>字符串可用来表示文本，且有自己独特的属性。</p>\n<p>之前章节中用来计算的数字，也是对象，但不是字符串。整数（1，2，3，4 等）的数据类型为<strong>整型数据</strong>（<code>int</code>，全称为 integer）。与字符串一样，整型数据也有着独特的属性。例如，可以将两个整数相乘，但是不能相乘两个字符串。</p>\n<p>小数（带小数点的数字）的数据类型为 <code>float</code>。2.1、8.2 和 9.9999 都是数据类型为 <code>float</code> 的对象，我们称之为<strong>浮点数</strong>（floating-point number）。与其他所有数据类型一样，浮点数也有自己独有的属性，且一定程度上与整型数据类似。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/guoc4gy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2.2</span> + <span class=\"hljs-number\">2.2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4.4</span>\n</code></pre>\n<p>数据类型为 <strong>bool</strong> 的对象被称为<strong>布尔值</strong>（boolean），仅有 <code>True</code> 和 <code>False</code> 两个值。</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jyllj2k</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">True</span>\n\n&gt;&gt; <span class=\"hljs-keyword\">True</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jzgsxz4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">False</span>\n\n&gt;&gt; <span class=\"hljs-keyword\">False</span>\n</code></pre>\n<p>数据类型为 <strong>NoneType</strong> 的对象，其值永远为 <code>None</code>，用来表示数据缺失。</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/h8oqo5v</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  None\n</code></pre>\n<p>本章后续会介绍如何使用不同的数据类型。</p>\n<h3 id=\"38\">3.8　常量和变量</h3>\n<p>你可以把 Python 当成计算器来算术，做加、减、乘、除、幂等运算。在交互式 shell 中输入以下所有示例：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zs65dp8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gs9nwrw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hasegvj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">4</span> / <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2.0</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z8ok4q3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n</code></pre>\n<p><strong>常量</strong>（constant）是一个永远不会改变的值。上面示例中的每一个数字，都是常量；数字 2 永远表示的值为 2。<strong>变量</strong>（variable）则相反，指的是会改变的值。变量由一个或多个字符组成的名称构成，并使用<strong>赋值符</strong>（assignment operator）等号赋予了这个名称一个值。</p>\n<p>有些编程语言要求程序员编写变量“声明”，明确说明变量的数据类型。例如，在 C 语言中可以这样创建变量：</p>\n<pre><code class=\"hljs cs\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># 不用执行</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <span class=\"hljs-keyword\">int</span> a;\n<span class=\"hljs-number\">8</span>  a = <span class=\"hljs-number\">144</span>;\n</code></pre>\n<p>Python 的做法更简单；可以直接用赋值符，将某个值赋给变量，即可创建：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hw64mrr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  b = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">5</span>  b\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>下面介绍如何改变变量的值：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hw97que</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">5</span>  x\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  x = <span class=\"hljs-number\">200</span>\n<span class=\"hljs-number\">9</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">200</span>\n</code></pre>\n<p>还可以使用两个变量进行算术运算：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z8hv5j5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  y = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">6</span>  z = x + y\n<span class=\"hljs-number\">7</span>  z\n<span class=\"hljs-number\">8</span>  a = x - y\n<span class=\"hljs-number\">9</span>  a\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">20</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>编程时经常需要<strong>增加</strong>（increment）或<strong>减小</strong>（decrement）某个变量的值。考虑到这个操作非常普遍，Python 提供了特殊语法进行增减变量的值。如需增加变量的值，可将该变量赋予给自身，然后在等号的另一侧将变量与希望增加的值相加：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zvzf786</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x = x + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">11</span>\n</code></pre>\n<p>如需减小变量的值，可以执行同样的操作，唯一的区别是要减去所希望的值：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gmuzdr9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x = x - <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n</code></pre>\n<p>这些示例都是完全有效的，不过还有一种更简便的方法，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zdva5wq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">11</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jqw4m5r</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x -= <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n</code></pre>\n<p>变量不仅仅用于保存整型数的值，还可以表示任何数据类型，示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/jsygqcy</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  hi = <span class=\"hljs-string\">\"Hello, World!\"</span>\n\n<span class=\"hljs-number\">1</span>  # http:<span class=\"hljs-comment\">//tinyurl.com/h47ty49</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_float = <span class=\"hljs-number\">2.2</span>\n\n<span class=\"hljs-number\">1</span>  # http:<span class=\"hljs-comment\">//tinyurl.com/hx9xluq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_boolean = True\n</code></pre>\n<p>只要遵守以下 4 条原则，可以随意命名变量。</p>\n<p>1．变量名不能包含空格符。如果想在变量名中使用两个单子，可以在中间加入下划线，如 <code>my_variable = \"A string!\"</code>。</p>\n<p>2．变量名只能使用特定的字母、数字和下划线。</p>\n<p>3．变量名不能以数字开头。虽然可以使用下划线开头，但是这种命名方式有着特殊的意义，后面内容会提到。因此在此之前尽量避免这种情况。</p>\n<p>4．不能使用 Python 关键字作为变量名。可在网页 http://theselftaughtprogrammer.io/keywords 中查看所有关键字。</p>\n<h3 id=\"39\">3.9　语法</h3>\n<p><strong>语法（syntax）</strong>指的是规范一门语言中句子结构，尤其是字词顺序的一整套规则及流程。英语有语法，Python 也有。</p>\n<p>在 Python 中，字符串永远被包括在引号内。这就是 Python 的一个语法示例。下面是一个有效的 Python 程序：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/j7c2npf</span>\n2\n3\n4  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n</code></pre>\n<p>程序之所以有效，是因为遵守了 Python 的语法，在定义字符串时用引号包括了文本。如果只是在文本的一侧使用引号，就违背了 Python 的语法，代码将无法运行。</p>\n<h3 id=\"310\">3.10　错误与异常</h3>\n<p>如果在编写 Python 程序时无视其语法，那么在运行时将出现错误。Python 解释器将告知代码无法执行，并给出有关该错误的信息。如果只用一个引号定义字符串，看看会发生什么情况，示例如下：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/hp2plhs</span>\n2\n3\n4  <span class=\"hljs-comment\"># 该代码有一个错误</span>\n5\n6\n7  my_string = <span class=\"hljs-string\">\"Hello World.\n\n&gt;&gt; File \"</span>/Users/coryalthoff/PycharmProjects/se.py<span class=\"hljs-string\">\", line 1 my_string = 'd ^ SyntaxError: EOL while scanning string literal\n</span></code></pre>\n<p>这段信息表示程序中有一个语法错误。语法错误是致命的，将导致程序无法运行。如果强制执行，Python 会报错。错误信息会告诉你错误位于哪个文件，出现在哪一行，以及属于什么类型。尽管这个错误看上去很吓人，但却是很常见的。</p>\n<p>如果代码中有错误，首先要找到出错的那行代码，找到出错的地方。在本例中，你应该去找代码的第一行，观察一段时间后，会注意到里面只有一个引号。只要在字符串结尾再加上一个引号，即可解决该错误，然后可以重新运行。从这里开始，本书将这样表示错误输出：</p>\n<pre><code class=\"hljs cpp\">&gt;&gt; SyntaxError: EOL <span class=\"hljs-keyword\">while</span> scanning <span class=\"hljs-built_in\">string</span> literal\n</code></pre>\n<p>为了方便阅读，书中只显示错误信息的最后一行。</p>\n<p>Python 有两种错误：语法错误和异常。不属于语法错误的错误，就是<strong>异常</strong>（exception）。如果用 0 作为分母，则会出现“ZeroDivisionError”异常。</p>\n<p>与语法错误不同的是，异常并不一定是致命的（有办法让程序在即使出现异常时仍继续运行，这会在下一章学到）。出现异常时，Python 程序员会说“Python（或程序）报了一个异常”。下面是一个异常的示例：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jxpztcx</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 该代码有一个错误</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ZeroDivisionError:</span> division by zero\n</code></pre>\n<p>如果代码缩进不正确，程序会报“IdentationError”：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gtp6amr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 该代码有一个错误</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">8</span>          x =<span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">IndentationError:</span> unexpected indent\n</code></pre>\n<p>在学习编程的过程中，你会经常碰到语法错误和异常（包括书中没有讲到过的），但是出错的情况会逐渐减少。要记住，在碰到语法错误或异常时，先找到出现问题的那行代码，然后仔细检查并找到解决办法（如果没有头绪可以在网上搜索错误或异常提示信息）。</p>\n<h3 id=\"311\">3.11　算术操作符</h3>\n<p>之前，我们用 Python 做了简单的算术计算，如 4/2。这些示例中所使用到的符号被称为<strong>操作符</strong>（operator）。Python 将操作符分为多个类型，目前所见到的是<strong>算术操作符</strong>（arithmetic operator）。下面是 Python 中常用的一些算术操作符，见表 3-1。</p>\n<p>表3-1</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>含　　义</th>\n<th>示例</th>\n<th>运算结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>**</td>\n<td>指数运算</td>\n<td>2 ** 2</td>\n<td>4</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模运算</td>\n<td>14 % 4</td>\n<td>2</td>\n</tr>\n<tr>\n<td>//</td>\n<td>整除/地板除运算</td>\n<td>13 // 8</td>\n<td>1</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除法运算</td>\n<td>13 / 8</td>\n<td>1.625</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法运算</td>\n<td>8 * 2</td>\n<td>16</td>\n</tr>\n<tr>\n<td>−</td>\n<td>减法运算</td>\n<td>7 − 1</td>\n<td>6</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加法运算</td>\n<td>2 + 2</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<p>两个数相除时，会有一个商和一个余数。商就是除法运算的结果，余数即剩下的值。取模操作符返回的就是余数。例如，13 除以 5 的结果就是商 2 余 3，示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/qrdc195</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">// 5</span>\n\n&gt;&gt; <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zsqwukd</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">13</span> % <span class=\"hljs-number\">5</span>\n\n&gt;&gt; <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>对两个数取模时，如果没有余数（返回 0），则被取模的数字为另一个数字的倍数。如果有余数，则不是其倍数。因此取模运算被用于检验数字的奇偶性，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jerpe6u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 偶数</span>\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-number\">12</span> % <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gkudhcr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 奇数</span>\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-number\">11</span> % <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>有两个操作符用于除法运算。第一个是 // ，返回值为商：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/hh9fqzy</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">14</span> <span class=\"hljs-comment\">// 3</span>\n\n&gt; <span class=\"hljs-number\">4</span>\n</code></pre>\n<p>第二个是 / ，返回值为两个数相除的浮点数结果：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zlkjjdp</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">14</span> / <span class=\"hljs-number\">3</span>\n\n&gt; <span class=\"hljs-number\">4.666666666666667</span>\n</code></pre>\n<p>还可以使用指数运算符求幂：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h8vuwd4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">2</span> ** <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n</code></pre>\n<p>操作符两侧的值（以上示例中就是数字）被称为<strong>操作数</strong>（operand）。两个操作数和一个操作符共同构成一个<strong>表达式</strong>（expression）。程序运行时，Python 会对每个表达式求值，并返回一个值作为结果。如果在交互式 shell 中输入表达式 2 + 2，则返回结果 4。</p>\n<p><strong>运算顺序</strong>（order of operation），指的是数学计算中对表达式求值的一套规则。可使用 PEMDAS 方法，帮助记忆数学公式的运算顺序：括号（parentheses）、指数（exponents）、乘法（multiplication）、除法（division）、加法（addition）和减法（subtraction）。括号的优先级大于指数符号，后者又优先于乘法和除法，最后才是加法和减法。如果操作符的优先级相同，如 15 / 3 * 2，则按照从左到右的顺序求值。上述表达式中将 15 先除以 3，然后再乘以 2。Python 对数学表达式求值时，遵循的是同一套运算顺序：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hgjyj7o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsq7rcz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  (<span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>) * <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">8</span>\n</code></pre>\n<p>在第一个示例中，2 * 2 先进行求值，因为乘法的优先级大于加法。</p>\n<p>在第二个示例中，(2 + 2) 先求值，因为 Python 总是先对括号内的表达式求值。</p>\n<h3 id=\"312\">3.12　比较操作符</h3>\n<p><strong>比较操作符</strong>（comparison operator）是 Python 中的另一种操作符。与算术操作符类似，比较操作符可用于表达式任意一侧的操作数；不同的是，带有比较操作符的表达式最后求值的结果不是 <code>True</code> 就是 <code>False</code>。详情见表 3-2。</p>\n<p>表 3-2　　</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>含　　义</th>\n<th>示　　例</th>\n<th>运算结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>100 &gt; 10</td>\n<td>True</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>100 &lt; 10</td>\n<td>False</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于或等于</td>\n<td>2 &gt;= 2</td>\n<td>True</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于或等于</td>\n<td>1 &lt;= 4</td>\n<td>True</td>\n</tr>\n<tr>\n<td>==</td>\n<td>等于</td>\n<td>6 == 9</td>\n<td>False</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>3 != 2</td>\n<td>True</td>\n</tr>\n</tbody>\n</table>\n<p>在含有 &gt; 操作符的表达式中，如果左侧的数字大于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jm7cxzp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">100</span> &gt; <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n</code></pre>\n<p>在含有 &lt; 操作符的表达式中，如果左侧的数字小于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsdhr8q</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">100</span> &lt; <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n</code></pre>\n<p>在含有 &gt;= 操作符的表达式中，如果左侧的大于或等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jy2oefs</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">2</span> &gt;= <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n</code></pre>\n<p>在含有 &lt;= 操作符的表达式中，如果左侧的数字小于或等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jk599re</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> &gt;= <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n</code></pre>\n<p>在含有 == 操作符的表达式中，如果左侧的数字等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2tsz9u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j5mr2q2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n</code></pre>\n<p>在含有 != 操作符的表达式中，如果左侧的数字不等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsw3zoe</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> != <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z7pffk3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n</code></pre>\n<p>此前，如果使用 = 将数字赋值给了变量，如 x = 100。可能会将其理解为“x 等于 100”，但这是错误的。前面看到，= 是用来给变量赋值的，而不是检查相等性的操作符。因此 x = 100 应理解为“x 的值为 100”。比较操作符 == 是用于检查两侧是否相等的，因此如果看到 x == 100，含义即为“x 等于 100”。</p>\n<h3 id=\"313\">3.13　逻辑操作符</h3>\n<p><strong>逻辑操作符</strong>（logical operator）也是 Python 中的一类操作符。与比较操作符类似，逻辑操作符的求值结果也是 <code>True</code> 或 <code>False</code>。详情见表 3-3。</p>\n<p>表 3-3　　</p>\n<table>\n<thead>\n<tr>\n<th>操　作　符</th>\n<th>含　　义</th>\n<th>示　　例</th>\n<th>运算结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>and</td>\n<td>与</td>\n<td>True and True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>or</td>\n<td>或</td>\n<td>True or False</td>\n<td>True</td>\n</tr>\n<tr>\n<td>not</td>\n<td>非</td>\n<td>not True</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n<p>Python 关键字 and 可以连接两个表达式，如果二者均求值为 <code>True</code>，则返回 <code>True</code>。如果任意一个的值为 <code>False</code>，即返回 <code>False</code>：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zdqghb2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zkp2jzy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/honkev6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zjrxxrc</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n<p>可以在一个语句中多次使用 <code>and</code> 关键字：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zpvk56u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">10</span> != <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> &lt; <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>关键字 <code>or</code> 可连接两个或多个表达式，如果任意一个表达式的值为 <code>True</code>，即返回 <code>True</code>：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hosuh7c</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zj6q8h9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8ngufo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z728zxz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n<p>类似地，也可以在一个语句中多次使用 <code>or</code> 关键字：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ja9mech</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">3</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>该表达式的值为 <code>True</code>，因为 1 == 1 的值为 <code>True</code>，即使表达式其余的部分求值为 <code>False</code>，最终的值仍为 <code>True</code>。</p>\n<p>将关键字 <code>not</code> 放置在表达式的前面，将改变表达式的求值结果，逆转为原本结果的对立值。如果表达式原本的求值结果为 <code>True</code>，则加上 <code>not</code> 之后结果会变为 <code>False</code>：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h45eq6v</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">not</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsqj6og</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">not</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<h3 id=\"314\">3.14　条件语句</h3>\n<p>关键字 <code>if</code>、<code>elif</code> 和 <code>else</code> 用于<strong>条件语句</strong>（conditional statement）。条件语句是一种<strong>控制结构</strong>（control structure）：通过分析变量的值从而做出对应决定的代码块。条件语句是可根据条件执行额外代码的代码。为了方便理解，仔细看以下这个伪代码（pseudocode）示例（伪代码是用于解释说明示例代码的标记方法）：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># 不要执行</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">If</span> (expression) Then\n<span class=\"hljs-number\">5</span>              (code_area1)\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-keyword\">Else</span>\n<span class=\"hljs-number\">7</span>              (code_area2)\n</code></pre>\n<p>上述伪代码显示，可以定义两个条件语句。如果第一个条件语句中定义的表达式为 <code>True</code>，则执行 <code>code_area1</code>；否则执行 <code>code_area2</code>。示例中的第一部分被称为 <code>if</code> 语句，第二部分为 <code>else</code> 语句。两者共同组成一个 <code>if-else</code> 语句：程序员用来表达“如果出现这种情况，则这样做，否则那样做”的方法。下面是 Python 中的 <code>if-else</code> 语句示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/htvy6g3</span>\n2\n3\n4  home = <span class=\"hljs-string\">\"America\"</span>\n5  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"America\"</span>:\n6      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n7  <strong><span class=\"hljs-keyword\">else</span></strong>:\n8      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, America!</code></pre>\n<p>第 5 行和第 6 行共同组成了 <code>if</code> 语句。一个 <code>if</code> 语句中，包括一行以 <code>if</code> 关键字开头的代码行，<code>if</code> 关键字之后是一个表达式，还有冒号、缩进，以及一行或多行如果表达式为 <code>True</code> 的情况下将执行的代码。第 7 行和第 8 行共同组成了 <code>else</code> 语句。一个 <code>else</code> 语句的开头是 <code>else</code> 关键字，然后是冒号、缩进，以及一行或多行如果 <code>if</code> 语句中表达式为 <code>False</code> 时将执行的代码。</p>\n<p>二者共同组成了一个 <code>if-else</code> 语句。本例的打印输出结果为 <code>Hello, America!</code>，因为 <code>if</code> 语句中的表达式结果为 <code>True</code>。如果将变量 <code>home</code> 的值修改为 <code>Canada</code>，则 <code>if</code> 语句中的表达式结果为 <code>False</code>，将会执行 <code>else</code> 语句中的代码，程序会打印出 <code>Hello, World!</code>。</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/jytyg5x</span>\n2\n3\n4  home = <span class=\"hljs-string\">\"Canada\"</span>\n5  <strong><span class=\"hljs-keyword\">if</span></strong> home ==<strong> </strong><span class=\"hljs-string\">\"America\"</span>:\n6      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n7  <strong><span class=\"hljs-keyword\">else</span></strong>:\n8      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, World!</code></pre>\n<p>可以单独使用一个 <code>if</code> 语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jyg7dd2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  home = <span class=\"hljs-string\">\"America\"</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"America\"</span>:\n<span class=\"hljs-number\">6</span>      print(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, America!</code></pre>\n<p>也可以连续使用多个 <code>if</code> 语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z24ckye</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">05</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x == <span class=\"hljs-number\">2</span>:\n<span class=\"hljs-number\">06</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"The number is 2.\"</span>)\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">08</span>      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The number is even.\"</span>)\n<span class=\"hljs-number\">09</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"The number is odd.\"</span>)\n\n&gt;&gt; The number <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">2.</span>\n&gt;&gt; The number <span class=\"hljs-keyword\">is</span> even.</code></pre>\n<p>每个 <code>if</code> 语句只有在其表达式求值为 <code>True</code> 时，才会执行所有的代码。在本例中，前两个表达式的求值结果为 <code>True</code>，因此各自的代码都执行了，但是第 3 个表达式的结果为 <code>False</code>，所以没有执行。</p>\n<p>如果愿意，甚至还可以在 <code>if</code> 语句中再加入一个 <code>if</code> 语句（通常称之为嵌套）：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrodgne</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">05</span>  y = <span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  <strong><span class=\"hljs-keyword\">if</span></strong> x == <span class=\"hljs-number\">10</span>:\n09      <strong><span class=\"hljs-keyword\">if</span></strong> y == <span class=\"hljs-number\">11</span>:\n<span class=\"hljs-number\">10</span>          print(x + y)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">21</span></code></pre>\n<p>在本例中，只有在两个 <code>if</code> 语句的结果均为 <code>True</code> 时，才会打印 <code>x + y</code>。<code>else</code> 语句无法被单独使用，只能用在 <code>if-else</code> 语句的最后一部分。</p>\n<p>也可以使用 <code>elif</code> 关键字创建 <code>elif</code> 语句。<code>elif</code> 表示另外如果，该语句可无限添加到 <code>if-else</code> 语句中，使其支持更多的决策。</p>\n<p>如果一个 <code>if-else</code> 语句中包含有 <code>elif</code> 语句，则首先判断 <code>if</code> 语句。如果该语句中的表达式为 <code>True</code>，则只执行其中的代码。但是，如果其值为 <code>False</code>，每个之后的 <code>elif</code> 语句都将进行求值。只要有一个 <code>elif</code> 语句中的表达式结果为 <code>True</code>，则执行其中的代码并退出。如果没有任何一个 <code>elif</code> 语句的结果为 <code>True</code>，则执行 <code>else</code> 语句中的代码。下面是一个包含有 <code>elif</code> 语句的 <code>if-else</code> 语句示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/jpr265j</span>\n02\n03\n04  home = <span class=\"hljs-string\">\"Thailand\"</span>\n05  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"Japan\"</span>:\n06      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, Japan!\"</span>)\n07  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Thailand\"</span>:\n08      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, Thailand!\"</span>)\n09  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"India\"</span>:\n10      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, India!\"</span>)\n11  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"China\"</span>:\n12      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, China!\"</span>)\n13  <strong><span class=\"hljs-keyword\">else</span></strong>:\n14      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, Thailand!</code></pre>\n<p>下面这个示例中，所有的 <code>elif</code> 语句求值结果均不为 <code>True</code>，最后执行的是 <code>else</code> 语句中的代码。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/zdvuuhs</span>\n02\n03  home = <span class=\"hljs-string\">\"Mars\"</span>\n04  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"America\"</span>:\n05      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n06  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Canada\"</span>:\n07      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, Canada!\"</span>)\n08  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Thailand\"</span>:\n09      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, Thailand!\"</span>)\n10  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Mexico\"</span>:\n11      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, Mexico!\"</span>)\n12  <strong><span class=\"hljs-keyword\">else</span></strong>:\n13      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, World! </code></pre>\n<p>最后，可以连续使用多个 <code>if</code> 语句和 <code>elif</code> 语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/hzyxgf4</span>\n02\n03\n04  x = 100\n05  <strong><span class=\"hljs-keyword\">if</span></strong> x == 10:\n06      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"10!\"</span>)\n07  <strong><span class=\"hljs-keyword\">elif</span></strong> x == 20:\n08      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"20!\"</span>)\n09  <strong><span class=\"hljs-keyword\">else</span></strong>:\n10      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"I don't know!\"</span>)\n11\n12\n13  <strong><span class=\"hljs-keyword\">if</span></strong> x == 100:\n14      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is 100!\"</span>)\n15\n16\n17  <strong><span class=\"hljs-keyword\">if</span></strong> x % 2 == 0:\n18      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"x is even!\"</span>)\n19<strong>  <span class=\"hljs-keyword\">else</span></strong>:\n20      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is odd!\"</span>)\n\n&gt;&gt; I don<span class=\"hljs-string\">'t know!\n&gt;&gt; x is 100!\n&gt;&gt; x is even!</span></code></pre>\n<h3 id=\"315\">3.15　语句</h3>\n<p><strong>语句</strong>（statement）这个术语可用来描述 Python 语言的多种构成部分。可以将一个 Python 语句视作一个命令或计算。本节将详细介绍语句的语法。如果感觉部分内容初次学起来很难懂，也不用太担心，随着练习 Python 的时间变长，你就会慢慢理解。</p>\n<p>Python 中有两类语句：<strong>简单语句</strong>（simple statement）和<strong>复合语句</strong>（compound statement）。简单语句一般就是一行代码，而复合语句通常包括多行代码。下面是一些简单语句的示例：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jrowero</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2y549y</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n</code></pre>\n<p><code>if</code> 语句和 <code>if-else</code> 语句，以及本章编写的第一个程序（打印 <code>Hello, World!</code> 100 次）都是复合语句。</p>\n<p>复合语句由一个或多个<strong>从句</strong>（clause）组成。从句包括两行或多行代码：<strong>代码头</strong>（header）及紧随其后的<strong>配套代码</strong>（suite）。代码头指的是从句中包含关键字的那行代码，之后是一个冒号和一行或多行带缩进的代码。缩进之后，是一个或多个配套代码。配套代码就是从句中一行普通的代码。代码头控制配套代码的执行。打印 <code>Hello, World!</code> 100 次的程序，就是由一个复合语句组成。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zfz3eel</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">4</span>      print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n&gt;&gt; Hello, World!\n&gt;&gt; Hello, World!\n…</code></pre>\n<p>程序的第一行是代码头，包括关键字 <code>for</code>，之后是冒号。缩进之后是配套代码 <code>print(\"Hello, World!\")</code>。在上述示例中，代码头通过配套代码打印 <code>Hello, World!</code> 100 次，这是一个循环，将在第 7 章详细介绍。上述代码只有一个从句。</p>\n<p>复合语句可以由多个从句构成，你前面看到的 <code>if-else</code> 语句就是复合语句。<code>if</code> 语句之后如果带有一个 <code>else</code> 语句，就构成了一个由多个从句组成的复合语句。在包含多个从句的复合语句中，代码头从句共同控制代码执行。对于 <code>if-else</code> 语句，当 <code>if</code> 语句的值为 <code>True</code> 时，则执行 <code>if</code> 语句的配套代码，<code>else</code> 语句的配套代码不执行；当 <code>if</code> 语句的值为 <code>False</code> 时，则不执行 <code>if</code> 语句的配套代码，转而执行 <code>else</code> 语句的配套代码。上一节中的最后一个示例包含了 3 个复合语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/hpwkdo4</span>\n02\n03\n04  x = 100\n05  <strong><span class=\"hljs-keyword\">if</span></strong> x == 10:\n06      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"10!\"</span>)\n07  <strong><span class=\"hljs-keyword\">elif</span></strong> x == 20:\n08      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"20!\"</span>)\n09  <strong><span class=\"hljs-keyword\">else</span></strong>:\n10      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"I don't know!\"</span>)\n11\n12\n13  <strong><span class=\"hljs-keyword\">if</span></strong> x == 100:\n14      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"x is 100!\"</span>)\n15\n16\n17  <strong><span class=\"hljs-keyword\">if</span></strong> x % 2 == 0:\n18      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"x is even!\"</span>)\n19  <strong><span class=\"hljs-keyword\">else</span></strong>:\n20      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is odd!\"</span>)\n\n&gt;&gt; I don<span class=\"hljs-string\">'t know!\n&gt;&gt; x is 100!\n&gt;&gt; x is even!</span></code></pre>\n<p>第一个复合语句中有 3 个从句，第二个里有一个从句，最后一个则有两个从句。</p>\n<p>关于语句还有一点要注意，语句之间是可以有空格的，这不会影响代码的执行。空格有时被用来提高代码的可读性。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zlgcwoc</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  print(<span class=\"hljs-string\">\"Michael\"</span>)\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  print(<span class=\"hljs-string\">\"Jordan\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Michael\n<span class=\"hljs-meta\">&gt;&gt;</span> Jordan\n</code></pre>\n<h3 id=\"316\">3.16　术语表</h3>\n<p><strong>注释</strong>：用英文或其他自然语言写的一行（或一部分）代码，行首均有一个特殊标志告知编程语言忽略这行代码。</p>\n<p><strong>关键字</strong>：编程语言中具有特殊意义的词。可在 http://theselftaughtprogrammer.io/keywords 网页中查看所有 Python 的关键字。</p>\n<p><strong>数据类型</strong>：数据所属的类别。</p>\n<p><strong>对象</strong>：Python 中具有 3 个属性的数据值——唯一标识、数据类型和值。</p>\n<p><strong>Str</strong>：字符串的数据类型。</p>\n<p><strong>字符</strong>：a 或 l 等单个符号。</p>\n<p><strong>Int</strong>：整数的数据类型。</p>\n<p><strong>整型数据</strong>：数据类型为 int 的对象，其值为一个整数。</p>\n<p><strong>Float</strong>：小数的数据类型。</p>\n<p><strong>浮点数</strong>：数据类型为 <code>float</code> 的对象，其值为一个小数。</p>\n<p><strong>Bool</strong>：布尔对象的数据类型。</p>\n<p><strong>布尔值</strong>：数据类型为 <code>bool</code> 的对象，其值为 <code>True</code> 或 <code>False</code>。</p>\n<p><strong>NoneType</strong>：<code>None</code> 对象的数据类型。</p>\n<p><strong>None</strong>：数据类型为 <code>NoneType</code> 的对象，其值永远为 <code>None</code>。</p>\n<p><strong>常量</strong>：不会改变的值。</p>\n<p><strong>变量</strong>：使用赋值操作符赋予了一个值的名称。</p>\n<p><strong>赋值操作符</strong>：Python 中的 <code>=</code> 符号。</p>\n<p><strong>增加</strong>：增加一个变量的值。</p>\n<p><strong>减少</strong>：减少一个变量的值。</p>\n<p><strong>语法</strong>：规范一门语言中句子结构，尤其是字词顺序的一整套规则及流程。</p>\n<p><strong>语法错误</strong>：违反编程语言的语法，所导致的致命编程错误。</p>\n<p><strong>异常</strong>：非致命的编程错误。</p>\n<p><strong>操作符</strong>：在表达式中与操作符一起使用的符号。</p>\n<p><strong>算术操作符</strong>：数学表达式中使用的一类操作符。</p>\n<p><strong>操作数</strong>：操作符两侧的值。</p>\n<p><strong>表达式</strong>：操作符及两个操作数构成的代码。</p>\n<p><strong>运算顺序</strong>：数学计算中用来对表达式求值的一组规则。</p>\n<p><strong>比较操作符</strong>：表达式中用到的一类操作符，求值结果为 <code>True</code> 或 <code>False</code>。</p>\n<p><strong>逻辑操作符</strong>：对两个表达式求值的一类操作符，求值结果为 <code>True</code> 或 <code>False</code>。</p>\n<p><strong>条件语句</strong>：根据条件执行不同代码的代码。</p>\n<p><strong>控制结构</strong>：通过分析变量的值，来决定代码如何执行的代码块。</p>\n<p><strong>伪代码</strong>：用来演示逻辑的标记方法，与代码类似。</p>\n<p><strong>if-else 语句</strong>：程序员用来表达“如果出现这种情况，则这样做，否则那样做”的方法。</p>\n<p><strong>if 语句</strong>：<code>if-else</code> 语句的第一部分。</p>\n<p><strong>else 语句</strong>：<code>if-else</code> 语句的第二部分。</p>\n<p><strong>语句</strong>：一个命令或计算。</p>\n<p><strong>简单语句</strong>：可用一行代码表述的语句。</p>\n<p><strong>复合语句</strong>：通常包括多行代码的语句。</p>\n<p><strong>从句</strong>：复合语句的组成部分；一个从句由两行或多行代码构成，包括代码头及配套代码。</p>\n<p><strong>代码头</strong>：从句中包含关键字的那行代码，之后是一个冒号和一行或多行带缩进的代码。</p>\n<p><strong>配套代码</strong>：从句中由代码头控制的代码。</p>\n<h3 id=\"317\">3.17　挑战练习</h3>\n<p>1．请打印 3 个不同的字符串。</p>\n<p>2．编写程序：如果变量的值小于 10，打印一条消息；如果大于或等于 10，则打印不同的消息。</p>\n<p>3．编写程序：如果变量的值小于或等于 10，打印一条消息；如果大于 10 且小于或等于 25，则打印一条不同的消息；如果大于 25，则打印另一条不同的消息。</p>\n<p>4．编写一个将两个变量相除，并打印余数的程序。</p>\n<p>5．编写一个将两个变量相除，并打印商的程序。</p>\n<p>6．编写程序：为变量 age 赋予一个整数值，根据不同的数值打印不同的字符串说明。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","slug":"Python无师自通/3_python_coding_introduction","published":1,"date":"2019-05-30T06:05:02.909Z","updated":"2019-05-30T06:05:02.909Z","_id":"cjwd49mca0006sv726spht06p","comments":1,"layout":"post","photos":[],"link":"","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>编程概论</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#31\">3.1　示例</a></li>\n<li><a href=\"#32\">3.2　注释</a></li>\n<li><a href=\"#33\">3.3　打印</a></li>\n<li><a href=\"#34\">3.4　代码行</a></li>\n<li><a href=\"#35\">3.5　关键字</a></li>\n<li><a href=\"#36\">3.6　间距</a></li>\n<li><a href=\"#37\">3.7　数据类型</a></li>\n<li><a href=\"#38\">3.8　常量和变量</a></li>\n<li><a href=\"#39\">3.9　语法</a></li>\n<li><a href=\"#310\">3.10　错误与异常</a></li>\n<li><a href=\"#311\">3.11　算术操作符</a></li>\n<li><a href=\"#312\">3.12　比较操作符</a></li>\n<li><a href=\"#313\">3.13　逻辑操作符</a></li>\n<li><a href=\"#314\">3.14　条件语句</a></li>\n<li><a href=\"#315\">3.15　语句</a></li>\n<li><a href=\"#316\">3.16　术语表</a></li>\n<li><a href=\"#317\">3.17　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“这是我能想到的，唯一可以让我既当工程师又做艺术家的工作。它要求具备极其缜密的技术思维，因为你必须要完成精确的思考，这点我很喜欢。另一方面，它又鼓励你肆意挥洒自己的创意，只有你想不到没有你做不到的。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——安迪 · 赫兹菲尔德（Andy Hertzfeld）</span></p>\n</blockquote>\n<p>我们的第一个程序打印出了 <code>Hello, World!</code>。接下来打印 100 次。在交互式 shell 中输入如下代码（print 需要缩进 4 个空格符）：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/h79ob7s</span>\n2\n3\n4  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(100):\n5      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)</code></pre>\n<p>交互式 shell 应该会打印 <code>Hello, World!</code> 100 次。即使通常没有这样做的需要，但可以从这个例子中看出编程的强大。你能想到任何其他可以如此简单地做 100 遍的事情吗？我想不到。这就是编程的厉害之处。</p>\n<h3 id=\"31\">3.1　示例</h3>\n<p>从现在开始，代码示例会以如下形式出现：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4qntgk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">5</span>      print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n&gt;&gt; Hello, World!\n&gt;&gt; Hello, World!\n…</code></pre>\n<p>打开 http://tinyurl.com/h4qntqk 这个链接，就可以看到包含有示例代码的网页，这样如果无法让代码运行，你可以轻松地复制代码，并粘贴到 IDLE 的文本编辑器中。<code>&gt;&gt;</code> 的后面则是交互式 shell 的输出。全书的每一个编程示例中都会看到 <code>&gt;&gt;</code>，这代表了程序的输出结果（会在交互式 shell 中打印出来）。“...”表示“等等”。</p>\n<p>如果示例后没有 <code>&gt;&gt;</code>，就表示该程序没有输出，或者只是在解释概念，输出并不太重要。</p>\n<p>字体为 Courier New 的部分，都是某种形式的代码、代码输出或编程术语。例如，上个例子中提到的词 <code>for</code>，它就会是 Courier New 字体。</p>\n<p>Courier New 是一个固定宽度（不等比）的字体，常用来显示编程文本。每个字符的宽度都一致，因此代码对齐后可以很容易地发现缩进和其他特征。</p>\n<p>可以用交互式 shell 或 <code>.py</code> 文件来运行示例代码。但是要注意的是，正如之前提到的，交互式 shell 中的输出与文件运行的输出可能略有不同，因此如果没得到完全一致的输出，原因就在于此。如果有示例要打印输出，但是却没有 <code>print</code> 字样，表示应该直接在交互式 shell 中输入代码。如果示例中有 <code>print</code> 字样，则说明应该从 <code>.py</code> 文件运行代码。</p>\n<h3 id=\"32\">3.2　注释</h3>\n<p><strong>注释</strong>（comment）是用英文或其他自然语言写的一行（或一部分）代码，行首均有一个特殊标志告知编程语言忽略这行代码。Python 用井号（#）来创建注释。</p>\n<p>注释的目的是解释代码的功能。程序员通过注释，使得代码更易于阅读。在注释中，可以写下任何内容，只要保持为一行即可，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hut6nwu</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-comment\"># 这是一行注释</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>只有在代码中执行特别操作，或者代码不清晰易懂的情况下，才需要写注释。尽量少写注释——不要每行代码都写注释，有特殊情况才需要。下面是一个注释多余的例子：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/jpzlwqq</span>\n2\n3\n4  <span class=\"hljs-comment\"># 打印 Hello, World!</span>\n5  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n</code></pre>\n<p>注释之所以多余，是因为这行代码的功能已经非常明确。下面是一个注释合理的例子：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/z52c8z8</span></span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-keyword\">import</span></strong> math\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  # 对角线的长度\n<span class=\"hljs-number\">08</span>  l = <span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">09</span>  w = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">10</span>  d = math.<span class=\"hljs-built_in\">sqrt</span>(l**<span class=\"hljs-number\">2</span>+ w**<span class=\"hljs-number\">2</span>)</code></pre>\n<p>即使你完全理解了这段代码，也可能并不知道如何计算长方形的对角线长度，因此这里的注释就是有用的。</p>\n<h3 id=\"33\">3.3　打印</h3>\n<p>程序不止可以打印 <code>Hello, World!</code>，它可以打印任何内容，只要记得加上双引号。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zh5g2a3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Python\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Python\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hhwqva2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hola!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hola!\n</code></pre>\n<h3 id=\"34\">3.4　代码行</h3>\n<p>Python 程序是由一行一行的代码组成的。看下面这个程序：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/jq2w5ro</span>\n2\n3\n4  <span class=\"hljs-comment\"># 第一行</span>\n5  <span class=\"hljs-comment\"># 第二行</span>\n6  <span class=\"hljs-comment\"># 第三行</span>\n</code></pre>\n<p>程序共有 3 行代码。我们通常用代码所在的行数区别代码。在 IDLE 中，可以打开“编辑”菜单，选择“前往行”按钮，即可跳转至程序的指定行。在交互式 shell 中，一次只能输入一行代码，无法复制粘贴多行代码。</p>\n<p>有时一段代码比较长，超过了一行，可以用三引号、圆括号、方括号或者大括号扩展至新一行，示例如下：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcdx3yo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"\"\"This is a really really\n5        really really long line of\n6        code.\"\"\"</span>)\n</code></pre>\n<p>另外，还可以使用反斜杠 \\ 对代码进行换行：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hjcf2sa</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">print</span>\\\n<span class=\"hljs-number\">5</span>  (<span class=\"hljs-string\">\"\"\"This is a really really\n6   really long line of code.\"\"\"</span>)\n</code></pre>\n<p>上述两个例子的输出结果是一样的。反斜杠可以让我们将 <code>(\"\"\"This is a really really really long line of code.\"\"\")</code> 和 <code>print</code> 放在不同的行，这种情况一般是不允许的。</p>\n<h3 id=\"35\">3.5　关键字</h3>\n<p>Python 等编程语言中有一些具备特殊意义的字，即<strong>关键字</strong>（keyword）。前面见过的 <code>for</code> 就是一个关键字，用来多次执行代码。本章中还会学习更多的关键字。</p>\n<h3 id=\"36\">3.6　间距</h3>\n<p>我们再来回顾一下那个打印 <code>Hello, World!</code> 100 次的程序：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/glp9xq6</span>\n2\n3\n4  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(100):\n5      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)</code></pre>\n<p>前面已经提到，<code>print</code> 缩进了 4 个空格符。稍后会解释原因，缩进可以告诉 Python 解释器代码块的开始与结束。同时要注意，在本书示例中看到的缩进距离，都是 4 个空格符。如果代码间距不合理，程序将无法执行。</p>\n<p>其他编程语言没有类似的缩进要求；它们使用关键字或花括号来表示代码开始和结束。以下是用 JavaScript 编程语言编写的同一个程序：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hwa2zae</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\"># 这是一个 JavaScript 程序</span>\n<span class=\"hljs-number\">05</span>  <span class=\"hljs-comment\"># 不过没法执行</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-keyword\">for</span></strong> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) {\n<span class=\"hljs-number\">09</span>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello, World!\"</span>);\n<span class=\"hljs-number\">10</span>  }</code></pre>\n<p>Python 的支持者坚信使用必要的缩进可以让 Python 比其他语言更易读易写。正如上例所示，即使编程语言不强制使用空格，程序员为了让代码更便于阅读，也会倾向于使用空格来分隔代码。</p>\n<h3 id=\"37\">3.7　数据类型</h3>\n<p>Python 将数据划分成不同的类别，即<strong>数据类型</strong>（data type）。在 Python 中，每一个数据值，如 <code>2</code> 或 <code>\"Hello, World!\"</code>，被称为<strong>对象</strong>（object）。本书第二部分会详细介绍数据类型，现在可以把对象看作拥有 3 个属性的数据值：唯一标识（identity）、数据类型和值。对象的唯一标识，指的是其在计算机内存中的地址，该地址不会变化。对象的数据类型是对象所属的数据类别，这决定了对象的属性，也不会变化。对象的值是其表示的数据，例如数字 <code>2</code> 的值即为 2。</p>\n<p><code>\"Hello, World!\"</code> 这个对象的数据类型为<strong>字符串</strong>（str，string 的缩写），值为 <code>\"Hello, World!\"</code>。如果提及数据类型为 <code>str</code> 的对象，可以称其为字符串。字符串是由引号包括的一个或多个字符组成的序列。<strong>字符</strong>（character）是类似 <code>a</code> 或 <code>l</code> 这样的单个符号。可以使用单引号或双引号来表示字符串，但是前后的引号必须保持一致，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hh5kjwp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Hello, World!\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Hello, World!'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/heaxhsh</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">'Hello, World!'</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Hello, World!'</span>\n</code></pre>\n<p>字符串可用来表示文本，且有自己独特的属性。</p>\n<p>之前章节中用来计算的数字，也是对象，但不是字符串。整数（1，2，3，4 等）的数据类型为<strong>整型数据</strong>（<code>int</code>，全称为 integer）。与字符串一样，整型数据也有着独特的属性。例如，可以将两个整数相乘，但是不能相乘两个字符串。</p>\n<p>小数（带小数点的数字）的数据类型为 <code>float</code>。2.1、8.2 和 9.9999 都是数据类型为 <code>float</code> 的对象，我们称之为<strong>浮点数</strong>（floating-point number）。与其他所有数据类型一样，浮点数也有自己独有的属性，且一定程度上与整型数据类似。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/guoc4gy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2.2</span> + <span class=\"hljs-number\">2.2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4.4</span>\n</code></pre>\n<p>数据类型为 <strong>bool</strong> 的对象被称为<strong>布尔值</strong>（boolean），仅有 <code>True</code> 和 <code>False</code> 两个值。</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jyllj2k</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">True</span>\n\n&gt;&gt; <span class=\"hljs-keyword\">True</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jzgsxz4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">False</span>\n\n&gt;&gt; <span class=\"hljs-keyword\">False</span>\n</code></pre>\n<p>数据类型为 <strong>NoneType</strong> 的对象，其值永远为 <code>None</code>，用来表示数据缺失。</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/h8oqo5v</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  None\n</code></pre>\n<p>本章后续会介绍如何使用不同的数据类型。</p>\n<h3 id=\"38\">3.8　常量和变量</h3>\n<p>你可以把 Python 当成计算器来算术，做加、减、乘、除、幂等运算。在交互式 shell 中输入以下所有示例：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zs65dp8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gs9nwrw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hasegvj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">4</span> / <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2.0</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z8ok4q3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n</code></pre>\n<p><strong>常量</strong>（constant）是一个永远不会改变的值。上面示例中的每一个数字，都是常量；数字 2 永远表示的值为 2。<strong>变量</strong>（variable）则相反，指的是会改变的值。变量由一个或多个字符组成的名称构成，并使用<strong>赋值符</strong>（assignment operator）等号赋予了这个名称一个值。</p>\n<p>有些编程语言要求程序员编写变量“声明”，明确说明变量的数据类型。例如，在 C 语言中可以这样创建变量：</p>\n<pre><code class=\"hljs cs\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># 不用执行</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <span class=\"hljs-keyword\">int</span> a;\n<span class=\"hljs-number\">8</span>  a = <span class=\"hljs-number\">144</span>;\n</code></pre>\n<p>Python 的做法更简单；可以直接用赋值符，将某个值赋给变量，即可创建：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hw64mrr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  b = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">5</span>  b\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>下面介绍如何改变变量的值：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hw97que</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">5</span>  x\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  x = <span class=\"hljs-number\">200</span>\n<span class=\"hljs-number\">9</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">200</span>\n</code></pre>\n<p>还可以使用两个变量进行算术运算：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z8hv5j5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  y = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">6</span>  z = x + y\n<span class=\"hljs-number\">7</span>  z\n<span class=\"hljs-number\">8</span>  a = x - y\n<span class=\"hljs-number\">9</span>  a\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">20</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>编程时经常需要<strong>增加</strong>（increment）或<strong>减小</strong>（decrement）某个变量的值。考虑到这个操作非常普遍，Python 提供了特殊语法进行增减变量的值。如需增加变量的值，可将该变量赋予给自身，然后在等号的另一侧将变量与希望增加的值相加：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zvzf786</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x = x + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">11</span>\n</code></pre>\n<p>如需减小变量的值，可以执行同样的操作，唯一的区别是要减去所希望的值：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gmuzdr9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x = x - <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n</code></pre>\n<p>这些示例都是完全有效的，不过还有一种更简便的方法，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zdva5wq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">11</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jqw4m5r</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x -= <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n</code></pre>\n<p>变量不仅仅用于保存整型数的值，还可以表示任何数据类型，示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/jsygqcy</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  hi = <span class=\"hljs-string\">\"Hello, World!\"</span>\n\n<span class=\"hljs-number\">1</span>  # http:<span class=\"hljs-comment\">//tinyurl.com/h47ty49</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_float = <span class=\"hljs-number\">2.2</span>\n\n<span class=\"hljs-number\">1</span>  # http:<span class=\"hljs-comment\">//tinyurl.com/hx9xluq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_boolean = True\n</code></pre>\n<p>只要遵守以下 4 条原则，可以随意命名变量。</p>\n<p>1．变量名不能包含空格符。如果想在变量名中使用两个单子，可以在中间加入下划线，如 <code>my_variable = \"A string!\"</code>。</p>\n<p>2．变量名只能使用特定的字母、数字和下划线。</p>\n<p>3．变量名不能以数字开头。虽然可以使用下划线开头，但是这种命名方式有着特殊的意义，后面内容会提到。因此在此之前尽量避免这种情况。</p>\n<p>4．不能使用 Python 关键字作为变量名。可在网页 http://theselftaughtprogrammer.io/keywords 中查看所有关键字。</p>\n<h3 id=\"39\">3.9　语法</h3>\n<p><strong>语法（syntax）</strong>指的是规范一门语言中句子结构，尤其是字词顺序的一整套规则及流程。英语有语法，Python 也有。</p>\n<p>在 Python 中，字符串永远被包括在引号内。这就是 Python 的一个语法示例。下面是一个有效的 Python 程序：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/j7c2npf</span>\n2\n3\n4  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n</code></pre>\n<p>程序之所以有效，是因为遵守了 Python 的语法，在定义字符串时用引号包括了文本。如果只是在文本的一侧使用引号，就违背了 Python 的语法，代码将无法运行。</p>\n<h3 id=\"310\">3.10　错误与异常</h3>\n<p>如果在编写 Python 程序时无视其语法，那么在运行时将出现错误。Python 解释器将告知代码无法执行，并给出有关该错误的信息。如果只用一个引号定义字符串，看看会发生什么情况，示例如下：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/hp2plhs</span>\n2\n3\n4  <span class=\"hljs-comment\"># 该代码有一个错误</span>\n5\n6\n7  my_string = <span class=\"hljs-string\">\"Hello World.\n\n&gt;&gt; File \"</span>/Users/coryalthoff/PycharmProjects/se.py<span class=\"hljs-string\">\", line 1 my_string = 'd ^ SyntaxError: EOL while scanning string literal\n</span></code></pre>\n<p>这段信息表示程序中有一个语法错误。语法错误是致命的，将导致程序无法运行。如果强制执行，Python 会报错。错误信息会告诉你错误位于哪个文件，出现在哪一行，以及属于什么类型。尽管这个错误看上去很吓人，但却是很常见的。</p>\n<p>如果代码中有错误，首先要找到出错的那行代码，找到出错的地方。在本例中，你应该去找代码的第一行，观察一段时间后，会注意到里面只有一个引号。只要在字符串结尾再加上一个引号，即可解决该错误，然后可以重新运行。从这里开始，本书将这样表示错误输出：</p>\n<pre><code class=\"hljs cpp\">&gt;&gt; SyntaxError: EOL <span class=\"hljs-keyword\">while</span> scanning <span class=\"hljs-built_in\">string</span> literal\n</code></pre>\n<p>为了方便阅读，书中只显示错误信息的最后一行。</p>\n<p>Python 有两种错误：语法错误和异常。不属于语法错误的错误，就是<strong>异常</strong>（exception）。如果用 0 作为分母，则会出现“ZeroDivisionError”异常。</p>\n<p>与语法错误不同的是，异常并不一定是致命的（有办法让程序在即使出现异常时仍继续运行，这会在下一章学到）。出现异常时，Python 程序员会说“Python（或程序）报了一个异常”。下面是一个异常的示例：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jxpztcx</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 该代码有一个错误</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ZeroDivisionError:</span> division by zero\n</code></pre>\n<p>如果代码缩进不正确，程序会报“IdentationError”：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gtp6amr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 该代码有一个错误</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">8</span>          x =<span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">IndentationError:</span> unexpected indent\n</code></pre>\n<p>在学习编程的过程中，你会经常碰到语法错误和异常（包括书中没有讲到过的），但是出错的情况会逐渐减少。要记住，在碰到语法错误或异常时，先找到出现问题的那行代码，然后仔细检查并找到解决办法（如果没有头绪可以在网上搜索错误或异常提示信息）。</p>\n<h3 id=\"311\">3.11　算术操作符</h3>\n<p>之前，我们用 Python 做了简单的算术计算，如 4/2。这些示例中所使用到的符号被称为<strong>操作符</strong>（operator）。Python 将操作符分为多个类型，目前所见到的是<strong>算术操作符</strong>（arithmetic operator）。下面是 Python 中常用的一些算术操作符，见表 3-1。</p>\n<p>表3-1</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>含　　义</th>\n<th>示例</th>\n<th>运算结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>**</td>\n<td>指数运算</td>\n<td>2 ** 2</td>\n<td>4</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模运算</td>\n<td>14 % 4</td>\n<td>2</td>\n</tr>\n<tr>\n<td>//</td>\n<td>整除/地板除运算</td>\n<td>13 // 8</td>\n<td>1</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除法运算</td>\n<td>13 / 8</td>\n<td>1.625</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法运算</td>\n<td>8 * 2</td>\n<td>16</td>\n</tr>\n<tr>\n<td>−</td>\n<td>减法运算</td>\n<td>7 − 1</td>\n<td>6</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加法运算</td>\n<td>2 + 2</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<p>两个数相除时，会有一个商和一个余数。商就是除法运算的结果，余数即剩下的值。取模操作符返回的就是余数。例如，13 除以 5 的结果就是商 2 余 3，示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/qrdc195</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">// 5</span>\n\n&gt;&gt; <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zsqwukd</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">13</span> % <span class=\"hljs-number\">5</span>\n\n&gt;&gt; <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>对两个数取模时，如果没有余数（返回 0），则被取模的数字为另一个数字的倍数。如果有余数，则不是其倍数。因此取模运算被用于检验数字的奇偶性，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jerpe6u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 偶数</span>\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-number\">12</span> % <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gkudhcr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 奇数</span>\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-number\">11</span> % <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>有两个操作符用于除法运算。第一个是 // ，返回值为商：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/hh9fqzy</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">14</span> <span class=\"hljs-comment\">// 3</span>\n\n&gt; <span class=\"hljs-number\">4</span>\n</code></pre>\n<p>第二个是 / ，返回值为两个数相除的浮点数结果：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zlkjjdp</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">14</span> / <span class=\"hljs-number\">3</span>\n\n&gt; <span class=\"hljs-number\">4.666666666666667</span>\n</code></pre>\n<p>还可以使用指数运算符求幂：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h8vuwd4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">2</span> ** <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n</code></pre>\n<p>操作符两侧的值（以上示例中就是数字）被称为<strong>操作数</strong>（operand）。两个操作数和一个操作符共同构成一个<strong>表达式</strong>（expression）。程序运行时，Python 会对每个表达式求值，并返回一个值作为结果。如果在交互式 shell 中输入表达式 2 + 2，则返回结果 4。</p>\n<p><strong>运算顺序</strong>（order of operation），指的是数学计算中对表达式求值的一套规则。可使用 PEMDAS 方法，帮助记忆数学公式的运算顺序：括号（parentheses）、指数（exponents）、乘法（multiplication）、除法（division）、加法（addition）和减法（subtraction）。括号的优先级大于指数符号，后者又优先于乘法和除法，最后才是加法和减法。如果操作符的优先级相同，如 15 / 3 * 2，则按照从左到右的顺序求值。上述表达式中将 15 先除以 3，然后再乘以 2。Python 对数学表达式求值时，遵循的是同一套运算顺序：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hgjyj7o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsq7rcz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  (<span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>) * <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">8</span>\n</code></pre>\n<p>在第一个示例中，2 * 2 先进行求值，因为乘法的优先级大于加法。</p>\n<p>在第二个示例中，(2 + 2) 先求值，因为 Python 总是先对括号内的表达式求值。</p>\n<h3 id=\"312\">3.12　比较操作符</h3>\n<p><strong>比较操作符</strong>（comparison operator）是 Python 中的另一种操作符。与算术操作符类似，比较操作符可用于表达式任意一侧的操作数；不同的是，带有比较操作符的表达式最后求值的结果不是 <code>True</code> 就是 <code>False</code>。详情见表 3-2。</p>\n<p>表 3-2　　</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>含　　义</th>\n<th>示　　例</th>\n<th>运算结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>100 &gt; 10</td>\n<td>True</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>100 &lt; 10</td>\n<td>False</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于或等于</td>\n<td>2 &gt;= 2</td>\n<td>True</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于或等于</td>\n<td>1 &lt;= 4</td>\n<td>True</td>\n</tr>\n<tr>\n<td>==</td>\n<td>等于</td>\n<td>6 == 9</td>\n<td>False</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>3 != 2</td>\n<td>True</td>\n</tr>\n</tbody>\n</table>\n<p>在含有 &gt; 操作符的表达式中，如果左侧的数字大于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jm7cxzp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">100</span> &gt; <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n</code></pre>\n<p>在含有 &lt; 操作符的表达式中，如果左侧的数字小于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsdhr8q</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">100</span> &lt; <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n</code></pre>\n<p>在含有 &gt;= 操作符的表达式中，如果左侧的大于或等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jy2oefs</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">2</span> &gt;= <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n</code></pre>\n<p>在含有 &lt;= 操作符的表达式中，如果左侧的数字小于或等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jk599re</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> &gt;= <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n</code></pre>\n<p>在含有 == 操作符的表达式中，如果左侧的数字等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2tsz9u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j5mr2q2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n</code></pre>\n<p>在含有 != 操作符的表达式中，如果左侧的数字不等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsw3zoe</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> != <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z7pffk3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n</code></pre>\n<p>此前，如果使用 = 将数字赋值给了变量，如 x = 100。可能会将其理解为“x 等于 100”，但这是错误的。前面看到，= 是用来给变量赋值的，而不是检查相等性的操作符。因此 x = 100 应理解为“x 的值为 100”。比较操作符 == 是用于检查两侧是否相等的，因此如果看到 x == 100，含义即为“x 等于 100”。</p>\n<h3 id=\"313\">3.13　逻辑操作符</h3>\n<p><strong>逻辑操作符</strong>（logical operator）也是 Python 中的一类操作符。与比较操作符类似，逻辑操作符的求值结果也是 <code>True</code> 或 <code>False</code>。详情见表 3-3。</p>\n<p>表 3-3　　</p>\n<table>\n<thead>\n<tr>\n<th>操　作　符</th>\n<th>含　　义</th>\n<th>示　　例</th>\n<th>运算结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>and</td>\n<td>与</td>\n<td>True and True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>or</td>\n<td>或</td>\n<td>True or False</td>\n<td>True</td>\n</tr>\n<tr>\n<td>not</td>\n<td>非</td>\n<td>not True</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n<p>Python 关键字 and 可以连接两个表达式，如果二者均求值为 <code>True</code>，则返回 <code>True</code>。如果任意一个的值为 <code>False</code>，即返回 <code>False</code>：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zdqghb2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zkp2jzy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/honkev6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zjrxxrc</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n<p>可以在一个语句中多次使用 <code>and</code> 关键字：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zpvk56u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">10</span> != <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> &lt; <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>关键字 <code>or</code> 可连接两个或多个表达式，如果任意一个表达式的值为 <code>True</code>，即返回 <code>True</code>：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hosuh7c</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zj6q8h9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8ngufo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z728zxz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n<p>类似地，也可以在一个语句中多次使用 <code>or</code> 关键字：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ja9mech</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">3</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>该表达式的值为 <code>True</code>，因为 1 == 1 的值为 <code>True</code>，即使表达式其余的部分求值为 <code>False</code>，最终的值仍为 <code>True</code>。</p>\n<p>将关键字 <code>not</code> 放置在表达式的前面，将改变表达式的求值结果，逆转为原本结果的对立值。如果表达式原本的求值结果为 <code>True</code>，则加上 <code>not</code> 之后结果会变为 <code>False</code>：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h45eq6v</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">not</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsqj6og</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">not</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<h3 id=\"314\">3.14　条件语句</h3>\n<p>关键字 <code>if</code>、<code>elif</code> 和 <code>else</code> 用于<strong>条件语句</strong>（conditional statement）。条件语句是一种<strong>控制结构</strong>（control structure）：通过分析变量的值从而做出对应决定的代码块。条件语句是可根据条件执行额外代码的代码。为了方便理解，仔细看以下这个伪代码（pseudocode）示例（伪代码是用于解释说明示例代码的标记方法）：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># 不要执行</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">If</span> (expression) Then\n<span class=\"hljs-number\">5</span>              (code_area1)\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-keyword\">Else</span>\n<span class=\"hljs-number\">7</span>              (code_area2)\n</code></pre>\n<p>上述伪代码显示，可以定义两个条件语句。如果第一个条件语句中定义的表达式为 <code>True</code>，则执行 <code>code_area1</code>；否则执行 <code>code_area2</code>。示例中的第一部分被称为 <code>if</code> 语句，第二部分为 <code>else</code> 语句。两者共同组成一个 <code>if-else</code> 语句：程序员用来表达“如果出现这种情况，则这样做，否则那样做”的方法。下面是 Python 中的 <code>if-else</code> 语句示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/htvy6g3</span>\n2\n3\n4  home = <span class=\"hljs-string\">\"America\"</span>\n5  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"America\"</span>:\n6      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n7  <strong><span class=\"hljs-keyword\">else</span></strong>:\n8      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, America!</code></pre>\n<p>第 5 行和第 6 行共同组成了 <code>if</code> 语句。一个 <code>if</code> 语句中，包括一行以 <code>if</code> 关键字开头的代码行，<code>if</code> 关键字之后是一个表达式，还有冒号、缩进，以及一行或多行如果表达式为 <code>True</code> 的情况下将执行的代码。第 7 行和第 8 行共同组成了 <code>else</code> 语句。一个 <code>else</code> 语句的开头是 <code>else</code> 关键字，然后是冒号、缩进，以及一行或多行如果 <code>if</code> 语句中表达式为 <code>False</code> 时将执行的代码。</p>\n<p>二者共同组成了一个 <code>if-else</code> 语句。本例的打印输出结果为 <code>Hello, America!</code>，因为 <code>if</code> 语句中的表达式结果为 <code>True</code>。如果将变量 <code>home</code> 的值修改为 <code>Canada</code>，则 <code>if</code> 语句中的表达式结果为 <code>False</code>，将会执行 <code>else</code> 语句中的代码，程序会打印出 <code>Hello, World!</code>。</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/jytyg5x</span>\n2\n3\n4  home = <span class=\"hljs-string\">\"Canada\"</span>\n5  <strong><span class=\"hljs-keyword\">if</span></strong> home ==<strong> </strong><span class=\"hljs-string\">\"America\"</span>:\n6      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n7  <strong><span class=\"hljs-keyword\">else</span></strong>:\n8      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, World!</code></pre>\n<p>可以单独使用一个 <code>if</code> 语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jyg7dd2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  home = <span class=\"hljs-string\">\"America\"</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"America\"</span>:\n<span class=\"hljs-number\">6</span>      print(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, America!</code></pre>\n<p>也可以连续使用多个 <code>if</code> 语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z24ckye</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">05</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x == <span class=\"hljs-number\">2</span>:\n<span class=\"hljs-number\">06</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"The number is 2.\"</span>)\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">08</span>      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The number is even.\"</span>)\n<span class=\"hljs-number\">09</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"The number is odd.\"</span>)\n\n&gt;&gt; The number <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">2.</span>\n&gt;&gt; The number <span class=\"hljs-keyword\">is</span> even.</code></pre>\n<p>每个 <code>if</code> 语句只有在其表达式求值为 <code>True</code> 时，才会执行所有的代码。在本例中，前两个表达式的求值结果为 <code>True</code>，因此各自的代码都执行了，但是第 3 个表达式的结果为 <code>False</code>，所以没有执行。</p>\n<p>如果愿意，甚至还可以在 <code>if</code> 语句中再加入一个 <code>if</code> 语句（通常称之为嵌套）：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrodgne</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">05</span>  y = <span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  <strong><span class=\"hljs-keyword\">if</span></strong> x == <span class=\"hljs-number\">10</span>:\n09      <strong><span class=\"hljs-keyword\">if</span></strong> y == <span class=\"hljs-number\">11</span>:\n<span class=\"hljs-number\">10</span>          print(x + y)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">21</span></code></pre>\n<p>在本例中，只有在两个 <code>if</code> 语句的结果均为 <code>True</code> 时，才会打印 <code>x + y</code>。<code>else</code> 语句无法被单独使用，只能用在 <code>if-else</code> 语句的最后一部分。</p>\n<p>也可以使用 <code>elif</code> 关键字创建 <code>elif</code> 语句。<code>elif</code> 表示另外如果，该语句可无限添加到 <code>if-else</code> 语句中，使其支持更多的决策。</p>\n<p>如果一个 <code>if-else</code> 语句中包含有 <code>elif</code> 语句，则首先判断 <code>if</code> 语句。如果该语句中的表达式为 <code>True</code>，则只执行其中的代码。但是，如果其值为 <code>False</code>，每个之后的 <code>elif</code> 语句都将进行求值。只要有一个 <code>elif</code> 语句中的表达式结果为 <code>True</code>，则执行其中的代码并退出。如果没有任何一个 <code>elif</code> 语句的结果为 <code>True</code>，则执行 <code>else</code> 语句中的代码。下面是一个包含有 <code>elif</code> 语句的 <code>if-else</code> 语句示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/jpr265j</span>\n02\n03\n04  home = <span class=\"hljs-string\">\"Thailand\"</span>\n05  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"Japan\"</span>:\n06      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, Japan!\"</span>)\n07  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Thailand\"</span>:\n08      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, Thailand!\"</span>)\n09  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"India\"</span>:\n10      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, India!\"</span>)\n11  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"China\"</span>:\n12      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, China!\"</span>)\n13  <strong><span class=\"hljs-keyword\">else</span></strong>:\n14      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, Thailand!</code></pre>\n<p>下面这个示例中，所有的 <code>elif</code> 语句求值结果均不为 <code>True</code>，最后执行的是 <code>else</code> 语句中的代码。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/zdvuuhs</span>\n02\n03  home = <span class=\"hljs-string\">\"Mars\"</span>\n04  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"America\"</span>:\n05      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n06  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Canada\"</span>:\n07      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, Canada!\"</span>)\n08  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Thailand\"</span>:\n09      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, Thailand!\"</span>)\n10  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Mexico\"</span>:\n11      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, Mexico!\"</span>)\n12  <strong><span class=\"hljs-keyword\">else</span></strong>:\n13      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, World! </code></pre>\n<p>最后，可以连续使用多个 <code>if</code> 语句和 <code>elif</code> 语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/hzyxgf4</span>\n02\n03\n04  x = 100\n05  <strong><span class=\"hljs-keyword\">if</span></strong> x == 10:\n06      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"10!\"</span>)\n07  <strong><span class=\"hljs-keyword\">elif</span></strong> x == 20:\n08      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"20!\"</span>)\n09  <strong><span class=\"hljs-keyword\">else</span></strong>:\n10      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"I don't know!\"</span>)\n11\n12\n13  <strong><span class=\"hljs-keyword\">if</span></strong> x == 100:\n14      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is 100!\"</span>)\n15\n16\n17  <strong><span class=\"hljs-keyword\">if</span></strong> x % 2 == 0:\n18      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"x is even!\"</span>)\n19<strong>  <span class=\"hljs-keyword\">else</span></strong>:\n20      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is odd!\"</span>)\n\n&gt;&gt; I don<span class=\"hljs-string\">'t know!\n&gt;&gt; x is 100!\n&gt;&gt; x is even!</span></code></pre>\n<h3 id=\"315\">3.15　语句</h3>\n<p><strong>语句</strong>（statement）这个术语可用来描述 Python 语言的多种构成部分。可以将一个 Python 语句视作一个命令或计算。本节将详细介绍语句的语法。如果感觉部分内容初次学起来很难懂，也不用太担心，随着练习 Python 的时间变长，你就会慢慢理解。</p>\n<p>Python 中有两类语句：<strong>简单语句</strong>（simple statement）和<strong>复合语句</strong>（compound statement）。简单语句一般就是一行代码，而复合语句通常包括多行代码。下面是一些简单语句的示例：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jrowero</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2y549y</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n</code></pre>\n<p><code>if</code> 语句和 <code>if-else</code> 语句，以及本章编写的第一个程序（打印 <code>Hello, World!</code> 100 次）都是复合语句。</p>\n<p>复合语句由一个或多个<strong>从句</strong>（clause）组成。从句包括两行或多行代码：<strong>代码头</strong>（header）及紧随其后的<strong>配套代码</strong>（suite）。代码头指的是从句中包含关键字的那行代码，之后是一个冒号和一行或多行带缩进的代码。缩进之后，是一个或多个配套代码。配套代码就是从句中一行普通的代码。代码头控制配套代码的执行。打印 <code>Hello, World!</code> 100 次的程序，就是由一个复合语句组成。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zfz3eel</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">4</span>      print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n&gt;&gt; Hello, World!\n&gt;&gt; Hello, World!\n…</code></pre>\n<p>程序的第一行是代码头，包括关键字 <code>for</code>，之后是冒号。缩进之后是配套代码 <code>print(\"Hello, World!\")</code>。在上述示例中，代码头通过配套代码打印 <code>Hello, World!</code> 100 次，这是一个循环，将在第 7 章详细介绍。上述代码只有一个从句。</p>\n<p>复合语句可以由多个从句构成，你前面看到的 <code>if-else</code> 语句就是复合语句。<code>if</code> 语句之后如果带有一个 <code>else</code> 语句，就构成了一个由多个从句组成的复合语句。在包含多个从句的复合语句中，代码头从句共同控制代码执行。对于 <code>if-else</code> 语句，当 <code>if</code> 语句的值为 <code>True</code> 时，则执行 <code>if</code> 语句的配套代码，<code>else</code> 语句的配套代码不执行；当 <code>if</code> 语句的值为 <code>False</code> 时，则不执行 <code>if</code> 语句的配套代码，转而执行 <code>else</code> 语句的配套代码。上一节中的最后一个示例包含了 3 个复合语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/hpwkdo4</span>\n02\n03\n04  x = 100\n05  <strong><span class=\"hljs-keyword\">if</span></strong> x == 10:\n06      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"10!\"</span>)\n07  <strong><span class=\"hljs-keyword\">elif</span></strong> x == 20:\n08      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"20!\"</span>)\n09  <strong><span class=\"hljs-keyword\">else</span></strong>:\n10      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"I don't know!\"</span>)\n11\n12\n13  <strong><span class=\"hljs-keyword\">if</span></strong> x == 100:\n14      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"x is 100!\"</span>)\n15\n16\n17  <strong><span class=\"hljs-keyword\">if</span></strong> x % 2 == 0:\n18      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"x is even!\"</span>)\n19  <strong><span class=\"hljs-keyword\">else</span></strong>:\n20      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is odd!\"</span>)\n\n&gt;&gt; I don<span class=\"hljs-string\">'t know!\n&gt;&gt; x is 100!\n&gt;&gt; x is even!</span></code></pre>\n<p>第一个复合语句中有 3 个从句，第二个里有一个从句，最后一个则有两个从句。</p>\n<p>关于语句还有一点要注意，语句之间是可以有空格的，这不会影响代码的执行。空格有时被用来提高代码的可读性。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zlgcwoc</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  print(<span class=\"hljs-string\">\"Michael\"</span>)\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  print(<span class=\"hljs-string\">\"Jordan\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Michael\n<span class=\"hljs-meta\">&gt;&gt;</span> Jordan\n</code></pre>\n<h3 id=\"316\">3.16　术语表</h3>\n<p><strong>注释</strong>：用英文或其他自然语言写的一行（或一部分）代码，行首均有一个特殊标志告知编程语言忽略这行代码。</p>\n<p><strong>关键字</strong>：编程语言中具有特殊意义的词。可在 http://theselftaughtprogrammer.io/keywords 网页中查看所有 Python 的关键字。</p>\n<p><strong>数据类型</strong>：数据所属的类别。</p>\n<p><strong>对象</strong>：Python 中具有 3 个属性的数据值——唯一标识、数据类型和值。</p>\n<p><strong>Str</strong>：字符串的数据类型。</p>\n<p><strong>字符</strong>：a 或 l 等单个符号。</p>\n<p><strong>Int</strong>：整数的数据类型。</p>\n<p><strong>整型数据</strong>：数据类型为 int 的对象，其值为一个整数。</p>\n<p><strong>Float</strong>：小数的数据类型。</p>\n<p><strong>浮点数</strong>：数据类型为 <code>float</code> 的对象，其值为一个小数。</p>\n<p><strong>Bool</strong>：布尔对象的数据类型。</p>\n<p><strong>布尔值</strong>：数据类型为 <code>bool</code> 的对象，其值为 <code>True</code> 或 <code>False</code>。</p>\n<p><strong>NoneType</strong>：<code>None</code> 对象的数据类型。</p>\n<p><strong>None</strong>：数据类型为 <code>NoneType</code> 的对象，其值永远为 <code>None</code>。</p>\n<p><strong>常量</strong>：不会改变的值。</p>\n<p><strong>变量</strong>：使用赋值操作符赋予了一个值的名称。</p>\n<p><strong>赋值操作符</strong>：Python 中的 <code>=</code> 符号。</p>\n<p><strong>增加</strong>：增加一个变量的值。</p>\n<p><strong>减少</strong>：减少一个变量的值。</p>\n<p><strong>语法</strong>：规范一门语言中句子结构，尤其是字词顺序的一整套规则及流程。</p>\n<p><strong>语法错误</strong>：违反编程语言的语法，所导致的致命编程错误。</p>\n<p><strong>异常</strong>：非致命的编程错误。</p>\n<p><strong>操作符</strong>：在表达式中与操作符一起使用的符号。</p>\n<p><strong>算术操作符</strong>：数学表达式中使用的一类操作符。</p>\n<p><strong>操作数</strong>：操作符两侧的值。</p>\n<p><strong>表达式</strong>：操作符及两个操作数构成的代码。</p>\n<p><strong>运算顺序</strong>：数学计算中用来对表达式求值的一组规则。</p>\n<p><strong>比较操作符</strong>：表达式中用到的一类操作符，求值结果为 <code>True</code> 或 <code>False</code>。</p>\n<p><strong>逻辑操作符</strong>：对两个表达式求值的一类操作符，求值结果为 <code>True</code> 或 <code>False</code>。</p>\n<p><strong>条件语句</strong>：根据条件执行不同代码的代码。</p>\n<p><strong>控制结构</strong>：通过分析变量的值，来决定代码如何执行的代码块。</p>\n<p><strong>伪代码</strong>：用来演示逻辑的标记方法，与代码类似。</p>\n<p><strong>if-else 语句</strong>：程序员用来表达“如果出现这种情况，则这样做，否则那样做”的方法。</p>\n<p><strong>if 语句</strong>：<code>if-else</code> 语句的第一部分。</p>\n<p><strong>else 语句</strong>：<code>if-else</code> 语句的第二部分。</p>\n<p><strong>语句</strong>：一个命令或计算。</p>\n<p><strong>简单语句</strong>：可用一行代码表述的语句。</p>\n<p><strong>复合语句</strong>：通常包括多行代码的语句。</p>\n<p><strong>从句</strong>：复合语句的组成部分；一个从句由两行或多行代码构成，包括代码头及配套代码。</p>\n<p><strong>代码头</strong>：从句中包含关键字的那行代码，之后是一个冒号和一行或多行带缩进的代码。</p>\n<p><strong>配套代码</strong>：从句中由代码头控制的代码。</p>\n<h3 id=\"317\">3.17　挑战练习</h3>\n<p>1．请打印 3 个不同的字符串。</p>\n<p>2．编写程序：如果变量的值小于 10，打印一条消息；如果大于或等于 10，则打印不同的消息。</p>\n<p>3．编写程序：如果变量的值小于或等于 10，打印一条消息；如果大于 10 且小于或等于 25，则打印一条不同的消息；如果大于 25，则打印另一条不同的消息。</p>\n<p>4．编写一个将两个变量相除，并打印余数的程序。</p>\n<p>5．编写一个将两个变量相除，并打印商的程序。</p>\n<p>6．编写程序：为变量 age 赋予一个整数值，根据不同的数值打印不同的字符串说明。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>编程概论</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#31\">3.1　示例</a></li>\n<li><a href=\"#32\">3.2　注释</a></li>\n<li><a href=\"#33\">3.3　打印</a></li>\n<li><a href=\"#34\">3.4　代码行</a></li>\n<li><a href=\"#35\">3.5　关键字</a></li>\n<li><a href=\"#36\">3.6　间距</a></li>\n<li><a href=\"#37\">3.7　数据类型</a></li>\n<li><a href=\"#38\">3.8　常量和变量</a></li>\n<li><a href=\"#39\">3.9　语法</a></li>\n<li><a href=\"#310\">3.10　错误与异常</a></li>\n<li><a href=\"#311\">3.11　算术操作符</a></li>\n<li><a href=\"#312\">3.12　比较操作符</a></li>\n<li><a href=\"#313\">3.13　逻辑操作符</a></li>\n<li><a href=\"#314\">3.14　条件语句</a></li>\n<li><a href=\"#315\">3.15　语句</a></li>\n<li><a href=\"#316\">3.16　术语表</a></li>\n<li><a href=\"#317\">3.17　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“这是我能想到的，唯一可以让我既当工程师又做艺术家的工作。它要求具备极其缜密的技术思维，因为你必须要完成精确的思考，这点我很喜欢。另一方面，它又鼓励你肆意挥洒自己的创意，只有你想不到没有你做不到的。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——安迪 · 赫兹菲尔德（Andy Hertzfeld）</span></p>\n</blockquote>\n<p>我们的第一个程序打印出了 <code>Hello, World!</code>。接下来打印 100 次。在交互式 shell 中输入如下代码（print 需要缩进 4 个空格符）：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/h79ob7s</span>\n2\n3\n4  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(100):\n5      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)</code></pre>\n<p>交互式 shell 应该会打印 <code>Hello, World!</code> 100 次。即使通常没有这样做的需要，但可以从这个例子中看出编程的强大。你能想到任何其他可以如此简单地做 100 遍的事情吗？我想不到。这就是编程的厉害之处。</p>\n<h3 id=\"31\">3.1　示例</h3>\n<p>从现在开始，代码示例会以如下形式出现：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4qntgk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">5</span>      print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n&gt;&gt; Hello, World!\n&gt;&gt; Hello, World!\n…</code></pre>\n<p>打开 http://tinyurl.com/h4qntqk 这个链接，就可以看到包含有示例代码的网页，这样如果无法让代码运行，你可以轻松地复制代码，并粘贴到 IDLE 的文本编辑器中。<code>&gt;&gt;</code> 的后面则是交互式 shell 的输出。全书的每一个编程示例中都会看到 <code>&gt;&gt;</code>，这代表了程序的输出结果（会在交互式 shell 中打印出来）。“...”表示“等等”。</p>\n<p>如果示例后没有 <code>&gt;&gt;</code>，就表示该程序没有输出，或者只是在解释概念，输出并不太重要。</p>\n<p>字体为 Courier New 的部分，都是某种形式的代码、代码输出或编程术语。例如，上个例子中提到的词 <code>for</code>，它就会是 Courier New 字体。</p>\n<p>Courier New 是一个固定宽度（不等比）的字体，常用来显示编程文本。每个字符的宽度都一致，因此代码对齐后可以很容易地发现缩进和其他特征。</p>\n<p>可以用交互式 shell 或 <code>.py</code> 文件来运行示例代码。但是要注意的是，正如之前提到的，交互式 shell 中的输出与文件运行的输出可能略有不同，因此如果没得到完全一致的输出，原因就在于此。如果有示例要打印输出，但是却没有 <code>print</code> 字样，表示应该直接在交互式 shell 中输入代码。如果示例中有 <code>print</code> 字样，则说明应该从 <code>.py</code> 文件运行代码。</p>\n<h3 id=\"32\">3.2　注释</h3>\n<p><strong>注释</strong>（comment）是用英文或其他自然语言写的一行（或一部分）代码，行首均有一个特殊标志告知编程语言忽略这行代码。Python 用井号（#）来创建注释。</p>\n<p>注释的目的是解释代码的功能。程序员通过注释，使得代码更易于阅读。在注释中，可以写下任何内容，只要保持为一行即可，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hut6nwu</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-comment\"># 这是一行注释</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>只有在代码中执行特别操作，或者代码不清晰易懂的情况下，才需要写注释。尽量少写注释——不要每行代码都写注释，有特殊情况才需要。下面是一个注释多余的例子：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/jpzlwqq</span>\n2\n3\n4  <span class=\"hljs-comment\"># 打印 Hello, World!</span>\n5  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n</code></pre>\n<p>注释之所以多余，是因为这行代码的功能已经非常明确。下面是一个注释合理的例子：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/z52c8z8</span></span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-keyword\">import</span></strong> math\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  # 对角线的长度\n<span class=\"hljs-number\">08</span>  l = <span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">09</span>  w = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">10</span>  d = math.<span class=\"hljs-built_in\">sqrt</span>(l**<span class=\"hljs-number\">2</span>+ w**<span class=\"hljs-number\">2</span>)</code></pre>\n<p>即使你完全理解了这段代码，也可能并不知道如何计算长方形的对角线长度，因此这里的注释就是有用的。</p>\n<h3 id=\"33\">3.3　打印</h3>\n<p>程序不止可以打印 <code>Hello, World!</code>，它可以打印任何内容，只要记得加上双引号。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zh5g2a3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Python\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Python\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hhwqva2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hola!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hola!\n</code></pre>\n<h3 id=\"34\">3.4　代码行</h3>\n<p>Python 程序是由一行一行的代码组成的。看下面这个程序：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/jq2w5ro</span>\n2\n3\n4  <span class=\"hljs-comment\"># 第一行</span>\n5  <span class=\"hljs-comment\"># 第二行</span>\n6  <span class=\"hljs-comment\"># 第三行</span>\n</code></pre>\n<p>程序共有 3 行代码。我们通常用代码所在的行数区别代码。在 IDLE 中，可以打开“编辑”菜单，选择“前往行”按钮，即可跳转至程序的指定行。在交互式 shell 中，一次只能输入一行代码，无法复制粘贴多行代码。</p>\n<p>有时一段代码比较长，超过了一行，可以用三引号、圆括号、方括号或者大括号扩展至新一行，示例如下：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcdx3yo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"\"\"This is a really really\n5        really really long line of\n6        code.\"\"\"</span>)\n</code></pre>\n<p>另外，还可以使用反斜杠 \\ 对代码进行换行：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hjcf2sa</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">print</span>\\\n<span class=\"hljs-number\">5</span>  (<span class=\"hljs-string\">\"\"\"This is a really really\n6   really long line of code.\"\"\"</span>)\n</code></pre>\n<p>上述两个例子的输出结果是一样的。反斜杠可以让我们将 <code>(\"\"\"This is a really really really long line of code.\"\"\")</code> 和 <code>print</code> 放在不同的行，这种情况一般是不允许的。</p>\n<h3 id=\"35\">3.5　关键字</h3>\n<p>Python 等编程语言中有一些具备特殊意义的字，即<strong>关键字</strong>（keyword）。前面见过的 <code>for</code> 就是一个关键字，用来多次执行代码。本章中还会学习更多的关键字。</p>\n<h3 id=\"36\">3.6　间距</h3>\n<p>我们再来回顾一下那个打印 <code>Hello, World!</code> 100 次的程序：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/glp9xq6</span>\n2\n3\n4  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(100):\n5      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)</code></pre>\n<p>前面已经提到，<code>print</code> 缩进了 4 个空格符。稍后会解释原因，缩进可以告诉 Python 解释器代码块的开始与结束。同时要注意，在本书示例中看到的缩进距离，都是 4 个空格符。如果代码间距不合理，程序将无法执行。</p>\n<p>其他编程语言没有类似的缩进要求；它们使用关键字或花括号来表示代码开始和结束。以下是用 JavaScript 编程语言编写的同一个程序：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hwa2zae</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\"># 这是一个 JavaScript 程序</span>\n<span class=\"hljs-number\">05</span>  <span class=\"hljs-comment\"># 不过没法执行</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-keyword\">for</span></strong> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) {\n<span class=\"hljs-number\">09</span>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello, World!\"</span>);\n<span class=\"hljs-number\">10</span>  }</code></pre>\n<p>Python 的支持者坚信使用必要的缩进可以让 Python 比其他语言更易读易写。正如上例所示，即使编程语言不强制使用空格，程序员为了让代码更便于阅读，也会倾向于使用空格来分隔代码。</p>\n<h3 id=\"37\">3.7　数据类型</h3>\n<p>Python 将数据划分成不同的类别，即<strong>数据类型</strong>（data type）。在 Python 中，每一个数据值，如 <code>2</code> 或 <code>\"Hello, World!\"</code>，被称为<strong>对象</strong>（object）。本书第二部分会详细介绍数据类型，现在可以把对象看作拥有 3 个属性的数据值：唯一标识（identity）、数据类型和值。对象的唯一标识，指的是其在计算机内存中的地址，该地址不会变化。对象的数据类型是对象所属的数据类别，这决定了对象的属性，也不会变化。对象的值是其表示的数据，例如数字 <code>2</code> 的值即为 2。</p>\n<p><code>\"Hello, World!\"</code> 这个对象的数据类型为<strong>字符串</strong>（str，string 的缩写），值为 <code>\"Hello, World!\"</code>。如果提及数据类型为 <code>str</code> 的对象，可以称其为字符串。字符串是由引号包括的一个或多个字符组成的序列。<strong>字符</strong>（character）是类似 <code>a</code> 或 <code>l</code> 这样的单个符号。可以使用单引号或双引号来表示字符串，但是前后的引号必须保持一致，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hh5kjwp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Hello, World!\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Hello, World!'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/heaxhsh</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">'Hello, World!'</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Hello, World!'</span>\n</code></pre>\n<p>字符串可用来表示文本，且有自己独特的属性。</p>\n<p>之前章节中用来计算的数字，也是对象，但不是字符串。整数（1，2，3，4 等）的数据类型为<strong>整型数据</strong>（<code>int</code>，全称为 integer）。与字符串一样，整型数据也有着独特的属性。例如，可以将两个整数相乘，但是不能相乘两个字符串。</p>\n<p>小数（带小数点的数字）的数据类型为 <code>float</code>。2.1、8.2 和 9.9999 都是数据类型为 <code>float</code> 的对象，我们称之为<strong>浮点数</strong>（floating-point number）。与其他所有数据类型一样，浮点数也有自己独有的属性，且一定程度上与整型数据类似。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/guoc4gy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2.2</span> + <span class=\"hljs-number\">2.2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4.4</span>\n</code></pre>\n<p>数据类型为 <strong>bool</strong> 的对象被称为<strong>布尔值</strong>（boolean），仅有 <code>True</code> 和 <code>False</code> 两个值。</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jyllj2k</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">True</span>\n\n&gt;&gt; <span class=\"hljs-keyword\">True</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jzgsxz4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">False</span>\n\n&gt;&gt; <span class=\"hljs-keyword\">False</span>\n</code></pre>\n<p>数据类型为 <strong>NoneType</strong> 的对象，其值永远为 <code>None</code>，用来表示数据缺失。</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/h8oqo5v</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  None\n</code></pre>\n<p>本章后续会介绍如何使用不同的数据类型。</p>\n<h3 id=\"38\">3.8　常量和变量</h3>\n<p>你可以把 Python 当成计算器来算术，做加、减、乘、除、幂等运算。在交互式 shell 中输入以下所有示例：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zs65dp8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gs9nwrw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hasegvj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">4</span> / <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2.0</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z8ok4q3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n</code></pre>\n<p><strong>常量</strong>（constant）是一个永远不会改变的值。上面示例中的每一个数字，都是常量；数字 2 永远表示的值为 2。<strong>变量</strong>（variable）则相反，指的是会改变的值。变量由一个或多个字符组成的名称构成，并使用<strong>赋值符</strong>（assignment operator）等号赋予了这个名称一个值。</p>\n<p>有些编程语言要求程序员编写变量“声明”，明确说明变量的数据类型。例如，在 C 语言中可以这样创建变量：</p>\n<pre><code class=\"hljs cs\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># 不用执行</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <span class=\"hljs-keyword\">int</span> a;\n<span class=\"hljs-number\">8</span>  a = <span class=\"hljs-number\">144</span>;\n</code></pre>\n<p>Python 的做法更简单；可以直接用赋值符，将某个值赋给变量，即可创建：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hw64mrr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  b = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">5</span>  b\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>下面介绍如何改变变量的值：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hw97que</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">5</span>  x\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  x = <span class=\"hljs-number\">200</span>\n<span class=\"hljs-number\">9</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">200</span>\n</code></pre>\n<p>还可以使用两个变量进行算术运算：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z8hv5j5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  y = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">6</span>  z = x + y\n<span class=\"hljs-number\">7</span>  z\n<span class=\"hljs-number\">8</span>  a = x - y\n<span class=\"hljs-number\">9</span>  a\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">20</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>编程时经常需要<strong>增加</strong>（increment）或<strong>减小</strong>（decrement）某个变量的值。考虑到这个操作非常普遍，Python 提供了特殊语法进行增减变量的值。如需增加变量的值，可将该变量赋予给自身，然后在等号的另一侧将变量与希望增加的值相加：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zvzf786</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x = x + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">11</span>\n</code></pre>\n<p>如需减小变量的值，可以执行同样的操作，唯一的区别是要减去所希望的值：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gmuzdr9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x = x - <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n</code></pre>\n<p>这些示例都是完全有效的，不过还有一种更简便的方法，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zdva5wq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">11</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jqw4m5r</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  x -= <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>  x\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n</code></pre>\n<p>变量不仅仅用于保存整型数的值，还可以表示任何数据类型，示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/jsygqcy</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  hi = <span class=\"hljs-string\">\"Hello, World!\"</span>\n\n<span class=\"hljs-number\">1</span>  # http:<span class=\"hljs-comment\">//tinyurl.com/h47ty49</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_float = <span class=\"hljs-number\">2.2</span>\n\n<span class=\"hljs-number\">1</span>  # http:<span class=\"hljs-comment\">//tinyurl.com/hx9xluq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_boolean = True\n</code></pre>\n<p>只要遵守以下 4 条原则，可以随意命名变量。</p>\n<p>1．变量名不能包含空格符。如果想在变量名中使用两个单子，可以在中间加入下划线，如 <code>my_variable = \"A string!\"</code>。</p>\n<p>2．变量名只能使用特定的字母、数字和下划线。</p>\n<p>3．变量名不能以数字开头。虽然可以使用下划线开头，但是这种命名方式有着特殊的意义，后面内容会提到。因此在此之前尽量避免这种情况。</p>\n<p>4．不能使用 Python 关键字作为变量名。可在网页 http://theselftaughtprogrammer.io/keywords 中查看所有关键字。</p>\n<h3 id=\"39\">3.9　语法</h3>\n<p><strong>语法（syntax）</strong>指的是规范一门语言中句子结构，尤其是字词顺序的一整套规则及流程。英语有语法，Python 也有。</p>\n<p>在 Python 中，字符串永远被包括在引号内。这就是 Python 的一个语法示例。下面是一个有效的 Python 程序：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/j7c2npf</span>\n2\n3\n4  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n</code></pre>\n<p>程序之所以有效，是因为遵守了 Python 的语法，在定义字符串时用引号包括了文本。如果只是在文本的一侧使用引号，就违背了 Python 的语法，代码将无法运行。</p>\n<h3 id=\"310\">3.10　错误与异常</h3>\n<p>如果在编写 Python 程序时无视其语法，那么在运行时将出现错误。Python 解释器将告知代码无法执行，并给出有关该错误的信息。如果只用一个引号定义字符串，看看会发生什么情况，示例如下：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/hp2plhs</span>\n2\n3\n4  <span class=\"hljs-comment\"># 该代码有一个错误</span>\n5\n6\n7  my_string = <span class=\"hljs-string\">\"Hello World.\n\n&gt;&gt; File \"</span>/Users/coryalthoff/PycharmProjects/se.py<span class=\"hljs-string\">\", line 1 my_string = 'd ^ SyntaxError: EOL while scanning string literal\n</span></code></pre>\n<p>这段信息表示程序中有一个语法错误。语法错误是致命的，将导致程序无法运行。如果强制执行，Python 会报错。错误信息会告诉你错误位于哪个文件，出现在哪一行，以及属于什么类型。尽管这个错误看上去很吓人，但却是很常见的。</p>\n<p>如果代码中有错误，首先要找到出错的那行代码，找到出错的地方。在本例中，你应该去找代码的第一行，观察一段时间后，会注意到里面只有一个引号。只要在字符串结尾再加上一个引号，即可解决该错误，然后可以重新运行。从这里开始，本书将这样表示错误输出：</p>\n<pre><code class=\"hljs cpp\">&gt;&gt; SyntaxError: EOL <span class=\"hljs-keyword\">while</span> scanning <span class=\"hljs-built_in\">string</span> literal\n</code></pre>\n<p>为了方便阅读，书中只显示错误信息的最后一行。</p>\n<p>Python 有两种错误：语法错误和异常。不属于语法错误的错误，就是<strong>异常</strong>（exception）。如果用 0 作为分母，则会出现“ZeroDivisionError”异常。</p>\n<p>与语法错误不同的是，异常并不一定是致命的（有办法让程序在即使出现异常时仍继续运行，这会在下一章学到）。出现异常时，Python 程序员会说“Python（或程序）报了一个异常”。下面是一个异常的示例：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jxpztcx</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 该代码有一个错误</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ZeroDivisionError:</span> division by zero\n</code></pre>\n<p>如果代码缩进不正确，程序会报“IdentationError”：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gtp6amr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 该代码有一个错误</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">8</span>          x =<span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">IndentationError:</span> unexpected indent\n</code></pre>\n<p>在学习编程的过程中，你会经常碰到语法错误和异常（包括书中没有讲到过的），但是出错的情况会逐渐减少。要记住，在碰到语法错误或异常时，先找到出现问题的那行代码，然后仔细检查并找到解决办法（如果没有头绪可以在网上搜索错误或异常提示信息）。</p>\n<h3 id=\"311\">3.11　算术操作符</h3>\n<p>之前，我们用 Python 做了简单的算术计算，如 4/2。这些示例中所使用到的符号被称为<strong>操作符</strong>（operator）。Python 将操作符分为多个类型，目前所见到的是<strong>算术操作符</strong>（arithmetic operator）。下面是 Python 中常用的一些算术操作符，见表 3-1。</p>\n<p>表3-1</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>含　　义</th>\n<th>示例</th>\n<th>运算结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>**</td>\n<td>指数运算</td>\n<td>2 ** 2</td>\n<td>4</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模运算</td>\n<td>14 % 4</td>\n<td>2</td>\n</tr>\n<tr>\n<td>//</td>\n<td>整除/地板除运算</td>\n<td>13 // 8</td>\n<td>1</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除法运算</td>\n<td>13 / 8</td>\n<td>1.625</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法运算</td>\n<td>8 * 2</td>\n<td>16</td>\n</tr>\n<tr>\n<td>−</td>\n<td>减法运算</td>\n<td>7 − 1</td>\n<td>6</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加法运算</td>\n<td>2 + 2</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<p>两个数相除时，会有一个商和一个余数。商就是除法运算的结果，余数即剩下的值。取模操作符返回的就是余数。例如，13 除以 5 的结果就是商 2 余 3，示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/qrdc195</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">// 5</span>\n\n&gt;&gt; <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zsqwukd</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">13</span> % <span class=\"hljs-number\">5</span>\n\n&gt;&gt; <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>对两个数取模时，如果没有余数（返回 0），则被取模的数字为另一个数字的倍数。如果有余数，则不是其倍数。因此取模运算被用于检验数字的奇偶性，示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jerpe6u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 偶数</span>\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-number\">12</span> % <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gkudhcr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 奇数</span>\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-number\">11</span> % <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>有两个操作符用于除法运算。第一个是 // ，返回值为商：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/hh9fqzy</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">14</span> <span class=\"hljs-comment\">// 3</span>\n\n&gt; <span class=\"hljs-number\">4</span>\n</code></pre>\n<p>第二个是 / ，返回值为两个数相除的浮点数结果：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zlkjjdp</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">14</span> / <span class=\"hljs-number\">3</span>\n\n&gt; <span class=\"hljs-number\">4.666666666666667</span>\n</code></pre>\n<p>还可以使用指数运算符求幂：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h8vuwd4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">2</span> ** <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n</code></pre>\n<p>操作符两侧的值（以上示例中就是数字）被称为<strong>操作数</strong>（operand）。两个操作数和一个操作符共同构成一个<strong>表达式</strong>（expression）。程序运行时，Python 会对每个表达式求值，并返回一个值作为结果。如果在交互式 shell 中输入表达式 2 + 2，则返回结果 4。</p>\n<p><strong>运算顺序</strong>（order of operation），指的是数学计算中对表达式求值的一套规则。可使用 PEMDAS 方法，帮助记忆数学公式的运算顺序：括号（parentheses）、指数（exponents）、乘法（multiplication）、除法（division）、加法（addition）和减法（subtraction）。括号的优先级大于指数符号，后者又优先于乘法和除法，最后才是加法和减法。如果操作符的优先级相同，如 15 / 3 * 2，则按照从左到右的顺序求值。上述表达式中将 15 先除以 3，然后再乘以 2。Python 对数学表达式求值时，遵循的是同一套运算顺序：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hgjyj7o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsq7rcz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  (<span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>) * <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">8</span>\n</code></pre>\n<p>在第一个示例中，2 * 2 先进行求值，因为乘法的优先级大于加法。</p>\n<p>在第二个示例中，(2 + 2) 先求值，因为 Python 总是先对括号内的表达式求值。</p>\n<h3 id=\"312\">3.12　比较操作符</h3>\n<p><strong>比较操作符</strong>（comparison operator）是 Python 中的另一种操作符。与算术操作符类似，比较操作符可用于表达式任意一侧的操作数；不同的是，带有比较操作符的表达式最后求值的结果不是 <code>True</code> 就是 <code>False</code>。详情见表 3-2。</p>\n<p>表 3-2　　</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>含　　义</th>\n<th>示　　例</th>\n<th>运算结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>100 &gt; 10</td>\n<td>True</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>100 &lt; 10</td>\n<td>False</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于或等于</td>\n<td>2 &gt;= 2</td>\n<td>True</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于或等于</td>\n<td>1 &lt;= 4</td>\n<td>True</td>\n</tr>\n<tr>\n<td>==</td>\n<td>等于</td>\n<td>6 == 9</td>\n<td>False</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>3 != 2</td>\n<td>True</td>\n</tr>\n</tbody>\n</table>\n<p>在含有 &gt; 操作符的表达式中，如果左侧的数字大于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jm7cxzp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">100</span> &gt; <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n</code></pre>\n<p>在含有 &lt; 操作符的表达式中，如果左侧的数字小于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsdhr8q</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">100</span> &lt; <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n</code></pre>\n<p>在含有 &gt;= 操作符的表达式中，如果左侧的大于或等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jy2oefs</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">2</span> &gt;= <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n</code></pre>\n<p>在含有 &lt;= 操作符的表达式中，如果左侧的数字小于或等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jk599re</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> &gt;= <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n</code></pre>\n<p>在含有 == 操作符的表达式中，如果左侧的数字等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2tsz9u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j5mr2q2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n</code></pre>\n<p>在含有 != 操作符的表达式中，如果左侧的数字不等于右侧的数字，则表达式的值为 <code>True</code>，否则即为 <code>False</code>：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsw3zoe</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> != <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z7pffk3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n</code></pre>\n<p>此前，如果使用 = 将数字赋值给了变量，如 x = 100。可能会将其理解为“x 等于 100”，但这是错误的。前面看到，= 是用来给变量赋值的，而不是检查相等性的操作符。因此 x = 100 应理解为“x 的值为 100”。比较操作符 == 是用于检查两侧是否相等的，因此如果看到 x == 100，含义即为“x 等于 100”。</p>\n<h3 id=\"313\">3.13　逻辑操作符</h3>\n<p><strong>逻辑操作符</strong>（logical operator）也是 Python 中的一类操作符。与比较操作符类似，逻辑操作符的求值结果也是 <code>True</code> 或 <code>False</code>。详情见表 3-3。</p>\n<p>表 3-3　　</p>\n<table>\n<thead>\n<tr>\n<th>操　作　符</th>\n<th>含　　义</th>\n<th>示　　例</th>\n<th>运算结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>and</td>\n<td>与</td>\n<td>True and True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>or</td>\n<td>或</td>\n<td>True or False</td>\n<td>True</td>\n</tr>\n<tr>\n<td>not</td>\n<td>非</td>\n<td>not True</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n<p>Python 关键字 and 可以连接两个表达式，如果二者均求值为 <code>True</code>，则返回 <code>True</code>。如果任意一个的值为 <code>False</code>，即返回 <code>False</code>：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zdqghb2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zkp2jzy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/honkev6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zjrxxrc</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n<p>可以在一个语句中多次使用 <code>and</code> 关键字：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zpvk56u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">10</span> != <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">and</span></strong> <span class=\"hljs-number\">2</span> &lt; <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>关键字 <code>or</code> 可连接两个或多个表达式，如果任意一个表达式的值为 <code>True</code>，即返回 <code>True</code>：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hosuh7c</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zj6q8h9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8ngufo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z728zxz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n<p>类似地，也可以在一个语句中多次使用 <code>or</code> 关键字：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ja9mech</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span> <strong><span class=\"hljs-keyword\">or</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">3</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>该表达式的值为 <code>True</code>，因为 1 == 1 的值为 <code>True</code>，即使表达式其余的部分求值为 <code>False</code>，最终的值仍为 <code>True</code>。</p>\n<p>将关键字 <code>not</code> 放置在表达式的前面，将改变表达式的求值结果，逆转为原本结果的对立值。如果表达式原本的求值结果为 <code>True</code>，则加上 <code>not</code> 之后结果会变为 <code>False</code>：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h45eq6v</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">not</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsqj6og</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">not</span></strong> <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<h3 id=\"314\">3.14　条件语句</h3>\n<p>关键字 <code>if</code>、<code>elif</code> 和 <code>else</code> 用于<strong>条件语句</strong>（conditional statement）。条件语句是一种<strong>控制结构</strong>（control structure）：通过分析变量的值从而做出对应决定的代码块。条件语句是可根据条件执行额外代码的代码。为了方便理解，仔细看以下这个伪代码（pseudocode）示例（伪代码是用于解释说明示例代码的标记方法）：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># 不要执行</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">If</span> (expression) Then\n<span class=\"hljs-number\">5</span>              (code_area1)\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-keyword\">Else</span>\n<span class=\"hljs-number\">7</span>              (code_area2)\n</code></pre>\n<p>上述伪代码显示，可以定义两个条件语句。如果第一个条件语句中定义的表达式为 <code>True</code>，则执行 <code>code_area1</code>；否则执行 <code>code_area2</code>。示例中的第一部分被称为 <code>if</code> 语句，第二部分为 <code>else</code> 语句。两者共同组成一个 <code>if-else</code> 语句：程序员用来表达“如果出现这种情况，则这样做，否则那样做”的方法。下面是 Python 中的 <code>if-else</code> 语句示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/htvy6g3</span>\n2\n3\n4  home = <span class=\"hljs-string\">\"America\"</span>\n5  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"America\"</span>:\n6      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n7  <strong><span class=\"hljs-keyword\">else</span></strong>:\n8      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, America!</code></pre>\n<p>第 5 行和第 6 行共同组成了 <code>if</code> 语句。一个 <code>if</code> 语句中，包括一行以 <code>if</code> 关键字开头的代码行，<code>if</code> 关键字之后是一个表达式，还有冒号、缩进，以及一行或多行如果表达式为 <code>True</code> 的情况下将执行的代码。第 7 行和第 8 行共同组成了 <code>else</code> 语句。一个 <code>else</code> 语句的开头是 <code>else</code> 关键字，然后是冒号、缩进，以及一行或多行如果 <code>if</code> 语句中表达式为 <code>False</code> 时将执行的代码。</p>\n<p>二者共同组成了一个 <code>if-else</code> 语句。本例的打印输出结果为 <code>Hello, America!</code>，因为 <code>if</code> 语句中的表达式结果为 <code>True</code>。如果将变量 <code>home</code> 的值修改为 <code>Canada</code>，则 <code>if</code> 语句中的表达式结果为 <code>False</code>，将会执行 <code>else</code> 语句中的代码，程序会打印出 <code>Hello, World!</code>。</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/jytyg5x</span>\n2\n3\n4  home = <span class=\"hljs-string\">\"Canada\"</span>\n5  <strong><span class=\"hljs-keyword\">if</span></strong> home ==<strong> </strong><span class=\"hljs-string\">\"America\"</span>:\n6      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n7  <strong><span class=\"hljs-keyword\">else</span></strong>:\n8      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, World!</code></pre>\n<p>可以单独使用一个 <code>if</code> 语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jyg7dd2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  home = <span class=\"hljs-string\">\"America\"</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"America\"</span>:\n<span class=\"hljs-number\">6</span>      print(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, America!</code></pre>\n<p>也可以连续使用多个 <code>if</code> 语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z24ckye</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">05</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x == <span class=\"hljs-number\">2</span>:\n<span class=\"hljs-number\">06</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"The number is 2.\"</span>)\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">08</span>      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The number is even.\"</span>)\n<span class=\"hljs-number\">09</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"The number is odd.\"</span>)\n\n&gt;&gt; The number <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">2.</span>\n&gt;&gt; The number <span class=\"hljs-keyword\">is</span> even.</code></pre>\n<p>每个 <code>if</code> 语句只有在其表达式求值为 <code>True</code> 时，才会执行所有的代码。在本例中，前两个表达式的求值结果为 <code>True</code>，因此各自的代码都执行了，但是第 3 个表达式的结果为 <code>False</code>，所以没有执行。</p>\n<p>如果愿意，甚至还可以在 <code>if</code> 语句中再加入一个 <code>if</code> 语句（通常称之为嵌套）：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrodgne</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">05</span>  y = <span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  <strong><span class=\"hljs-keyword\">if</span></strong> x == <span class=\"hljs-number\">10</span>:\n09      <strong><span class=\"hljs-keyword\">if</span></strong> y == <span class=\"hljs-number\">11</span>:\n<span class=\"hljs-number\">10</span>          print(x + y)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">21</span></code></pre>\n<p>在本例中，只有在两个 <code>if</code> 语句的结果均为 <code>True</code> 时，才会打印 <code>x + y</code>。<code>else</code> 语句无法被单独使用，只能用在 <code>if-else</code> 语句的最后一部分。</p>\n<p>也可以使用 <code>elif</code> 关键字创建 <code>elif</code> 语句。<code>elif</code> 表示另外如果，该语句可无限添加到 <code>if-else</code> 语句中，使其支持更多的决策。</p>\n<p>如果一个 <code>if-else</code> 语句中包含有 <code>elif</code> 语句，则首先判断 <code>if</code> 语句。如果该语句中的表达式为 <code>True</code>，则只执行其中的代码。但是，如果其值为 <code>False</code>，每个之后的 <code>elif</code> 语句都将进行求值。只要有一个 <code>elif</code> 语句中的表达式结果为 <code>True</code>，则执行其中的代码并退出。如果没有任何一个 <code>elif</code> 语句的结果为 <code>True</code>，则执行 <code>else</code> 语句中的代码。下面是一个包含有 <code>elif</code> 语句的 <code>if-else</code> 语句示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/jpr265j</span>\n02\n03\n04  home = <span class=\"hljs-string\">\"Thailand\"</span>\n05  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"Japan\"</span>:\n06      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, Japan!\"</span>)\n07  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Thailand\"</span>:\n08      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, Thailand!\"</span>)\n09  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"India\"</span>:\n10      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, India!\"</span>)\n11  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"China\"</span>:\n12      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, China!\"</span>)\n13  <strong><span class=\"hljs-keyword\">else</span></strong>:\n14      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, Thailand!</code></pre>\n<p>下面这个示例中，所有的 <code>elif</code> 语句求值结果均不为 <code>True</code>，最后执行的是 <code>else</code> 语句中的代码。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/zdvuuhs</span>\n02\n03  home = <span class=\"hljs-string\">\"Mars\"</span>\n04  <strong><span class=\"hljs-keyword\">if</span></strong> home == <span class=\"hljs-string\">\"America\"</span>:\n05      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, America!\"</span>)\n06  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Canada\"</span>:\n07      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Hello, Canada!\"</span>)\n08  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Thailand\"</span>:\n09      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, Thailand!\"</span>)\n10  <strong><span class=\"hljs-keyword\">elif</span></strong> home == <span class=\"hljs-string\">\"Mexico\"</span>:\n11      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, Mexico!\"</span>)\n12  <strong><span class=\"hljs-keyword\">else</span></strong>:\n13      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, World! </code></pre>\n<p>最后，可以连续使用多个 <code>if</code> 语句和 <code>elif</code> 语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/hzyxgf4</span>\n02\n03\n04  x = 100\n05  <strong><span class=\"hljs-keyword\">if</span></strong> x == 10:\n06      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"10!\"</span>)\n07  <strong><span class=\"hljs-keyword\">elif</span></strong> x == 20:\n08      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"20!\"</span>)\n09  <strong><span class=\"hljs-keyword\">else</span></strong>:\n10      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"I don't know!\"</span>)\n11\n12\n13  <strong><span class=\"hljs-keyword\">if</span></strong> x == 100:\n14      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is 100!\"</span>)\n15\n16\n17  <strong><span class=\"hljs-keyword\">if</span></strong> x % 2 == 0:\n18      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"x is even!\"</span>)\n19<strong>  <span class=\"hljs-keyword\">else</span></strong>:\n20      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is odd!\"</span>)\n\n&gt;&gt; I don<span class=\"hljs-string\">'t know!\n&gt;&gt; x is 100!\n&gt;&gt; x is even!</span></code></pre>\n<h3 id=\"315\">3.15　语句</h3>\n<p><strong>语句</strong>（statement）这个术语可用来描述 Python 语言的多种构成部分。可以将一个 Python 语句视作一个命令或计算。本节将详细介绍语句的语法。如果感觉部分内容初次学起来很难懂，也不用太担心，随着练习 Python 的时间变长，你就会慢慢理解。</p>\n<p>Python 中有两类语句：<strong>简单语句</strong>（simple statement）和<strong>复合语句</strong>（compound statement）。简单语句一般就是一行代码，而复合语句通常包括多行代码。下面是一些简单语句的示例：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jrowero</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2y549y</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n</code></pre>\n<p><code>if</code> 语句和 <code>if-else</code> 语句，以及本章编写的第一个程序（打印 <code>Hello, World!</code> 100 次）都是复合语句。</p>\n<p>复合语句由一个或多个<strong>从句</strong>（clause）组成。从句包括两行或多行代码：<strong>代码头</strong>（header）及紧随其后的<strong>配套代码</strong>（suite）。代码头指的是从句中包含关键字的那行代码，之后是一个冒号和一行或多行带缩进的代码。缩进之后，是一个或多个配套代码。配套代码就是从句中一行普通的代码。代码头控制配套代码的执行。打印 <code>Hello, World!</code> 100 次的程序，就是由一个复合语句组成。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zfz3eel</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">4</span>      print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n&gt;&gt; Hello, World!\n&gt;&gt; Hello, World!\n…</code></pre>\n<p>程序的第一行是代码头，包括关键字 <code>for</code>，之后是冒号。缩进之后是配套代码 <code>print(\"Hello, World!\")</code>。在上述示例中，代码头通过配套代码打印 <code>Hello, World!</code> 100 次，这是一个循环，将在第 7 章详细介绍。上述代码只有一个从句。</p>\n<p>复合语句可以由多个从句构成，你前面看到的 <code>if-else</code> 语句就是复合语句。<code>if</code> 语句之后如果带有一个 <code>else</code> 语句，就构成了一个由多个从句组成的复合语句。在包含多个从句的复合语句中，代码头从句共同控制代码执行。对于 <code>if-else</code> 语句，当 <code>if</code> 语句的值为 <code>True</code> 时，则执行 <code>if</code> 语句的配套代码，<code>else</code> 语句的配套代码不执行；当 <code>if</code> 语句的值为 <code>False</code> 时，则不执行 <code>if</code> 语句的配套代码，转而执行 <code>else</code> 语句的配套代码。上一节中的最后一个示例包含了 3 个复合语句：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/hpwkdo4</span>\n02\n03\n04  x = 100\n05  <strong><span class=\"hljs-keyword\">if</span></strong> x == 10:\n06      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"10!\"</span>)\n07  <strong><span class=\"hljs-keyword\">elif</span></strong> x == 20:\n08      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"20!\"</span>)\n09  <strong><span class=\"hljs-keyword\">else</span></strong>:\n10      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"I don't know!\"</span>)\n11\n12\n13  <strong><span class=\"hljs-keyword\">if</span></strong> x == 100:\n14      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"x is 100!\"</span>)\n15\n16\n17  <strong><span class=\"hljs-keyword\">if</span></strong> x % 2 == 0:\n18      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"x is even!\"</span>)\n19  <strong><span class=\"hljs-keyword\">else</span></strong>:\n20      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is odd!\"</span>)\n\n&gt;&gt; I don<span class=\"hljs-string\">'t know!\n&gt;&gt; x is 100!\n&gt;&gt; x is even!</span></code></pre>\n<p>第一个复合语句中有 3 个从句，第二个里有一个从句，最后一个则有两个从句。</p>\n<p>关于语句还有一点要注意，语句之间是可以有空格的，这不会影响代码的执行。空格有时被用来提高代码的可读性。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zlgcwoc</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  print(<span class=\"hljs-string\">\"Michael\"</span>)\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  print(<span class=\"hljs-string\">\"Jordan\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Michael\n<span class=\"hljs-meta\">&gt;&gt;</span> Jordan\n</code></pre>\n<h3 id=\"316\">3.16　术语表</h3>\n<p><strong>注释</strong>：用英文或其他自然语言写的一行（或一部分）代码，行首均有一个特殊标志告知编程语言忽略这行代码。</p>\n<p><strong>关键字</strong>：编程语言中具有特殊意义的词。可在 http://theselftaughtprogrammer.io/keywords 网页中查看所有 Python 的关键字。</p>\n<p><strong>数据类型</strong>：数据所属的类别。</p>\n<p><strong>对象</strong>：Python 中具有 3 个属性的数据值——唯一标识、数据类型和值。</p>\n<p><strong>Str</strong>：字符串的数据类型。</p>\n<p><strong>字符</strong>：a 或 l 等单个符号。</p>\n<p><strong>Int</strong>：整数的数据类型。</p>\n<p><strong>整型数据</strong>：数据类型为 int 的对象，其值为一个整数。</p>\n<p><strong>Float</strong>：小数的数据类型。</p>\n<p><strong>浮点数</strong>：数据类型为 <code>float</code> 的对象，其值为一个小数。</p>\n<p><strong>Bool</strong>：布尔对象的数据类型。</p>\n<p><strong>布尔值</strong>：数据类型为 <code>bool</code> 的对象，其值为 <code>True</code> 或 <code>False</code>。</p>\n<p><strong>NoneType</strong>：<code>None</code> 对象的数据类型。</p>\n<p><strong>None</strong>：数据类型为 <code>NoneType</code> 的对象，其值永远为 <code>None</code>。</p>\n<p><strong>常量</strong>：不会改变的值。</p>\n<p><strong>变量</strong>：使用赋值操作符赋予了一个值的名称。</p>\n<p><strong>赋值操作符</strong>：Python 中的 <code>=</code> 符号。</p>\n<p><strong>增加</strong>：增加一个变量的值。</p>\n<p><strong>减少</strong>：减少一个变量的值。</p>\n<p><strong>语法</strong>：规范一门语言中句子结构，尤其是字词顺序的一整套规则及流程。</p>\n<p><strong>语法错误</strong>：违反编程语言的语法，所导致的致命编程错误。</p>\n<p><strong>异常</strong>：非致命的编程错误。</p>\n<p><strong>操作符</strong>：在表达式中与操作符一起使用的符号。</p>\n<p><strong>算术操作符</strong>：数学表达式中使用的一类操作符。</p>\n<p><strong>操作数</strong>：操作符两侧的值。</p>\n<p><strong>表达式</strong>：操作符及两个操作数构成的代码。</p>\n<p><strong>运算顺序</strong>：数学计算中用来对表达式求值的一组规则。</p>\n<p><strong>比较操作符</strong>：表达式中用到的一类操作符，求值结果为 <code>True</code> 或 <code>False</code>。</p>\n<p><strong>逻辑操作符</strong>：对两个表达式求值的一类操作符，求值结果为 <code>True</code> 或 <code>False</code>。</p>\n<p><strong>条件语句</strong>：根据条件执行不同代码的代码。</p>\n<p><strong>控制结构</strong>：通过分析变量的值，来决定代码如何执行的代码块。</p>\n<p><strong>伪代码</strong>：用来演示逻辑的标记方法，与代码类似。</p>\n<p><strong>if-else 语句</strong>：程序员用来表达“如果出现这种情况，则这样做，否则那样做”的方法。</p>\n<p><strong>if 语句</strong>：<code>if-else</code> 语句的第一部分。</p>\n<p><strong>else 语句</strong>：<code>if-else</code> 语句的第二部分。</p>\n<p><strong>语句</strong>：一个命令或计算。</p>\n<p><strong>简单语句</strong>：可用一行代码表述的语句。</p>\n<p><strong>复合语句</strong>：通常包括多行代码的语句。</p>\n<p><strong>从句</strong>：复合语句的组成部分；一个从句由两行或多行代码构成，包括代码头及配套代码。</p>\n<p><strong>代码头</strong>：从句中包含关键字的那行代码，之后是一个冒号和一行或多行带缩进的代码。</p>\n<p><strong>配套代码</strong>：从句中由代码头控制的代码。</p>\n<h3 id=\"317\">3.17　挑战练习</h3>\n<p>1．请打印 3 个不同的字符串。</p>\n<p>2．编写程序：如果变量的值小于 10，打印一条消息；如果大于或等于 10，则打印不同的消息。</p>\n<p>3．编写程序：如果变量的值小于或等于 10，打印一条消息；如果大于 10 且小于或等于 25，则打印一条不同的消息；如果大于 25，则打印另一条不同的消息。</p>\n<p>4．编写一个将两个变量相除，并打印余数的程序。</p>\n<p>5．编写一个将两个变量相除，并打印商的程序。</p>\n<p>6．编写程序：为变量 age 赋予一个整数值，根据不同的数值打印不同的字符串说明。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>"},{"title":"函数","_content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>函数</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#41\">4.1　表达概念</a></li>\n<li><a href=\"#42\">4.2　函数</a></li>\n<li><a href=\"#43\">4.3　定义函数</a></li>\n<li><a href=\"#44\">4.4　内置函数</a></li>\n<li><a href=\"#45\">4.5　复用函数</a></li>\n<li><a href=\"#46\">4.6　必选及可选参数</a></li>\n<li><a href=\"#47\">4.7　作用域</a></li>\n<li><a href=\"#48\">4.8　异常处理</a></li>\n<li><a href=\"#49\">4.9　文档字符串</a></li>\n<li><a href=\"#410\">4.10　有需要才使用变量</a></li>\n<li><a href=\"#411\">4.11　术语表</a></li>\n<li><a href=\"#412\">4.12　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“函数应该做一件事。做好这件事。只能做这一件事。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——罗伯特 · C. 马丁（Robert C.Martin）</span></p>\n</blockquote>\n<p>本章将介绍<strong>函数（function）</strong>：可接受输入，执行指令并返回输出的复合语句。通过函数，我们可以在程序中定义功能，并重复使用。其示例如图 4-1 所示。</p>\n<p><img src=\"https://images.gitbook.cn/8f24fa40-6fc0-11e9-9e1b-5b6158413fa5\" alt=\"enter image description here\"></p>\n<p>图 4-1　函数</p>\n<h3 id=\"41\">4.1　表达概念</h3>\n<p>从此处开始，本书将在解释编程概念时使用一种新<strong>约定</strong>（convention）（一种共同认同的方式）。例如，通过 <code>print(\"[想打印的内容]\")</code> 来介绍如何使用 print 函数。</p>\n<p>新约定中结合使用了 Python 代码和方括号，方括号中的描述用来解释编程概念。当给出类似示例时，除了方括号及其中的内容之外，其他所有都是有效的 Python 代码。方括号中的内容隐含了你应该使用何种代码进行替换。Python 语法中也有使用方括号，因此在代码中本该应用方括号的处置将使用两个方括号体现。</p>\n<h3 id=\"42\">4.2　函数</h3>\n<p><strong>调用</strong>（call）一个函数，意味着为函数提供执行指令并返回输出所需的输入。函数的每一个输入就是一个<strong>参数</strong>（parameter）。当你为函数提供参数时，则被称为“函数传参”。</p>\n<p>Python 中的函数类似于数学函数。如果忘记了代数中的函数，请看下面这个示例：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># 请不要运行代码</span>\n2\n3\n4\n5  f(x) = x * 2\n</code></pre>\n<p>上面代码中语句左侧定义了一个函数 <code>f</code>，接受一个参数 <code>x</code>。语句右侧是函数的具体定义，利用 <code>(x)</code> 中传递的参数进行计算并返回结果（输出）。本例中，函数的值被定义为函数的参数乘以 2。</p>\n<p>Python 和代数均使用如下语法调用函数：<code>[函数名]([逗号分隔的参数])</code>。在函数名后加上圆括号即可进行调用，参数放置在圆括号中，以逗号分隔。对于 <code>f(x) = x * 2</code> 这个数学函数，<code>f(2)</code> 的值是 4，<code>f(10)</code> 的值是 20。</p>\n<h3 id=\"43\">4.3　定义函数</h3>\n<p>在 Python 中创建一个函数，需要选择函数名，并定义其参数、行为和返回值。下面是定义函数的语法：</p>\n<pre class=\"代码无行号\"><code class=\"hljs markdown\">1  # 请不要执行代码\n2\n3\n4\n5  <strong>def</strong> [<span class=\"hljs-string\">函数名</span>](<span class=\"hljs-link\">[参数]</span>):\n6      [函数定义]</code></pre>\n<p>数学函数 f(x) = x * 2 在 Python 中应该表示如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j9dctwl</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x)</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x * <span class=\"hljs-number\">2</span></code></pre>\n<p>关键字 <code>def</code> 告诉 Python 操作者正在定义一个函数。在 <code>def</code> 关键字后面，指定函数的名称，名称选择遵循与变量名相同的规则。按惯例，函数名不应使用大写字母，单词用下划线分隔：<code>like_this</code>。</p>\n<p>命名函数之后，在名称后加上一对圆括号，圆括号中则是希望函数接受的参数。</p>\n<p>在圆括号之后加入冒号，然后换行并缩进 4 个空格符（和其他复合语句一样）。冒号之后所有缩进 4 个空格符的代码，就是函数的定义。本例中，函数的定义仅有一行，即 <code>return x * 2</code>。关键字 <code>return</code> 指定了调用函数时输出的值，我们称之为函数的返回值。</p>\n<p>在 Python 中，可以使用语法“<code>[函数名]([逗号分隔的参数])</code>”来调用一个函数。以下就是以 2 作为参数调用上述示例中函数 <code>f</code> 的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/zheas3d</span>\n2\n3\n4  <span class=\"hljs-comment\"># 接上一个示例</span>\n5\n6\n7\n8  f(2)</code></pre>\n<p>控制台没有打印任何输出。你可以将函数的输出保存在一个变量中，然后将其传给 <code>print</code> 函数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gspjcgj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 接上一个示例</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span></code></pre>\n<p>如果后面在程序中有需要使用函数返回值的地方，建议将函数的返回值保存到一个变量中。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/znqp8fk</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x)</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>  z = f(<span class=\"hljs-number\">4</span>)\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  <strong><span class=\"hljs-keyword\">if</span></strong> z == <span class=\"hljs-number\">5</span>:\n<span class=\"hljs-number\">12</span>      <strong>print</strong>(<span class=\"hljs-string\">\"z is 5\"</span>)\n<span class=\"hljs-number\">13</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">14</span>      print(<span class=\"hljs-string\">\"z is not 5\"</span>)\n\n&gt;&gt; z <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">5</span></code></pre>\n<p>函数可以有一个或多个参数，也可以不接受任何参数。如要定义不需要参数的函数，只需要在定义函数时把圆括号内置为空即可：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/htk7tr6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f()\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span></code></pre>\n<p>如要函数要接受多个参数，则必须将圆括号中的参数以逗号相隔：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gqmkft7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x, y, z)</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + y + z\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span></code></pre>\n<p>最后，函数必须包含 <code>return</code> 语句。如果函数没有 <code>return</code> 语句，则会返回 <code>None</code>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8qyqov</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">5</span>      z = <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f()\n<span class=\"hljs-number\">9</span>  print(result)\n\n&gt;&gt; <span class=\"hljs-keyword\">None</span></code></pre>\n<h3 id=\"44\">4.4　内置函数</h3>\n<p>Python 编程语言中自带了一个被称为<strong>内置函数</strong>（builtin function）的函数库，它可执行各式各样的计算和任务，而不需任何额外的工作。在前面已经看到过一个内置函数的例子：我们编写的第一个程序就使用了 <code>print</code> 函数打印 <code>\"Hello, World!\"</code>。</p>\n<p>len 也是一个内置函数，表示返回对象的长度，如字符串的长度（字符的数量）。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zfkzqw6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  len(<span class=\"hljs-string\">\"Monty\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h75c3cf</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  len(<span class=\"hljs-string\">\"Python\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span>\n</code></pre>\n<p>内置函数 <code>str</code> 接受一个对象作为参数，并返回一个数据类型为 <code>str</code> 的新对象。例如，可使用 <code>str</code> 将一个整型数据转换成一个字符串。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/juzxg2z</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  str(<span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'100'</span>\n</code></pre>\n<p><code>int</code> 函数可接受一个对象作为参数，并返回一个整型对象。示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/j42qhkf</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-string\">\"1\"</span>)\n\n&gt;&gt; <span class=\"hljs-number\">1</span>\n</code></pre>\n<p><code>float</code> 函数可接受一个对象作为参数，并返回一个浮点数对象。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hnk8gh2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fload(<span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100.0</span>\n</code></pre>\n<p>传给 <code>str</code>、<code>int</code> 或 <code>float</code> 函数的参数，必须要能够转换为字符串、整数或浮点数。<code>str</code> 函数可接受大部分对象作为参数，但是 <code>int</code> 函数只能接受内容为数字的字符串或浮点数对象。<code>float</code> 函数只能接受内容为数字的字符串或整型对象。具体示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jcchmlx</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  int(<span class=\"hljs-string\">\"110\"</span>)\n<span class=\"hljs-number\">5</span>  int(<span class=\"hljs-number\">20.54</span>)\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  float(<span class=\"hljs-string\">\"16.4\"</span>)\n<span class=\"hljs-number\">9</span>  float(<span class=\"hljs-number\">99</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">20</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">16.4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">99.0</span>\n</code></pre>\n<p>如果向 <code>int</code> 或 <code>float</code> 函数中传递的是无法转换为整数或浮点数的参数，Python 将会报出异常错误如下：</p>\n<pre><code class=\"hljs perl\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zseo21s</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-string\">\"Prince\"</span>)\n\n&gt;&gt; ValueError: invalid literal <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">int</span>() with base <span class=\"hljs-number\">10</span>: <span class=\"hljs-string\">'Prince'</span>\n</code></pre>\n<p>使用内置函数 <code>input</code> 收集用户的信息的示例代码如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs perl\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zynprpg</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  age = input(<span class=\"hljs-string\">\"Enter your age:\"</span>)\n<span class=\"hljs-number\">5</span>  int_age = <span class=\"hljs-keyword\">int</span>(age)\n<span class=\"hljs-number\">6</span>  <strong><span class=\"hljs-keyword\">if</span></strong> int_age &lt; <span class=\"hljs-number\">21</span>:\n<span class=\"hljs-number\">7</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"You are young!\"</span>)\n<span class=\"hljs-number\">8</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">9</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"Wow, you are old!\"</span>)\n\n&gt;&gt; Enter your age:</code></pre>\n<p><code>input</code> 函数接受一个字符串作为参数，并将其展示给使用该程序的用户。用户在 shell 中输入回答，程序将回答保存在变量 <code>age</code> 中。</p>\n<p>接下来，使用 <code>int</code> 函数将 <code>age</code> 变量的值从字符串转换为整数。<code>input</code> 函数从用户收集数据以作为 <code>str</code>，但是需要将变量设为 <code>int</code> 才能与其他整数进行比较。转换为整数后，<code>if-else</code> 语句根据用户的输入决定为用户打印什么信息。如果用户输入的数字小于 21，则打印“<code>You are young!”</code>。如果用户输入的数字大于 21，则打印“<code>Wow, you are old!”</code>。</p>\n<h3 id=\"45\">4.5　复用函数</h3>\n<p>函数不仅可用于计算并返回值，还可以封装我们希望复用的功能。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhy8y4m</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">even_odd</span><span class=\"hljs-params\">(x)</span></span>:\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-keyword\">if</span></strong> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">06</span>          print(<span class=\"hljs-string\">\"even\"</span>)\n<span class=\"hljs-number\">07</span>      <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n08          print(<span class=\"hljs-string\">\"odd\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  even_odd(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">12</span>  even_odd(<span class=\"hljs-number\">3</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> even\n<span class=\"hljs-meta\">&gt;&gt;</span> odd</code></pre>\n<p>这里虽然没有定义函数的返回值，但是该函数还是有用的：它检测 <code>x % 2 == 0</code> 是否为真，并打印 <code>x</code> 是奇数还是偶数。</p>\n<p>因为可以对函数进行复用，所以利用函数可以减少代码量。一个未使用函数的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs perl\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jk8lugl</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">05</span>  n = <span class=\"hljs-keyword\">int</span>(n)\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n09      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">10</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-keyword\">print</span></strong>(<span class=\"hljs-string\">\"n is odd.\"</span>)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">15</span>  n = <span class=\"hljs-keyword\">int</span>(n)\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">17</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">18</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">19</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is odd.\"</span>)\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>\n<span class=\"hljs-number\">22</span>  n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">23</span>  n = <span class=\"hljs-keyword\">int</span>(n)\n<span class=\"hljs-number\">24</span>  <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">25</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">26</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">27</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is odd.\"</span>)\n\n&gt;&gt; type a number:</code></pre>\n<p>上面这个程序让用户 3 次输入数字，然后通过 <code>if-else</code> 语句检查数字是否为偶数。如果为偶数，则打印“<code>n is even.”</code>，否则打印“<code>n is odd.”</code>。</p>\n<p>这个程序的问题在于相同的代码重复了 3 次。如果将功能封装在函数中，再调用函数 3 次，则可以大幅减少程序的代码量，并提高可读性。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zzn22mz</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">even_odd</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">06</span>      n = int(n)\n<span class=\"hljs-number\">07</span>      <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">08</span>          print(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">09</span>      <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">10</span>          print(<span class=\"hljs-string\">\"n is odd.\"</span>)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  even_odd()\n<span class=\"hljs-number\">14</span>  even_odd()\n<span class=\"hljs-number\">15</span>  even_odd()\n\n&gt;&gt; type a number:</code></pre>\n<p>新程序的功能与前一个程序完全相同，但是由于将功能封装在了一个可随时按需调用的函数中，代码量大幅减少，可读性大大提升。</p>\n<h3 id=\"46\">4.6　必选及可选参数</h3>\n<p>函数可接受两种参数。目前所看到的都是<strong>必选参数</strong>（required parameter）。当用户调用函数时，必须传入所有必选参数，否则 Python 将报告异常错误。</p>\n<p>Python 中还有另一种参数，即<strong>可选参数</strong>（optional parameter）。函数只在需要时才会传入，并不是执行程序所必须的。如果没有传入可选参数，函数将使用其默认值。使用如下语法定义可选参数：<code>[函数名]([参数名]=[参数值])</code>。与必选参数一样，可选参数也得使用逗号分隔。一个带可选参数的函数示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h3ych4h</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x=<span class=\"hljs-number\">2</span>)</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x ** x\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  print(f())\n<span class=\"hljs-number\">9</span>  print(f(<span class=\"hljs-number\">4</span>))\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">256</span></code></pre>\n<p>首先，这里没有传入参数而是直接调用函数。因为参数是可选的，<code>x</code> 自动获得值为 2，函数返回 4。</p>\n<p>接下来，传入参数 4 并调用函数。函数没有使用默认值，<code>x</code> 获得值为 4，函数返回 256。你可以定义一个既有必选参数也有可选参数的函数，但是必选参数必须位于可选参数之前。</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hm5svn9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">add_it</span><span class=\"hljs-params\">(x, y=<span class=\"hljs-number\">10</span>)</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + y\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = add_it(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">12</span></code></pre>\n<h3 id=\"47\">4.7　作用域</h3>\n<p>变量有一个很重要的属性，<strong>作用域</strong>（scope）。定义变量时，其作用域指的是哪部分程序可以对其进行读写。读取一个变量意味着获取它的值，写变量意味着修改它的值。变量的作用域由其定义在程序中所处的位置决定。</p>\n<p>如果在函数（或类，本书第二部分将介绍）之外定义了一个变量，则变量拥有<strong>全局作用域</strong>（global scope）：即在程序中任意地方都可以对其进行读写操作。带有全局作用域的变量，被称为<strong>全局变量</strong>（global variable）。如果在函数（或类）内部定义一个变量，则变量拥有<strong>局部作用域</strong>（local scope）：即程序只有在定义该变量的函数内部才可对其进行读写。下面示例中的变量拥有全局作用域：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zhmxnqt</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">5</span>  y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">6</span>  z = <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>这些变量不是在函数（或类）内部定义的，因此拥有全局作用域。这意味着可以在程序的任意地方对其进行读写，包含在函数内部。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hgvnj4p</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">05</span>  y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">06</span>  z = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">07</span>\n08\n09  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span>:\n<span class=\"hljs-number\">10</span>      print(x)\n<span class=\"hljs-number\">11</span>      print(y)\n<span class=\"hljs-number\">12</span>      print(z)\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  f()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span></code></pre>\n<p>如果是在函数内部定义的这些变量，则只能在那个函数内部对其进行读写。如果尝试在该函数之外访问它们，Python 会报异常错误。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/znka93k</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">06</span>      y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">07</span>      z = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>  print(x)\n<span class=\"hljs-number\">11</span>  print(y)\n<span class=\"hljs-number\">12</span>  print(z)\n\n&gt;&gt; NameError: name <span class=\"hljs-string\">'x'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> defined</code></pre>\n<p>如果在函数内部定义这些变量，则会成功运行。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z2k3jds</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span>:\n<span class=\"hljs-number\">05</span>      x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">06</span>      y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">07</span>      z = <span class=\"hljs-number\">3</span>\n08      print(x)\n09      print(y)\n<span class=\"hljs-number\">10</span>      print(z)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  f()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span></code></pre>\n<p>在定义变量的函数之外使用变量，相当于使用一个尚未定义的变量，二者都会使 Python 报告相同的异常错误：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zn8zjmr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x &gt; <span class=\"hljs-number\">100</span>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is &gt; 100\"</span>)\n\n&gt;&gt; NameError: name <span class=\"hljs-string\">'x'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> defined</code></pre>\n<p>可以在程序的任何地方对全局变量进行写操作，但是在局部作用域中需稍加注意：必须明确使用 <code>global</code> 关键字，并在其后写上希望修改的变量。Python 要求这样做，是为了确保在函数内部定义变量 <code>x</code> 时，不会意外变更之前在函数外部定义的变量的值。在函数内部对全局变量进行写操作的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zclmda7</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">08</span>      <strong><span class=\"hljs-keyword\">global</span></strong> x\n<span class=\"hljs-number\">09</span>      x += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">10</span>      print(x)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  f()\n\n&gt;&gt; <span class=\"hljs-number\">101</span></code></pre>\n<p>没有作用域，则可以在程序任何地方访问所有变量，这样会造成很大的问题。如果程序代码量很大，其中有一个使用变量 x 的函数，你可能会在其他地方修改该变量的值。类似这样的错误会改变程序的行为，并导致意料之外的结果。程序规模越大，变量数量越多，出现问题的可能性就越高。</p>\n<h3 id=\"48\">4.8　异常处理</h3>\n<p>依赖 input 函数获得用户输入，则意味着无法控制程序的输入（用户提供的输入可能会导致错误）。例如，假设你写了一个程序，从用户端收集两个数字并打印第一个数字除以第二个数字的结果。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jcg5qwp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">5</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">6</span>  a = int(a)\n<span class=\"hljs-number\">7</span>  b = int(b)\n<span class=\"hljs-number\">8</span>  print(a / b)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>程序看起来运行正常。但是，如果用户第二个数字输入的是 0，则会出现问题，如下所示：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ztpcjs4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">5</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">6</span>  a = int(a)\n<span class=\"hljs-number\">7</span>  b = int(b)\n<span class=\"hljs-number\">8</span>  print(a / b)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ZeroDivisionError:</span> integer division or modulo by zero\n</code></pre>\n<p>这里不能指望使用程序的用户不会输入 0 作为第二个数字。其解决方法是使用<strong>异常处理</strong>（exception handling），支持测试错误条件，在错误发生时捕获异常，然后决定如何处理。</p>\n<p>异常处理使用 <code>try</code> 和 <code>except</code> 关键字。在你修改程序使用异常处理之后，如果用户第二个数字输入 0，程序不会报错，而是会打印一段话告诉用户不要输入 0。</p>\n<p>Python 中的每一个异常都是一个对象，可在如下网址查看所有内置异常：https://www.tutorialspoint.com/python/standard_exceptions.htm。如果你认为代码可能会报告异常，可使用关键字 <code>try</code> 和 <code>except</code> 来捕获。</p>\n<p><code>try</code> 从句包含可能会发生的错误，<code>except</code> 从句包含仅在错误发生时执行的代码。下面是在程序中进行异常处理的一个示例，这样如果用户输入0作为第二个数字，程序也不会崩溃。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2scn4f</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">05</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">06</span>  a = int(a)\n<span class=\"hljs-number\">07</span>  b = int(b)\n08  <strong><span class=\"hljs-symbol\">try</span></strong><span class=\"hljs-symbol\">:</span>\n09      print(a / b)\n<span class=\"hljs-number\">10</span>  <strong>except</strong> <span class=\"hljs-symbol\">ZeroDivisionError:</span>\n<span class=\"hljs-number\">11</span>      print(<span class=\"hljs-string\">\"b cannot be zero.\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> b cannot be zero.</code></pre>\n<p>如果用户为 <code>b</code> 参数提供的输入不是 0，则执行 <code>try</code> 代码块，<code>except</code> 代码块不执行。如果用户为 <code>b</code> 参数提供的输入为 0，Python 不会报错，而是执行 <code>except</code> 代码块，并打印“<code>b cannot be zero.</code>”。</p>\n<p>如果用户输入的是无法转换为整型数的字符串，程序也会崩溃。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">2</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">3</span>  a = int(a)\n<span class=\"hljs-number\">4</span>  b = int(b)\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-symbol\">try</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">6</span>      print(a / b)\n<span class=\"hljs-number\">7</span>  <strong>except</strong> <span class=\"hljs-symbol\">ZeroDivisionError:</span>\n<span class=\"hljs-number\">8</span>      print(<span class=\"hljs-string\">\"b cannot be zero.\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Hundo\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Million\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ValueError:</span> invalid literal for int() with base <span class=\"hljs-number\">10</span>: <span class=\"hljs-string\">'Hundo'</span></code></pre>\n<p>将收集用户收入的部分代码移入 <code>try</code> 语句内，并让 <code>except</code> 语句注意两个异常（ZeroDivisionError 和 ValueError）即可解决问题。如果向 <code>int</code>、<code>str</code> 或 <code>float</code> 等内置函数中传入无效输入，则会出现 <code>ValueError</code>。在 <code>except</code> 关键字后添加圆括号，并用逗号分隔两个异常即可将二者捕获。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jlus42v</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-symbol\">try</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">05</span>      a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">06</span>      b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">07</span>      a = int(a)\n08      b = int(b)\n09      print(a / b)\n<span class=\"hljs-number\">10</span>  <strong>except</strong> (ZeroDivisionError,\n<span class=\"hljs-number\">11</span>          ValueError):\n<span class=\"hljs-number\">12</span>      print(<span class=\"hljs-string\">\"Invalid input.\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Hundo\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Million\n<span class=\"hljs-meta\">&gt;&gt;</span> Invalid input.</code></pre>\n<p>不要在 <code>except</code> 语句中使用 <code>try</code> 语句定义的变量，因为异常可能是在变量定义之前发生的，如果在 <code>except</code> 语句中这样做可能又会导致新的异常出现。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hockur5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">try</span></strong>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">6</span>      c = <span class=\"hljs-string\">\"I will never get defined.\"</span>\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-keyword\">except</span></strong> ZeroDivisionError:\n<span class=\"hljs-number\">8</span>      print(c)\n\n&gt;&gt; NameError: name <span class=\"hljs-string\">'c'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> defined</code></pre>\n<h3 id=\"49\">4.9　文档字符串</h3>\n<p>定义一个带参数的函数时，有时要求参数必须是某种数据类型，函数才能成功执行。那么该如何将这点告知函数的调用者？在编写函数时，在函数顶部留下注释来解释每个参数应该为何种数据类型，是比较好的做法。这些注释被称为<strong>文档字符串</strong>（docstring）。文档字符串用于解释函数的功能，记录所需的参数类型。</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhahdcg</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(x, y)</span>:</span>\n<span class=\"hljs-number\">05</span>      <span class=\"hljs-string\">\"\"\"\n06      返回 x + y 的值\n07      :param x: int.\n08      :param y: int.\n09      :return: int, x 与 y 之和\n10      \"\"\"</span>\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + y</code></pre>\n<p>文档字符串的第一行清楚地解释了函数的功能，因此当其他开发者使用该函数或方法时，他们不必读完所有代码才能弄清其目的。文档字符串的其他行列出了函数的参数、参数类型和返回值。文档字符串有助于开发者快速编程，因为不必通读代码，只需通过文档字符串即可了解函数的作用等必要信息。</p>\n<p>为了保证本书的示例简洁，书中省略了一般都会加上的文档字符串。正常情况下，我在编码时会加上文档字符串，以供其他开发者之后阅读。</p>\n<h3 id=\"410\">4.10　有需要才使用变量</h3>\n<p>只有在后面的程序中会用到数据，才有必要将其保存至变量。不要仅仅为了打印数值就将整数保存至变量。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zptktex</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">5</span>  print(x)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>这里应该直接将整数传给 print 函数：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hmwr4kd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>本书中的一些示例多次违背了这条准则，目的是为了方便大家理解。读者在写代码时没有必要这样做。</p>\n<h3 id=\"411\">4.11　术语表</h3>\n<p><strong>函数</strong>：可接受输入和执行指令，并返回输出的复合语句。</p>\n<p><strong>惯例</strong>：普遍认可的行为方式。</p>\n<p><strong>调用</strong>：向函数提供执行指令、返回输出所需的输入。</p>\n<p><strong>参数</strong>：传递给函数的数据。</p>\n<p><strong>必选参数</strong>：非可选参数。</p>\n<p><strong>可选参数</strong>：非必须提供的参数。</p>\n<p><strong>内置函数</strong>：Python 自带的函数。</p>\n<p><strong>作用域</strong>：变量可进行读写的范围。</p>\n<p><strong>全局作用域</strong>：可在程序中任何地方读写的变量的作用域。</p>\n<p><strong>全局变量</strong>：拥有全局作用域的变量。</p>\n<p><strong>局部作用域</strong>：只能在其定义所在的函数（或类）中读写的变量的作用域。</p>\n<p><strong>异常处理</strong>：一个编程概念，要求检测错误条件。如果符合则捕获异常，并决定如何处理。</p>\n<p><strong>文档字符串</strong>：解释函数功能，记录其参数类型的字符串。</p>\n<h3 id=\"412\">4.12　挑战练习</h3>\n<p>1．编写一个函数，接受数字作为输入，并返回该数字的平方。</p>\n<p>2．编写一个以字符串为参数并将其打印的函数。</p>\n<p>3．编写一个接受 3 个必选参数、两个可选参数的函数。</p>\n<p>4．编写一个带两个函数的程序。第一个函数应接受一个整数为参数，并返回该整数除以 2 的值。第二个函数应接受一个整数作为参数，并返回该整数乘以 4 的值。调用第一个函数，将结果保存至变量，并将变量作为参数传递给第二个函数。</p>\n<p>5．编写一个将字符串转换为 float 对象并返回该结果的函数。使用异常处理来捕获可能发生的异常。</p>\n<p>6．为挑战练习 1～5 中编写的所有函数添加文档字符串。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n\n</body>\n</html>","source":"_posts/Python无师自通/4_function.html","raw":"---\ntitle: 函数\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>函数</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#41\">4.1　表达概念</a></li>\n<li><a href=\"#42\">4.2　函数</a></li>\n<li><a href=\"#43\">4.3　定义函数</a></li>\n<li><a href=\"#44\">4.4　内置函数</a></li>\n<li><a href=\"#45\">4.5　复用函数</a></li>\n<li><a href=\"#46\">4.6　必选及可选参数</a></li>\n<li><a href=\"#47\">4.7　作用域</a></li>\n<li><a href=\"#48\">4.8　异常处理</a></li>\n<li><a href=\"#49\">4.9　文档字符串</a></li>\n<li><a href=\"#410\">4.10　有需要才使用变量</a></li>\n<li><a href=\"#411\">4.11　术语表</a></li>\n<li><a href=\"#412\">4.12　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“函数应该做一件事。做好这件事。只能做这一件事。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——罗伯特 · C. 马丁（Robert C.Martin）</span></p>\n</blockquote>\n<p>本章将介绍<strong>函数（function）</strong>：可接受输入，执行指令并返回输出的复合语句。通过函数，我们可以在程序中定义功能，并重复使用。其示例如图 4-1 所示。</p>\n<p><img src=\"https://images.gitbook.cn/8f24fa40-6fc0-11e9-9e1b-5b6158413fa5\" alt=\"enter image description here\"></p>\n<p>图 4-1　函数</p>\n<h3 id=\"41\">4.1　表达概念</h3>\n<p>从此处开始，本书将在解释编程概念时使用一种新<strong>约定</strong>（convention）（一种共同认同的方式）。例如，通过 <code>print(\"[想打印的内容]\")</code> 来介绍如何使用 print 函数。</p>\n<p>新约定中结合使用了 Python 代码和方括号，方括号中的描述用来解释编程概念。当给出类似示例时，除了方括号及其中的内容之外，其他所有都是有效的 Python 代码。方括号中的内容隐含了你应该使用何种代码进行替换。Python 语法中也有使用方括号，因此在代码中本该应用方括号的处置将使用两个方括号体现。</p>\n<h3 id=\"42\">4.2　函数</h3>\n<p><strong>调用</strong>（call）一个函数，意味着为函数提供执行指令并返回输出所需的输入。函数的每一个输入就是一个<strong>参数</strong>（parameter）。当你为函数提供参数时，则被称为“函数传参”。</p>\n<p>Python 中的函数类似于数学函数。如果忘记了代数中的函数，请看下面这个示例：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># 请不要运行代码</span>\n2\n3\n4\n5  f(x) = x * 2\n</code></pre>\n<p>上面代码中语句左侧定义了一个函数 <code>f</code>，接受一个参数 <code>x</code>。语句右侧是函数的具体定义，利用 <code>(x)</code> 中传递的参数进行计算并返回结果（输出）。本例中，函数的值被定义为函数的参数乘以 2。</p>\n<p>Python 和代数均使用如下语法调用函数：<code>[函数名]([逗号分隔的参数])</code>。在函数名后加上圆括号即可进行调用，参数放置在圆括号中，以逗号分隔。对于 <code>f(x) = x * 2</code> 这个数学函数，<code>f(2)</code> 的值是 4，<code>f(10)</code> 的值是 20。</p>\n<h3 id=\"43\">4.3　定义函数</h3>\n<p>在 Python 中创建一个函数，需要选择函数名，并定义其参数、行为和返回值。下面是定义函数的语法：</p>\n<pre class=\"代码无行号\"><code class=\"hljs markdown\">1  # 请不要执行代码\n2\n3\n4\n5  <strong>def</strong> [<span class=\"hljs-string\">函数名</span>](<span class=\"hljs-link\">[参数]</span>):\n6      [函数定义]</code></pre>\n<p>数学函数 f(x) = x * 2 在 Python 中应该表示如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j9dctwl</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x)</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x * <span class=\"hljs-number\">2</span></code></pre>\n<p>关键字 <code>def</code> 告诉 Python 操作者正在定义一个函数。在 <code>def</code> 关键字后面，指定函数的名称，名称选择遵循与变量名相同的规则。按惯例，函数名不应使用大写字母，单词用下划线分隔：<code>like_this</code>。</p>\n<p>命名函数之后，在名称后加上一对圆括号，圆括号中则是希望函数接受的参数。</p>\n<p>在圆括号之后加入冒号，然后换行并缩进 4 个空格符（和其他复合语句一样）。冒号之后所有缩进 4 个空格符的代码，就是函数的定义。本例中，函数的定义仅有一行，即 <code>return x * 2</code>。关键字 <code>return</code> 指定了调用函数时输出的值，我们称之为函数的返回值。</p>\n<p>在 Python 中，可以使用语法“<code>[函数名]([逗号分隔的参数])</code>”来调用一个函数。以下就是以 2 作为参数调用上述示例中函数 <code>f</code> 的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/zheas3d</span>\n2\n3\n4  <span class=\"hljs-comment\"># 接上一个示例</span>\n5\n6\n7\n8  f(2)</code></pre>\n<p>控制台没有打印任何输出。你可以将函数的输出保存在一个变量中，然后将其传给 <code>print</code> 函数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gspjcgj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 接上一个示例</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span></code></pre>\n<p>如果后面在程序中有需要使用函数返回值的地方，建议将函数的返回值保存到一个变量中。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/znqp8fk</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x)</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>  z = f(<span class=\"hljs-number\">4</span>)\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  <strong><span class=\"hljs-keyword\">if</span></strong> z == <span class=\"hljs-number\">5</span>:\n<span class=\"hljs-number\">12</span>      <strong>print</strong>(<span class=\"hljs-string\">\"z is 5\"</span>)\n<span class=\"hljs-number\">13</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">14</span>      print(<span class=\"hljs-string\">\"z is not 5\"</span>)\n\n&gt;&gt; z <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">5</span></code></pre>\n<p>函数可以有一个或多个参数，也可以不接受任何参数。如要定义不需要参数的函数，只需要在定义函数时把圆括号内置为空即可：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/htk7tr6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f()\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span></code></pre>\n<p>如要函数要接受多个参数，则必须将圆括号中的参数以逗号相隔：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gqmkft7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x, y, z)</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + y + z\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span></code></pre>\n<p>最后，函数必须包含 <code>return</code> 语句。如果函数没有 <code>return</code> 语句，则会返回 <code>None</code>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8qyqov</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">5</span>      z = <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f()\n<span class=\"hljs-number\">9</span>  print(result)\n\n&gt;&gt; <span class=\"hljs-keyword\">None</span></code></pre>\n<h3 id=\"44\">4.4　内置函数</h3>\n<p>Python 编程语言中自带了一个被称为<strong>内置函数</strong>（builtin function）的函数库，它可执行各式各样的计算和任务，而不需任何额外的工作。在前面已经看到过一个内置函数的例子：我们编写的第一个程序就使用了 <code>print</code> 函数打印 <code>\"Hello, World!\"</code>。</p>\n<p>len 也是一个内置函数，表示返回对象的长度，如字符串的长度（字符的数量）。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zfkzqw6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  len(<span class=\"hljs-string\">\"Monty\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h75c3cf</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  len(<span class=\"hljs-string\">\"Python\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span>\n</code></pre>\n<p>内置函数 <code>str</code> 接受一个对象作为参数，并返回一个数据类型为 <code>str</code> 的新对象。例如，可使用 <code>str</code> 将一个整型数据转换成一个字符串。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/juzxg2z</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  str(<span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'100'</span>\n</code></pre>\n<p><code>int</code> 函数可接受一个对象作为参数，并返回一个整型对象。示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/j42qhkf</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-string\">\"1\"</span>)\n\n&gt;&gt; <span class=\"hljs-number\">1</span>\n</code></pre>\n<p><code>float</code> 函数可接受一个对象作为参数，并返回一个浮点数对象。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hnk8gh2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fload(<span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100.0</span>\n</code></pre>\n<p>传给 <code>str</code>、<code>int</code> 或 <code>float</code> 函数的参数，必须要能够转换为字符串、整数或浮点数。<code>str</code> 函数可接受大部分对象作为参数，但是 <code>int</code> 函数只能接受内容为数字的字符串或浮点数对象。<code>float</code> 函数只能接受内容为数字的字符串或整型对象。具体示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jcchmlx</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  int(<span class=\"hljs-string\">\"110\"</span>)\n<span class=\"hljs-number\">5</span>  int(<span class=\"hljs-number\">20.54</span>)\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  float(<span class=\"hljs-string\">\"16.4\"</span>)\n<span class=\"hljs-number\">9</span>  float(<span class=\"hljs-number\">99</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">20</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">16.4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">99.0</span>\n</code></pre>\n<p>如果向 <code>int</code> 或 <code>float</code> 函数中传递的是无法转换为整数或浮点数的参数，Python 将会报出异常错误如下：</p>\n<pre><code class=\"hljs perl\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zseo21s</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-string\">\"Prince\"</span>)\n\n&gt;&gt; ValueError: invalid literal <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">int</span>() with base <span class=\"hljs-number\">10</span>: <span class=\"hljs-string\">'Prince'</span>\n</code></pre>\n<p>使用内置函数 <code>input</code> 收集用户的信息的示例代码如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs perl\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zynprpg</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  age = input(<span class=\"hljs-string\">\"Enter your age:\"</span>)\n<span class=\"hljs-number\">5</span>  int_age = <span class=\"hljs-keyword\">int</span>(age)\n<span class=\"hljs-number\">6</span>  <strong><span class=\"hljs-keyword\">if</span></strong> int_age &lt; <span class=\"hljs-number\">21</span>:\n<span class=\"hljs-number\">7</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"You are young!\"</span>)\n<span class=\"hljs-number\">8</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">9</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"Wow, you are old!\"</span>)\n\n&gt;&gt; Enter your age:</code></pre>\n<p><code>input</code> 函数接受一个字符串作为参数，并将其展示给使用该程序的用户。用户在 shell 中输入回答，程序将回答保存在变量 <code>age</code> 中。</p>\n<p>接下来，使用 <code>int</code> 函数将 <code>age</code> 变量的值从字符串转换为整数。<code>input</code> 函数从用户收集数据以作为 <code>str</code>，但是需要将变量设为 <code>int</code> 才能与其他整数进行比较。转换为整数后，<code>if-else</code> 语句根据用户的输入决定为用户打印什么信息。如果用户输入的数字小于 21，则打印“<code>You are young!”</code>。如果用户输入的数字大于 21，则打印“<code>Wow, you are old!”</code>。</p>\n<h3 id=\"45\">4.5　复用函数</h3>\n<p>函数不仅可用于计算并返回值，还可以封装我们希望复用的功能。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhy8y4m</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">even_odd</span><span class=\"hljs-params\">(x)</span></span>:\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-keyword\">if</span></strong> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">06</span>          print(<span class=\"hljs-string\">\"even\"</span>)\n<span class=\"hljs-number\">07</span>      <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n08          print(<span class=\"hljs-string\">\"odd\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  even_odd(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">12</span>  even_odd(<span class=\"hljs-number\">3</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> even\n<span class=\"hljs-meta\">&gt;&gt;</span> odd</code></pre>\n<p>这里虽然没有定义函数的返回值，但是该函数还是有用的：它检测 <code>x % 2 == 0</code> 是否为真，并打印 <code>x</code> 是奇数还是偶数。</p>\n<p>因为可以对函数进行复用，所以利用函数可以减少代码量。一个未使用函数的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs perl\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jk8lugl</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">05</span>  n = <span class=\"hljs-keyword\">int</span>(n)\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n09      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">10</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-keyword\">print</span></strong>(<span class=\"hljs-string\">\"n is odd.\"</span>)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">15</span>  n = <span class=\"hljs-keyword\">int</span>(n)\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">17</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">18</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">19</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is odd.\"</span>)\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>\n<span class=\"hljs-number\">22</span>  n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">23</span>  n = <span class=\"hljs-keyword\">int</span>(n)\n<span class=\"hljs-number\">24</span>  <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">25</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">26</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">27</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is odd.\"</span>)\n\n&gt;&gt; type a number:</code></pre>\n<p>上面这个程序让用户 3 次输入数字，然后通过 <code>if-else</code> 语句检查数字是否为偶数。如果为偶数，则打印“<code>n is even.”</code>，否则打印“<code>n is odd.”</code>。</p>\n<p>这个程序的问题在于相同的代码重复了 3 次。如果将功能封装在函数中，再调用函数 3 次，则可以大幅减少程序的代码量，并提高可读性。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zzn22mz</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">even_odd</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">06</span>      n = int(n)\n<span class=\"hljs-number\">07</span>      <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">08</span>          print(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">09</span>      <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">10</span>          print(<span class=\"hljs-string\">\"n is odd.\"</span>)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  even_odd()\n<span class=\"hljs-number\">14</span>  even_odd()\n<span class=\"hljs-number\">15</span>  even_odd()\n\n&gt;&gt; type a number:</code></pre>\n<p>新程序的功能与前一个程序完全相同，但是由于将功能封装在了一个可随时按需调用的函数中，代码量大幅减少，可读性大大提升。</p>\n<h3 id=\"46\">4.6　必选及可选参数</h3>\n<p>函数可接受两种参数。目前所看到的都是<strong>必选参数</strong>（required parameter）。当用户调用函数时，必须传入所有必选参数，否则 Python 将报告异常错误。</p>\n<p>Python 中还有另一种参数，即<strong>可选参数</strong>（optional parameter）。函数只在需要时才会传入，并不是执行程序所必须的。如果没有传入可选参数，函数将使用其默认值。使用如下语法定义可选参数：<code>[函数名]([参数名]=[参数值])</code>。与必选参数一样，可选参数也得使用逗号分隔。一个带可选参数的函数示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h3ych4h</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x=<span class=\"hljs-number\">2</span>)</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x ** x\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  print(f())\n<span class=\"hljs-number\">9</span>  print(f(<span class=\"hljs-number\">4</span>))\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">256</span></code></pre>\n<p>首先，这里没有传入参数而是直接调用函数。因为参数是可选的，<code>x</code> 自动获得值为 2，函数返回 4。</p>\n<p>接下来，传入参数 4 并调用函数。函数没有使用默认值，<code>x</code> 获得值为 4，函数返回 256。你可以定义一个既有必选参数也有可选参数的函数，但是必选参数必须位于可选参数之前。</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hm5svn9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">add_it</span><span class=\"hljs-params\">(x, y=<span class=\"hljs-number\">10</span>)</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + y\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = add_it(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">12</span></code></pre>\n<h3 id=\"47\">4.7　作用域</h3>\n<p>变量有一个很重要的属性，<strong>作用域</strong>（scope）。定义变量时，其作用域指的是哪部分程序可以对其进行读写。读取一个变量意味着获取它的值，写变量意味着修改它的值。变量的作用域由其定义在程序中所处的位置决定。</p>\n<p>如果在函数（或类，本书第二部分将介绍）之外定义了一个变量，则变量拥有<strong>全局作用域</strong>（global scope）：即在程序中任意地方都可以对其进行读写操作。带有全局作用域的变量，被称为<strong>全局变量</strong>（global variable）。如果在函数（或类）内部定义一个变量，则变量拥有<strong>局部作用域</strong>（local scope）：即程序只有在定义该变量的函数内部才可对其进行读写。下面示例中的变量拥有全局作用域：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zhmxnqt</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">5</span>  y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">6</span>  z = <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>这些变量不是在函数（或类）内部定义的，因此拥有全局作用域。这意味着可以在程序的任意地方对其进行读写，包含在函数内部。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hgvnj4p</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">05</span>  y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">06</span>  z = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">07</span>\n08\n09  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span>:\n<span class=\"hljs-number\">10</span>      print(x)\n<span class=\"hljs-number\">11</span>      print(y)\n<span class=\"hljs-number\">12</span>      print(z)\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  f()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span></code></pre>\n<p>如果是在函数内部定义的这些变量，则只能在那个函数内部对其进行读写。如果尝试在该函数之外访问它们，Python 会报异常错误。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/znka93k</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">06</span>      y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">07</span>      z = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>  print(x)\n<span class=\"hljs-number\">11</span>  print(y)\n<span class=\"hljs-number\">12</span>  print(z)\n\n&gt;&gt; NameError: name <span class=\"hljs-string\">'x'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> defined</code></pre>\n<p>如果在函数内部定义这些变量，则会成功运行。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z2k3jds</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span>:\n<span class=\"hljs-number\">05</span>      x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">06</span>      y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">07</span>      z = <span class=\"hljs-number\">3</span>\n08      print(x)\n09      print(y)\n<span class=\"hljs-number\">10</span>      print(z)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  f()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span></code></pre>\n<p>在定义变量的函数之外使用变量，相当于使用一个尚未定义的变量，二者都会使 Python 报告相同的异常错误：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zn8zjmr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x &gt; <span class=\"hljs-number\">100</span>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is &gt; 100\"</span>)\n\n&gt;&gt; NameError: name <span class=\"hljs-string\">'x'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> defined</code></pre>\n<p>可以在程序的任何地方对全局变量进行写操作，但是在局部作用域中需稍加注意：必须明确使用 <code>global</code> 关键字，并在其后写上希望修改的变量。Python 要求这样做，是为了确保在函数内部定义变量 <code>x</code> 时，不会意外变更之前在函数外部定义的变量的值。在函数内部对全局变量进行写操作的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zclmda7</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">08</span>      <strong><span class=\"hljs-keyword\">global</span></strong> x\n<span class=\"hljs-number\">09</span>      x += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">10</span>      print(x)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  f()\n\n&gt;&gt; <span class=\"hljs-number\">101</span></code></pre>\n<p>没有作用域，则可以在程序任何地方访问所有变量，这样会造成很大的问题。如果程序代码量很大，其中有一个使用变量 x 的函数，你可能会在其他地方修改该变量的值。类似这样的错误会改变程序的行为，并导致意料之外的结果。程序规模越大，变量数量越多，出现问题的可能性就越高。</p>\n<h3 id=\"48\">4.8　异常处理</h3>\n<p>依赖 input 函数获得用户输入，则意味着无法控制程序的输入（用户提供的输入可能会导致错误）。例如，假设你写了一个程序，从用户端收集两个数字并打印第一个数字除以第二个数字的结果。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jcg5qwp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">5</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">6</span>  a = int(a)\n<span class=\"hljs-number\">7</span>  b = int(b)\n<span class=\"hljs-number\">8</span>  print(a / b)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>程序看起来运行正常。但是，如果用户第二个数字输入的是 0，则会出现问题，如下所示：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ztpcjs4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">5</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">6</span>  a = int(a)\n<span class=\"hljs-number\">7</span>  b = int(b)\n<span class=\"hljs-number\">8</span>  print(a / b)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ZeroDivisionError:</span> integer division or modulo by zero\n</code></pre>\n<p>这里不能指望使用程序的用户不会输入 0 作为第二个数字。其解决方法是使用<strong>异常处理</strong>（exception handling），支持测试错误条件，在错误发生时捕获异常，然后决定如何处理。</p>\n<p>异常处理使用 <code>try</code> 和 <code>except</code> 关键字。在你修改程序使用异常处理之后，如果用户第二个数字输入 0，程序不会报错，而是会打印一段话告诉用户不要输入 0。</p>\n<p>Python 中的每一个异常都是一个对象，可在如下网址查看所有内置异常：https://www.tutorialspoint.com/python/standard_exceptions.htm。如果你认为代码可能会报告异常，可使用关键字 <code>try</code> 和 <code>except</code> 来捕获。</p>\n<p><code>try</code> 从句包含可能会发生的错误，<code>except</code> 从句包含仅在错误发生时执行的代码。下面是在程序中进行异常处理的一个示例，这样如果用户输入0作为第二个数字，程序也不会崩溃。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2scn4f</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">05</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">06</span>  a = int(a)\n<span class=\"hljs-number\">07</span>  b = int(b)\n08  <strong><span class=\"hljs-symbol\">try</span></strong><span class=\"hljs-symbol\">:</span>\n09      print(a / b)\n<span class=\"hljs-number\">10</span>  <strong>except</strong> <span class=\"hljs-symbol\">ZeroDivisionError:</span>\n<span class=\"hljs-number\">11</span>      print(<span class=\"hljs-string\">\"b cannot be zero.\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> b cannot be zero.</code></pre>\n<p>如果用户为 <code>b</code> 参数提供的输入不是 0，则执行 <code>try</code> 代码块，<code>except</code> 代码块不执行。如果用户为 <code>b</code> 参数提供的输入为 0，Python 不会报错，而是执行 <code>except</code> 代码块，并打印“<code>b cannot be zero.</code>”。</p>\n<p>如果用户输入的是无法转换为整型数的字符串，程序也会崩溃。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">2</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">3</span>  a = int(a)\n<span class=\"hljs-number\">4</span>  b = int(b)\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-symbol\">try</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">6</span>      print(a / b)\n<span class=\"hljs-number\">7</span>  <strong>except</strong> <span class=\"hljs-symbol\">ZeroDivisionError:</span>\n<span class=\"hljs-number\">8</span>      print(<span class=\"hljs-string\">\"b cannot be zero.\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Hundo\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Million\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ValueError:</span> invalid literal for int() with base <span class=\"hljs-number\">10</span>: <span class=\"hljs-string\">'Hundo'</span></code></pre>\n<p>将收集用户收入的部分代码移入 <code>try</code> 语句内，并让 <code>except</code> 语句注意两个异常（ZeroDivisionError 和 ValueError）即可解决问题。如果向 <code>int</code>、<code>str</code> 或 <code>float</code> 等内置函数中传入无效输入，则会出现 <code>ValueError</code>。在 <code>except</code> 关键字后添加圆括号，并用逗号分隔两个异常即可将二者捕获。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jlus42v</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-symbol\">try</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">05</span>      a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">06</span>      b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">07</span>      a = int(a)\n08      b = int(b)\n09      print(a / b)\n<span class=\"hljs-number\">10</span>  <strong>except</strong> (ZeroDivisionError,\n<span class=\"hljs-number\">11</span>          ValueError):\n<span class=\"hljs-number\">12</span>      print(<span class=\"hljs-string\">\"Invalid input.\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Hundo\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Million\n<span class=\"hljs-meta\">&gt;&gt;</span> Invalid input.</code></pre>\n<p>不要在 <code>except</code> 语句中使用 <code>try</code> 语句定义的变量，因为异常可能是在变量定义之前发生的，如果在 <code>except</code> 语句中这样做可能又会导致新的异常出现。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hockur5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">try</span></strong>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">6</span>      c = <span class=\"hljs-string\">\"I will never get defined.\"</span>\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-keyword\">except</span></strong> ZeroDivisionError:\n<span class=\"hljs-number\">8</span>      print(c)\n\n&gt;&gt; NameError: name <span class=\"hljs-string\">'c'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> defined</code></pre>\n<h3 id=\"49\">4.9　文档字符串</h3>\n<p>定义一个带参数的函数时，有时要求参数必须是某种数据类型，函数才能成功执行。那么该如何将这点告知函数的调用者？在编写函数时，在函数顶部留下注释来解释每个参数应该为何种数据类型，是比较好的做法。这些注释被称为<strong>文档字符串</strong>（docstring）。文档字符串用于解释函数的功能，记录所需的参数类型。</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhahdcg</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(x, y)</span>:</span>\n<span class=\"hljs-number\">05</span>      <span class=\"hljs-string\">\"\"\"\n06      返回 x + y 的值\n07      :param x: int.\n08      :param y: int.\n09      :return: int, x 与 y 之和\n10      \"\"\"</span>\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + y</code></pre>\n<p>文档字符串的第一行清楚地解释了函数的功能，因此当其他开发者使用该函数或方法时，他们不必读完所有代码才能弄清其目的。文档字符串的其他行列出了函数的参数、参数类型和返回值。文档字符串有助于开发者快速编程，因为不必通读代码，只需通过文档字符串即可了解函数的作用等必要信息。</p>\n<p>为了保证本书的示例简洁，书中省略了一般都会加上的文档字符串。正常情况下，我在编码时会加上文档字符串，以供其他开发者之后阅读。</p>\n<h3 id=\"410\">4.10　有需要才使用变量</h3>\n<p>只有在后面的程序中会用到数据，才有必要将其保存至变量。不要仅仅为了打印数值就将整数保存至变量。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zptktex</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">5</span>  print(x)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>这里应该直接将整数传给 print 函数：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hmwr4kd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>本书中的一些示例多次违背了这条准则，目的是为了方便大家理解。读者在写代码时没有必要这样做。</p>\n<h3 id=\"411\">4.11　术语表</h3>\n<p><strong>函数</strong>：可接受输入和执行指令，并返回输出的复合语句。</p>\n<p><strong>惯例</strong>：普遍认可的行为方式。</p>\n<p><strong>调用</strong>：向函数提供执行指令、返回输出所需的输入。</p>\n<p><strong>参数</strong>：传递给函数的数据。</p>\n<p><strong>必选参数</strong>：非可选参数。</p>\n<p><strong>可选参数</strong>：非必须提供的参数。</p>\n<p><strong>内置函数</strong>：Python 自带的函数。</p>\n<p><strong>作用域</strong>：变量可进行读写的范围。</p>\n<p><strong>全局作用域</strong>：可在程序中任何地方读写的变量的作用域。</p>\n<p><strong>全局变量</strong>：拥有全局作用域的变量。</p>\n<p><strong>局部作用域</strong>：只能在其定义所在的函数（或类）中读写的变量的作用域。</p>\n<p><strong>异常处理</strong>：一个编程概念，要求检测错误条件。如果符合则捕获异常，并决定如何处理。</p>\n<p><strong>文档字符串</strong>：解释函数功能，记录其参数类型的字符串。</p>\n<h3 id=\"412\">4.12　挑战练习</h3>\n<p>1．编写一个函数，接受数字作为输入，并返回该数字的平方。</p>\n<p>2．编写一个以字符串为参数并将其打印的函数。</p>\n<p>3．编写一个接受 3 个必选参数、两个可选参数的函数。</p>\n<p>4．编写一个带两个函数的程序。第一个函数应接受一个整数为参数，并返回该整数除以 2 的值。第二个函数应接受一个整数作为参数，并返回该整数乘以 4 的值。调用第一个函数，将结果保存至变量，并将变量作为参数传递给第二个函数。</p>\n<p>5．编写一个将字符串转换为 float 对象并返回该结果的函数。使用异常处理来捕获可能发生的异常。</p>\n<p>6．为挑战练习 1～5 中编写的所有函数添加文档字符串。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n\n</body>\n</html>","slug":"Python无师自通/4_function","published":1,"date":"2019-05-31T04:48:26.278Z","updated":"2019-05-31T04:48:26.278Z","_id":"cjwd49mxc0007sv72g5xycac5","comments":1,"layout":"post","photos":[],"link":"","content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>函数</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#41\">4.1　表达概念</a></li>\n<li><a href=\"#42\">4.2　函数</a></li>\n<li><a href=\"#43\">4.3　定义函数</a></li>\n<li><a href=\"#44\">4.4　内置函数</a></li>\n<li><a href=\"#45\">4.5　复用函数</a></li>\n<li><a href=\"#46\">4.6　必选及可选参数</a></li>\n<li><a href=\"#47\">4.7　作用域</a></li>\n<li><a href=\"#48\">4.8　异常处理</a></li>\n<li><a href=\"#49\">4.9　文档字符串</a></li>\n<li><a href=\"#410\">4.10　有需要才使用变量</a></li>\n<li><a href=\"#411\">4.11　术语表</a></li>\n<li><a href=\"#412\">4.12　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“函数应该做一件事。做好这件事。只能做这一件事。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——罗伯特 · C. 马丁（Robert C.Martin）</span></p>\n</blockquote>\n<p>本章将介绍<strong>函数（function）</strong>：可接受输入，执行指令并返回输出的复合语句。通过函数，我们可以在程序中定义功能，并重复使用。其示例如图 4-1 所示。</p>\n<p><img src=\"https://images.gitbook.cn/8f24fa40-6fc0-11e9-9e1b-5b6158413fa5\" alt=\"enter image description here\"></p>\n<p>图 4-1　函数</p>\n<h3 id=\"41\">4.1　表达概念</h3>\n<p>从此处开始，本书将在解释编程概念时使用一种新<strong>约定</strong>（convention）（一种共同认同的方式）。例如，通过 <code>print(\"[想打印的内容]\")</code> 来介绍如何使用 print 函数。</p>\n<p>新约定中结合使用了 Python 代码和方括号，方括号中的描述用来解释编程概念。当给出类似示例时，除了方括号及其中的内容之外，其他所有都是有效的 Python 代码。方括号中的内容隐含了你应该使用何种代码进行替换。Python 语法中也有使用方括号，因此在代码中本该应用方括号的处置将使用两个方括号体现。</p>\n<h3 id=\"42\">4.2　函数</h3>\n<p><strong>调用</strong>（call）一个函数，意味着为函数提供执行指令并返回输出所需的输入。函数的每一个输入就是一个<strong>参数</strong>（parameter）。当你为函数提供参数时，则被称为“函数传参”。</p>\n<p>Python 中的函数类似于数学函数。如果忘记了代数中的函数，请看下面这个示例：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># 请不要运行代码</span>\n2\n3\n4\n5  f(x) = x * 2\n</code></pre>\n<p>上面代码中语句左侧定义了一个函数 <code>f</code>，接受一个参数 <code>x</code>。语句右侧是函数的具体定义，利用 <code>(x)</code> 中传递的参数进行计算并返回结果（输出）。本例中，函数的值被定义为函数的参数乘以 2。</p>\n<p>Python 和代数均使用如下语法调用函数：<code>[函数名]([逗号分隔的参数])</code>。在函数名后加上圆括号即可进行调用，参数放置在圆括号中，以逗号分隔。对于 <code>f(x) = x * 2</code> 这个数学函数，<code>f(2)</code> 的值是 4，<code>f(10)</code> 的值是 20。</p>\n<h3 id=\"43\">4.3　定义函数</h3>\n<p>在 Python 中创建一个函数，需要选择函数名，并定义其参数、行为和返回值。下面是定义函数的语法：</p>\n<pre class=\"代码无行号\"><code class=\"hljs markdown\">1  # 请不要执行代码\n2\n3\n4\n5  <strong>def</strong> [<span class=\"hljs-string\">函数名</span>](<span class=\"hljs-link\">[参数]</span>):\n6      [函数定义]</code></pre>\n<p>数学函数 f(x) = x * 2 在 Python 中应该表示如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j9dctwl</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x)</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x * <span class=\"hljs-number\">2</span></code></pre>\n<p>关键字 <code>def</code> 告诉 Python 操作者正在定义一个函数。在 <code>def</code> 关键字后面，指定函数的名称，名称选择遵循与变量名相同的规则。按惯例，函数名不应使用大写字母，单词用下划线分隔：<code>like_this</code>。</p>\n<p>命名函数之后，在名称后加上一对圆括号，圆括号中则是希望函数接受的参数。</p>\n<p>在圆括号之后加入冒号，然后换行并缩进 4 个空格符（和其他复合语句一样）。冒号之后所有缩进 4 个空格符的代码，就是函数的定义。本例中，函数的定义仅有一行，即 <code>return x * 2</code>。关键字 <code>return</code> 指定了调用函数时输出的值，我们称之为函数的返回值。</p>\n<p>在 Python 中，可以使用语法“<code>[函数名]([逗号分隔的参数])</code>”来调用一个函数。以下就是以 2 作为参数调用上述示例中函数 <code>f</code> 的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/zheas3d</span>\n2\n3\n4  <span class=\"hljs-comment\"># 接上一个示例</span>\n5\n6\n7\n8  f(2)</code></pre>\n<p>控制台没有打印任何输出。你可以将函数的输出保存在一个变量中，然后将其传给 <code>print</code> 函数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gspjcgj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 接上一个示例</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span></code></pre>\n<p>如果后面在程序中有需要使用函数返回值的地方，建议将函数的返回值保存到一个变量中。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/znqp8fk</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x)</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>  z = f(<span class=\"hljs-number\">4</span>)\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  <strong><span class=\"hljs-keyword\">if</span></strong> z == <span class=\"hljs-number\">5</span>:\n<span class=\"hljs-number\">12</span>      <strong>print</strong>(<span class=\"hljs-string\">\"z is 5\"</span>)\n<span class=\"hljs-number\">13</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">14</span>      print(<span class=\"hljs-string\">\"z is not 5\"</span>)\n\n&gt;&gt; z <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">5</span></code></pre>\n<p>函数可以有一个或多个参数，也可以不接受任何参数。如要定义不需要参数的函数，只需要在定义函数时把圆括号内置为空即可：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/htk7tr6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f()\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span></code></pre>\n<p>如要函数要接受多个参数，则必须将圆括号中的参数以逗号相隔：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gqmkft7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x, y, z)</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + y + z\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span></code></pre>\n<p>最后，函数必须包含 <code>return</code> 语句。如果函数没有 <code>return</code> 语句，则会返回 <code>None</code>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8qyqov</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">5</span>      z = <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f()\n<span class=\"hljs-number\">9</span>  print(result)\n\n&gt;&gt; <span class=\"hljs-keyword\">None</span></code></pre>\n<h3 id=\"44\">4.4　内置函数</h3>\n<p>Python 编程语言中自带了一个被称为<strong>内置函数</strong>（builtin function）的函数库，它可执行各式各样的计算和任务，而不需任何额外的工作。在前面已经看到过一个内置函数的例子：我们编写的第一个程序就使用了 <code>print</code> 函数打印 <code>\"Hello, World!\"</code>。</p>\n<p>len 也是一个内置函数，表示返回对象的长度，如字符串的长度（字符的数量）。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zfkzqw6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  len(<span class=\"hljs-string\">\"Monty\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h75c3cf</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  len(<span class=\"hljs-string\">\"Python\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span>\n</code></pre>\n<p>内置函数 <code>str</code> 接受一个对象作为参数，并返回一个数据类型为 <code>str</code> 的新对象。例如，可使用 <code>str</code> 将一个整型数据转换成一个字符串。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/juzxg2z</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  str(<span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'100'</span>\n</code></pre>\n<p><code>int</code> 函数可接受一个对象作为参数，并返回一个整型对象。示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/j42qhkf</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-string\">\"1\"</span>)\n\n&gt;&gt; <span class=\"hljs-number\">1</span>\n</code></pre>\n<p><code>float</code> 函数可接受一个对象作为参数，并返回一个浮点数对象。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hnk8gh2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fload(<span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100.0</span>\n</code></pre>\n<p>传给 <code>str</code>、<code>int</code> 或 <code>float</code> 函数的参数，必须要能够转换为字符串、整数或浮点数。<code>str</code> 函数可接受大部分对象作为参数，但是 <code>int</code> 函数只能接受内容为数字的字符串或浮点数对象。<code>float</code> 函数只能接受内容为数字的字符串或整型对象。具体示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jcchmlx</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  int(<span class=\"hljs-string\">\"110\"</span>)\n<span class=\"hljs-number\">5</span>  int(<span class=\"hljs-number\">20.54</span>)\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  float(<span class=\"hljs-string\">\"16.4\"</span>)\n<span class=\"hljs-number\">9</span>  float(<span class=\"hljs-number\">99</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">20</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">16.4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">99.0</span>\n</code></pre>\n<p>如果向 <code>int</code> 或 <code>float</code> 函数中传递的是无法转换为整数或浮点数的参数，Python 将会报出异常错误如下：</p>\n<pre><code class=\"hljs perl\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zseo21s</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-string\">\"Prince\"</span>)\n\n&gt;&gt; ValueError: invalid literal <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">int</span>() with base <span class=\"hljs-number\">10</span>: <span class=\"hljs-string\">'Prince'</span>\n</code></pre>\n<p>使用内置函数 <code>input</code> 收集用户的信息的示例代码如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs perl\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zynprpg</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  age = input(<span class=\"hljs-string\">\"Enter your age:\"</span>)\n<span class=\"hljs-number\">5</span>  int_age = <span class=\"hljs-keyword\">int</span>(age)\n<span class=\"hljs-number\">6</span>  <strong><span class=\"hljs-keyword\">if</span></strong> int_age &lt; <span class=\"hljs-number\">21</span>:\n<span class=\"hljs-number\">7</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"You are young!\"</span>)\n<span class=\"hljs-number\">8</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">9</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"Wow, you are old!\"</span>)\n\n&gt;&gt; Enter your age:</code></pre>\n<p><code>input</code> 函数接受一个字符串作为参数，并将其展示给使用该程序的用户。用户在 shell 中输入回答，程序将回答保存在变量 <code>age</code> 中。</p>\n<p>接下来，使用 <code>int</code> 函数将 <code>age</code> 变量的值从字符串转换为整数。<code>input</code> 函数从用户收集数据以作为 <code>str</code>，但是需要将变量设为 <code>int</code> 才能与其他整数进行比较。转换为整数后，<code>if-else</code> 语句根据用户的输入决定为用户打印什么信息。如果用户输入的数字小于 21，则打印“<code>You are young!”</code>。如果用户输入的数字大于 21，则打印“<code>Wow, you are old!”</code>。</p>\n<h3 id=\"45\">4.5　复用函数</h3>\n<p>函数不仅可用于计算并返回值，还可以封装我们希望复用的功能。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhy8y4m</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">even_odd</span><span class=\"hljs-params\">(x)</span></span>:\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-keyword\">if</span></strong> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">06</span>          print(<span class=\"hljs-string\">\"even\"</span>)\n<span class=\"hljs-number\">07</span>      <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n08          print(<span class=\"hljs-string\">\"odd\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  even_odd(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">12</span>  even_odd(<span class=\"hljs-number\">3</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> even\n<span class=\"hljs-meta\">&gt;&gt;</span> odd</code></pre>\n<p>这里虽然没有定义函数的返回值，但是该函数还是有用的：它检测 <code>x % 2 == 0</code> 是否为真，并打印 <code>x</code> 是奇数还是偶数。</p>\n<p>因为可以对函数进行复用，所以利用函数可以减少代码量。一个未使用函数的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs perl\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jk8lugl</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">05</span>  n = <span class=\"hljs-keyword\">int</span>(n)\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n09      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">10</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-keyword\">print</span></strong>(<span class=\"hljs-string\">\"n is odd.\"</span>)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">15</span>  n = <span class=\"hljs-keyword\">int</span>(n)\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">17</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">18</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">19</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is odd.\"</span>)\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>\n<span class=\"hljs-number\">22</span>  n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">23</span>  n = <span class=\"hljs-keyword\">int</span>(n)\n<span class=\"hljs-number\">24</span>  <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">25</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">26</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">27</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is odd.\"</span>)\n\n&gt;&gt; type a number:</code></pre>\n<p>上面这个程序让用户 3 次输入数字，然后通过 <code>if-else</code> 语句检查数字是否为偶数。如果为偶数，则打印“<code>n is even.”</code>，否则打印“<code>n is odd.”</code>。</p>\n<p>这个程序的问题在于相同的代码重复了 3 次。如果将功能封装在函数中，再调用函数 3 次，则可以大幅减少程序的代码量，并提高可读性。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zzn22mz</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">even_odd</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">06</span>      n = int(n)\n<span class=\"hljs-number\">07</span>      <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">08</span>          print(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">09</span>      <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">10</span>          print(<span class=\"hljs-string\">\"n is odd.\"</span>)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  even_odd()\n<span class=\"hljs-number\">14</span>  even_odd()\n<span class=\"hljs-number\">15</span>  even_odd()\n\n&gt;&gt; type a number:</code></pre>\n<p>新程序的功能与前一个程序完全相同，但是由于将功能封装在了一个可随时按需调用的函数中，代码量大幅减少，可读性大大提升。</p>\n<h3 id=\"46\">4.6　必选及可选参数</h3>\n<p>函数可接受两种参数。目前所看到的都是<strong>必选参数</strong>（required parameter）。当用户调用函数时，必须传入所有必选参数，否则 Python 将报告异常错误。</p>\n<p>Python 中还有另一种参数，即<strong>可选参数</strong>（optional parameter）。函数只在需要时才会传入，并不是执行程序所必须的。如果没有传入可选参数，函数将使用其默认值。使用如下语法定义可选参数：<code>[函数名]([参数名]=[参数值])</code>。与必选参数一样，可选参数也得使用逗号分隔。一个带可选参数的函数示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h3ych4h</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x=<span class=\"hljs-number\">2</span>)</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x ** x\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  print(f())\n<span class=\"hljs-number\">9</span>  print(f(<span class=\"hljs-number\">4</span>))\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">256</span></code></pre>\n<p>首先，这里没有传入参数而是直接调用函数。因为参数是可选的，<code>x</code> 自动获得值为 2，函数返回 4。</p>\n<p>接下来，传入参数 4 并调用函数。函数没有使用默认值，<code>x</code> 获得值为 4，函数返回 256。你可以定义一个既有必选参数也有可选参数的函数，但是必选参数必须位于可选参数之前。</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hm5svn9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">add_it</span><span class=\"hljs-params\">(x, y=<span class=\"hljs-number\">10</span>)</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + y\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = add_it(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">12</span></code></pre>\n<h3 id=\"47\">4.7　作用域</h3>\n<p>变量有一个很重要的属性，<strong>作用域</strong>（scope）。定义变量时，其作用域指的是哪部分程序可以对其进行读写。读取一个变量意味着获取它的值，写变量意味着修改它的值。变量的作用域由其定义在程序中所处的位置决定。</p>\n<p>如果在函数（或类，本书第二部分将介绍）之外定义了一个变量，则变量拥有<strong>全局作用域</strong>（global scope）：即在程序中任意地方都可以对其进行读写操作。带有全局作用域的变量，被称为<strong>全局变量</strong>（global variable）。如果在函数（或类）内部定义一个变量，则变量拥有<strong>局部作用域</strong>（local scope）：即程序只有在定义该变量的函数内部才可对其进行读写。下面示例中的变量拥有全局作用域：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zhmxnqt</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">5</span>  y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">6</span>  z = <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>这些变量不是在函数（或类）内部定义的，因此拥有全局作用域。这意味着可以在程序的任意地方对其进行读写，包含在函数内部。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hgvnj4p</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">05</span>  y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">06</span>  z = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">07</span>\n08\n09  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span>:\n<span class=\"hljs-number\">10</span>      print(x)\n<span class=\"hljs-number\">11</span>      print(y)\n<span class=\"hljs-number\">12</span>      print(z)\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  f()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span></code></pre>\n<p>如果是在函数内部定义的这些变量，则只能在那个函数内部对其进行读写。如果尝试在该函数之外访问它们，Python 会报异常错误。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/znka93k</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">06</span>      y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">07</span>      z = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>  print(x)\n<span class=\"hljs-number\">11</span>  print(y)\n<span class=\"hljs-number\">12</span>  print(z)\n\n&gt;&gt; NameError: name <span class=\"hljs-string\">'x'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> defined</code></pre>\n<p>如果在函数内部定义这些变量，则会成功运行。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z2k3jds</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span>:\n<span class=\"hljs-number\">05</span>      x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">06</span>      y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">07</span>      z = <span class=\"hljs-number\">3</span>\n08      print(x)\n09      print(y)\n<span class=\"hljs-number\">10</span>      print(z)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  f()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span></code></pre>\n<p>在定义变量的函数之外使用变量，相当于使用一个尚未定义的变量，二者都会使 Python 报告相同的异常错误：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zn8zjmr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x &gt; <span class=\"hljs-number\">100</span>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is &gt; 100\"</span>)\n\n&gt;&gt; NameError: name <span class=\"hljs-string\">'x'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> defined</code></pre>\n<p>可以在程序的任何地方对全局变量进行写操作，但是在局部作用域中需稍加注意：必须明确使用 <code>global</code> 关键字，并在其后写上希望修改的变量。Python 要求这样做，是为了确保在函数内部定义变量 <code>x</code> 时，不会意外变更之前在函数外部定义的变量的值。在函数内部对全局变量进行写操作的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zclmda7</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">08</span>      <strong><span class=\"hljs-keyword\">global</span></strong> x\n<span class=\"hljs-number\">09</span>      x += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">10</span>      print(x)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  f()\n\n&gt;&gt; <span class=\"hljs-number\">101</span></code></pre>\n<p>没有作用域，则可以在程序任何地方访问所有变量，这样会造成很大的问题。如果程序代码量很大，其中有一个使用变量 x 的函数，你可能会在其他地方修改该变量的值。类似这样的错误会改变程序的行为，并导致意料之外的结果。程序规模越大，变量数量越多，出现问题的可能性就越高。</p>\n<h3 id=\"48\">4.8　异常处理</h3>\n<p>依赖 input 函数获得用户输入，则意味着无法控制程序的输入（用户提供的输入可能会导致错误）。例如，假设你写了一个程序，从用户端收集两个数字并打印第一个数字除以第二个数字的结果。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jcg5qwp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">5</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">6</span>  a = int(a)\n<span class=\"hljs-number\">7</span>  b = int(b)\n<span class=\"hljs-number\">8</span>  print(a / b)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>程序看起来运行正常。但是，如果用户第二个数字输入的是 0，则会出现问题，如下所示：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ztpcjs4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">5</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">6</span>  a = int(a)\n<span class=\"hljs-number\">7</span>  b = int(b)\n<span class=\"hljs-number\">8</span>  print(a / b)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ZeroDivisionError:</span> integer division or modulo by zero\n</code></pre>\n<p>这里不能指望使用程序的用户不会输入 0 作为第二个数字。其解决方法是使用<strong>异常处理</strong>（exception handling），支持测试错误条件，在错误发生时捕获异常，然后决定如何处理。</p>\n<p>异常处理使用 <code>try</code> 和 <code>except</code> 关键字。在你修改程序使用异常处理之后，如果用户第二个数字输入 0，程序不会报错，而是会打印一段话告诉用户不要输入 0。</p>\n<p>Python 中的每一个异常都是一个对象，可在如下网址查看所有内置异常：https://www.tutorialspoint.com/python/standard_exceptions.htm。如果你认为代码可能会报告异常，可使用关键字 <code>try</code> 和 <code>except</code> 来捕获。</p>\n<p><code>try</code> 从句包含可能会发生的错误，<code>except</code> 从句包含仅在错误发生时执行的代码。下面是在程序中进行异常处理的一个示例，这样如果用户输入0作为第二个数字，程序也不会崩溃。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2scn4f</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">05</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">06</span>  a = int(a)\n<span class=\"hljs-number\">07</span>  b = int(b)\n08  <strong><span class=\"hljs-symbol\">try</span></strong><span class=\"hljs-symbol\">:</span>\n09      print(a / b)\n<span class=\"hljs-number\">10</span>  <strong>except</strong> <span class=\"hljs-symbol\">ZeroDivisionError:</span>\n<span class=\"hljs-number\">11</span>      print(<span class=\"hljs-string\">\"b cannot be zero.\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> b cannot be zero.</code></pre>\n<p>如果用户为 <code>b</code> 参数提供的输入不是 0，则执行 <code>try</code> 代码块，<code>except</code> 代码块不执行。如果用户为 <code>b</code> 参数提供的输入为 0，Python 不会报错，而是执行 <code>except</code> 代码块，并打印“<code>b cannot be zero.</code>”。</p>\n<p>如果用户输入的是无法转换为整型数的字符串，程序也会崩溃。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">2</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">3</span>  a = int(a)\n<span class=\"hljs-number\">4</span>  b = int(b)\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-symbol\">try</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">6</span>      print(a / b)\n<span class=\"hljs-number\">7</span>  <strong>except</strong> <span class=\"hljs-symbol\">ZeroDivisionError:</span>\n<span class=\"hljs-number\">8</span>      print(<span class=\"hljs-string\">\"b cannot be zero.\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Hundo\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Million\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ValueError:</span> invalid literal for int() with base <span class=\"hljs-number\">10</span>: <span class=\"hljs-string\">'Hundo'</span></code></pre>\n<p>将收集用户收入的部分代码移入 <code>try</code> 语句内，并让 <code>except</code> 语句注意两个异常（ZeroDivisionError 和 ValueError）即可解决问题。如果向 <code>int</code>、<code>str</code> 或 <code>float</code> 等内置函数中传入无效输入，则会出现 <code>ValueError</code>。在 <code>except</code> 关键字后添加圆括号，并用逗号分隔两个异常即可将二者捕获。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jlus42v</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-symbol\">try</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">05</span>      a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">06</span>      b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">07</span>      a = int(a)\n08      b = int(b)\n09      print(a / b)\n<span class=\"hljs-number\">10</span>  <strong>except</strong> (ZeroDivisionError,\n<span class=\"hljs-number\">11</span>          ValueError):\n<span class=\"hljs-number\">12</span>      print(<span class=\"hljs-string\">\"Invalid input.\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Hundo\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Million\n<span class=\"hljs-meta\">&gt;&gt;</span> Invalid input.</code></pre>\n<p>不要在 <code>except</code> 语句中使用 <code>try</code> 语句定义的变量，因为异常可能是在变量定义之前发生的，如果在 <code>except</code> 语句中这样做可能又会导致新的异常出现。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hockur5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">try</span></strong>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">6</span>      c = <span class=\"hljs-string\">\"I will never get defined.\"</span>\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-keyword\">except</span></strong> ZeroDivisionError:\n<span class=\"hljs-number\">8</span>      print(c)\n\n&gt;&gt; NameError: name <span class=\"hljs-string\">'c'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> defined</code></pre>\n<h3 id=\"49\">4.9　文档字符串</h3>\n<p>定义一个带参数的函数时，有时要求参数必须是某种数据类型，函数才能成功执行。那么该如何将这点告知函数的调用者？在编写函数时，在函数顶部留下注释来解释每个参数应该为何种数据类型，是比较好的做法。这些注释被称为<strong>文档字符串</strong>（docstring）。文档字符串用于解释函数的功能，记录所需的参数类型。</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhahdcg</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(x, y)</span>:</span>\n<span class=\"hljs-number\">05</span>      <span class=\"hljs-string\">\"\"\"\n06      返回 x + y 的值\n07      :param x: int.\n08      :param y: int.\n09      :return: int, x 与 y 之和\n10      \"\"\"</span>\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + y</code></pre>\n<p>文档字符串的第一行清楚地解释了函数的功能，因此当其他开发者使用该函数或方法时，他们不必读完所有代码才能弄清其目的。文档字符串的其他行列出了函数的参数、参数类型和返回值。文档字符串有助于开发者快速编程，因为不必通读代码，只需通过文档字符串即可了解函数的作用等必要信息。</p>\n<p>为了保证本书的示例简洁，书中省略了一般都会加上的文档字符串。正常情况下，我在编码时会加上文档字符串，以供其他开发者之后阅读。</p>\n<h3 id=\"410\">4.10　有需要才使用变量</h3>\n<p>只有在后面的程序中会用到数据，才有必要将其保存至变量。不要仅仅为了打印数值就将整数保存至变量。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zptktex</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">5</span>  print(x)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>这里应该直接将整数传给 print 函数：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hmwr4kd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>本书中的一些示例多次违背了这条准则，目的是为了方便大家理解。读者在写代码时没有必要这样做。</p>\n<h3 id=\"411\">4.11　术语表</h3>\n<p><strong>函数</strong>：可接受输入和执行指令，并返回输出的复合语句。</p>\n<p><strong>惯例</strong>：普遍认可的行为方式。</p>\n<p><strong>调用</strong>：向函数提供执行指令、返回输出所需的输入。</p>\n<p><strong>参数</strong>：传递给函数的数据。</p>\n<p><strong>必选参数</strong>：非可选参数。</p>\n<p><strong>可选参数</strong>：非必须提供的参数。</p>\n<p><strong>内置函数</strong>：Python 自带的函数。</p>\n<p><strong>作用域</strong>：变量可进行读写的范围。</p>\n<p><strong>全局作用域</strong>：可在程序中任何地方读写的变量的作用域。</p>\n<p><strong>全局变量</strong>：拥有全局作用域的变量。</p>\n<p><strong>局部作用域</strong>：只能在其定义所在的函数（或类）中读写的变量的作用域。</p>\n<p><strong>异常处理</strong>：一个编程概念，要求检测错误条件。如果符合则捕获异常，并决定如何处理。</p>\n<p><strong>文档字符串</strong>：解释函数功能，记录其参数类型的字符串。</p>\n<h3 id=\"412\">4.12　挑战练习</h3>\n<p>1．编写一个函数，接受数字作为输入，并返回该数字的平方。</p>\n<p>2．编写一个以字符串为参数并将其打印的函数。</p>\n<p>3．编写一个接受 3 个必选参数、两个可选参数的函数。</p>\n<p>4．编写一个带两个函数的程序。第一个函数应接受一个整数为参数，并返回该整数除以 2 的值。第二个函数应接受一个整数作为参数，并返回该整数乘以 4 的值。调用第一个函数，将结果保存至变量，并将变量作为参数传递给第二个函数。</p>\n<p>5．编写一个将字符串转换为 float 对象并返回该结果的函数。使用异常处理来捕获可能发生的异常。</p>\n<p>6．为挑战练习 1～5 中编写的所有函数添加文档字符串。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>函数</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#41\">4.1　表达概念</a></li>\n<li><a href=\"#42\">4.2　函数</a></li>\n<li><a href=\"#43\">4.3　定义函数</a></li>\n<li><a href=\"#44\">4.4　内置函数</a></li>\n<li><a href=\"#45\">4.5　复用函数</a></li>\n<li><a href=\"#46\">4.6　必选及可选参数</a></li>\n<li><a href=\"#47\">4.7　作用域</a></li>\n<li><a href=\"#48\">4.8　异常处理</a></li>\n<li><a href=\"#49\">4.9　文档字符串</a></li>\n<li><a href=\"#410\">4.10　有需要才使用变量</a></li>\n<li><a href=\"#411\">4.11　术语表</a></li>\n<li><a href=\"#412\">4.12　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“函数应该做一件事。做好这件事。只能做这一件事。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——罗伯特 · C. 马丁（Robert C.Martin）</span></p>\n</blockquote>\n<p>本章将介绍<strong>函数（function）</strong>：可接受输入，执行指令并返回输出的复合语句。通过函数，我们可以在程序中定义功能，并重复使用。其示例如图 4-1 所示。</p>\n<p><img src=\"https://images.gitbook.cn/8f24fa40-6fc0-11e9-9e1b-5b6158413fa5\" alt=\"enter image description here\"></p>\n<p>图 4-1　函数</p>\n<h3 id=\"41\">4.1　表达概念</h3>\n<p>从此处开始，本书将在解释编程概念时使用一种新<strong>约定</strong>（convention）（一种共同认同的方式）。例如，通过 <code>print(\"[想打印的内容]\")</code> 来介绍如何使用 print 函数。</p>\n<p>新约定中结合使用了 Python 代码和方括号，方括号中的描述用来解释编程概念。当给出类似示例时，除了方括号及其中的内容之外，其他所有都是有效的 Python 代码。方括号中的内容隐含了你应该使用何种代码进行替换。Python 语法中也有使用方括号，因此在代码中本该应用方括号的处置将使用两个方括号体现。</p>\n<h3 id=\"42\">4.2　函数</h3>\n<p><strong>调用</strong>（call）一个函数，意味着为函数提供执行指令并返回输出所需的输入。函数的每一个输入就是一个<strong>参数</strong>（parameter）。当你为函数提供参数时，则被称为“函数传参”。</p>\n<p>Python 中的函数类似于数学函数。如果忘记了代数中的函数，请看下面这个示例：</p>\n<pre><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># 请不要运行代码</span>\n2\n3\n4\n5  f(x) = x * 2\n</code></pre>\n<p>上面代码中语句左侧定义了一个函数 <code>f</code>，接受一个参数 <code>x</code>。语句右侧是函数的具体定义，利用 <code>(x)</code> 中传递的参数进行计算并返回结果（输出）。本例中，函数的值被定义为函数的参数乘以 2。</p>\n<p>Python 和代数均使用如下语法调用函数：<code>[函数名]([逗号分隔的参数])</code>。在函数名后加上圆括号即可进行调用，参数放置在圆括号中，以逗号分隔。对于 <code>f(x) = x * 2</code> 这个数学函数，<code>f(2)</code> 的值是 4，<code>f(10)</code> 的值是 20。</p>\n<h3 id=\"43\">4.3　定义函数</h3>\n<p>在 Python 中创建一个函数，需要选择函数名，并定义其参数、行为和返回值。下面是定义函数的语法：</p>\n<pre class=\"代码无行号\"><code class=\"hljs markdown\">1  # 请不要执行代码\n2\n3\n4\n5  <strong>def</strong> [<span class=\"hljs-string\">函数名</span>](<span class=\"hljs-link\">[参数]</span>):\n6      [函数定义]</code></pre>\n<p>数学函数 f(x) = x * 2 在 Python 中应该表示如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j9dctwl</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x)</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x * <span class=\"hljs-number\">2</span></code></pre>\n<p>关键字 <code>def</code> 告诉 Python 操作者正在定义一个函数。在 <code>def</code> 关键字后面，指定函数的名称，名称选择遵循与变量名相同的规则。按惯例，函数名不应使用大写字母，单词用下划线分隔：<code>like_this</code>。</p>\n<p>命名函数之后，在名称后加上一对圆括号，圆括号中则是希望函数接受的参数。</p>\n<p>在圆括号之后加入冒号，然后换行并缩进 4 个空格符（和其他复合语句一样）。冒号之后所有缩进 4 个空格符的代码，就是函数的定义。本例中，函数的定义仅有一行，即 <code>return x * 2</code>。关键字 <code>return</code> 指定了调用函数时输出的值，我们称之为函数的返回值。</p>\n<p>在 Python 中，可以使用语法“<code>[函数名]([逗号分隔的参数])</code>”来调用一个函数。以下就是以 2 作为参数调用上述示例中函数 <code>f</code> 的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">1  <span class=\"hljs-comment\"># http://tinyurl.com/zheas3d</span>\n2\n3\n4  <span class=\"hljs-comment\"># 接上一个示例</span>\n5\n6\n7\n8  f(2)</code></pre>\n<p>控制台没有打印任何输出。你可以将函数的输出保存在一个变量中，然后将其传给 <code>print</code> 函数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gspjcgj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 接上一个示例</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span></code></pre>\n<p>如果后面在程序中有需要使用函数返回值的地方，建议将函数的返回值保存到一个变量中。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/znqp8fk</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x)</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>  z = f(<span class=\"hljs-number\">4</span>)\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  <strong><span class=\"hljs-keyword\">if</span></strong> z == <span class=\"hljs-number\">5</span>:\n<span class=\"hljs-number\">12</span>      <strong>print</strong>(<span class=\"hljs-string\">\"z is 5\"</span>)\n<span class=\"hljs-number\">13</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">14</span>      print(<span class=\"hljs-string\">\"z is not 5\"</span>)\n\n&gt;&gt; z <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">5</span></code></pre>\n<p>函数可以有一个或多个参数，也可以不接受任何参数。如要定义不需要参数的函数，只需要在定义函数时把圆括号内置为空即可：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/htk7tr6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f()\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span></code></pre>\n<p>如要函数要接受多个参数，则必须将圆括号中的参数以逗号相隔：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gqmkft7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x, y, z)</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + y + z\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span></code></pre>\n<p>最后，函数必须包含 <code>return</code> 语句。如果函数没有 <code>return</code> 语句，则会返回 <code>None</code>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8qyqov</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">5</span>      z = <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = f()\n<span class=\"hljs-number\">9</span>  print(result)\n\n&gt;&gt; <span class=\"hljs-keyword\">None</span></code></pre>\n<h3 id=\"44\">4.4　内置函数</h3>\n<p>Python 编程语言中自带了一个被称为<strong>内置函数</strong>（builtin function）的函数库，它可执行各式各样的计算和任务，而不需任何额外的工作。在前面已经看到过一个内置函数的例子：我们编写的第一个程序就使用了 <code>print</code> 函数打印 <code>\"Hello, World!\"</code>。</p>\n<p>len 也是一个内置函数，表示返回对象的长度，如字符串的长度（字符的数量）。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zfkzqw6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  len(<span class=\"hljs-string\">\"Monty\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h75c3cf</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  len(<span class=\"hljs-string\">\"Python\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span>\n</code></pre>\n<p>内置函数 <code>str</code> 接受一个对象作为参数，并返回一个数据类型为 <code>str</code> 的新对象。例如，可使用 <code>str</code> 将一个整型数据转换成一个字符串。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/juzxg2z</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  str(<span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'100'</span>\n</code></pre>\n<p><code>int</code> 函数可接受一个对象作为参数，并返回一个整型对象。示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/j42qhkf</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-string\">\"1\"</span>)\n\n&gt;&gt; <span class=\"hljs-number\">1</span>\n</code></pre>\n<p><code>float</code> 函数可接受一个对象作为参数，并返回一个浮点数对象。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hnk8gh2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fload(<span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100.0</span>\n</code></pre>\n<p>传给 <code>str</code>、<code>int</code> 或 <code>float</code> 函数的参数，必须要能够转换为字符串、整数或浮点数。<code>str</code> 函数可接受大部分对象作为参数，但是 <code>int</code> 函数只能接受内容为数字的字符串或浮点数对象。<code>float</code> 函数只能接受内容为数字的字符串或整型对象。具体示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jcchmlx</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  int(<span class=\"hljs-string\">\"110\"</span>)\n<span class=\"hljs-number\">5</span>  int(<span class=\"hljs-number\">20.54</span>)\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  float(<span class=\"hljs-string\">\"16.4\"</span>)\n<span class=\"hljs-number\">9</span>  float(<span class=\"hljs-number\">99</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">20</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">16.4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">99.0</span>\n</code></pre>\n<p>如果向 <code>int</code> 或 <code>float</code> 函数中传递的是无法转换为整数或浮点数的参数，Python 将会报出异常错误如下：</p>\n<pre><code class=\"hljs perl\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zseo21s</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-string\">\"Prince\"</span>)\n\n&gt;&gt; ValueError: invalid literal <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">int</span>() with base <span class=\"hljs-number\">10</span>: <span class=\"hljs-string\">'Prince'</span>\n</code></pre>\n<p>使用内置函数 <code>input</code> 收集用户的信息的示例代码如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs perl\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zynprpg</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  age = input(<span class=\"hljs-string\">\"Enter your age:\"</span>)\n<span class=\"hljs-number\">5</span>  int_age = <span class=\"hljs-keyword\">int</span>(age)\n<span class=\"hljs-number\">6</span>  <strong><span class=\"hljs-keyword\">if</span></strong> int_age &lt; <span class=\"hljs-number\">21</span>:\n<span class=\"hljs-number\">7</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"You are young!\"</span>)\n<span class=\"hljs-number\">8</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">9</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"Wow, you are old!\"</span>)\n\n&gt;&gt; Enter your age:</code></pre>\n<p><code>input</code> 函数接受一个字符串作为参数，并将其展示给使用该程序的用户。用户在 shell 中输入回答，程序将回答保存在变量 <code>age</code> 中。</p>\n<p>接下来，使用 <code>int</code> 函数将 <code>age</code> 变量的值从字符串转换为整数。<code>input</code> 函数从用户收集数据以作为 <code>str</code>，但是需要将变量设为 <code>int</code> 才能与其他整数进行比较。转换为整数后，<code>if-else</code> 语句根据用户的输入决定为用户打印什么信息。如果用户输入的数字小于 21，则打印“<code>You are young!”</code>。如果用户输入的数字大于 21，则打印“<code>Wow, you are old!”</code>。</p>\n<h3 id=\"45\">4.5　复用函数</h3>\n<p>函数不仅可用于计算并返回值，还可以封装我们希望复用的功能。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhy8y4m</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">even_odd</span><span class=\"hljs-params\">(x)</span></span>:\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-keyword\">if</span></strong> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">06</span>          print(<span class=\"hljs-string\">\"even\"</span>)\n<span class=\"hljs-number\">07</span>      <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n08          print(<span class=\"hljs-string\">\"odd\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  even_odd(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">12</span>  even_odd(<span class=\"hljs-number\">3</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> even\n<span class=\"hljs-meta\">&gt;&gt;</span> odd</code></pre>\n<p>这里虽然没有定义函数的返回值，但是该函数还是有用的：它检测 <code>x % 2 == 0</code> 是否为真，并打印 <code>x</code> 是奇数还是偶数。</p>\n<p>因为可以对函数进行复用，所以利用函数可以减少代码量。一个未使用函数的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs perl\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jk8lugl</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">05</span>  n = <span class=\"hljs-keyword\">int</span>(n)\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n09      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">10</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-keyword\">print</span></strong>(<span class=\"hljs-string\">\"n is odd.\"</span>)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">15</span>  n = <span class=\"hljs-keyword\">int</span>(n)\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">17</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">18</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">19</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is odd.\"</span>)\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>\n<span class=\"hljs-number\">22</span>  n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">23</span>  n = <span class=\"hljs-keyword\">int</span>(n)\n<span class=\"hljs-number\">24</span>  <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">25</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">26</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">27</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"n is odd.\"</span>)\n\n&gt;&gt; type a number:</code></pre>\n<p>上面这个程序让用户 3 次输入数字，然后通过 <code>if-else</code> 语句检查数字是否为偶数。如果为偶数，则打印“<code>n is even.”</code>，否则打印“<code>n is odd.”</code>。</p>\n<p>这个程序的问题在于相同的代码重复了 3 次。如果将功能封装在函数中，再调用函数 3 次，则可以大幅减少程序的代码量，并提高可读性。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zzn22mz</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">even_odd</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      n = input(<span class=\"hljs-string\">\"type a number:\"</span>)\n<span class=\"hljs-number\">06</span>      n = int(n)\n<span class=\"hljs-number\">07</span>      <strong><span class=\"hljs-keyword\">if</span></strong> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">08</span>          print(<span class=\"hljs-string\">\"n is even.\"</span>)\n<span class=\"hljs-number\">09</span>      <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">10</span>          print(<span class=\"hljs-string\">\"n is odd.\"</span>)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  even_odd()\n<span class=\"hljs-number\">14</span>  even_odd()\n<span class=\"hljs-number\">15</span>  even_odd()\n\n&gt;&gt; type a number:</code></pre>\n<p>新程序的功能与前一个程序完全相同，但是由于将功能封装在了一个可随时按需调用的函数中，代码量大幅减少，可读性大大提升。</p>\n<h3 id=\"46\">4.6　必选及可选参数</h3>\n<p>函数可接受两种参数。目前所看到的都是<strong>必选参数</strong>（required parameter）。当用户调用函数时，必须传入所有必选参数，否则 Python 将报告异常错误。</p>\n<p>Python 中还有另一种参数，即<strong>可选参数</strong>（optional parameter）。函数只在需要时才会传入，并不是执行程序所必须的。如果没有传入可选参数，函数将使用其默认值。使用如下语法定义可选参数：<code>[函数名]([参数名]=[参数值])</code>。与必选参数一样，可选参数也得使用逗号分隔。一个带可选参数的函数示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h3ych4h</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x=<span class=\"hljs-number\">2</span>)</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x ** x\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  print(f())\n<span class=\"hljs-number\">9</span>  print(f(<span class=\"hljs-number\">4</span>))\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">256</span></code></pre>\n<p>首先，这里没有传入参数而是直接调用函数。因为参数是可选的，<code>x</code> 自动获得值为 2，函数返回 4。</p>\n<p>接下来，传入参数 4 并调用函数。函数没有使用默认值，<code>x</code> 获得值为 4，函数返回 256。你可以定义一个既有必选参数也有可选参数的函数，但是必选参数必须位于可选参数之前。</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hm5svn9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">add_it</span><span class=\"hljs-params\">(x, y=<span class=\"hljs-number\">10</span>)</span></span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + y\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  result = add_it(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">9</span>  print(result)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">12</span></code></pre>\n<h3 id=\"47\">4.7　作用域</h3>\n<p>变量有一个很重要的属性，<strong>作用域</strong>（scope）。定义变量时，其作用域指的是哪部分程序可以对其进行读写。读取一个变量意味着获取它的值，写变量意味着修改它的值。变量的作用域由其定义在程序中所处的位置决定。</p>\n<p>如果在函数（或类，本书第二部分将介绍）之外定义了一个变量，则变量拥有<strong>全局作用域</strong>（global scope）：即在程序中任意地方都可以对其进行读写操作。带有全局作用域的变量，被称为<strong>全局变量</strong>（global variable）。如果在函数（或类）内部定义一个变量，则变量拥有<strong>局部作用域</strong>（local scope）：即程序只有在定义该变量的函数内部才可对其进行读写。下面示例中的变量拥有全局作用域：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zhmxnqt</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">5</span>  y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">6</span>  z = <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>这些变量不是在函数（或类）内部定义的，因此拥有全局作用域。这意味着可以在程序的任意地方对其进行读写，包含在函数内部。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hgvnj4p</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">05</span>  y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">06</span>  z = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">07</span>\n08\n09  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span>:\n<span class=\"hljs-number\">10</span>      print(x)\n<span class=\"hljs-number\">11</span>      print(y)\n<span class=\"hljs-number\">12</span>      print(z)\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  f()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span></code></pre>\n<p>如果是在函数内部定义的这些变量，则只能在那个函数内部对其进行读写。如果尝试在该函数之外访问它们，Python 会报异常错误。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/znka93k</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">06</span>      y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">07</span>      z = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>  print(x)\n<span class=\"hljs-number\">11</span>  print(y)\n<span class=\"hljs-number\">12</span>  print(z)\n\n&gt;&gt; NameError: name <span class=\"hljs-string\">'x'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> defined</code></pre>\n<p>如果在函数内部定义这些变量，则会成功运行。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z2k3jds</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span>:\n<span class=\"hljs-number\">05</span>      x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">06</span>      y = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">07</span>      z = <span class=\"hljs-number\">3</span>\n08      print(x)\n09      print(y)\n<span class=\"hljs-number\">10</span>      print(z)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  f()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span></code></pre>\n<p>在定义变量的函数之外使用变量，相当于使用一个尚未定义的变量，二者都会使 Python 报告相同的异常错误：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zn8zjmr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x &gt; <span class=\"hljs-number\">100</span>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"x is &gt; 100\"</span>)\n\n&gt;&gt; NameError: name <span class=\"hljs-string\">'x'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> defined</code></pre>\n<p>可以在程序的任何地方对全局变量进行写操作，但是在局部作用域中需稍加注意：必须明确使用 <code>global</code> 关键字，并在其后写上希望修改的变量。Python 要求这样做，是为了确保在函数内部定义变量 <code>x</code> 时，不会意外变更之前在函数外部定义的变量的值。在函数内部对全局变量进行写操作的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zclmda7</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">08</span>      <strong><span class=\"hljs-keyword\">global</span></strong> x\n<span class=\"hljs-number\">09</span>      x += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">10</span>      print(x)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  f()\n\n&gt;&gt; <span class=\"hljs-number\">101</span></code></pre>\n<p>没有作用域，则可以在程序任何地方访问所有变量，这样会造成很大的问题。如果程序代码量很大，其中有一个使用变量 x 的函数，你可能会在其他地方修改该变量的值。类似这样的错误会改变程序的行为，并导致意料之外的结果。程序规模越大，变量数量越多，出现问题的可能性就越高。</p>\n<h3 id=\"48\">4.8　异常处理</h3>\n<p>依赖 input 函数获得用户输入，则意味着无法控制程序的输入（用户提供的输入可能会导致错误）。例如，假设你写了一个程序，从用户端收集两个数字并打印第一个数字除以第二个数字的结果。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jcg5qwp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">5</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">6</span>  a = int(a)\n<span class=\"hljs-number\">7</span>  b = int(b)\n<span class=\"hljs-number\">8</span>  print(a / b)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>程序看起来运行正常。但是，如果用户第二个数字输入的是 0，则会出现问题，如下所示：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ztpcjs4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">5</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">6</span>  a = int(a)\n<span class=\"hljs-number\">7</span>  b = int(b)\n<span class=\"hljs-number\">8</span>  print(a / b)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ZeroDivisionError:</span> integer division or modulo by zero\n</code></pre>\n<p>这里不能指望使用程序的用户不会输入 0 作为第二个数字。其解决方法是使用<strong>异常处理</strong>（exception handling），支持测试错误条件，在错误发生时捕获异常，然后决定如何处理。</p>\n<p>异常处理使用 <code>try</code> 和 <code>except</code> 关键字。在你修改程序使用异常处理之后，如果用户第二个数字输入 0，程序不会报错，而是会打印一段话告诉用户不要输入 0。</p>\n<p>Python 中的每一个异常都是一个对象，可在如下网址查看所有内置异常：https://www.tutorialspoint.com/python/standard_exceptions.htm。如果你认为代码可能会报告异常，可使用关键字 <code>try</code> 和 <code>except</code> 来捕获。</p>\n<p><code>try</code> 从句包含可能会发生的错误，<code>except</code> 从句包含仅在错误发生时执行的代码。下面是在程序中进行异常处理的一个示例，这样如果用户输入0作为第二个数字，程序也不会崩溃。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2scn4f</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">05</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">06</span>  a = int(a)\n<span class=\"hljs-number\">07</span>  b = int(b)\n08  <strong><span class=\"hljs-symbol\">try</span></strong><span class=\"hljs-symbol\">:</span>\n09      print(a / b)\n<span class=\"hljs-number\">10</span>  <strong>except</strong> <span class=\"hljs-symbol\">ZeroDivisionError:</span>\n<span class=\"hljs-number\">11</span>      print(<span class=\"hljs-string\">\"b cannot be zero.\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> b cannot be zero.</code></pre>\n<p>如果用户为 <code>b</code> 参数提供的输入不是 0，则执行 <code>try</code> 代码块，<code>except</code> 代码块不执行。如果用户为 <code>b</code> 参数提供的输入为 0，Python 不会报错，而是执行 <code>except</code> 代码块，并打印“<code>b cannot be zero.</code>”。</p>\n<p>如果用户输入的是无法转换为整型数的字符串，程序也会崩溃。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">2</span>  b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">3</span>  a = int(a)\n<span class=\"hljs-number\">4</span>  b = int(b)\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-symbol\">try</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">6</span>      print(a / b)\n<span class=\"hljs-number\">7</span>  <strong>except</strong> <span class=\"hljs-symbol\">ZeroDivisionError:</span>\n<span class=\"hljs-number\">8</span>      print(<span class=\"hljs-string\">\"b cannot be zero.\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Hundo\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Million\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ValueError:</span> invalid literal for int() with base <span class=\"hljs-number\">10</span>: <span class=\"hljs-string\">'Hundo'</span></code></pre>\n<p>将收集用户收入的部分代码移入 <code>try</code> 语句内，并让 <code>except</code> 语句注意两个异常（ZeroDivisionError 和 ValueError）即可解决问题。如果向 <code>int</code>、<code>str</code> 或 <code>float</code> 等内置函数中传入无效输入，则会出现 <code>ValueError</code>。在 <code>except</code> 关键字后添加圆括号，并用逗号分隔两个异常即可将二者捕获。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jlus42v</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-symbol\">try</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">05</span>      a = input(<span class=\"hljs-string\">\"type a nubmer:\"</span>)\n<span class=\"hljs-number\">06</span>      b = input(<span class=\"hljs-string\">\"type another:\"</span>)\n<span class=\"hljs-number\">07</span>      a = int(a)\n08      b = int(b)\n09      print(a / b)\n<span class=\"hljs-number\">10</span>  <strong>except</strong> (ZeroDivisionError,\n<span class=\"hljs-number\">11</span>          ValueError):\n<span class=\"hljs-number\">12</span>      print(<span class=\"hljs-string\">\"Invalid input.\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> type a <span class=\"hljs-symbol\">number:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Hundo\n<span class=\"hljs-meta\">&gt;&gt;</span> type <span class=\"hljs-symbol\">another:</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Million\n<span class=\"hljs-meta\">&gt;&gt;</span> Invalid input.</code></pre>\n<p>不要在 <code>except</code> 语句中使用 <code>try</code> 语句定义的变量，因为异常可能是在变量定义之前发生的，如果在 <code>except</code> 语句中这样做可能又会导致新的异常出现。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hockur5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">try</span></strong>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">6</span>      c = <span class=\"hljs-string\">\"I will never get defined.\"</span>\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-keyword\">except</span></strong> ZeroDivisionError:\n<span class=\"hljs-number\">8</span>      print(c)\n\n&gt;&gt; NameError: name <span class=\"hljs-string\">'c'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> defined</code></pre>\n<h3 id=\"49\">4.9　文档字符串</h3>\n<p>定义一个带参数的函数时，有时要求参数必须是某种数据类型，函数才能成功执行。那么该如何将这点告知函数的调用者？在编写函数时，在函数顶部留下注释来解释每个参数应该为何种数据类型，是比较好的做法。这些注释被称为<strong>文档字符串</strong>（docstring）。文档字符串用于解释函数的功能，记录所需的参数类型。</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhahdcg</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(x, y)</span>:</span>\n<span class=\"hljs-number\">05</span>      <span class=\"hljs-string\">\"\"\"\n06      返回 x + y 的值\n07      :param x: int.\n08      :param y: int.\n09      :return: int, x 与 y 之和\n10      \"\"\"</span>\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-keyword\">return</span></strong> x + y</code></pre>\n<p>文档字符串的第一行清楚地解释了函数的功能，因此当其他开发者使用该函数或方法时，他们不必读完所有代码才能弄清其目的。文档字符串的其他行列出了函数的参数、参数类型和返回值。文档字符串有助于开发者快速编程，因为不必通读代码，只需通过文档字符串即可了解函数的作用等必要信息。</p>\n<p>为了保证本书的示例简洁，书中省略了一般都会加上的文档字符串。正常情况下，我在编码时会加上文档字符串，以供其他开发者之后阅读。</p>\n<h3 id=\"410\">4.10　有需要才使用变量</h3>\n<p>只有在后面的程序中会用到数据，才有必要将其保存至变量。不要仅仅为了打印数值就将整数保存至变量。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zptktex</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">5</span>  print(x)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>这里应该直接将整数传给 print 函数：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hmwr4kd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>本书中的一些示例多次违背了这条准则，目的是为了方便大家理解。读者在写代码时没有必要这样做。</p>\n<h3 id=\"411\">4.11　术语表</h3>\n<p><strong>函数</strong>：可接受输入和执行指令，并返回输出的复合语句。</p>\n<p><strong>惯例</strong>：普遍认可的行为方式。</p>\n<p><strong>调用</strong>：向函数提供执行指令、返回输出所需的输入。</p>\n<p><strong>参数</strong>：传递给函数的数据。</p>\n<p><strong>必选参数</strong>：非可选参数。</p>\n<p><strong>可选参数</strong>：非必须提供的参数。</p>\n<p><strong>内置函数</strong>：Python 自带的函数。</p>\n<p><strong>作用域</strong>：变量可进行读写的范围。</p>\n<p><strong>全局作用域</strong>：可在程序中任何地方读写的变量的作用域。</p>\n<p><strong>全局变量</strong>：拥有全局作用域的变量。</p>\n<p><strong>局部作用域</strong>：只能在其定义所在的函数（或类）中读写的变量的作用域。</p>\n<p><strong>异常处理</strong>：一个编程概念，要求检测错误条件。如果符合则捕获异常，并决定如何处理。</p>\n<p><strong>文档字符串</strong>：解释函数功能，记录其参数类型的字符串。</p>\n<h3 id=\"412\">4.12　挑战练习</h3>\n<p>1．编写一个函数，接受数字作为输入，并返回该数字的平方。</p>\n<p>2．编写一个以字符串为参数并将其打印的函数。</p>\n<p>3．编写一个接受 3 个必选参数、两个可选参数的函数。</p>\n<p>4．编写一个带两个函数的程序。第一个函数应接受一个整数为参数，并返回该整数除以 2 的值。第二个函数应接受一个整数作为参数，并返回该整数乘以 4 的值。调用第一个函数，将结果保存至变量，并将变量作为参数传递给第二个函数。</p>\n<p>5．编写一个将字符串转换为 float 对象并返回该结果的函数。使用异常处理来捕获可能发生的异常。</p>\n<p>6．为挑战练习 1～5 中编写的所有函数添加文档字符串。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n\n</body>\n</html>"},{"title":"Python协程","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Python协程</title>\n</head>\n<body>\n<div id=\"article_content\" class=\"mazi-article-content dont-break-out\"><p>在 Python 3.4 时候引进了协程的概念，它使用一种单线程单进程的的方式实现并发。谈到并发，大多数朋友想到更多的应该是多进程和多线程，它们都是比较消耗系统资源的，今天我们不谈线程和进程，而是来说下当前比较火的协程。</p>\n<p>因为在爬虫操作中，协程比多线程更有优势。协程是单线程的，单线程就能实现高并发。</p>\n<h3 id=\"\">什么是协程？</h3>\n<p>协程，英文名是 Coroutine， 又称为微线程，是一种用户态的轻量级线程。协程不像线程和进程那样，需要进行系统内核上的上下文切换，协程的上下文切换是由程序员决定的。在 Python 中协程就是一个可以暂停执行的函数，听起来和生成器的概念一样。</p>\n<h3 id=\"-1\">协程的发展</h3>\n<p>从 Python3.4 开始协程被加入到标准库，当时的协程是通过 @asyncio.coroutine 和 yeild from 实现的，看起来和生成器的实现方式没什么区别。后来为了更好的区分开协程和生成器，到 Python3.5 的时候引入 async/await 语法糖临时定格了下来，直到 Python3.6 的时候才被更多的人认可，Python3.6 作为 Python3 目前最稳定的版本拥有大量的使用者，后来到了 Python3.7 官方把 async 和 await 作为保留字，同时协程的调用也变得简单了许多，但是，正是保留字的原因导致之前很多 async 为函数名的库报错，典型的有 scrapy，所以这里推荐大家使用 Python3.6。</p>\n<h3 id=\"-2\">协程相对于多线程的优点</h3>\n<p>多线程编程是比较困难的， 因为调度程序任何时候都能中断线程， 必须记住保留锁， 去保护程序中重要部分， 防止多线程在执行的过程中断。</p>\n<p>而协程默认会做好全方位保护， 以防止中断。我们必须显示产出才能让程序的余下部分运行。对协程来说， 无需保留锁， 而在多个线程之间同步操作， 协程自身就会同步， 因为在任意时刻， 只有一个协程运行。总结下大概下面几点：</p>\n<ul>\n<li>无需系统内核的上下文切换，减小开销；</li>\n<li>无需原子操作锁定及同步的开销，不用担心资源共享的问题；</li>\n<li>单线程即可实现高并发，单核 CPU 即便支持上万的协程都不是问题，所以很适合用于高并发处理，尤其是在应用在网络爬虫中。</li>\n</ul>\n<h3 id=\"-3\">协程的定义</h3>\n<p>使用协程也就意味着你需要一直写异步方法。在 Python 中我们使用 asyncio 模块来实现一个协程。如果我们把 Python 中普通函数称之为同步函数（方法），那么用协程定义的函数我们称之为异步函数（方法）。 </p>\n<blockquote>\n  <p>注意，以下所有的代码实例运行环境均要求版本大于等于 Python3.6。</p>\n</blockquote>\n<h4 id=\"-4\">同步函数和异步函数的定义</h4>\n<p><strong>同步函数定义</strong></p>\n<pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">regular_double</span><span class=\"hljs-params\">(x)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * x\n</code></pre>\n<p><strong>异步函数定义</strong></p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">async_double</span><span class=\"hljs-params\">(x)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * x\n</code></pre>\n<h4 id=\"-5\">同步函数和异步函数的调用</h4>\n<p>对于同步函数我们知道是这样调用的：</p>\n<pre><code class=\"hljs\"> regular_double(2)\n</code></pre>\n<p>异步函数如何调用呢？带着这个问题我们看下面的一个简单例子。</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">\"这是一个协程\"</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop() <span class=\"hljs-comment\"># 定义一个事件循环</span>\n    <span class=\"hljs-keyword\">try</span>:\n        print(<span class=\"hljs-string\">\"开始运行协程\"</span>)\n        coro = foo()\n        print(<span class=\"hljs-string\">\"进入事件循环\"</span>)\n        loop.run_until_complete(coro) <span class=\"hljs-comment\"># 运行协程</span>\n    <span class=\"hljs-keyword\">finally</span>:\n        print(<span class=\"hljs-string\">\"关闭事件循环\"</span>)\n        loop.close() <span class=\"hljs-comment\"># 运行完关闭协程</span>\n</code></pre>\n<p>这就是最简单的一个协程的例子，让我们了解一下上面的代码。 </p>\n<p>首先，需要导入需要的包 -asyncio。然后，创建一个事件循环，因为协程是基于事件循环的。 之后，通过 <code>run_until_complete</code> 方法传入一个异步函数，来运行这个协程。 最后在结束的时候调用 close 方法关闭协程。 综上就是调用一个协程的写法。除此之外协程还有其他的不同之处。</p>\n<h4 id=\"-6\">协程之间的链式调用</h4>\n<p>我们可以通过使用 await 关键字，在一个协程中调用一个协程。 一个协程可以启动另一个协程，从而可以使任务根据工作内容，封装到不同的协程中。我们可以在协程中使用 await 关键字，链式地调度协程，来形成一个协程任务流。像下面的例子一样：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">\"主协程\"</span>)\n    print(<span class=\"hljs-string\">\"等待result1协程运行\"</span>)\n    res1 = <span class=\"hljs-keyword\">await</span> result1()\n    print(<span class=\"hljs-string\">\"等待result2协程运行\"</span>)\n    res2 = <span class=\"hljs-keyword\">await</span> result2(res1)\n    <span class=\"hljs-keyword\">return</span> (res1，res2)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">result1</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">\"这是result1协程\"</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"result1\"</span>\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">result2</span><span class=\"hljs-params\">(arg)</span>:</span>\n    print(<span class=\"hljs-string\">\"这是result2协程\"</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"result2接收了一个参数，<span class=\"hljs-subst\">{arg}</span>\"</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n    <span class=\"hljs-keyword\">try</span>:\n        result = loop.run_until_complete(main())\n        print(<span class=\"hljs-string\">f\"获取返回值:<span class=\"hljs-subst\">{result}</span>\"</span>)\n    <span class=\"hljs-keyword\">finally</span>:\n        print(<span class=\"hljs-string\">\"关闭事件循环\"</span>)\n        loop.close()\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"hljs bash\">主协程\n等待result1协程运行\n这是result1协程\n等待result2协程运行\n这是result2协程\n获取返回值:(<span class=\"hljs-string\">'result1'</span>， <span class=\"hljs-string\">'result2接收了一个参数，result1'</span>)\n关闭事件循环\n</code></pre>\n<p>在上面，我们知道调用协程需要通过创建一个事件循环然后再去运行。 这里我们需要了解的是如果在协程里想调用一个协程我们需要使用 <strong>await</strong> 关键字，就拿上面的例子来说在 main 函数里调用协程 result1 和 result2。 那么问题来了：await 干了什么呢？</p>\n<h4 id=\"await\">await 的作用</h4>\n<p>await 的作用就是等待当前的协程运行结束之后再继续进行下面代码。 因为我们执行 result1 的时间很短，所以在表面上看 result1 和 result2 是一起执行的。这就是 await 的作用。等待一个协程的执行完毕，如果有返回结果，那么就会接收到协程的返回结果，通过使用 return 可以返回协程的一个结果，这个和同步函数的 return 使用方法一样。</p>\n<h4 id=\"-7\">并发的执行任务</h4>\n<p>一系列的协程可以通过 await 链式调用，但是有的时候我们需要在一个协程里等待多个协程，比如我们在一个协程里等待 1000 个异步网络请求，对于访问次序没有要求的时候，就可以使用关键字 wait 来解决了。wait 可以暂停一个协程，直到后台操作完成。</p>\n<p><strong>Task 的使用</strong></p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">num</span><span class=\"hljs-params\">(n)</span>:</span>\n    print(<span class=\"hljs-string\">f\"当前的数字是:<span class=\"hljs-subst\">{n}</span>\"</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    print(<span class=\"hljs-string\">f\"等待时间:<span class=\"hljs-subst\">{n}</span>\"</span>)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    tasks = [num(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>)] <span class=\"hljs-comment\">#协程列表</span>\n    <span class=\"hljs-comment\">#await asyncio.gather(*tasks) #有序并发</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.wait(tasks) <span class=\"hljs-comment\">#并发运行协程列表的协程</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n    <span class=\"hljs-keyword\">try</span>:\n        loop.run_until_complete(main())\n    <span class=\"hljs-keyword\">finally</span>:\n        loop.close()\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"hljs css\">当前的数字是<span class=\"hljs-selector-pseudo\">:0</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:4</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:8</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:1</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:5</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:7</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:2</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:6</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:9</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:3</span>\n等待时间<span class=\"hljs-selector-pseudo\">:0</span>\n等待时间<span class=\"hljs-selector-pseudo\">:1</span>\n等待时间<span class=\"hljs-selector-pseudo\">:2</span>\n等待时间<span class=\"hljs-selector-pseudo\">:3</span>\n等待时间<span class=\"hljs-selector-pseudo\">:4</span>\n等待时间<span class=\"hljs-selector-pseudo\">:5</span>\n等待时间<span class=\"hljs-selector-pseudo\">:6</span>\n等待时间<span class=\"hljs-selector-pseudo\">:7</span>\n等待时间<span class=\"hljs-selector-pseudo\">:8</span>\n等待时间<span class=\"hljs-selector-pseudo\">:9</span>\n</code></pre>\n<p>如果运行的话会发现首先会打印 10 次数字，但是并不是顺序执行的，这也说明 asyncio.wait 并发执行的时候是乱序的。如果想保证顺序只要使用 gather 把 task 写成解包的形式就行了，也就是上面的注释部分的代码。</p>\n<h4 id=\"-8\">如何在协程中使用普通的函数呢？</h4>\n<p>我们知道在普通函数中调用普通函数之间，函数名加括号即可，像下面这样：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>:</span>\n   print(<span class=\"hljs-string\">\"这是一个普通函数\"</span>)\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"test\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n   print(<span class=\"hljs-string\">\"调用foo函数\"</span>)\n   res=foo()\n   print(<span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{接收到来自foo函数的值}</span>:res\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__==<span class=\"hljs-string\">\"__main__\"</span>\n   main()\n</code></pre>\n<p>那么在协程中如何使用一个普通函数呢？ 在协程中可以通过一些方法去调用普通的函数。可以使用的关键字有 call_soon 等。</p>\n<h4 id=\"call_soon\">call_soon</h4>\n<p>可以通过字面意思理解调用立即返回。 下面来看一下具体的使用例子：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> functools\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">callback</span><span class=\"hljs-params\">(args， *， kwargs=<span class=\"hljs-string\">\"defalut\"</span>)</span>:</span>\n    print(<span class=\"hljs-string\">f\"普通函数做为回调函数，获取参数:<span class=\"hljs-subst\">{args}</span>，<span class=\"hljs-subst\">{kwargs}</span>\"</span>)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(loop)</span>:</span>\n    print(<span class=\"hljs-string\">\"注册callback\"</span>)\n    loop.call_soon(callback， <span class=\"hljs-number\">1</span>)\n    wrapped = functools.partial(callback， kwargs=<span class=\"hljs-string\">\"not defalut\"</span>)\n    loop.call_soon(wrapped， <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.2</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n<span class=\"hljs-keyword\">try</span>:\n    loop.run_until_complete(main(loop))\n<span class=\"hljs-keyword\">finally</span>:\n    loop.close()\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"hljs css\">注册<span class=\"hljs-selector-tag\">callback</span>\n普通函数做为回调函数，获取参数<span class=\"hljs-selector-pseudo\">:1</span>，<span class=\"hljs-selector-tag\">defalut</span>\n普通函数做为回调函数，获取参数<span class=\"hljs-selector-pseudo\">:2</span>，<span class=\"hljs-selector-tag\">not</span> <span class=\"hljs-selector-tag\">defalut</span>\n</code></pre>\n<p>通过输出结果我们可以发现我们在协程中成功调用了一个普通函数，顺序地打印了 1 和 2。</p>\n<p>看过这些例子之后，也许你就有疑问了，协程没有缺点的么？</p>\n<h3 id=\"-9\">协程的缺点</h3>\n<p>同样的总结下大概以下 2 点。</p>\n<h4 id=\"cpu\">无法使用 CPU 的多核</h4>\n<p>协程的本质是个单线程，它不能同时用上单个 CPU 的多个核，协程需要和进程配合才能运行在多 CPU 上。当然我们日常所编写的绝大部分应用都没有这个必要，就比如网络爬虫来说，限制爬虫的速度还有其他的因素，比如网站并发量、网速等问题都会是爬虫速度限制的因素。除非做一些密集型应用，这个时候才可能会用到多进程和协程。</p>\n<h4 id=\"-10\">处处都要使用非阻塞代码</h4>\n<p>写协程就意味着你要一值写一些非阻塞的代码，使用各种异步版本的库，比如后面的异步爬虫教程中用的 aiohttp 就是一个异步版本的request库等。 不过这些缺点并不能影响到使用协程的优势。</p>\n<hr>\n</div>\n</body>\n</html>","source":"_posts/gitchat/python_coroutine.html","raw":"---\ntitle: Python协程\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Python协程</title>\n</head>\n<body>\n<div id=\"article_content\" class=\"mazi-article-content dont-break-out\"><p>在 Python 3.4 时候引进了协程的概念，它使用一种单线程单进程的的方式实现并发。谈到并发，大多数朋友想到更多的应该是多进程和多线程，它们都是比较消耗系统资源的，今天我们不谈线程和进程，而是来说下当前比较火的协程。</p>\n<p>因为在爬虫操作中，协程比多线程更有优势。协程是单线程的，单线程就能实现高并发。</p>\n<h3 id=\"\">什么是协程？</h3>\n<p>协程，英文名是 Coroutine， 又称为微线程，是一种用户态的轻量级线程。协程不像线程和进程那样，需要进行系统内核上的上下文切换，协程的上下文切换是由程序员决定的。在 Python 中协程就是一个可以暂停执行的函数，听起来和生成器的概念一样。</p>\n<h3 id=\"-1\">协程的发展</h3>\n<p>从 Python3.4 开始协程被加入到标准库，当时的协程是通过 @asyncio.coroutine 和 yeild from 实现的，看起来和生成器的实现方式没什么区别。后来为了更好的区分开协程和生成器，到 Python3.5 的时候引入 async/await 语法糖临时定格了下来，直到 Python3.6 的时候才被更多的人认可，Python3.6 作为 Python3 目前最稳定的版本拥有大量的使用者，后来到了 Python3.7 官方把 async 和 await 作为保留字，同时协程的调用也变得简单了许多，但是，正是保留字的原因导致之前很多 async 为函数名的库报错，典型的有 scrapy，所以这里推荐大家使用 Python3.6。</p>\n<h3 id=\"-2\">协程相对于多线程的优点</h3>\n<p>多线程编程是比较困难的， 因为调度程序任何时候都能中断线程， 必须记住保留锁， 去保护程序中重要部分， 防止多线程在执行的过程中断。</p>\n<p>而协程默认会做好全方位保护， 以防止中断。我们必须显示产出才能让程序的余下部分运行。对协程来说， 无需保留锁， 而在多个线程之间同步操作， 协程自身就会同步， 因为在任意时刻， 只有一个协程运行。总结下大概下面几点：</p>\n<ul>\n<li>无需系统内核的上下文切换，减小开销；</li>\n<li>无需原子操作锁定及同步的开销，不用担心资源共享的问题；</li>\n<li>单线程即可实现高并发，单核 CPU 即便支持上万的协程都不是问题，所以很适合用于高并发处理，尤其是在应用在网络爬虫中。</li>\n</ul>\n<h3 id=\"-3\">协程的定义</h3>\n<p>使用协程也就意味着你需要一直写异步方法。在 Python 中我们使用 asyncio 模块来实现一个协程。如果我们把 Python 中普通函数称之为同步函数（方法），那么用协程定义的函数我们称之为异步函数（方法）。 </p>\n<blockquote>\n  <p>注意，以下所有的代码实例运行环境均要求版本大于等于 Python3.6。</p>\n</blockquote>\n<h4 id=\"-4\">同步函数和异步函数的定义</h4>\n<p><strong>同步函数定义</strong></p>\n<pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">regular_double</span><span class=\"hljs-params\">(x)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * x\n</code></pre>\n<p><strong>异步函数定义</strong></p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">async_double</span><span class=\"hljs-params\">(x)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * x\n</code></pre>\n<h4 id=\"-5\">同步函数和异步函数的调用</h4>\n<p>对于同步函数我们知道是这样调用的：</p>\n<pre><code class=\"hljs\"> regular_double(2)\n</code></pre>\n<p>异步函数如何调用呢？带着这个问题我们看下面的一个简单例子。</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">\"这是一个协程\"</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop() <span class=\"hljs-comment\"># 定义一个事件循环</span>\n    <span class=\"hljs-keyword\">try</span>:\n        print(<span class=\"hljs-string\">\"开始运行协程\"</span>)\n        coro = foo()\n        print(<span class=\"hljs-string\">\"进入事件循环\"</span>)\n        loop.run_until_complete(coro) <span class=\"hljs-comment\"># 运行协程</span>\n    <span class=\"hljs-keyword\">finally</span>:\n        print(<span class=\"hljs-string\">\"关闭事件循环\"</span>)\n        loop.close() <span class=\"hljs-comment\"># 运行完关闭协程</span>\n</code></pre>\n<p>这就是最简单的一个协程的例子，让我们了解一下上面的代码。 </p>\n<p>首先，需要导入需要的包 -asyncio。然后，创建一个事件循环，因为协程是基于事件循环的。 之后，通过 <code>run_until_complete</code> 方法传入一个异步函数，来运行这个协程。 最后在结束的时候调用 close 方法关闭协程。 综上就是调用一个协程的写法。除此之外协程还有其他的不同之处。</p>\n<h4 id=\"-6\">协程之间的链式调用</h4>\n<p>我们可以通过使用 await 关键字，在一个协程中调用一个协程。 一个协程可以启动另一个协程，从而可以使任务根据工作内容，封装到不同的协程中。我们可以在协程中使用 await 关键字，链式地调度协程，来形成一个协程任务流。像下面的例子一样：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">\"主协程\"</span>)\n    print(<span class=\"hljs-string\">\"等待result1协程运行\"</span>)\n    res1 = <span class=\"hljs-keyword\">await</span> result1()\n    print(<span class=\"hljs-string\">\"等待result2协程运行\"</span>)\n    res2 = <span class=\"hljs-keyword\">await</span> result2(res1)\n    <span class=\"hljs-keyword\">return</span> (res1，res2)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">result1</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">\"这是result1协程\"</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"result1\"</span>\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">result2</span><span class=\"hljs-params\">(arg)</span>:</span>\n    print(<span class=\"hljs-string\">\"这是result2协程\"</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"result2接收了一个参数，<span class=\"hljs-subst\">{arg}</span>\"</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n    <span class=\"hljs-keyword\">try</span>:\n        result = loop.run_until_complete(main())\n        print(<span class=\"hljs-string\">f\"获取返回值:<span class=\"hljs-subst\">{result}</span>\"</span>)\n    <span class=\"hljs-keyword\">finally</span>:\n        print(<span class=\"hljs-string\">\"关闭事件循环\"</span>)\n        loop.close()\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"hljs bash\">主协程\n等待result1协程运行\n这是result1协程\n等待result2协程运行\n这是result2协程\n获取返回值:(<span class=\"hljs-string\">'result1'</span>， <span class=\"hljs-string\">'result2接收了一个参数，result1'</span>)\n关闭事件循环\n</code></pre>\n<p>在上面，我们知道调用协程需要通过创建一个事件循环然后再去运行。 这里我们需要了解的是如果在协程里想调用一个协程我们需要使用 <strong>await</strong> 关键字，就拿上面的例子来说在 main 函数里调用协程 result1 和 result2。 那么问题来了：await 干了什么呢？</p>\n<h4 id=\"await\">await 的作用</h4>\n<p>await 的作用就是等待当前的协程运行结束之后再继续进行下面代码。 因为我们执行 result1 的时间很短，所以在表面上看 result1 和 result2 是一起执行的。这就是 await 的作用。等待一个协程的执行完毕，如果有返回结果，那么就会接收到协程的返回结果，通过使用 return 可以返回协程的一个结果，这个和同步函数的 return 使用方法一样。</p>\n<h4 id=\"-7\">并发的执行任务</h4>\n<p>一系列的协程可以通过 await 链式调用，但是有的时候我们需要在一个协程里等待多个协程，比如我们在一个协程里等待 1000 个异步网络请求，对于访问次序没有要求的时候，就可以使用关键字 wait 来解决了。wait 可以暂停一个协程，直到后台操作完成。</p>\n<p><strong>Task 的使用</strong></p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">num</span><span class=\"hljs-params\">(n)</span>:</span>\n    print(<span class=\"hljs-string\">f\"当前的数字是:<span class=\"hljs-subst\">{n}</span>\"</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    print(<span class=\"hljs-string\">f\"等待时间:<span class=\"hljs-subst\">{n}</span>\"</span>)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    tasks = [num(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>)] <span class=\"hljs-comment\">#协程列表</span>\n    <span class=\"hljs-comment\">#await asyncio.gather(*tasks) #有序并发</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.wait(tasks) <span class=\"hljs-comment\">#并发运行协程列表的协程</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n    <span class=\"hljs-keyword\">try</span>:\n        loop.run_until_complete(main())\n    <span class=\"hljs-keyword\">finally</span>:\n        loop.close()\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"hljs css\">当前的数字是<span class=\"hljs-selector-pseudo\">:0</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:4</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:8</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:1</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:5</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:7</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:2</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:6</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:9</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:3</span>\n等待时间<span class=\"hljs-selector-pseudo\">:0</span>\n等待时间<span class=\"hljs-selector-pseudo\">:1</span>\n等待时间<span class=\"hljs-selector-pseudo\">:2</span>\n等待时间<span class=\"hljs-selector-pseudo\">:3</span>\n等待时间<span class=\"hljs-selector-pseudo\">:4</span>\n等待时间<span class=\"hljs-selector-pseudo\">:5</span>\n等待时间<span class=\"hljs-selector-pseudo\">:6</span>\n等待时间<span class=\"hljs-selector-pseudo\">:7</span>\n等待时间<span class=\"hljs-selector-pseudo\">:8</span>\n等待时间<span class=\"hljs-selector-pseudo\">:9</span>\n</code></pre>\n<p>如果运行的话会发现首先会打印 10 次数字，但是并不是顺序执行的，这也说明 asyncio.wait 并发执行的时候是乱序的。如果想保证顺序只要使用 gather 把 task 写成解包的形式就行了，也就是上面的注释部分的代码。</p>\n<h4 id=\"-8\">如何在协程中使用普通的函数呢？</h4>\n<p>我们知道在普通函数中调用普通函数之间，函数名加括号即可，像下面这样：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>:</span>\n   print(<span class=\"hljs-string\">\"这是一个普通函数\"</span>)\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"test\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n   print(<span class=\"hljs-string\">\"调用foo函数\"</span>)\n   res=foo()\n   print(<span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{接收到来自foo函数的值}</span>:res\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__==<span class=\"hljs-string\">\"__main__\"</span>\n   main()\n</code></pre>\n<p>那么在协程中如何使用一个普通函数呢？ 在协程中可以通过一些方法去调用普通的函数。可以使用的关键字有 call_soon 等。</p>\n<h4 id=\"call_soon\">call_soon</h4>\n<p>可以通过字面意思理解调用立即返回。 下面来看一下具体的使用例子：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> functools\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">callback</span><span class=\"hljs-params\">(args， *， kwargs=<span class=\"hljs-string\">\"defalut\"</span>)</span>:</span>\n    print(<span class=\"hljs-string\">f\"普通函数做为回调函数，获取参数:<span class=\"hljs-subst\">{args}</span>，<span class=\"hljs-subst\">{kwargs}</span>\"</span>)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(loop)</span>:</span>\n    print(<span class=\"hljs-string\">\"注册callback\"</span>)\n    loop.call_soon(callback， <span class=\"hljs-number\">1</span>)\n    wrapped = functools.partial(callback， kwargs=<span class=\"hljs-string\">\"not defalut\"</span>)\n    loop.call_soon(wrapped， <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.2</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n<span class=\"hljs-keyword\">try</span>:\n    loop.run_until_complete(main(loop))\n<span class=\"hljs-keyword\">finally</span>:\n    loop.close()\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"hljs css\">注册<span class=\"hljs-selector-tag\">callback</span>\n普通函数做为回调函数，获取参数<span class=\"hljs-selector-pseudo\">:1</span>，<span class=\"hljs-selector-tag\">defalut</span>\n普通函数做为回调函数，获取参数<span class=\"hljs-selector-pseudo\">:2</span>，<span class=\"hljs-selector-tag\">not</span> <span class=\"hljs-selector-tag\">defalut</span>\n</code></pre>\n<p>通过输出结果我们可以发现我们在协程中成功调用了一个普通函数，顺序地打印了 1 和 2。</p>\n<p>看过这些例子之后，也许你就有疑问了，协程没有缺点的么？</p>\n<h3 id=\"-9\">协程的缺点</h3>\n<p>同样的总结下大概以下 2 点。</p>\n<h4 id=\"cpu\">无法使用 CPU 的多核</h4>\n<p>协程的本质是个单线程，它不能同时用上单个 CPU 的多个核，协程需要和进程配合才能运行在多 CPU 上。当然我们日常所编写的绝大部分应用都没有这个必要，就比如网络爬虫来说，限制爬虫的速度还有其他的因素，比如网站并发量、网速等问题都会是爬虫速度限制的因素。除非做一些密集型应用，这个时候才可能会用到多进程和协程。</p>\n<h4 id=\"-10\">处处都要使用非阻塞代码</h4>\n<p>写协程就意味着你要一值写一些非阻塞的代码，使用各种异步版本的库，比如后面的异步爬虫教程中用的 aiohttp 就是一个异步版本的request库等。 不过这些缺点并不能影响到使用协程的优势。</p>\n<hr>\n</div>\n</body>\n</html>","slug":"gitchat/python_coroutine","published":1,"date":"2019-05-31T05:53:12.548Z","updated":"2019-05-31T05:53:12.548Z","_id":"cjwd4a1az0008sv72d9d2z793","comments":1,"layout":"post","photos":[],"link":"","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>Python协程</title>\n</head>\n<body>\n<div id=\"article_content\" class=\"mazi-article-content dont-break-out\"><p>在 Python 3.4 时候引进了协程的概念，它使用一种单线程单进程的的方式实现并发。谈到并发，大多数朋友想到更多的应该是多进程和多线程，它们都是比较消耗系统资源的，今天我们不谈线程和进程，而是来说下当前比较火的协程。</p>\n<p>因为在爬虫操作中，协程比多线程更有优势。协程是单线程的，单线程就能实现高并发。</p>\n<h3 id>什么是协程？</h3>\n<p>协程，英文名是 Coroutine， 又称为微线程，是一种用户态的轻量级线程。协程不像线程和进程那样，需要进行系统内核上的上下文切换，协程的上下文切换是由程序员决定的。在 Python 中协程就是一个可以暂停执行的函数，听起来和生成器的概念一样。</p>\n<h3 id=\"-1\">协程的发展</h3>\n<p>从 Python3.4 开始协程被加入到标准库，当时的协程是通过 @asyncio.coroutine 和 yeild from 实现的，看起来和生成器的实现方式没什么区别。后来为了更好的区分开协程和生成器，到 Python3.5 的时候引入 async/await 语法糖临时定格了下来，直到 Python3.6 的时候才被更多的人认可，Python3.6 作为 Python3 目前最稳定的版本拥有大量的使用者，后来到了 Python3.7 官方把 async 和 await 作为保留字，同时协程的调用也变得简单了许多，但是，正是保留字的原因导致之前很多 async 为函数名的库报错，典型的有 scrapy，所以这里推荐大家使用 Python3.6。</p>\n<h3 id=\"-2\">协程相对于多线程的优点</h3>\n<p>多线程编程是比较困难的， 因为调度程序任何时候都能中断线程， 必须记住保留锁， 去保护程序中重要部分， 防止多线程在执行的过程中断。</p>\n<p>而协程默认会做好全方位保护， 以防止中断。我们必须显示产出才能让程序的余下部分运行。对协程来说， 无需保留锁， 而在多个线程之间同步操作， 协程自身就会同步， 因为在任意时刻， 只有一个协程运行。总结下大概下面几点：</p>\n<ul>\n<li>无需系统内核的上下文切换，减小开销；</li>\n<li>无需原子操作锁定及同步的开销，不用担心资源共享的问题；</li>\n<li>单线程即可实现高并发，单核 CPU 即便支持上万的协程都不是问题，所以很适合用于高并发处理，尤其是在应用在网络爬虫中。</li>\n</ul>\n<h3 id=\"-3\">协程的定义</h3>\n<p>使用协程也就意味着你需要一直写异步方法。在 Python 中我们使用 asyncio 模块来实现一个协程。如果我们把 Python 中普通函数称之为同步函数（方法），那么用协程定义的函数我们称之为异步函数（方法）。 </p>\n<blockquote>\n  <p>注意，以下所有的代码实例运行环境均要求版本大于等于 Python3.6。</p>\n</blockquote>\n<h4 id=\"-4\">同步函数和异步函数的定义</h4>\n<p><strong>同步函数定义</strong></p>\n<pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">regular_double</span><span class=\"hljs-params\">(x)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * x\n</code></pre>\n<p><strong>异步函数定义</strong></p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">async_double</span><span class=\"hljs-params\">(x)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * x\n</code></pre>\n<h4 id=\"-5\">同步函数和异步函数的调用</h4>\n<p>对于同步函数我们知道是这样调用的：</p>\n<pre><code class=\"hljs\"> regular_double(2)\n</code></pre>\n<p>异步函数如何调用呢？带着这个问题我们看下面的一个简单例子。</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">\"这是一个协程\"</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop() <span class=\"hljs-comment\"># 定义一个事件循环</span>\n    <span class=\"hljs-keyword\">try</span>:\n        print(<span class=\"hljs-string\">\"开始运行协程\"</span>)\n        coro = foo()\n        print(<span class=\"hljs-string\">\"进入事件循环\"</span>)\n        loop.run_until_complete(coro) <span class=\"hljs-comment\"># 运行协程</span>\n    <span class=\"hljs-keyword\">finally</span>:\n        print(<span class=\"hljs-string\">\"关闭事件循环\"</span>)\n        loop.close() <span class=\"hljs-comment\"># 运行完关闭协程</span>\n</code></pre>\n<p>这就是最简单的一个协程的例子，让我们了解一下上面的代码。 </p>\n<p>首先，需要导入需要的包 -asyncio。然后，创建一个事件循环，因为协程是基于事件循环的。 之后，通过 <code>run_until_complete</code> 方法传入一个异步函数，来运行这个协程。 最后在结束的时候调用 close 方法关闭协程。 综上就是调用一个协程的写法。除此之外协程还有其他的不同之处。</p>\n<h4 id=\"-6\">协程之间的链式调用</h4>\n<p>我们可以通过使用 await 关键字，在一个协程中调用一个协程。 一个协程可以启动另一个协程，从而可以使任务根据工作内容，封装到不同的协程中。我们可以在协程中使用 await 关键字，链式地调度协程，来形成一个协程任务流。像下面的例子一样：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">\"主协程\"</span>)\n    print(<span class=\"hljs-string\">\"等待result1协程运行\"</span>)\n    res1 = <span class=\"hljs-keyword\">await</span> result1()\n    print(<span class=\"hljs-string\">\"等待result2协程运行\"</span>)\n    res2 = <span class=\"hljs-keyword\">await</span> result2(res1)\n    <span class=\"hljs-keyword\">return</span> (res1，res2)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">result1</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">\"这是result1协程\"</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"result1\"</span>\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">result2</span><span class=\"hljs-params\">(arg)</span>:</span>\n    print(<span class=\"hljs-string\">\"这是result2协程\"</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"result2接收了一个参数，<span class=\"hljs-subst\">{arg}</span>\"</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n    <span class=\"hljs-keyword\">try</span>:\n        result = loop.run_until_complete(main())\n        print(<span class=\"hljs-string\">f\"获取返回值:<span class=\"hljs-subst\">{result}</span>\"</span>)\n    <span class=\"hljs-keyword\">finally</span>:\n        print(<span class=\"hljs-string\">\"关闭事件循环\"</span>)\n        loop.close()\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"hljs bash\">主协程\n等待result1协程运行\n这是result1协程\n等待result2协程运行\n这是result2协程\n获取返回值:(<span class=\"hljs-string\">'result1'</span>， <span class=\"hljs-string\">'result2接收了一个参数，result1'</span>)\n关闭事件循环\n</code></pre>\n<p>在上面，我们知道调用协程需要通过创建一个事件循环然后再去运行。 这里我们需要了解的是如果在协程里想调用一个协程我们需要使用 <strong>await</strong> 关键字，就拿上面的例子来说在 main 函数里调用协程 result1 和 result2。 那么问题来了：await 干了什么呢？</p>\n<h4 id=\"await\">await 的作用</h4>\n<p>await 的作用就是等待当前的协程运行结束之后再继续进行下面代码。 因为我们执行 result1 的时间很短，所以在表面上看 result1 和 result2 是一起执行的。这就是 await 的作用。等待一个协程的执行完毕，如果有返回结果，那么就会接收到协程的返回结果，通过使用 return 可以返回协程的一个结果，这个和同步函数的 return 使用方法一样。</p>\n<h4 id=\"-7\">并发的执行任务</h4>\n<p>一系列的协程可以通过 await 链式调用，但是有的时候我们需要在一个协程里等待多个协程，比如我们在一个协程里等待 1000 个异步网络请求，对于访问次序没有要求的时候，就可以使用关键字 wait 来解决了。wait 可以暂停一个协程，直到后台操作完成。</p>\n<p><strong>Task 的使用</strong></p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">num</span><span class=\"hljs-params\">(n)</span>:</span>\n    print(<span class=\"hljs-string\">f\"当前的数字是:<span class=\"hljs-subst\">{n}</span>\"</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    print(<span class=\"hljs-string\">f\"等待时间:<span class=\"hljs-subst\">{n}</span>\"</span>)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    tasks = [num(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>)] <span class=\"hljs-comment\">#协程列表</span>\n    <span class=\"hljs-comment\">#await asyncio.gather(*tasks) #有序并发</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.wait(tasks) <span class=\"hljs-comment\">#并发运行协程列表的协程</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n    <span class=\"hljs-keyword\">try</span>:\n        loop.run_until_complete(main())\n    <span class=\"hljs-keyword\">finally</span>:\n        loop.close()\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"hljs css\">当前的数字是<span class=\"hljs-selector-pseudo\">:0</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:4</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:8</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:1</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:5</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:7</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:2</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:6</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:9</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:3</span>\n等待时间<span class=\"hljs-selector-pseudo\">:0</span>\n等待时间<span class=\"hljs-selector-pseudo\">:1</span>\n等待时间<span class=\"hljs-selector-pseudo\">:2</span>\n等待时间<span class=\"hljs-selector-pseudo\">:3</span>\n等待时间<span class=\"hljs-selector-pseudo\">:4</span>\n等待时间<span class=\"hljs-selector-pseudo\">:5</span>\n等待时间<span class=\"hljs-selector-pseudo\">:6</span>\n等待时间<span class=\"hljs-selector-pseudo\">:7</span>\n等待时间<span class=\"hljs-selector-pseudo\">:8</span>\n等待时间<span class=\"hljs-selector-pseudo\">:9</span>\n</code></pre>\n<p>如果运行的话会发现首先会打印 10 次数字，但是并不是顺序执行的，这也说明 asyncio.wait 并发执行的时候是乱序的。如果想保证顺序只要使用 gather 把 task 写成解包的形式就行了，也就是上面的注释部分的代码。</p>\n<h4 id=\"-8\">如何在协程中使用普通的函数呢？</h4>\n<p>我们知道在普通函数中调用普通函数之间，函数名加括号即可，像下面这样：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>:</span>\n   print(<span class=\"hljs-string\">\"这是一个普通函数\"</span>)\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"test\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n   print(<span class=\"hljs-string\">\"调用foo函数\"</span>)\n   res=foo()\n   print(<span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{接收到来自foo函数的值}</span>:res\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__==<span class=\"hljs-string\">\"__main__\"</span>\n   main()\n</code></pre>\n<p>那么在协程中如何使用一个普通函数呢？ 在协程中可以通过一些方法去调用普通的函数。可以使用的关键字有 call_soon 等。</p>\n<h4 id=\"call_soon\">call_soon</h4>\n<p>可以通过字面意思理解调用立即返回。 下面来看一下具体的使用例子：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> functools\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">callback</span><span class=\"hljs-params\">(args， *， kwargs=<span class=\"hljs-string\">\"defalut\"</span>)</span>:</span>\n    print(<span class=\"hljs-string\">f\"普通函数做为回调函数，获取参数:<span class=\"hljs-subst\">{args}</span>，<span class=\"hljs-subst\">{kwargs}</span>\"</span>)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(loop)</span>:</span>\n    print(<span class=\"hljs-string\">\"注册callback\"</span>)\n    loop.call_soon(callback， <span class=\"hljs-number\">1</span>)\n    wrapped = functools.partial(callback， kwargs=<span class=\"hljs-string\">\"not defalut\"</span>)\n    loop.call_soon(wrapped， <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.2</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n<span class=\"hljs-keyword\">try</span>:\n    loop.run_until_complete(main(loop))\n<span class=\"hljs-keyword\">finally</span>:\n    loop.close()\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"hljs css\">注册<span class=\"hljs-selector-tag\">callback</span>\n普通函数做为回调函数，获取参数<span class=\"hljs-selector-pseudo\">:1</span>，<span class=\"hljs-selector-tag\">defalut</span>\n普通函数做为回调函数，获取参数<span class=\"hljs-selector-pseudo\">:2</span>，<span class=\"hljs-selector-tag\">not</span> <span class=\"hljs-selector-tag\">defalut</span>\n</code></pre>\n<p>通过输出结果我们可以发现我们在协程中成功调用了一个普通函数，顺序地打印了 1 和 2。</p>\n<p>看过这些例子之后，也许你就有疑问了，协程没有缺点的么？</p>\n<h3 id=\"-9\">协程的缺点</h3>\n<p>同样的总结下大概以下 2 点。</p>\n<h4 id=\"cpu\">无法使用 CPU 的多核</h4>\n<p>协程的本质是个单线程，它不能同时用上单个 CPU 的多个核，协程需要和进程配合才能运行在多 CPU 上。当然我们日常所编写的绝大部分应用都没有这个必要，就比如网络爬虫来说，限制爬虫的速度还有其他的因素，比如网站并发量、网速等问题都会是爬虫速度限制的因素。除非做一些密集型应用，这个时候才可能会用到多进程和协程。</p>\n<h4 id=\"-10\">处处都要使用非阻塞代码</h4>\n<p>写协程就意味着你要一值写一些非阻塞的代码，使用各种异步版本的库，比如后面的异步爬虫教程中用的 aiohttp 就是一个异步版本的request库等。 不过这些缺点并不能影响到使用协程的优势。</p>\n<hr>\n</div>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>Python协程</title>\n</head>\n<body>\n<div id=\"article_content\" class=\"mazi-article-content dont-break-out\"><p>在 Python 3.4 时候引进了协程的概念，它使用一种单线程单进程的的方式实现并发。谈到并发，大多数朋友想到更多的应该是多进程和多线程，它们都是比较消耗系统资源的，今天我们不谈线程和进程，而是来说下当前比较火的协程。</p>\n<p>因为在爬虫操作中，协程比多线程更有优势。协程是单线程的，单线程就能实现高并发。</p>\n<h3 id>什么是协程？</h3>\n<p>协程，英文名是 Coroutine， 又称为微线程，是一种用户态的轻量级线程。协程不像线程和进程那样，需要进行系统内核上的上下文切换，协程的上下文切换是由程序员决定的。在 Python 中协程就是一个可以暂停执行的函数，听起来和生成器的概念一样。</p>\n<h3 id=\"-1\">协程的发展</h3>\n<p>从 Python3.4 开始协程被加入到标准库，当时的协程是通过 @asyncio.coroutine 和 yeild from 实现的，看起来和生成器的实现方式没什么区别。后来为了更好的区分开协程和生成器，到 Python3.5 的时候引入 async/await 语法糖临时定格了下来，直到 Python3.6 的时候才被更多的人认可，Python3.6 作为 Python3 目前最稳定的版本拥有大量的使用者，后来到了 Python3.7 官方把 async 和 await 作为保留字，同时协程的调用也变得简单了许多，但是，正是保留字的原因导致之前很多 async 为函数名的库报错，典型的有 scrapy，所以这里推荐大家使用 Python3.6。</p>\n<h3 id=\"-2\">协程相对于多线程的优点</h3>\n<p>多线程编程是比较困难的， 因为调度程序任何时候都能中断线程， 必须记住保留锁， 去保护程序中重要部分， 防止多线程在执行的过程中断。</p>\n<p>而协程默认会做好全方位保护， 以防止中断。我们必须显示产出才能让程序的余下部分运行。对协程来说， 无需保留锁， 而在多个线程之间同步操作， 协程自身就会同步， 因为在任意时刻， 只有一个协程运行。总结下大概下面几点：</p>\n<ul>\n<li>无需系统内核的上下文切换，减小开销；</li>\n<li>无需原子操作锁定及同步的开销，不用担心资源共享的问题；</li>\n<li>单线程即可实现高并发，单核 CPU 即便支持上万的协程都不是问题，所以很适合用于高并发处理，尤其是在应用在网络爬虫中。</li>\n</ul>\n<h3 id=\"-3\">协程的定义</h3>\n<p>使用协程也就意味着你需要一直写异步方法。在 Python 中我们使用 asyncio 模块来实现一个协程。如果我们把 Python 中普通函数称之为同步函数（方法），那么用协程定义的函数我们称之为异步函数（方法）。 </p>\n<blockquote>\n  <p>注意，以下所有的代码实例运行环境均要求版本大于等于 Python3.6。</p>\n</blockquote>\n<h4 id=\"-4\">同步函数和异步函数的定义</h4>\n<p><strong>同步函数定义</strong></p>\n<pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">regular_double</span><span class=\"hljs-params\">(x)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * x\n</code></pre>\n<p><strong>异步函数定义</strong></p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">async_double</span><span class=\"hljs-params\">(x)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * x\n</code></pre>\n<h4 id=\"-5\">同步函数和异步函数的调用</h4>\n<p>对于同步函数我们知道是这样调用的：</p>\n<pre><code class=\"hljs\"> regular_double(2)\n</code></pre>\n<p>异步函数如何调用呢？带着这个问题我们看下面的一个简单例子。</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">\"这是一个协程\"</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop() <span class=\"hljs-comment\"># 定义一个事件循环</span>\n    <span class=\"hljs-keyword\">try</span>:\n        print(<span class=\"hljs-string\">\"开始运行协程\"</span>)\n        coro = foo()\n        print(<span class=\"hljs-string\">\"进入事件循环\"</span>)\n        loop.run_until_complete(coro) <span class=\"hljs-comment\"># 运行协程</span>\n    <span class=\"hljs-keyword\">finally</span>:\n        print(<span class=\"hljs-string\">\"关闭事件循环\"</span>)\n        loop.close() <span class=\"hljs-comment\"># 运行完关闭协程</span>\n</code></pre>\n<p>这就是最简单的一个协程的例子，让我们了解一下上面的代码。 </p>\n<p>首先，需要导入需要的包 -asyncio。然后，创建一个事件循环，因为协程是基于事件循环的。 之后，通过 <code>run_until_complete</code> 方法传入一个异步函数，来运行这个协程。 最后在结束的时候调用 close 方法关闭协程。 综上就是调用一个协程的写法。除此之外协程还有其他的不同之处。</p>\n<h4 id=\"-6\">协程之间的链式调用</h4>\n<p>我们可以通过使用 await 关键字，在一个协程中调用一个协程。 一个协程可以启动另一个协程，从而可以使任务根据工作内容，封装到不同的协程中。我们可以在协程中使用 await 关键字，链式地调度协程，来形成一个协程任务流。像下面的例子一样：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">\"主协程\"</span>)\n    print(<span class=\"hljs-string\">\"等待result1协程运行\"</span>)\n    res1 = <span class=\"hljs-keyword\">await</span> result1()\n    print(<span class=\"hljs-string\">\"等待result2协程运行\"</span>)\n    res2 = <span class=\"hljs-keyword\">await</span> result2(res1)\n    <span class=\"hljs-keyword\">return</span> (res1，res2)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">result1</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">\"这是result1协程\"</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"result1\"</span>\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">result2</span><span class=\"hljs-params\">(arg)</span>:</span>\n    print(<span class=\"hljs-string\">\"这是result2协程\"</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"result2接收了一个参数，<span class=\"hljs-subst\">{arg}</span>\"</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n    <span class=\"hljs-keyword\">try</span>:\n        result = loop.run_until_complete(main())\n        print(<span class=\"hljs-string\">f\"获取返回值:<span class=\"hljs-subst\">{result}</span>\"</span>)\n    <span class=\"hljs-keyword\">finally</span>:\n        print(<span class=\"hljs-string\">\"关闭事件循环\"</span>)\n        loop.close()\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"hljs bash\">主协程\n等待result1协程运行\n这是result1协程\n等待result2协程运行\n这是result2协程\n获取返回值:(<span class=\"hljs-string\">'result1'</span>， <span class=\"hljs-string\">'result2接收了一个参数，result1'</span>)\n关闭事件循环\n</code></pre>\n<p>在上面，我们知道调用协程需要通过创建一个事件循环然后再去运行。 这里我们需要了解的是如果在协程里想调用一个协程我们需要使用 <strong>await</strong> 关键字，就拿上面的例子来说在 main 函数里调用协程 result1 和 result2。 那么问题来了：await 干了什么呢？</p>\n<h4 id=\"await\">await 的作用</h4>\n<p>await 的作用就是等待当前的协程运行结束之后再继续进行下面代码。 因为我们执行 result1 的时间很短，所以在表面上看 result1 和 result2 是一起执行的。这就是 await 的作用。等待一个协程的执行完毕，如果有返回结果，那么就会接收到协程的返回结果，通过使用 return 可以返回协程的一个结果，这个和同步函数的 return 使用方法一样。</p>\n<h4 id=\"-7\">并发的执行任务</h4>\n<p>一系列的协程可以通过 await 链式调用，但是有的时候我们需要在一个协程里等待多个协程，比如我们在一个协程里等待 1000 个异步网络请求，对于访问次序没有要求的时候，就可以使用关键字 wait 来解决了。wait 可以暂停一个协程，直到后台操作完成。</p>\n<p><strong>Task 的使用</strong></p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">num</span><span class=\"hljs-params\">(n)</span>:</span>\n    print(<span class=\"hljs-string\">f\"当前的数字是:<span class=\"hljs-subst\">{n}</span>\"</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    print(<span class=\"hljs-string\">f\"等待时间:<span class=\"hljs-subst\">{n}</span>\"</span>)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    tasks = [num(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>)] <span class=\"hljs-comment\">#协程列表</span>\n    <span class=\"hljs-comment\">#await asyncio.gather(*tasks) #有序并发</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.wait(tasks) <span class=\"hljs-comment\">#并发运行协程列表的协程</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n    <span class=\"hljs-keyword\">try</span>:\n        loop.run_until_complete(main())\n    <span class=\"hljs-keyword\">finally</span>:\n        loop.close()\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"hljs css\">当前的数字是<span class=\"hljs-selector-pseudo\">:0</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:4</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:8</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:1</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:5</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:7</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:2</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:6</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:9</span>\n当前的数字是<span class=\"hljs-selector-pseudo\">:3</span>\n等待时间<span class=\"hljs-selector-pseudo\">:0</span>\n等待时间<span class=\"hljs-selector-pseudo\">:1</span>\n等待时间<span class=\"hljs-selector-pseudo\">:2</span>\n等待时间<span class=\"hljs-selector-pseudo\">:3</span>\n等待时间<span class=\"hljs-selector-pseudo\">:4</span>\n等待时间<span class=\"hljs-selector-pseudo\">:5</span>\n等待时间<span class=\"hljs-selector-pseudo\">:6</span>\n等待时间<span class=\"hljs-selector-pseudo\">:7</span>\n等待时间<span class=\"hljs-selector-pseudo\">:8</span>\n等待时间<span class=\"hljs-selector-pseudo\">:9</span>\n</code></pre>\n<p>如果运行的话会发现首先会打印 10 次数字，但是并不是顺序执行的，这也说明 asyncio.wait 并发执行的时候是乱序的。如果想保证顺序只要使用 gather 把 task 写成解包的形式就行了，也就是上面的注释部分的代码。</p>\n<h4 id=\"-8\">如何在协程中使用普通的函数呢？</h4>\n<p>我们知道在普通函数中调用普通函数之间，函数名加括号即可，像下面这样：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>:</span>\n   print(<span class=\"hljs-string\">\"这是一个普通函数\"</span>)\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"test\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n   print(<span class=\"hljs-string\">\"调用foo函数\"</span>)\n   res=foo()\n   print(<span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{接收到来自foo函数的值}</span>:res\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__==<span class=\"hljs-string\">\"__main__\"</span>\n   main()\n</code></pre>\n<p>那么在协程中如何使用一个普通函数呢？ 在协程中可以通过一些方法去调用普通的函数。可以使用的关键字有 call_soon 等。</p>\n<h4 id=\"call_soon\">call_soon</h4>\n<p>可以通过字面意思理解调用立即返回。 下面来看一下具体的使用例子：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> functools\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">callback</span><span class=\"hljs-params\">(args， *， kwargs=<span class=\"hljs-string\">\"defalut\"</span>)</span>:</span>\n    print(<span class=\"hljs-string\">f\"普通函数做为回调函数，获取参数:<span class=\"hljs-subst\">{args}</span>，<span class=\"hljs-subst\">{kwargs}</span>\"</span>)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(loop)</span>:</span>\n    print(<span class=\"hljs-string\">\"注册callback\"</span>)\n    loop.call_soon(callback， <span class=\"hljs-number\">1</span>)\n    wrapped = functools.partial(callback， kwargs=<span class=\"hljs-string\">\"not defalut\"</span>)\n    loop.call_soon(wrapped， <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.2</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n<span class=\"hljs-keyword\">try</span>:\n    loop.run_until_complete(main(loop))\n<span class=\"hljs-keyword\">finally</span>:\n    loop.close()\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"hljs css\">注册<span class=\"hljs-selector-tag\">callback</span>\n普通函数做为回调函数，获取参数<span class=\"hljs-selector-pseudo\">:1</span>，<span class=\"hljs-selector-tag\">defalut</span>\n普通函数做为回调函数，获取参数<span class=\"hljs-selector-pseudo\">:2</span>，<span class=\"hljs-selector-tag\">not</span> <span class=\"hljs-selector-tag\">defalut</span>\n</code></pre>\n<p>通过输出结果我们可以发现我们在协程中成功调用了一个普通函数，顺序地打印了 1 和 2。</p>\n<p>看过这些例子之后，也许你就有疑问了，协程没有缺点的么？</p>\n<h3 id=\"-9\">协程的缺点</h3>\n<p>同样的总结下大概以下 2 点。</p>\n<h4 id=\"cpu\">无法使用 CPU 的多核</h4>\n<p>协程的本质是个单线程，它不能同时用上单个 CPU 的多个核，协程需要和进程配合才能运行在多 CPU 上。当然我们日常所编写的绝大部分应用都没有这个必要，就比如网络爬虫来说，限制爬虫的速度还有其他的因素，比如网站并发量、网速等问题都会是爬虫速度限制的因素。除非做一些密集型应用，这个时候才可能会用到多进程和协程。</p>\n<h4 id=\"-10\">处处都要使用非阻塞代码</h4>\n<p>写协程就意味着你要一值写一些非阻塞的代码，使用各种异步版本的库，比如后面的异步爬虫教程中用的 aiohttp 就是一个异步版本的request库等。 不过这些缺点并不能影响到使用协程的优势。</p>\n<hr>\n</div>\n</body>\n</html>"},{"title":"asyncio使用指南","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>asyncio使用指南</title>\n</head>\n<body>\n<div id=\"article_content\" class=\"mazi-article-content dont-break-out\">\n    <h3 id=\"\">协程的演变</h3>\n    <p>其实早在 Python3.4 的时候就有协程,当时的协程是通过 @asyncio.coroutine 和 yeild from 实现的。在一些很老教程中你可能看到的是下面这种形式:</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> asyncio\n\n@asyncio.coroutine\ndef print_hello():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello world!\"</span>)\n    r = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> asyncio.sleep(<span\n                class=\"hljs-number\">1</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello again!\"</span>)\n\n<span class=\"hljs-comment\"># 创建并获取EventLoop:</span>\n<span class=\"hljs-keyword\">loop</span> = asyncio.get_event_loop()\n<span class=\"hljs-comment\"># 执行协程</span>\n<span class=\"hljs-keyword\">loop</span>.run_until_complete(print_hello())\n<span class=\"hljs-keyword\">loop</span>.close()\n</code></pre>\n    <p>因为现在几乎没有人这样写了，所以仅作为了解即可。</p>\n    <p>然后到了 Python3.5 引入了 async/await 语法糖，一直到现在Python3.8 都是用这种形式来表示协程，示例如下。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">print_hello</span><span class=\"hljs-params\">()</span>:</span>\n     print(<span class=\"hljs-string\">\"Hello world!\"</span>)\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">\"Hello again!\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n    <span class=\"hljs-keyword\">try</span>:\n        print(<span class=\"hljs-string\">\"开始运行协程\"</span>)\n        coro = print_hello()\n        print(<span class=\"hljs-string\">\"进入事件循环\"</span>)\n        loop.run_until_complete(coro)\n    <span class=\"hljs-keyword\">finally</span>:\n        print(<span class=\"hljs-string\">\"关闭事件循环\"</span>)\n        loop.close()\n</code></pre>\n    <p>这种是目前应用范围最广的，可以看到比之前的代码舒服了不少，不用再使用装饰器的形式了。</p>\n    <p>然后就到了 Python3.7 和 Python3.8，协程发生了很多细小的变化，但是最大的一个变化就是，启动协程的方法变简单了，一句就可以搞定，不用再像上面那样，创建循环然后再仍到事件循环去执行。使用 asyncio.run\n        这个顶级 API 就可以了。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">print_hello</span><span class=\"hljs-params\">()</span>:</span>\n     print(<span class=\"hljs-string\">\"Hello world!\"</span>)\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">\"Hello again!\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n        print(<span class=\"hljs-string\">\"开始运行协程\"</span>)\n        asyncio.run(print_hello())\n        print(<span class=\"hljs-string\">\"进入事件循环\"</span>)\n</code></pre>\n    <p>怎么样是不是代码更少了，启动协程更简单了。所以这也正是我们使用 3.8 作为本教程的 Python 版，与时俱进嘛。</p>\n    <h3 id=\"asyncio\">asyncio 的组成部分</h3>\n    <p>根据目前的官方文档，总的来说分为了两部分：高层级 API 和低层级 API。</p>\n    <p>首先看高层级 API 也是接下来重点要讲的。</p>\n    <h4 id=\"api\">高层级 API</h4>\n    <ul>\n        <li>协程对象和 Tasks 对象</li>\n        <li>数据流</li>\n        <li>同步源语</li>\n        <li>子进程</li>\n        <li>队列</li>\n        <li>异常</li>\n    </ul>\n    <h4 id=\"api-1\">低层级 API</h4>\n    <ul>\n        <li>事件循环</li>\n        <li>Futures 对象</li>\n        <li>传输和协议</li>\n        <li>策略</li>\n        <li>平台支持</li>\n    </ul>\n    <p>上面列出了这么多的项目我们怎么去选择自己所需要的呢，总的来说对于刚入门的新手或者只是写一个自己用的程序一般都只会用到高级 API\n        的部分，这部分就属于开箱即用的那种，对于高级用户比如框架开发者，往往可以需要去适应各种需要，需要重新改写一些内部的结构，这个时候就需要用到低层级的 API，但是这两个层级呢只能是一个大概方向吧，主要是方便 API\n        的查看，下面呢我将围绕者高层级 API 和低层级 API 在日常实际工作中经常用到的内容做一些讲解。</p>\n    <h3 id=\"-1\">了解几个概念</h3>\n    <p>在学习 asyncio 之前需要知道这样的几个概念。</p>\n    <h4 id=\"-2\">事件循环</h4>\n    <p>事件循环是一种处理多并发量的有效方式，在维基百科中它被描述为「一种等待程序分配事件或消息的编程架构」，我们可以定义事件循环来简化使用轮询方法来监控事件，通俗的说法就是「当 A 发生时，执行\n        B」。所谓的事件，其实就是函数。事件循环，就是有一个队列，里面存放着一堆函数，从第一个函数开始执行，在函数执行的过程中，可能会有新的函数继续加入到这个队列中。一直到队列中所有的函数被执行完毕，并且再也不会有新的函数被添加到这个队列中，程序就结束了。</p>\n    <h4 id=\"future\">Future</h4>\n    <p>Future 是一个数据结构，表示还未完成的工作结果。事件循环可以监视 Future 对象是否完成。从而允许应用的一部分等待另一部分完成一些工作。</p>\n    <p>简单说，Future 就是一个类，用生成器实现了回调。</p>\n    <h4 id=\"task\">Task</h4>\n    <p>Task 是 Future 的一个子类，它知道如何包装和管理一个协程的执行。任务所需的资源可用时，事件循环会调度任务允许，并生成一个结果，从而可以由其他协程消费。一般操作最多的还是 Task。用 Task\n        来封装协程，给原本没有状态的协程增加一些状态。</p>\n    <h4 id=\"awaitableobjects\">awaitable objects（可等待对象）</h4>\n    <p>如果一个对象可以用在 wait 表达式中，那么它就是一个可等待的对象。在 asyncio 模块中会一直提到这个概念，其中协程函数，Task，Future 都是 awaitable 对象。</p>\n    <p>用于 await 表达式中的对象。可以是 coroutine 也可以是实现了 <code>__await__()</code> 方法的对象，参见 PEP 492。类比于 Iterable 对象是 Generator 或实现了\n        <code>__iter__()</code> 方法的对象。</p>\n    <p><strong>object._<em>await</em>_(self)</strong></p>\n    <p>必须返回生成器，asyncio.Future 类也实现了该方法，用于兼容 await 表达式。</p>\n    <p>而 Task 继承自 Future，因此 awaitable 对象有三种：coroutines、Tasks 和 Futures。</p>\n    <p>await 的目的：</p>\n    <ul>\n        <li>获取协程的结果</li>\n        <li>挂起当前协程，将控制交由事件循环，切换到其他协程，然后等待结果，最后恢复协程继续执行</li>\n    </ul>\n    <h3 id=\"-3\">启动一个协程</h3>\n    <p>现在我们使用 async/await 语法来声明一个协程。 代码如下：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n     print(<span class=\"hljs-string\">'hello'</span>)\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">'world'</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>asyncio.run 只能用来启动程序入口协程，反过来你在程序中如果使用 asyncio.run 就会出错，之前我们提到对于其他的协程通过 await 链来实现，这里也是一样的。</p>\n    <p>下面说下代码的含义，首先启动 main 这个协程，main 方法就是先打印 hello，然后在打印过程中通过使用 asyncio.sleep 来等待 1 秒，之后再打印\n        world。前面我们提到用协程就意味着我们要一直使用非阻塞的代码，才能达到速度提升，所以这里我们用了非阻塞版的 time.sleep 即 asyncio.sleep 。</p>\n    <h3 id=\"-4\">协程中调用协程</h3>\n    <p>之前我们提到了在协程中，可以使用 await 来调用一个协程。</p>\n    <p>就像下面的代码:</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">say_after</span><span class=\"hljs-params\">(delay, what)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(delay)\n    print(what)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\">#使用f-string拼接字符串</span>\n    print(<span class=\"hljs-string\">f\"开始运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n\n    child1=<span class=\"hljs-keyword\">await</span> say_after(<span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-string\">'hello'</span>) <span class=\"hljs-comment\">#通过await调用协程，然后接收一下返回值</span>\n    child2=<span class=\"hljs-keyword\">await</span> say_after(<span class=\"hljs-number\">2</span>, <span\n                class=\"hljs-string\">'world'</span>)\n    print(<span class=\"hljs-string\">\"child1\"</span>,child1)\n    print(<span class=\"hljs-string\">\"child2\"</span>,child2)\n\n    print(<span class=\"hljs-string\">f\"结束运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n      asyncio.run(main())\n</code></pre>\n    <p>运行结果：</p>\n    <pre><code class=\"hljs css\">开始运行 11<span class=\"hljs-selector-pseudo\">:17</span><span class=\"hljs-selector-pseudo\">:26</span>\n<span class=\"hljs-selector-tag\">hello</span>\n<span class=\"hljs-selector-tag\">world</span>\n<span class=\"hljs-selector-tag\">child1</span> <span class=\"hljs-selector-tag\">None</span>\n<span class=\"hljs-selector-tag\">child2</span> <span class=\"hljs-selector-tag\">None</span>\n结束运行 11<span class=\"hljs-selector-pseudo\">:17</span><span class=\"hljs-selector-pseudo\">:29</span>\n<span class=\"hljs-selector-attr\">[Finished in 3.1s]</span>\n</code></pre>\n    <p>代码是没什么问题,正常运行。但是一般情况下我们用到更多的是下面的方式。将协程封装为 Task 让原本没有状态标示的协程添加上状态 。</p>\n    <p>我们可以通过 asyncio.create_task 方法来实现。</p>\n    <h4 id=\"asynciocreate_task\">asyncio.create_task</h4>\n    <p><code>create_task</code>（在 3.6 版本中需要使用低层级的 API <code>asyncio.ensure_future</code>。）是\n        3.7以后加入的语法，作用是将协程包装为一个任务（Task），相比 3.6 版本的 <code>ensure_future</code> 可读性提高。</p>\n    <p>将上面的代码做如下修改：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">say_after</span><span class=\"hljs-params\">(delay, what)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(delay)\n    print(what)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">f\"开始运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n\n    child1=asyncio.create_task(say_after(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'hello'</span>)) <span\n                class=\"hljs-comment\">#通过await调用协程，然后接收一下返回值</span>\n    child2=asyncio.create_task(say_after(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'world'</span>))\n    print(<span class=\"hljs-string\">\"调用任务child1前\"</span>,child1)\n    print(<span class=\"hljs-string\">\"调用任务child2前\"</span>,child2)\n    <span class=\"hljs-keyword\">await</span> child1\n    <span class=\"hljs-keyword\">await</span> child2\n    print(<span class=\"hljs-string\">\"调用任务child1后\"</span>,child1)\n    print(<span class=\"hljs-string\">\"调用任务child2前\"</span>,child2)\n\n    print(<span class=\"hljs-string\">f\"结束运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n      asyncio.run(main())\n</code></pre>\n    <p>运行结果如下:</p>\n    <pre><code class=\"hljs ruby\">开始运行 <span class=\"hljs-number\">11</span><span class=\"hljs-symbol\">:</span><span\n            class=\"hljs-number\">37</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">54</span>\n调用任务child1前 &lt;Task pending name=<span class=\"hljs-string\">'Task-2'</span> coro=&lt;say_after() running at /Users/chennan/Desktop/<span\n                class=\"hljs-number\">2019</span>/aiochatuse/hello.<span class=\"hljs-symbol\">py:</span><span\n                class=\"hljs-number\">4</span><span class=\"hljs-meta\">&gt;&gt;\n</span>调用任务child2前 &lt;Task pending name=<span class=\"hljs-string\">'Task-3'</span> coro=&lt;say_after() running at /Users/chennan/Desktop/<span\n                class=\"hljs-number\">2019</span>/aiochatuse/hello.<span class=\"hljs-symbol\">py:</span><span\n                class=\"hljs-number\">4</span>&gt;&gt;\nhello\nworld\n调用任务child1后 &lt;Task finished name=<span class=\"hljs-string\">'Task-2'</span> coro=&lt;say_after() done, <span\n                class=\"hljs-keyword\">defined</span> at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/hello.<span\n                class=\"hljs-symbol\">py:</span><span class=\"hljs-number\">4</span>&gt; result=None&gt;\n调用任务child2前 &lt;Task finished name=<span class=\"hljs-string\">'Task-3'</span> coro=&lt;say_after() done, <span\n                class=\"hljs-keyword\">defined</span> at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/hello.<span\n                class=\"hljs-symbol\">py:</span><span class=\"hljs-number\">4</span>&gt; result=None&gt;\n结束运行 <span class=\"hljs-number\">11</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">37</span><span\n                class=\"hljs-symbol\">:</span><span class=\"hljs-number\">56</span>\n</code></pre>\n    <p>可以发现，我们的结果中多了\"&lt;Task pending ...\"和\"&lt;Task finised ...\"几行语句。这就是 Task\n        的一个状态变化，知道状态的好处就是我们可以根据任务的状态做进一步操作，不像协程函数那样没有状态标示，当然 Task 的状态不只有这些。</p>\n    <p>前面说到 Task 是 Future 的子类，所以 Task 拥有 Future 的一些状态。</p>\n    <h4 id=\"future-1\">Future 的状态</h4>\n    <p>大概有如下几种:</p>\n    <ul>\n        <li>Pending</li>\n        <li>Running</li>\n        <li>Done</li>\n        <li>Cancelled</li>\n    </ul>\n    <p>创建 future 的时候，task 为 pending，事件循环调用执行的时候当然就是 running，调用完毕自然就是 done，如果需要停止事件循环，就需要先把 task 取消，状态为 cancel。这里先做了解知道\n        Task 是有状态的就够了。</p>\n    <h3 id=\"-5\">并发运行任务</h3>\n    <p>一系列的协程可以通过 await 链式的调用，但是有的时候我们需要在一个协程里等待多个协程，比如我们在一个协程里等待 1000 个异步网络请求，对于访问次序有没有要求的时候，就可以使用另外的关键字 asyncio.wait 或\n        asyncio.gather 来解决了。</p>\n    <h4 id=\"asynciogather\">asyncio.gather</h4>\n    <p>使用方法：</p>\n    <pre><code class=\"hljs python\">asyncio.gather(*aws, loop=<span\n            class=\"hljs-keyword\">None</span>, return_exceptions=<span class=\"hljs-keyword\">False</span>)¶\n</code></pre>\n    <p>也就是说使用 gather 语句并发协程，就得用 await 去执行它。这个方法可以接收三个参数，第一个 aws。</p>\n    <p>aws 一般是一个列表，如果里面的元素是 awaitable 类型，在运行的时候它将自动被包装成 Task，gather 会根据 aws 中元素添加的顺序。顺序执行并返回结果列表。</p>\n    <p>第二个 loop 可以传入一个事件循环对象，一般不用管，最后一个 <code>return_exceptions</code> 默认是 False，如果 return_exceptions 为\n        True，异常将被视为成功结果，然后添加到结果列表中。</p>\n    <p>下面是一个 10 个数字并输出的例子：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">foo</span><span class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> num\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    coro = [asyncio.create_task(foo(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">10</span>) ]\n    done= <span class=\"hljs-keyword\">await</span> asyncio.gather(*coro)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> done:\n        print(i)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行之后结果如下：</p>\n    <pre><code class=\"hljs\">0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n</code></pre>\n    <p>gather 返回的结果是一个列表，迭代这个列表可以看到任务依次输出。</p>\n    <p>gather 通常被用来阶段性的一个操作，做完第一步才能做第二步，比如下面这样：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">import</span> time\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">step1</span><span class=\"hljs-params\">(n, start)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    print(<span class=\"hljs-string\">\"第一阶段完成\"</span>)\n    print(<span class=\"hljs-string\">\"此时用时\"</span>, time.time() - start)\n    <span class=\"hljs-keyword\">return</span> n\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">step2</span><span class=\"hljs-params\">(n, start)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    print(<span class=\"hljs-string\">\"第二阶段完成\"</span>)\n    print(<span class=\"hljs-string\">\"此时用时\"</span>, time.time() - start)\n    <span class=\"hljs-keyword\">return</span> n\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    now = time.time()\n    result = <span class=\"hljs-keyword\">await</span> asyncio.gather(step1(<span class=\"hljs-number\">5</span>, now), step2(<span\n                class=\"hljs-number\">2</span>, now))\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> result:\n        print(i)\n    print(<span class=\"hljs-string\">\"总用时\"</span>, time.time() - now)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n   asyncio.run(main())\n</code></pre>\n    <p>输出内容：</p>\n    <pre><code class=\"hljs css\">第二阶段完成\n此时用时 2<span class=\"hljs-selector-class\">.0041821002960205</span>\n第一阶段完成\n此时用时 5<span class=\"hljs-selector-class\">.0009942054748535</span>\n5\n2\n总用时 5<span class=\"hljs-selector-class\">.001508951187134</span>\n</code></pre>\n    <p>可以通过上面结果得到如下结论：</p>\n    <ol>\n        <li>step1 和 step2 是并行运行的。</li>\n        <li>gather 会等待最耗时的那个完成之后才返回结果，耗时总时间取决于其中任务最长时间的那个。</li>\n    </ol>\n    <h4 id=\"asynciowait\">asyncio.wait</h4>\n    <p>我们先看一下 wait 的语法结构：</p>\n    <pre><code class=\"hljs python\">asyncio.wait(aws, *, loop=<span class=\"hljs-keyword\">None</span>, timeout=<span\n            class=\"hljs-keyword\">None</span>, return_when=ALL_COMPLETED)¶\n</code></pre>\n    <p>wait 一共有 4 个参数，第一个参数 aws，一般是一个任务列表。</p>\n    <p>第二个*之后的都是强制关键字参数，即 loop、timeout、return_when。</p>\n    <p>loop 通 gather 的参数是一个事件循环，该参数计划在 Python 3.10 中删除。</p>\n    <p>timeout 可以指定这组任务的超时时间，请注意，此函数不会引发 asyncio.TimeoutError，超时的时候会返回已完成的任务。</p>\n    <p>return_when 可以指定什么条件下返回结果，默认是所以任务完成就返回结果列表。</p>\n    <p>return_when 的具体参数看下面的表格：</p>\n    <table>\n        <thead>\n        <tr>\n            <th>参数名</th>\n            <th>含义</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td>FIRST_COMPLETED</td>\n            <td>任何一个 future 完成或取消时返回</td>\n        </tr>\n        <tr>\n            <td>FIRST_EXCEPTION</td>\n            <td>任何一个 future 出现错误将返回，如果没有出现异常等价于 ALL_COMPLETED</td>\n        </tr>\n        <tr>\n            <td>ALL_COMPLETED</td>\n            <td>当所有任务完成或者被取消时返回结果，默认值。</td>\n        </tr>\n        </tbody>\n    </table>\n    <p>wait 返回的结果是一个元组，第一部分是完成的任务，第二部分是准备中的任务。</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">done</span>, pending = await asyncio.wait(aws)\n</code></pre>\n    <p>其中 done 表示完成的任务，可以通过迭代获取每个任务。</p>\n    <p>pending 表示的是还没执行的任务。</p>\n    <p>下面看一个例子来进一步了解：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">foo</span><span class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.99991</span>)\n    <span class=\"hljs-keyword\">return</span> num\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\">#coro = foo()</span>\n    coro = [asyncio.create_task(foo(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">10</span>) ]\n    done, pending = <span class=\"hljs-keyword\">await</span> asyncio.wait(coro,timeout=<span class=\"hljs-number\">1</span>,return_when=<span\n                class=\"hljs-string\">\"ALL_COMPLETED\"</span>)\n\n    <span class=\"hljs-keyword\">for</span> coro <span class=\"hljs-keyword\">in</span> done:\n        print(coro.result())\n    print(<span class=\"hljs-string\">\"pending\"</span>,pending)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> pending:\n         print(item)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行结果如下:</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">7</span>\npending {&lt;Task pending name=<span class=\"hljs-string\">'Task-10'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span\n                class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span\n                class=\"hljs-keyword\">None</span>&gt;&gt;, &lt;Task pending name=<span\n                class=\"hljs-string\">'Task-11'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span\n                class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span\n                class=\"hljs-keyword\">None</span>&gt;&gt;}\n&lt;Task pending name=<span class=\"hljs-string\">'Task-10'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span\n                class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span\n                class=\"hljs-keyword\">None</span>&gt;&gt;\n&lt;Task pending name=<span class=\"hljs-string\">'Task-11'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span\n                class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span\n                class=\"hljs-keyword\">None</span>&gt;&gt;\n</code></pre>\n    <p>首先说代码，使用 wait 实现并发的程序是无序的，所以我们看到数字不是一次出现的，这个是和 gather 的不同之处。另外在返回的参数上也有差别，wait 返回两个参数 done 和 pending。</p>\n    <p>上面的代码指定了一个 timeout，因为任务没在指定时间完成，所以就导致只有完成的任务输出了结果，没有完成的部分可以看到它们的状态是 pending。</p>\n    <h4 id=\"-6\">总结</h4>\n    <p>最后我们总结一下 wait 和 gather 的相同之处和不同之处：</p>\n    <p>相同之处：都可以完成多个任务的并发操作。\n        不同之外：gather 适合按照顺序去做的任务，或者按照阶段去做的任务，返回的是结果列表，而 wait 不讲究任务的顺序，这个在做爬虫中经常使用到，然后 wait 可以返回 2 个结果，done 和 pending。</p>\n    <h3 id=\"-7\">任务完成时处理</h3>\n    <h4 id=\"asyncioas_completed\">asyncio.as_completed</h4>\n    <p><code>as_complete</code> 是一个生成器，会管理指定的一个任务列表，并生成他们的结果。每个协程结束运行时一次生成一个结果。与 wait 一样，<code>as_complete</code>\n        不能保证顺序，不过执行其他动作之前没有必要等待所有后台操作完成。</p>\n    <p>我们看下这个函数都有哪些参数：</p>\n    <pre><code class=\"hljs python\">asyncio.as_completed(aws, *, loop=<span\n            class=\"hljs-keyword\">None</span>, timeout=<span class=\"hljs-keyword\">None</span>)\n</code></pre>\n    <p>和前面的 wait 类似，第一个参数 awas，然后 loop，最后 timeout，需要注意的是 timeout 如果指定了，那么在指定时间没完成的话会抛出 asyncio.exceptions.TimeoutError\n        异常。</p>\n    <p>下面看一个例子:</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> time\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">foo</span><span class=\"hljs-params\">(n)</span>:</span>\n    print(<span class=\"hljs-string\">f'等待<span class=\"hljs-subst\">{n}</span>秒'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    <span class=\"hljs-keyword\">return</span> n\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    coroutine1 = foo(<span class=\"hljs-number\">1</span>)\n    coroutine2 = foo(<span class=\"hljs-number\">2</span>)\n    coroutine3 = foo(<span class=\"hljs-number\">4</span>)\n\n    tasks = [asyncio.create_task(coroutine1),asyncio.create_task(coroutine2),asyncio.create_task(coroutine3)]\n    <span class=\"hljs-keyword\">for</span> task <span class=\"hljs-keyword\">in</span> asyncio.as_completed(tasks):\n        result = <span class=\"hljs-keyword\">await</span> task\n        print(<span class=\"hljs-string\">f'获取返回结果: <span class=\"hljs-subst\">{result}</span>'</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    now = <span class=\"hljs-keyword\">lambda</span> : time.time()\n    start = now()\n    asyncio.run(main())\n    print(now() - start)\n</code></pre>\n    <p>输出结果：</p>\n    <pre><code class=\"hljs makefile\">等待1秒\n等待2秒\n等待4秒\n<span class=\"hljs-section\">获取返回结果: 1</span>\n<span class=\"hljs-section\">获取返回结果: 2</span>\n<span class=\"hljs-section\">获取返回结果: 4</span>\n4.002715826034546\n</code></pre>\n    <p>可以看出整个执行过程总用时取决 等待时间最长的那个，即 4 秒。</p>\n    <p>接下来，对上面的代码稍作修改。</p>\n    <p>将</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">for</span> task <span class=\"hljs-keyword\">in</span> asyncio.as_completed(tasks):\n</code></pre>\n    <p>改为</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">for</span> task <span class=\"hljs-keyword\">in</span> asyncio.as_completed(tasks,timeout=2):\n</code></pre>\n    <p>其他地方不变，改完运行之后会看到上面提到的错误。</p>\n    <pre><code class=\"hljs sql\">等待1秒\n等待2秒\n等待4秒\n获取返回结果: 1\nTraceback (most recent <span class=\"hljs-keyword\">call</span> <span class=\"hljs-keyword\">last</span>):\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Users/chennan/Desktop/2019/aiochatuse/ascomplete.py\"</span>, line <span\n                class=\"hljs-number\">25</span>, <span class=\"hljs-keyword\">in</span> &lt;<span class=\"hljs-keyword\">module</span>&gt;\n    asyncio.run(<span class=\"hljs-keyword\">main</span>())\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/runners.py\"</span>, line <span\n                class=\"hljs-number\">43</span>, <span class=\"hljs-keyword\">in</span> run\n    <span class=\"hljs-keyword\">return</span> loop.run_until_complete(<span class=\"hljs-keyword\">main</span>)\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py\"</span>, line <span\n                class=\"hljs-number\">589</span>, <span class=\"hljs-keyword\">in</span> run_until_complete\n    <span class=\"hljs-keyword\">return</span> future.result()\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Users/chennan/Desktop/2019/aiochatuse/ascomplete.py\"</span>, line <span\n                class=\"hljs-number\">18</span>, <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">main</span>\n    <span class=\"hljs-keyword\">result</span> = await task\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/tasks.py\"</span>, line <span\n                class=\"hljs-number\">570</span>, <span class=\"hljs-keyword\">in</span> _wait_for_one\n    <span class=\"hljs-keyword\">raise</span> exceptions.TimeoutError\nasyncio.exceptions.TimeoutError\n</code></pre>\n    <h3 id=\"-8\">取消任务的时候保证其他协程运行完毕</h3>\n    <p>在取消任务的时候存在一个问题,首先先看一段代码：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">coro</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">'开始休眠'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">2</span>)\n    print(<span class=\"hljs-string\">'结束休眠'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">cancel_it</span><span class=\"hljs-params\">(some_task)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>)\n    some_task.cancel()\n    print(<span class=\"hljs-string\">'取消some_task任务'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    real_task = asyncio.create_task(coro())\n    <span class=\"hljs-keyword\">await</span> cancel_it(real_task)\n    <span class=\"hljs-keyword\">await</span> real_task\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行之后你会看到如下结果：</p>\n    <pre><code class=\"hljs sql\">开始休眠\n取消some_task任务\nTraceback (most recent <span class=\"hljs-keyword\">call</span> <span class=\"hljs-keyword\">last</span>):\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Users/chennan/Desktop/2019/aiochatuse/shielddemo.py\"</span>, line <span\n                class=\"hljs-number\">24</span>, <span class=\"hljs-keyword\">in</span> &lt;<span class=\"hljs-keyword\">module</span>&gt;\n    asyncio.run(<span class=\"hljs-keyword\">main</span>())\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/runners.py\"</span>, line <span\n                class=\"hljs-number\">43</span>, <span class=\"hljs-keyword\">in</span> run\n    <span class=\"hljs-keyword\">return</span> loop.run_until_complete(<span class=\"hljs-keyword\">main</span>)\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py\"</span>, line <span\n                class=\"hljs-number\">589</span>, <span class=\"hljs-keyword\">in</span> run_until_complete\n    <span class=\"hljs-keyword\">return</span> future.result()\nasyncio.exceptions.CancelledError\n</code></pre>\n    <p>下面说一下代码中的逻辑，在 main 协程中将 coro 协程封装为任务 <code>real_task</code>，然后 <code>cancel_it</code> 方法做了一个取消任务的逻辑 <code>some_task.cancel()</code>，并打印一句话。然后通过\n        await 去运行 <code>real_task</code> 方法，执行代码之后看到上面的结果。出现了 asyncio.exceptions.CancelledError 错误，同时看到 coro\n        只打印了一个开始休眠，后面的结束休眠没有打印。也就是说我们在取消一个任务的时候，里面对于的协程也被取消了。如果我们想在取消任务之后协程还能顺利执行完，就需要用到另外一个函数 shield。</p>\n    <h4 id=\"asyncioshield\">asyncio.shield</h4>\n    <p>该方法的作用是，在执行 cancel 取消一个 task 之后，task 里面的协程仍然可以执行结束，不会像上面的 coro 那样出现错误。</p>\n    <pre><code class=\"hljs coffeescript\">asyncio.shield(aw, *, <span class=\"hljs-keyword\">loop</span>=None)\n</code></pre>\n    <p>aw 表示需要传入一个 Task。</p>\n    <p>接下来我们就使用这个方法对上面的例子做一个修改。</p>\n    <p>从代码中体会它的作用。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">coro</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">'开始休眠'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">2</span>)\n    print(<span class=\"hljs-string\">'结束休眠'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">cancel_it</span><span class=\"hljs-params\">(some_task)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>)\n    some_task.cancel()\n    print(<span class=\"hljs-string\">'取消some_task任务'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    real_task = asyncio.create_task(coro())\n    shield = asyncio.shield(real_task)\n    <span class=\"hljs-keyword\">await</span> cancel_it(shield)\n    <span class=\"hljs-keyword\">await</span> real_task\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行之后的结果：</p>\n    <pre><code class=\"hljs\">开始休眠\n取消some_task任务\n结束休眠\n</code></pre>\n    <p>可以看到尽管 some_task 任务被取消，但是 coro 仍然成功的打印了最好的“结束休眠”。通过上面的例子我想大家应该知道 shield 的作用了。 </p>\n    <h3 id=\"-9\">超时等待</h3>\n    <p>有时候需要等待一个任务完成之后再进行下一个，但是有的时候并不需要运行完就返回。</p>\n    <p>这个时候可以使用 wait_for。</p>\n    <h4 id=\"asynciowait_for\">asyncio.wait_for</h4>\n    <p>该方法的语法如下：</p>\n    <pre><code class=\"hljs coffeescript\">asyncio.wait_for(aw, timeout, *, <span class=\"hljs-keyword\">loop</span>=None)\n</code></pre>\n    <p>aw 是一个任务，timeout 可以指定超时时间。如果发生超时，它将取消该任务并引发 asyncio.TimeoutError，此时为了保证任务中协程完成可以使用上面说的 shield。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>:</span>\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">\"in foo\"</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">eternity</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># Sleep for one hour</span>\n    <span class=\"hljs-keyword\">await</span> foo()\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">3600</span>)\n    print(<span class=\"hljs-string\">'yay!'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># Wait for at most 1 second</span>\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">await</span> asyncio.wait_for(asyncio.shield(eternity()), timeout=<span\n                class=\"hljs-number\">1.0</span>)\n    <span class=\"hljs-keyword\">except</span> asyncio.TimeoutError:\n        print(<span class=\"hljs-string\">'timeout!'</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>输出：</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">in</span> foo\ntimeout!\n</code></pre>\n    <p>按照上面的经验可知道，如果我们把 asyncio.shield 去掉之后，“in foo” 就无法输出了。</p>\n    <h3 id=\"-10\">协程配合线程</h3>\n    <h4 id=\"asynciorun_coroutine_threadsafe\">asyncio.run<em>coroutine</em>threadsafe</h4>\n    <p>该方法的语法如下：</p>\n    <pre><code class=\"hljs coffeescript\">asyncio.run_coroutine_threadsafe(coro, <span class=\"hljs-keyword\">loop</span>)\n</code></pre>\n    <p>其实在协程中也可以使用多线程,有时候我们需要在主线程中启动一个子线程去做别的任务，这个时候我们就要用到下面的方法了，先上一个流畅的 Python 中的代码。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span>  threading <span class=\"hljs-keyword\">import</span> Thread\n\nnow = <span class=\"hljs-keyword\">lambda</span>: time.time()\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">start_loop</span><span\n        class=\"hljs-params\">(loop)</span>:</span>\n    asyncio.set_event_loop(loop)\n    loop.run_forever()\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">do_some_work</span><span class=\"hljs-params\">(x)</span>:</span>\n    print(<span class=\"hljs-string\">f'Waiting <span class=\"hljs-subst\">{x}</span>'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(x)\n    print(<span class=\"hljs-string\">f'Done after <span class=\"hljs-subst\">{x}</span>s'</span>)\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">more_work</span><span\n        class=\"hljs-params\">(x)</span>:</span>\n    print(<span class=\"hljs-string\">f'More work <span class=\"hljs-subst\">{x}</span>'</span>)\n    time.sleep(x)\n    print(<span class=\"hljs-string\">'Finished more work {x}'</span>)\n\n\nstart = now()\n<span class=\"hljs-comment\"># 主线程中创建一个 new_loop</span>\nnew_loop = asyncio.get_event_loop()\n<span class=\"hljs-comment\"># 创建子线程 在其中开启无限事件循环</span>\nt = Thread(target=start_loop, args=(new_loop,))\nt.start()\nprint(<span class=\"hljs-string\">f'TIME: <span class=\"hljs-subst\">{time.time() - start}</span>'</span>)\n\n<span class=\"hljs-comment\"># 在主线程中新注册协程对象</span>\n<span class=\"hljs-comment\"># 这样即可在子线程中进行事件循环的并发操作 同时主线程又不会被 block </span>\n<span class=\"hljs-comment\"># 一共执行的时间大概在 6 s 左右 </span>\nasyncio.run_coroutine_threadsafe(do_some_work(<span class=\"hljs-number\">6</span>), new_loop)\nasyncio.run_coroutine_threadsafe(do_some_work(<span class=\"hljs-number\">4</span>), new_loop)\n</code></pre>\n    <p>上述的例子，主线程中创建一个 <code>new_loop</code>，然后在另外的子线程中开启一个无限事件循环。主线程通过 <code>run_coroutine_threadsafe</code>\n        新注册协程对象。这样就能在子线程中进行事件循环的并发操作，同时主线程又不会被 block。一共执行的时间大概在 6s 左右。</p>\n    <h3 id=\"-11\">同步原语</h3>\n    <p>尽管 asyncio 应用通常作为单线程运行，不过仍被构建为并发应用。由于 I/O 以及其他外部事件的延迟和中断，每个协程或任务可能按一种不可预知的顺序执行。为了支持安全的并发执行，asyncio 包含了 threading\n        和 multiprocessing 模块中的一些底层原语的实现。</p>\n    <p>这里介绍两个经常用到的例子。</p>\n    <h4 id=\"queue\">队列（Queue）</h4>\n    <p>asyncio.Queue 为协程提供了一个先进先出的数据结构，这与线程的 queue.Queue 或进程的multiprocessing.Queue 很类似，下面先看一个简单的例子，它是一个非阻塞的队列。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span> asyncio <span class=\"hljs-keyword\">import</span> Queue\n\nqueue=Queue()\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span>:</span>\n        [queue.put_nowait(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>)]\n        <span class=\"hljs-keyword\">await</span> asyncio.create_task(work()) <span\n                class=\"hljs-comment\">#put_nowait表示放入元素</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">work</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> queue.empty():<span\n                class=\"hljs-comment\">#判断队列的元素是否为空</span>\n            num = queue.get_nowait()<span class=\"hljs-comment\">#获取元素</span>\n            print(<span class=\"hljs-string\">f\"获取数字:<span class=\"hljs-subst\">{num}</span>\"</span>)\n            queue.task_done()<span class=\"hljs-comment\">#告诉队列该任务处理完。</span>\n    <span class=\"hljs-keyword\">except</span> asyncio.CancelledError:\n        <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(start())\n</code></pre>\n    <p>输出结果:</p>\n    <pre><code class=\"hljs css\">获取数字<span class=\"hljs-selector-pseudo\">:1</span>\n获取数字<span class=\"hljs-selector-pseudo\">:2</span>\n获取数字<span class=\"hljs-selector-pseudo\">:3</span>\n获取数字<span class=\"hljs-selector-pseudo\">:4</span>\n获取数字<span class=\"hljs-selector-pseudo\">:5</span>\n获取数字<span class=\"hljs-selector-pseudo\">:6</span>\n获取数字<span class=\"hljs-selector-pseudo\">:7</span>\n获取数字<span class=\"hljs-selector-pseudo\">:8</span>\n获取数字<span class=\"hljs-selector-pseudo\">:9</span>\n</code></pre>\n    <p>在做爬虫的时候对于 url 的处理，经常会用到队列的操作。另外一个要说的同步原语就是信号量。</p>\n    <h2 id=\"semaphore\">信号量（Semaphore）</h2>\n    <p>简单说下什么是信号量，我们用停车场和车进行比喻。一个停车场一共就 5 个车位，所以我们知道可以同时容纳最多 5 辆车，这五个车位就是信号量。</p>\n    <p>然后说信号量的行为，当有车离开停车场的时候外面的车就会进来补，比如有 2 辆车离开，那么就可以再进来 2 辆车，依次类推，上面这个过程就是描述了信号量这个东西。</p>\n    <p>下面我们看如何在程序中使用。</p>\n    <p>asyncio.Semaphore 模块就是一个维持并发量的模块，我们用它起到一个限流的效果。首先来一段代码：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\nsem=asyncio.Semaphore(<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">#信号量指定为3</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">branch</span><span class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> sem:  <span class=\"hljs-comment\">#通过异步上下文关键子控制并发量</span>\n        print(<span class=\"hljs-string\">f\"获取当前数字:<span class=\"hljs-subst\">{num}</span>\"</span>)\n        <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n\n     tasks=[asyncio.create_task(branch(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">10</span>)] <span class=\"hljs-comment\">#将协程封装成任务共10个</span>\n     <span class=\"hljs-keyword\">await</span> asyncio.wait(tasks) <span class=\"hljs-comment\">#执行这些任务</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>执行之后你会发现：</p>\n    <pre><code class=\"hljs makefile\"><span class=\"hljs-section\">获取当前数字:0</span>\n<span class=\"hljs-section\">获取当前数字:1</span>\n<span class=\"hljs-section\">获取当前数字:2</span>\nTask exception was never retrieved\n<span class=\"hljs-section\">future: &lt;Task finished name='Task-11' coro=&lt;branch() done, defined at /Users/chennan/Desktop/2019/aiochatuse/semaphoredemo.py:26&gt; exception=RuntimeError(\"Task &lt;Task pending name='Task-11' coro=&lt;branch() running at /Users/chennan/Desktop/2019/aiochatuse/semaphoredemo.py:27&gt; cb=[_wait.&lt;locals&gt;._on_completion() at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/tasks.py:478]&gt; got Future &lt;Future pending&gt; attached to a different loop\")&gt;</span>\n</code></pre>\n    <p>关键就是 attached to a different loop，这个地方说是当前的事件循环发生了改变，这个问题在Python3.6 的时候是不会出现的。</p>\n    <p>为什么 3.8 出错了？</p>\n    <p>这是因为：</p>\n    <p>我的信号量没有在循环内创建。也就是在 asyncio.run() 创建的循环之外创建了它们，因此它们使用 <code>events.get_event_loop()</code> 这就导致了新的事件循环产生。\n        asyncio.run() 创建一个新循环，然后在一个循环中创建的 future\n        不能在另一个循环中使用。所以问题就明确了，我们需要在循环之内创建。也就是我们需要定义一个全局变量，然后在主循环内部给其赋值。看到这，可能大家想到了 global，Python 3.7 增加了上下文变量 Context\n        Variables，至于为什么不用全局变量，因为可能会被其他协程修改，不安全，在这里也可以使用。</p>\n    <p>所以我们的代码变成了下面这个样子：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span> contextvars <span class=\"hljs-keyword\">import</span> ContextVar\n\nconcurrent=ContextVar(<span class=\"hljs-string\">\"concurrent\"</span>)<span class=\"hljs-comment\">#定义全局上下文管理器</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">branch</span><span class=\"hljs-params\">(num)</span>:</span>\n    sem=concurrent.get()<span class=\"hljs-comment\">#获取上下文关键字</span>\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> sem:\n        print(<span class=\"hljs-string\">f\"获取当前数字:<span class=\"hljs-subst\">{num}</span>\"</span>)\n        <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>) <span\n                class=\"hljs-comment\">#为了看到明显的效果</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n     concurrent.set(asyncio.Semaphore(<span class=\"hljs-number\">3</span>)) <span class=\"hljs-comment\">#上下文管理器赋值</span>\n     tasks=[asyncio.create_task(branch(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">10</span>)]\n     <span class=\"hljs-keyword\">await</span> asyncio.wait(tasks)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>然后我们再次输出：</p>\n    <pre><code class=\"hljs css\">获取当前数字<span class=\"hljs-selector-pseudo\">:0</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:1</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:2</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:3</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:4</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:5</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:6</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:7</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:8</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:9</span>\n</code></pre>\n    <p>可以看到程序每隔 3 组输出一次，这就达到了我们想要的效果了。</p>\n    </div>\n</body>\n</html>","source":"_posts/gitchat/python_asyncio_guidelines.html","raw":"---\ntitle: asyncio使用指南\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>asyncio使用指南</title>\n</head>\n<body>\n<div id=\"article_content\" class=\"mazi-article-content dont-break-out\">\n    <h3 id=\"\">协程的演变</h3>\n    <p>其实早在 Python3.4 的时候就有协程,当时的协程是通过 @asyncio.coroutine 和 yeild from 实现的。在一些很老教程中你可能看到的是下面这种形式:</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> asyncio\n\n@asyncio.coroutine\ndef print_hello():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello world!\"</span>)\n    r = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> asyncio.sleep(<span\n                class=\"hljs-number\">1</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello again!\"</span>)\n\n<span class=\"hljs-comment\"># 创建并获取EventLoop:</span>\n<span class=\"hljs-keyword\">loop</span> = asyncio.get_event_loop()\n<span class=\"hljs-comment\"># 执行协程</span>\n<span class=\"hljs-keyword\">loop</span>.run_until_complete(print_hello())\n<span class=\"hljs-keyword\">loop</span>.close()\n</code></pre>\n    <p>因为现在几乎没有人这样写了，所以仅作为了解即可。</p>\n    <p>然后到了 Python3.5 引入了 async/await 语法糖，一直到现在Python3.8 都是用这种形式来表示协程，示例如下。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">print_hello</span><span class=\"hljs-params\">()</span>:</span>\n     print(<span class=\"hljs-string\">\"Hello world!\"</span>)\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">\"Hello again!\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n    <span class=\"hljs-keyword\">try</span>:\n        print(<span class=\"hljs-string\">\"开始运行协程\"</span>)\n        coro = print_hello()\n        print(<span class=\"hljs-string\">\"进入事件循环\"</span>)\n        loop.run_until_complete(coro)\n    <span class=\"hljs-keyword\">finally</span>:\n        print(<span class=\"hljs-string\">\"关闭事件循环\"</span>)\n        loop.close()\n</code></pre>\n    <p>这种是目前应用范围最广的，可以看到比之前的代码舒服了不少，不用再使用装饰器的形式了。</p>\n    <p>然后就到了 Python3.7 和 Python3.8，协程发生了很多细小的变化，但是最大的一个变化就是，启动协程的方法变简单了，一句就可以搞定，不用再像上面那样，创建循环然后再仍到事件循环去执行。使用 asyncio.run\n        这个顶级 API 就可以了。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">print_hello</span><span class=\"hljs-params\">()</span>:</span>\n     print(<span class=\"hljs-string\">\"Hello world!\"</span>)\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">\"Hello again!\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n        print(<span class=\"hljs-string\">\"开始运行协程\"</span>)\n        asyncio.run(print_hello())\n        print(<span class=\"hljs-string\">\"进入事件循环\"</span>)\n</code></pre>\n    <p>怎么样是不是代码更少了，启动协程更简单了。所以这也正是我们使用 3.8 作为本教程的 Python 版，与时俱进嘛。</p>\n    <h3 id=\"asyncio\">asyncio 的组成部分</h3>\n    <p>根据目前的官方文档，总的来说分为了两部分：高层级 API 和低层级 API。</p>\n    <p>首先看高层级 API 也是接下来重点要讲的。</p>\n    <h4 id=\"api\">高层级 API</h4>\n    <ul>\n        <li>协程对象和 Tasks 对象</li>\n        <li>数据流</li>\n        <li>同步源语</li>\n        <li>子进程</li>\n        <li>队列</li>\n        <li>异常</li>\n    </ul>\n    <h4 id=\"api-1\">低层级 API</h4>\n    <ul>\n        <li>事件循环</li>\n        <li>Futures 对象</li>\n        <li>传输和协议</li>\n        <li>策略</li>\n        <li>平台支持</li>\n    </ul>\n    <p>上面列出了这么多的项目我们怎么去选择自己所需要的呢，总的来说对于刚入门的新手或者只是写一个自己用的程序一般都只会用到高级 API\n        的部分，这部分就属于开箱即用的那种，对于高级用户比如框架开发者，往往可以需要去适应各种需要，需要重新改写一些内部的结构，这个时候就需要用到低层级的 API，但是这两个层级呢只能是一个大概方向吧，主要是方便 API\n        的查看，下面呢我将围绕者高层级 API 和低层级 API 在日常实际工作中经常用到的内容做一些讲解。</p>\n    <h3 id=\"-1\">了解几个概念</h3>\n    <p>在学习 asyncio 之前需要知道这样的几个概念。</p>\n    <h4 id=\"-2\">事件循环</h4>\n    <p>事件循环是一种处理多并发量的有效方式，在维基百科中它被描述为「一种等待程序分配事件或消息的编程架构」，我们可以定义事件循环来简化使用轮询方法来监控事件，通俗的说法就是「当 A 发生时，执行\n        B」。所谓的事件，其实就是函数。事件循环，就是有一个队列，里面存放着一堆函数，从第一个函数开始执行，在函数执行的过程中，可能会有新的函数继续加入到这个队列中。一直到队列中所有的函数被执行完毕，并且再也不会有新的函数被添加到这个队列中，程序就结束了。</p>\n    <h4 id=\"future\">Future</h4>\n    <p>Future 是一个数据结构，表示还未完成的工作结果。事件循环可以监视 Future 对象是否完成。从而允许应用的一部分等待另一部分完成一些工作。</p>\n    <p>简单说，Future 就是一个类，用生成器实现了回调。</p>\n    <h4 id=\"task\">Task</h4>\n    <p>Task 是 Future 的一个子类，它知道如何包装和管理一个协程的执行。任务所需的资源可用时，事件循环会调度任务允许，并生成一个结果，从而可以由其他协程消费。一般操作最多的还是 Task。用 Task\n        来封装协程，给原本没有状态的协程增加一些状态。</p>\n    <h4 id=\"awaitableobjects\">awaitable objects（可等待对象）</h4>\n    <p>如果一个对象可以用在 wait 表达式中，那么它就是一个可等待的对象。在 asyncio 模块中会一直提到这个概念，其中协程函数，Task，Future 都是 awaitable 对象。</p>\n    <p>用于 await 表达式中的对象。可以是 coroutine 也可以是实现了 <code>__await__()</code> 方法的对象，参见 PEP 492。类比于 Iterable 对象是 Generator 或实现了\n        <code>__iter__()</code> 方法的对象。</p>\n    <p><strong>object._<em>await</em>_(self)</strong></p>\n    <p>必须返回生成器，asyncio.Future 类也实现了该方法，用于兼容 await 表达式。</p>\n    <p>而 Task 继承自 Future，因此 awaitable 对象有三种：coroutines、Tasks 和 Futures。</p>\n    <p>await 的目的：</p>\n    <ul>\n        <li>获取协程的结果</li>\n        <li>挂起当前协程，将控制交由事件循环，切换到其他协程，然后等待结果，最后恢复协程继续执行</li>\n    </ul>\n    <h3 id=\"-3\">启动一个协程</h3>\n    <p>现在我们使用 async/await 语法来声明一个协程。 代码如下：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n     print(<span class=\"hljs-string\">'hello'</span>)\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">'world'</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>asyncio.run 只能用来启动程序入口协程，反过来你在程序中如果使用 asyncio.run 就会出错，之前我们提到对于其他的协程通过 await 链来实现，这里也是一样的。</p>\n    <p>下面说下代码的含义，首先启动 main 这个协程，main 方法就是先打印 hello，然后在打印过程中通过使用 asyncio.sleep 来等待 1 秒，之后再打印\n        world。前面我们提到用协程就意味着我们要一直使用非阻塞的代码，才能达到速度提升，所以这里我们用了非阻塞版的 time.sleep 即 asyncio.sleep 。</p>\n    <h3 id=\"-4\">协程中调用协程</h3>\n    <p>之前我们提到了在协程中，可以使用 await 来调用一个协程。</p>\n    <p>就像下面的代码:</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">say_after</span><span class=\"hljs-params\">(delay, what)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(delay)\n    print(what)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\">#使用f-string拼接字符串</span>\n    print(<span class=\"hljs-string\">f\"开始运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n\n    child1=<span class=\"hljs-keyword\">await</span> say_after(<span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-string\">'hello'</span>) <span class=\"hljs-comment\">#通过await调用协程，然后接收一下返回值</span>\n    child2=<span class=\"hljs-keyword\">await</span> say_after(<span class=\"hljs-number\">2</span>, <span\n                class=\"hljs-string\">'world'</span>)\n    print(<span class=\"hljs-string\">\"child1\"</span>,child1)\n    print(<span class=\"hljs-string\">\"child2\"</span>,child2)\n\n    print(<span class=\"hljs-string\">f\"结束运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n      asyncio.run(main())\n</code></pre>\n    <p>运行结果：</p>\n    <pre><code class=\"hljs css\">开始运行 11<span class=\"hljs-selector-pseudo\">:17</span><span class=\"hljs-selector-pseudo\">:26</span>\n<span class=\"hljs-selector-tag\">hello</span>\n<span class=\"hljs-selector-tag\">world</span>\n<span class=\"hljs-selector-tag\">child1</span> <span class=\"hljs-selector-tag\">None</span>\n<span class=\"hljs-selector-tag\">child2</span> <span class=\"hljs-selector-tag\">None</span>\n结束运行 11<span class=\"hljs-selector-pseudo\">:17</span><span class=\"hljs-selector-pseudo\">:29</span>\n<span class=\"hljs-selector-attr\">[Finished in 3.1s]</span>\n</code></pre>\n    <p>代码是没什么问题,正常运行。但是一般情况下我们用到更多的是下面的方式。将协程封装为 Task 让原本没有状态标示的协程添加上状态 。</p>\n    <p>我们可以通过 asyncio.create_task 方法来实现。</p>\n    <h4 id=\"asynciocreate_task\">asyncio.create_task</h4>\n    <p><code>create_task</code>（在 3.6 版本中需要使用低层级的 API <code>asyncio.ensure_future</code>。）是\n        3.7以后加入的语法，作用是将协程包装为一个任务（Task），相比 3.6 版本的 <code>ensure_future</code> 可读性提高。</p>\n    <p>将上面的代码做如下修改：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">say_after</span><span class=\"hljs-params\">(delay, what)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(delay)\n    print(what)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">f\"开始运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n\n    child1=asyncio.create_task(say_after(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'hello'</span>)) <span\n                class=\"hljs-comment\">#通过await调用协程，然后接收一下返回值</span>\n    child2=asyncio.create_task(say_after(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'world'</span>))\n    print(<span class=\"hljs-string\">\"调用任务child1前\"</span>,child1)\n    print(<span class=\"hljs-string\">\"调用任务child2前\"</span>,child2)\n    <span class=\"hljs-keyword\">await</span> child1\n    <span class=\"hljs-keyword\">await</span> child2\n    print(<span class=\"hljs-string\">\"调用任务child1后\"</span>,child1)\n    print(<span class=\"hljs-string\">\"调用任务child2前\"</span>,child2)\n\n    print(<span class=\"hljs-string\">f\"结束运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n      asyncio.run(main())\n</code></pre>\n    <p>运行结果如下:</p>\n    <pre><code class=\"hljs ruby\">开始运行 <span class=\"hljs-number\">11</span><span class=\"hljs-symbol\">:</span><span\n            class=\"hljs-number\">37</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">54</span>\n调用任务child1前 &lt;Task pending name=<span class=\"hljs-string\">'Task-2'</span> coro=&lt;say_after() running at /Users/chennan/Desktop/<span\n                class=\"hljs-number\">2019</span>/aiochatuse/hello.<span class=\"hljs-symbol\">py:</span><span\n                class=\"hljs-number\">4</span><span class=\"hljs-meta\">&gt;&gt;\n</span>调用任务child2前 &lt;Task pending name=<span class=\"hljs-string\">'Task-3'</span> coro=&lt;say_after() running at /Users/chennan/Desktop/<span\n                class=\"hljs-number\">2019</span>/aiochatuse/hello.<span class=\"hljs-symbol\">py:</span><span\n                class=\"hljs-number\">4</span>&gt;&gt;\nhello\nworld\n调用任务child1后 &lt;Task finished name=<span class=\"hljs-string\">'Task-2'</span> coro=&lt;say_after() done, <span\n                class=\"hljs-keyword\">defined</span> at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/hello.<span\n                class=\"hljs-symbol\">py:</span><span class=\"hljs-number\">4</span>&gt; result=None&gt;\n调用任务child2前 &lt;Task finished name=<span class=\"hljs-string\">'Task-3'</span> coro=&lt;say_after() done, <span\n                class=\"hljs-keyword\">defined</span> at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/hello.<span\n                class=\"hljs-symbol\">py:</span><span class=\"hljs-number\">4</span>&gt; result=None&gt;\n结束运行 <span class=\"hljs-number\">11</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">37</span><span\n                class=\"hljs-symbol\">:</span><span class=\"hljs-number\">56</span>\n</code></pre>\n    <p>可以发现，我们的结果中多了\"&lt;Task pending ...\"和\"&lt;Task finised ...\"几行语句。这就是 Task\n        的一个状态变化，知道状态的好处就是我们可以根据任务的状态做进一步操作，不像协程函数那样没有状态标示，当然 Task 的状态不只有这些。</p>\n    <p>前面说到 Task 是 Future 的子类，所以 Task 拥有 Future 的一些状态。</p>\n    <h4 id=\"future-1\">Future 的状态</h4>\n    <p>大概有如下几种:</p>\n    <ul>\n        <li>Pending</li>\n        <li>Running</li>\n        <li>Done</li>\n        <li>Cancelled</li>\n    </ul>\n    <p>创建 future 的时候，task 为 pending，事件循环调用执行的时候当然就是 running，调用完毕自然就是 done，如果需要停止事件循环，就需要先把 task 取消，状态为 cancel。这里先做了解知道\n        Task 是有状态的就够了。</p>\n    <h3 id=\"-5\">并发运行任务</h3>\n    <p>一系列的协程可以通过 await 链式的调用，但是有的时候我们需要在一个协程里等待多个协程，比如我们在一个协程里等待 1000 个异步网络请求，对于访问次序有没有要求的时候，就可以使用另外的关键字 asyncio.wait 或\n        asyncio.gather 来解决了。</p>\n    <h4 id=\"asynciogather\">asyncio.gather</h4>\n    <p>使用方法：</p>\n    <pre><code class=\"hljs python\">asyncio.gather(*aws, loop=<span\n            class=\"hljs-keyword\">None</span>, return_exceptions=<span class=\"hljs-keyword\">False</span>)¶\n</code></pre>\n    <p>也就是说使用 gather 语句并发协程，就得用 await 去执行它。这个方法可以接收三个参数，第一个 aws。</p>\n    <p>aws 一般是一个列表，如果里面的元素是 awaitable 类型，在运行的时候它将自动被包装成 Task，gather 会根据 aws 中元素添加的顺序。顺序执行并返回结果列表。</p>\n    <p>第二个 loop 可以传入一个事件循环对象，一般不用管，最后一个 <code>return_exceptions</code> 默认是 False，如果 return_exceptions 为\n        True，异常将被视为成功结果，然后添加到结果列表中。</p>\n    <p>下面是一个 10 个数字并输出的例子：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">foo</span><span class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> num\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    coro = [asyncio.create_task(foo(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">10</span>) ]\n    done= <span class=\"hljs-keyword\">await</span> asyncio.gather(*coro)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> done:\n        print(i)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行之后结果如下：</p>\n    <pre><code class=\"hljs\">0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n</code></pre>\n    <p>gather 返回的结果是一个列表，迭代这个列表可以看到任务依次输出。</p>\n    <p>gather 通常被用来阶段性的一个操作，做完第一步才能做第二步，比如下面这样：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">import</span> time\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">step1</span><span class=\"hljs-params\">(n, start)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    print(<span class=\"hljs-string\">\"第一阶段完成\"</span>)\n    print(<span class=\"hljs-string\">\"此时用时\"</span>, time.time() - start)\n    <span class=\"hljs-keyword\">return</span> n\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">step2</span><span class=\"hljs-params\">(n, start)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    print(<span class=\"hljs-string\">\"第二阶段完成\"</span>)\n    print(<span class=\"hljs-string\">\"此时用时\"</span>, time.time() - start)\n    <span class=\"hljs-keyword\">return</span> n\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    now = time.time()\n    result = <span class=\"hljs-keyword\">await</span> asyncio.gather(step1(<span class=\"hljs-number\">5</span>, now), step2(<span\n                class=\"hljs-number\">2</span>, now))\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> result:\n        print(i)\n    print(<span class=\"hljs-string\">\"总用时\"</span>, time.time() - now)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n   asyncio.run(main())\n</code></pre>\n    <p>输出内容：</p>\n    <pre><code class=\"hljs css\">第二阶段完成\n此时用时 2<span class=\"hljs-selector-class\">.0041821002960205</span>\n第一阶段完成\n此时用时 5<span class=\"hljs-selector-class\">.0009942054748535</span>\n5\n2\n总用时 5<span class=\"hljs-selector-class\">.001508951187134</span>\n</code></pre>\n    <p>可以通过上面结果得到如下结论：</p>\n    <ol>\n        <li>step1 和 step2 是并行运行的。</li>\n        <li>gather 会等待最耗时的那个完成之后才返回结果，耗时总时间取决于其中任务最长时间的那个。</li>\n    </ol>\n    <h4 id=\"asynciowait\">asyncio.wait</h4>\n    <p>我们先看一下 wait 的语法结构：</p>\n    <pre><code class=\"hljs python\">asyncio.wait(aws, *, loop=<span class=\"hljs-keyword\">None</span>, timeout=<span\n            class=\"hljs-keyword\">None</span>, return_when=ALL_COMPLETED)¶\n</code></pre>\n    <p>wait 一共有 4 个参数，第一个参数 aws，一般是一个任务列表。</p>\n    <p>第二个*之后的都是强制关键字参数，即 loop、timeout、return_when。</p>\n    <p>loop 通 gather 的参数是一个事件循环，该参数计划在 Python 3.10 中删除。</p>\n    <p>timeout 可以指定这组任务的超时时间，请注意，此函数不会引发 asyncio.TimeoutError，超时的时候会返回已完成的任务。</p>\n    <p>return_when 可以指定什么条件下返回结果，默认是所以任务完成就返回结果列表。</p>\n    <p>return_when 的具体参数看下面的表格：</p>\n    <table>\n        <thead>\n        <tr>\n            <th>参数名</th>\n            <th>含义</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td>FIRST_COMPLETED</td>\n            <td>任何一个 future 完成或取消时返回</td>\n        </tr>\n        <tr>\n            <td>FIRST_EXCEPTION</td>\n            <td>任何一个 future 出现错误将返回，如果没有出现异常等价于 ALL_COMPLETED</td>\n        </tr>\n        <tr>\n            <td>ALL_COMPLETED</td>\n            <td>当所有任务完成或者被取消时返回结果，默认值。</td>\n        </tr>\n        </tbody>\n    </table>\n    <p>wait 返回的结果是一个元组，第一部分是完成的任务，第二部分是准备中的任务。</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">done</span>, pending = await asyncio.wait(aws)\n</code></pre>\n    <p>其中 done 表示完成的任务，可以通过迭代获取每个任务。</p>\n    <p>pending 表示的是还没执行的任务。</p>\n    <p>下面看一个例子来进一步了解：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">foo</span><span class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.99991</span>)\n    <span class=\"hljs-keyword\">return</span> num\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\">#coro = foo()</span>\n    coro = [asyncio.create_task(foo(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">10</span>) ]\n    done, pending = <span class=\"hljs-keyword\">await</span> asyncio.wait(coro,timeout=<span class=\"hljs-number\">1</span>,return_when=<span\n                class=\"hljs-string\">\"ALL_COMPLETED\"</span>)\n\n    <span class=\"hljs-keyword\">for</span> coro <span class=\"hljs-keyword\">in</span> done:\n        print(coro.result())\n    print(<span class=\"hljs-string\">\"pending\"</span>,pending)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> pending:\n         print(item)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行结果如下:</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">7</span>\npending {&lt;Task pending name=<span class=\"hljs-string\">'Task-10'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span\n                class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span\n                class=\"hljs-keyword\">None</span>&gt;&gt;, &lt;Task pending name=<span\n                class=\"hljs-string\">'Task-11'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span\n                class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span\n                class=\"hljs-keyword\">None</span>&gt;&gt;}\n&lt;Task pending name=<span class=\"hljs-string\">'Task-10'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span\n                class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span\n                class=\"hljs-keyword\">None</span>&gt;&gt;\n&lt;Task pending name=<span class=\"hljs-string\">'Task-11'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span\n                class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span\n                class=\"hljs-keyword\">None</span>&gt;&gt;\n</code></pre>\n    <p>首先说代码，使用 wait 实现并发的程序是无序的，所以我们看到数字不是一次出现的，这个是和 gather 的不同之处。另外在返回的参数上也有差别，wait 返回两个参数 done 和 pending。</p>\n    <p>上面的代码指定了一个 timeout，因为任务没在指定时间完成，所以就导致只有完成的任务输出了结果，没有完成的部分可以看到它们的状态是 pending。</p>\n    <h4 id=\"-6\">总结</h4>\n    <p>最后我们总结一下 wait 和 gather 的相同之处和不同之处：</p>\n    <p>相同之处：都可以完成多个任务的并发操作。\n        不同之外：gather 适合按照顺序去做的任务，或者按照阶段去做的任务，返回的是结果列表，而 wait 不讲究任务的顺序，这个在做爬虫中经常使用到，然后 wait 可以返回 2 个结果，done 和 pending。</p>\n    <h3 id=\"-7\">任务完成时处理</h3>\n    <h4 id=\"asyncioas_completed\">asyncio.as_completed</h4>\n    <p><code>as_complete</code> 是一个生成器，会管理指定的一个任务列表，并生成他们的结果。每个协程结束运行时一次生成一个结果。与 wait 一样，<code>as_complete</code>\n        不能保证顺序，不过执行其他动作之前没有必要等待所有后台操作完成。</p>\n    <p>我们看下这个函数都有哪些参数：</p>\n    <pre><code class=\"hljs python\">asyncio.as_completed(aws, *, loop=<span\n            class=\"hljs-keyword\">None</span>, timeout=<span class=\"hljs-keyword\">None</span>)\n</code></pre>\n    <p>和前面的 wait 类似，第一个参数 awas，然后 loop，最后 timeout，需要注意的是 timeout 如果指定了，那么在指定时间没完成的话会抛出 asyncio.exceptions.TimeoutError\n        异常。</p>\n    <p>下面看一个例子:</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> time\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">foo</span><span class=\"hljs-params\">(n)</span>:</span>\n    print(<span class=\"hljs-string\">f'等待<span class=\"hljs-subst\">{n}</span>秒'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    <span class=\"hljs-keyword\">return</span> n\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    coroutine1 = foo(<span class=\"hljs-number\">1</span>)\n    coroutine2 = foo(<span class=\"hljs-number\">2</span>)\n    coroutine3 = foo(<span class=\"hljs-number\">4</span>)\n\n    tasks = [asyncio.create_task(coroutine1),asyncio.create_task(coroutine2),asyncio.create_task(coroutine3)]\n    <span class=\"hljs-keyword\">for</span> task <span class=\"hljs-keyword\">in</span> asyncio.as_completed(tasks):\n        result = <span class=\"hljs-keyword\">await</span> task\n        print(<span class=\"hljs-string\">f'获取返回结果: <span class=\"hljs-subst\">{result}</span>'</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    now = <span class=\"hljs-keyword\">lambda</span> : time.time()\n    start = now()\n    asyncio.run(main())\n    print(now() - start)\n</code></pre>\n    <p>输出结果：</p>\n    <pre><code class=\"hljs makefile\">等待1秒\n等待2秒\n等待4秒\n<span class=\"hljs-section\">获取返回结果: 1</span>\n<span class=\"hljs-section\">获取返回结果: 2</span>\n<span class=\"hljs-section\">获取返回结果: 4</span>\n4.002715826034546\n</code></pre>\n    <p>可以看出整个执行过程总用时取决 等待时间最长的那个，即 4 秒。</p>\n    <p>接下来，对上面的代码稍作修改。</p>\n    <p>将</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">for</span> task <span class=\"hljs-keyword\">in</span> asyncio.as_completed(tasks):\n</code></pre>\n    <p>改为</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">for</span> task <span class=\"hljs-keyword\">in</span> asyncio.as_completed(tasks,timeout=2):\n</code></pre>\n    <p>其他地方不变，改完运行之后会看到上面提到的错误。</p>\n    <pre><code class=\"hljs sql\">等待1秒\n等待2秒\n等待4秒\n获取返回结果: 1\nTraceback (most recent <span class=\"hljs-keyword\">call</span> <span class=\"hljs-keyword\">last</span>):\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Users/chennan/Desktop/2019/aiochatuse/ascomplete.py\"</span>, line <span\n                class=\"hljs-number\">25</span>, <span class=\"hljs-keyword\">in</span> &lt;<span class=\"hljs-keyword\">module</span>&gt;\n    asyncio.run(<span class=\"hljs-keyword\">main</span>())\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/runners.py\"</span>, line <span\n                class=\"hljs-number\">43</span>, <span class=\"hljs-keyword\">in</span> run\n    <span class=\"hljs-keyword\">return</span> loop.run_until_complete(<span class=\"hljs-keyword\">main</span>)\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py\"</span>, line <span\n                class=\"hljs-number\">589</span>, <span class=\"hljs-keyword\">in</span> run_until_complete\n    <span class=\"hljs-keyword\">return</span> future.result()\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Users/chennan/Desktop/2019/aiochatuse/ascomplete.py\"</span>, line <span\n                class=\"hljs-number\">18</span>, <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">main</span>\n    <span class=\"hljs-keyword\">result</span> = await task\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/tasks.py\"</span>, line <span\n                class=\"hljs-number\">570</span>, <span class=\"hljs-keyword\">in</span> _wait_for_one\n    <span class=\"hljs-keyword\">raise</span> exceptions.TimeoutError\nasyncio.exceptions.TimeoutError\n</code></pre>\n    <h3 id=\"-8\">取消任务的时候保证其他协程运行完毕</h3>\n    <p>在取消任务的时候存在一个问题,首先先看一段代码：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">coro</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">'开始休眠'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">2</span>)\n    print(<span class=\"hljs-string\">'结束休眠'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">cancel_it</span><span class=\"hljs-params\">(some_task)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>)\n    some_task.cancel()\n    print(<span class=\"hljs-string\">'取消some_task任务'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    real_task = asyncio.create_task(coro())\n    <span class=\"hljs-keyword\">await</span> cancel_it(real_task)\n    <span class=\"hljs-keyword\">await</span> real_task\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行之后你会看到如下结果：</p>\n    <pre><code class=\"hljs sql\">开始休眠\n取消some_task任务\nTraceback (most recent <span class=\"hljs-keyword\">call</span> <span class=\"hljs-keyword\">last</span>):\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Users/chennan/Desktop/2019/aiochatuse/shielddemo.py\"</span>, line <span\n                class=\"hljs-number\">24</span>, <span class=\"hljs-keyword\">in</span> &lt;<span class=\"hljs-keyword\">module</span>&gt;\n    asyncio.run(<span class=\"hljs-keyword\">main</span>())\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/runners.py\"</span>, line <span\n                class=\"hljs-number\">43</span>, <span class=\"hljs-keyword\">in</span> run\n    <span class=\"hljs-keyword\">return</span> loop.run_until_complete(<span class=\"hljs-keyword\">main</span>)\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py\"</span>, line <span\n                class=\"hljs-number\">589</span>, <span class=\"hljs-keyword\">in</span> run_until_complete\n    <span class=\"hljs-keyword\">return</span> future.result()\nasyncio.exceptions.CancelledError\n</code></pre>\n    <p>下面说一下代码中的逻辑，在 main 协程中将 coro 协程封装为任务 <code>real_task</code>，然后 <code>cancel_it</code> 方法做了一个取消任务的逻辑 <code>some_task.cancel()</code>，并打印一句话。然后通过\n        await 去运行 <code>real_task</code> 方法，执行代码之后看到上面的结果。出现了 asyncio.exceptions.CancelledError 错误，同时看到 coro\n        只打印了一个开始休眠，后面的结束休眠没有打印。也就是说我们在取消一个任务的时候，里面对于的协程也被取消了。如果我们想在取消任务之后协程还能顺利执行完，就需要用到另外一个函数 shield。</p>\n    <h4 id=\"asyncioshield\">asyncio.shield</h4>\n    <p>该方法的作用是，在执行 cancel 取消一个 task 之后，task 里面的协程仍然可以执行结束，不会像上面的 coro 那样出现错误。</p>\n    <pre><code class=\"hljs coffeescript\">asyncio.shield(aw, *, <span class=\"hljs-keyword\">loop</span>=None)\n</code></pre>\n    <p>aw 表示需要传入一个 Task。</p>\n    <p>接下来我们就使用这个方法对上面的例子做一个修改。</p>\n    <p>从代码中体会它的作用。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">coro</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">'开始休眠'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">2</span>)\n    print(<span class=\"hljs-string\">'结束休眠'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">cancel_it</span><span class=\"hljs-params\">(some_task)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>)\n    some_task.cancel()\n    print(<span class=\"hljs-string\">'取消some_task任务'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    real_task = asyncio.create_task(coro())\n    shield = asyncio.shield(real_task)\n    <span class=\"hljs-keyword\">await</span> cancel_it(shield)\n    <span class=\"hljs-keyword\">await</span> real_task\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行之后的结果：</p>\n    <pre><code class=\"hljs\">开始休眠\n取消some_task任务\n结束休眠\n</code></pre>\n    <p>可以看到尽管 some_task 任务被取消，但是 coro 仍然成功的打印了最好的“结束休眠”。通过上面的例子我想大家应该知道 shield 的作用了。 </p>\n    <h3 id=\"-9\">超时等待</h3>\n    <p>有时候需要等待一个任务完成之后再进行下一个，但是有的时候并不需要运行完就返回。</p>\n    <p>这个时候可以使用 wait_for。</p>\n    <h4 id=\"asynciowait_for\">asyncio.wait_for</h4>\n    <p>该方法的语法如下：</p>\n    <pre><code class=\"hljs coffeescript\">asyncio.wait_for(aw, timeout, *, <span class=\"hljs-keyword\">loop</span>=None)\n</code></pre>\n    <p>aw 是一个任务，timeout 可以指定超时时间。如果发生超时，它将取消该任务并引发 asyncio.TimeoutError，此时为了保证任务中协程完成可以使用上面说的 shield。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>:</span>\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">\"in foo\"</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">eternity</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># Sleep for one hour</span>\n    <span class=\"hljs-keyword\">await</span> foo()\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">3600</span>)\n    print(<span class=\"hljs-string\">'yay!'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># Wait for at most 1 second</span>\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">await</span> asyncio.wait_for(asyncio.shield(eternity()), timeout=<span\n                class=\"hljs-number\">1.0</span>)\n    <span class=\"hljs-keyword\">except</span> asyncio.TimeoutError:\n        print(<span class=\"hljs-string\">'timeout!'</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>输出：</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">in</span> foo\ntimeout!\n</code></pre>\n    <p>按照上面的经验可知道，如果我们把 asyncio.shield 去掉之后，“in foo” 就无法输出了。</p>\n    <h3 id=\"-10\">协程配合线程</h3>\n    <h4 id=\"asynciorun_coroutine_threadsafe\">asyncio.run<em>coroutine</em>threadsafe</h4>\n    <p>该方法的语法如下：</p>\n    <pre><code class=\"hljs coffeescript\">asyncio.run_coroutine_threadsafe(coro, <span class=\"hljs-keyword\">loop</span>)\n</code></pre>\n    <p>其实在协程中也可以使用多线程,有时候我们需要在主线程中启动一个子线程去做别的任务，这个时候我们就要用到下面的方法了，先上一个流畅的 Python 中的代码。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span>  threading <span class=\"hljs-keyword\">import</span> Thread\n\nnow = <span class=\"hljs-keyword\">lambda</span>: time.time()\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">start_loop</span><span\n        class=\"hljs-params\">(loop)</span>:</span>\n    asyncio.set_event_loop(loop)\n    loop.run_forever()\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">do_some_work</span><span class=\"hljs-params\">(x)</span>:</span>\n    print(<span class=\"hljs-string\">f'Waiting <span class=\"hljs-subst\">{x}</span>'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(x)\n    print(<span class=\"hljs-string\">f'Done after <span class=\"hljs-subst\">{x}</span>s'</span>)\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">more_work</span><span\n        class=\"hljs-params\">(x)</span>:</span>\n    print(<span class=\"hljs-string\">f'More work <span class=\"hljs-subst\">{x}</span>'</span>)\n    time.sleep(x)\n    print(<span class=\"hljs-string\">'Finished more work {x}'</span>)\n\n\nstart = now()\n<span class=\"hljs-comment\"># 主线程中创建一个 new_loop</span>\nnew_loop = asyncio.get_event_loop()\n<span class=\"hljs-comment\"># 创建子线程 在其中开启无限事件循环</span>\nt = Thread(target=start_loop, args=(new_loop,))\nt.start()\nprint(<span class=\"hljs-string\">f'TIME: <span class=\"hljs-subst\">{time.time() - start}</span>'</span>)\n\n<span class=\"hljs-comment\"># 在主线程中新注册协程对象</span>\n<span class=\"hljs-comment\"># 这样即可在子线程中进行事件循环的并发操作 同时主线程又不会被 block </span>\n<span class=\"hljs-comment\"># 一共执行的时间大概在 6 s 左右 </span>\nasyncio.run_coroutine_threadsafe(do_some_work(<span class=\"hljs-number\">6</span>), new_loop)\nasyncio.run_coroutine_threadsafe(do_some_work(<span class=\"hljs-number\">4</span>), new_loop)\n</code></pre>\n    <p>上述的例子，主线程中创建一个 <code>new_loop</code>，然后在另外的子线程中开启一个无限事件循环。主线程通过 <code>run_coroutine_threadsafe</code>\n        新注册协程对象。这样就能在子线程中进行事件循环的并发操作，同时主线程又不会被 block。一共执行的时间大概在 6s 左右。</p>\n    <h3 id=\"-11\">同步原语</h3>\n    <p>尽管 asyncio 应用通常作为单线程运行，不过仍被构建为并发应用。由于 I/O 以及其他外部事件的延迟和中断，每个协程或任务可能按一种不可预知的顺序执行。为了支持安全的并发执行，asyncio 包含了 threading\n        和 multiprocessing 模块中的一些底层原语的实现。</p>\n    <p>这里介绍两个经常用到的例子。</p>\n    <h4 id=\"queue\">队列（Queue）</h4>\n    <p>asyncio.Queue 为协程提供了一个先进先出的数据结构，这与线程的 queue.Queue 或进程的multiprocessing.Queue 很类似，下面先看一个简单的例子，它是一个非阻塞的队列。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span> asyncio <span class=\"hljs-keyword\">import</span> Queue\n\nqueue=Queue()\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span>:</span>\n        [queue.put_nowait(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>)]\n        <span class=\"hljs-keyword\">await</span> asyncio.create_task(work()) <span\n                class=\"hljs-comment\">#put_nowait表示放入元素</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">work</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> queue.empty():<span\n                class=\"hljs-comment\">#判断队列的元素是否为空</span>\n            num = queue.get_nowait()<span class=\"hljs-comment\">#获取元素</span>\n            print(<span class=\"hljs-string\">f\"获取数字:<span class=\"hljs-subst\">{num}</span>\"</span>)\n            queue.task_done()<span class=\"hljs-comment\">#告诉队列该任务处理完。</span>\n    <span class=\"hljs-keyword\">except</span> asyncio.CancelledError:\n        <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(start())\n</code></pre>\n    <p>输出结果:</p>\n    <pre><code class=\"hljs css\">获取数字<span class=\"hljs-selector-pseudo\">:1</span>\n获取数字<span class=\"hljs-selector-pseudo\">:2</span>\n获取数字<span class=\"hljs-selector-pseudo\">:3</span>\n获取数字<span class=\"hljs-selector-pseudo\">:4</span>\n获取数字<span class=\"hljs-selector-pseudo\">:5</span>\n获取数字<span class=\"hljs-selector-pseudo\">:6</span>\n获取数字<span class=\"hljs-selector-pseudo\">:7</span>\n获取数字<span class=\"hljs-selector-pseudo\">:8</span>\n获取数字<span class=\"hljs-selector-pseudo\">:9</span>\n</code></pre>\n    <p>在做爬虫的时候对于 url 的处理，经常会用到队列的操作。另外一个要说的同步原语就是信号量。</p>\n    <h2 id=\"semaphore\">信号量（Semaphore）</h2>\n    <p>简单说下什么是信号量，我们用停车场和车进行比喻。一个停车场一共就 5 个车位，所以我们知道可以同时容纳最多 5 辆车，这五个车位就是信号量。</p>\n    <p>然后说信号量的行为，当有车离开停车场的时候外面的车就会进来补，比如有 2 辆车离开，那么就可以再进来 2 辆车，依次类推，上面这个过程就是描述了信号量这个东西。</p>\n    <p>下面我们看如何在程序中使用。</p>\n    <p>asyncio.Semaphore 模块就是一个维持并发量的模块，我们用它起到一个限流的效果。首先来一段代码：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\nsem=asyncio.Semaphore(<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">#信号量指定为3</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">branch</span><span class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> sem:  <span class=\"hljs-comment\">#通过异步上下文关键子控制并发量</span>\n        print(<span class=\"hljs-string\">f\"获取当前数字:<span class=\"hljs-subst\">{num}</span>\"</span>)\n        <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n\n     tasks=[asyncio.create_task(branch(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">10</span>)] <span class=\"hljs-comment\">#将协程封装成任务共10个</span>\n     <span class=\"hljs-keyword\">await</span> asyncio.wait(tasks) <span class=\"hljs-comment\">#执行这些任务</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>执行之后你会发现：</p>\n    <pre><code class=\"hljs makefile\"><span class=\"hljs-section\">获取当前数字:0</span>\n<span class=\"hljs-section\">获取当前数字:1</span>\n<span class=\"hljs-section\">获取当前数字:2</span>\nTask exception was never retrieved\n<span class=\"hljs-section\">future: &lt;Task finished name='Task-11' coro=&lt;branch() done, defined at /Users/chennan/Desktop/2019/aiochatuse/semaphoredemo.py:26&gt; exception=RuntimeError(\"Task &lt;Task pending name='Task-11' coro=&lt;branch() running at /Users/chennan/Desktop/2019/aiochatuse/semaphoredemo.py:27&gt; cb=[_wait.&lt;locals&gt;._on_completion() at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/tasks.py:478]&gt; got Future &lt;Future pending&gt; attached to a different loop\")&gt;</span>\n</code></pre>\n    <p>关键就是 attached to a different loop，这个地方说是当前的事件循环发生了改变，这个问题在Python3.6 的时候是不会出现的。</p>\n    <p>为什么 3.8 出错了？</p>\n    <p>这是因为：</p>\n    <p>我的信号量没有在循环内创建。也就是在 asyncio.run() 创建的循环之外创建了它们，因此它们使用 <code>events.get_event_loop()</code> 这就导致了新的事件循环产生。\n        asyncio.run() 创建一个新循环，然后在一个循环中创建的 future\n        不能在另一个循环中使用。所以问题就明确了，我们需要在循环之内创建。也就是我们需要定义一个全局变量，然后在主循环内部给其赋值。看到这，可能大家想到了 global，Python 3.7 增加了上下文变量 Context\n        Variables，至于为什么不用全局变量，因为可能会被其他协程修改，不安全，在这里也可以使用。</p>\n    <p>所以我们的代码变成了下面这个样子：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span> contextvars <span class=\"hljs-keyword\">import</span> ContextVar\n\nconcurrent=ContextVar(<span class=\"hljs-string\">\"concurrent\"</span>)<span class=\"hljs-comment\">#定义全局上下文管理器</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">branch</span><span class=\"hljs-params\">(num)</span>:</span>\n    sem=concurrent.get()<span class=\"hljs-comment\">#获取上下文关键字</span>\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> sem:\n        print(<span class=\"hljs-string\">f\"获取当前数字:<span class=\"hljs-subst\">{num}</span>\"</span>)\n        <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>) <span\n                class=\"hljs-comment\">#为了看到明显的效果</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n                class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n     concurrent.set(asyncio.Semaphore(<span class=\"hljs-number\">3</span>)) <span class=\"hljs-comment\">#上下文管理器赋值</span>\n     tasks=[asyncio.create_task(branch(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">10</span>)]\n     <span class=\"hljs-keyword\">await</span> asyncio.wait(tasks)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>然后我们再次输出：</p>\n    <pre><code class=\"hljs css\">获取当前数字<span class=\"hljs-selector-pseudo\">:0</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:1</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:2</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:3</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:4</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:5</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:6</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:7</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:8</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:9</span>\n</code></pre>\n    <p>可以看到程序每隔 3 组输出一次，这就达到了我们想要的效果了。</p>\n    </div>\n</body>\n</html>","slug":"gitchat/python_asyncio_guidelines","published":1,"date":"2019-05-31T05:47:40.753Z","updated":"2019-05-31T05:47:40.753Z","_id":"cjwd4a1mf0009sv72wktgt2bz","comments":1,"layout":"post","photos":[],"link":"","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>asyncio使用指南</title>\n</head>\n<body>\n<div id=\"article_content\" class=\"mazi-article-content dont-break-out\">\n    <h3 id>协程的演变</h3>\n    <p>其实早在 Python3.4 的时候就有协程,当时的协程是通过 @asyncio.coroutine 和 yeild from 实现的。在一些很老教程中你可能看到的是下面这种形式:</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> asyncio\n\n@asyncio.coroutine\ndef print_hello():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello world!\"</span>)\n    r = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello again!\"</span>)\n\n<span class=\"hljs-comment\"># 创建并获取EventLoop:</span>\n<span class=\"hljs-keyword\">loop</span> = asyncio.get_event_loop()\n<span class=\"hljs-comment\"># 执行协程</span>\n<span class=\"hljs-keyword\">loop</span>.run_until_complete(print_hello())\n<span class=\"hljs-keyword\">loop</span>.close()\n</code></pre>\n    <p>因为现在几乎没有人这样写了，所以仅作为了解即可。</p>\n    <p>然后到了 Python3.5 引入了 async/await 语法糖，一直到现在Python3.8 都是用这种形式来表示协程，示例如下。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">print_hello</span><span class=\"hljs-params\">()</span>:</span>\n     print(<span class=\"hljs-string\">\"Hello world!\"</span>)\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">\"Hello again!\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n    <span class=\"hljs-keyword\">try</span>:\n        print(<span class=\"hljs-string\">\"开始运行协程\"</span>)\n        coro = print_hello()\n        print(<span class=\"hljs-string\">\"进入事件循环\"</span>)\n        loop.run_until_complete(coro)\n    <span class=\"hljs-keyword\">finally</span>:\n        print(<span class=\"hljs-string\">\"关闭事件循环\"</span>)\n        loop.close()\n</code></pre>\n    <p>这种是目前应用范围最广的，可以看到比之前的代码舒服了不少，不用再使用装饰器的形式了。</p>\n    <p>然后就到了 Python3.7 和 Python3.8，协程发生了很多细小的变化，但是最大的一个变化就是，启动协程的方法变简单了，一句就可以搞定，不用再像上面那样，创建循环然后再仍到事件循环去执行。使用 asyncio.run\n        这个顶级 API 就可以了。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">print_hello</span><span class=\"hljs-params\">()</span>:</span>\n     print(<span class=\"hljs-string\">\"Hello world!\"</span>)\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">\"Hello again!\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n        print(<span class=\"hljs-string\">\"开始运行协程\"</span>)\n        asyncio.run(print_hello())\n        print(<span class=\"hljs-string\">\"进入事件循环\"</span>)\n</code></pre>\n    <p>怎么样是不是代码更少了，启动协程更简单了。所以这也正是我们使用 3.8 作为本教程的 Python 版，与时俱进嘛。</p>\n    <h3 id=\"asyncio\">asyncio 的组成部分</h3>\n    <p>根据目前的官方文档，总的来说分为了两部分：高层级 API 和低层级 API。</p>\n    <p>首先看高层级 API 也是接下来重点要讲的。</p>\n    <h4 id=\"api\">高层级 API</h4>\n    <ul>\n        <li>协程对象和 Tasks 对象</li>\n        <li>数据流</li>\n        <li>同步源语</li>\n        <li>子进程</li>\n        <li>队列</li>\n        <li>异常</li>\n    </ul>\n    <h4 id=\"api-1\">低层级 API</h4>\n    <ul>\n        <li>事件循环</li>\n        <li>Futures 对象</li>\n        <li>传输和协议</li>\n        <li>策略</li>\n        <li>平台支持</li>\n    </ul>\n    <p>上面列出了这么多的项目我们怎么去选择自己所需要的呢，总的来说对于刚入门的新手或者只是写一个自己用的程序一般都只会用到高级 API\n        的部分，这部分就属于开箱即用的那种，对于高级用户比如框架开发者，往往可以需要去适应各种需要，需要重新改写一些内部的结构，这个时候就需要用到低层级的 API，但是这两个层级呢只能是一个大概方向吧，主要是方便 API\n        的查看，下面呢我将围绕者高层级 API 和低层级 API 在日常实际工作中经常用到的内容做一些讲解。</p>\n    <h3 id=\"-1\">了解几个概念</h3>\n    <p>在学习 asyncio 之前需要知道这样的几个概念。</p>\n    <h4 id=\"-2\">事件循环</h4>\n    <p>事件循环是一种处理多并发量的有效方式，在维基百科中它被描述为「一种等待程序分配事件或消息的编程架构」，我们可以定义事件循环来简化使用轮询方法来监控事件，通俗的说法就是「当 A 发生时，执行\n        B」。所谓的事件，其实就是函数。事件循环，就是有一个队列，里面存放着一堆函数，从第一个函数开始执行，在函数执行的过程中，可能会有新的函数继续加入到这个队列中。一直到队列中所有的函数被执行完毕，并且再也不会有新的函数被添加到这个队列中，程序就结束了。</p>\n    <h4 id=\"future\">Future</h4>\n    <p>Future 是一个数据结构，表示还未完成的工作结果。事件循环可以监视 Future 对象是否完成。从而允许应用的一部分等待另一部分完成一些工作。</p>\n    <p>简单说，Future 就是一个类，用生成器实现了回调。</p>\n    <h4 id=\"task\">Task</h4>\n    <p>Task 是 Future 的一个子类，它知道如何包装和管理一个协程的执行。任务所需的资源可用时，事件循环会调度任务允许，并生成一个结果，从而可以由其他协程消费。一般操作最多的还是 Task。用 Task\n        来封装协程，给原本没有状态的协程增加一些状态。</p>\n    <h4 id=\"awaitableobjects\">awaitable objects（可等待对象）</h4>\n    <p>如果一个对象可以用在 wait 表达式中，那么它就是一个可等待的对象。在 asyncio 模块中会一直提到这个概念，其中协程函数，Task，Future 都是 awaitable 对象。</p>\n    <p>用于 await 表达式中的对象。可以是 coroutine 也可以是实现了 <code>__await__()</code> 方法的对象，参见 PEP 492。类比于 Iterable 对象是 Generator 或实现了\n        <code>__iter__()</code> 方法的对象。</p>\n    <p><strong>object._<em>await</em>_(self)</strong></p>\n    <p>必须返回生成器，asyncio.Future 类也实现了该方法，用于兼容 await 表达式。</p>\n    <p>而 Task 继承自 Future，因此 awaitable 对象有三种：coroutines、Tasks 和 Futures。</p>\n    <p>await 的目的：</p>\n    <ul>\n        <li>获取协程的结果</li>\n        <li>挂起当前协程，将控制交由事件循环，切换到其他协程，然后等待结果，最后恢复协程继续执行</li>\n    </ul>\n    <h3 id=\"-3\">启动一个协程</h3>\n    <p>现在我们使用 async/await 语法来声明一个协程。 代码如下：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n     print(<span class=\"hljs-string\">'hello'</span>)\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">'world'</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>asyncio.run 只能用来启动程序入口协程，反过来你在程序中如果使用 asyncio.run 就会出错，之前我们提到对于其他的协程通过 await 链来实现，这里也是一样的。</p>\n    <p>下面说下代码的含义，首先启动 main 这个协程，main 方法就是先打印 hello，然后在打印过程中通过使用 asyncio.sleep 来等待 1 秒，之后再打印\n        world。前面我们提到用协程就意味着我们要一直使用非阻塞的代码，才能达到速度提升，所以这里我们用了非阻塞版的 time.sleep 即 asyncio.sleep 。</p>\n    <h3 id=\"-4\">协程中调用协程</h3>\n    <p>之前我们提到了在协程中，可以使用 await 来调用一个协程。</p>\n    <p>就像下面的代码:</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">say_after</span><span class=\"hljs-params\">(delay, what)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(delay)\n    print(what)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\">#使用f-string拼接字符串</span>\n    print(<span class=\"hljs-string\">f\"开始运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n\n    child1=<span class=\"hljs-keyword\">await</span> say_after(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'hello'</span>) <span class=\"hljs-comment\">#通过await调用协程，然后接收一下返回值</span>\n    child2=<span class=\"hljs-keyword\">await</span> say_after(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'world'</span>)\n    print(<span class=\"hljs-string\">\"child1\"</span>,child1)\n    print(<span class=\"hljs-string\">\"child2\"</span>,child2)\n\n    print(<span class=\"hljs-string\">f\"结束运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n      asyncio.run(main())\n</code></pre>\n    <p>运行结果：</p>\n    <pre><code class=\"hljs css\">开始运行 11<span class=\"hljs-selector-pseudo\">:17</span><span class=\"hljs-selector-pseudo\">:26</span>\n<span class=\"hljs-selector-tag\">hello</span>\n<span class=\"hljs-selector-tag\">world</span>\n<span class=\"hljs-selector-tag\">child1</span> <span class=\"hljs-selector-tag\">None</span>\n<span class=\"hljs-selector-tag\">child2</span> <span class=\"hljs-selector-tag\">None</span>\n结束运行 11<span class=\"hljs-selector-pseudo\">:17</span><span class=\"hljs-selector-pseudo\">:29</span>\n<span class=\"hljs-selector-attr\">[Finished in 3.1s]</span>\n</code></pre>\n    <p>代码是没什么问题,正常运行。但是一般情况下我们用到更多的是下面的方式。将协程封装为 Task 让原本没有状态标示的协程添加上状态 。</p>\n    <p>我们可以通过 asyncio.create_task 方法来实现。</p>\n    <h4 id=\"asynciocreate_task\">asyncio.create_task</h4>\n    <p><code>create_task</code>（在 3.6 版本中需要使用低层级的 API <code>asyncio.ensure_future</code>。）是\n        3.7以后加入的语法，作用是将协程包装为一个任务（Task），相比 3.6 版本的 <code>ensure_future</code> 可读性提高。</p>\n    <p>将上面的代码做如下修改：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">say_after</span><span class=\"hljs-params\">(delay, what)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(delay)\n    print(what)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">f\"开始运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n\n    child1=asyncio.create_task(say_after(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'hello'</span>)) <span class=\"hljs-comment\">#通过await调用协程，然后接收一下返回值</span>\n    child2=asyncio.create_task(say_after(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'world'</span>))\n    print(<span class=\"hljs-string\">\"调用任务child1前\"</span>,child1)\n    print(<span class=\"hljs-string\">\"调用任务child2前\"</span>,child2)\n    <span class=\"hljs-keyword\">await</span> child1\n    <span class=\"hljs-keyword\">await</span> child2\n    print(<span class=\"hljs-string\">\"调用任务child1后\"</span>,child1)\n    print(<span class=\"hljs-string\">\"调用任务child2前\"</span>,child2)\n\n    print(<span class=\"hljs-string\">f\"结束运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n      asyncio.run(main())\n</code></pre>\n    <p>运行结果如下:</p>\n    <pre><code class=\"hljs ruby\">开始运行 <span class=\"hljs-number\">11</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">37</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">54</span>\n调用任务child1前 &lt;Task pending name=<span class=\"hljs-string\">'Task-2'</span> coro=&lt;say_after() running at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/hello.<span class=\"hljs-symbol\">py:</span><span class=\"hljs-number\">4</span><span class=\"hljs-meta\">&gt;&gt;\n</span>调用任务child2前 &lt;Task pending name=<span class=\"hljs-string\">'Task-3'</span> coro=&lt;say_after() running at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/hello.<span class=\"hljs-symbol\">py:</span><span class=\"hljs-number\">4</span>&gt;&gt;\nhello\nworld\n调用任务child1后 &lt;Task finished name=<span class=\"hljs-string\">'Task-2'</span> coro=&lt;say_after() done, <span class=\"hljs-keyword\">defined</span> at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/hello.<span class=\"hljs-symbol\">py:</span><span class=\"hljs-number\">4</span>&gt; result=None&gt;\n调用任务child2前 &lt;Task finished name=<span class=\"hljs-string\">'Task-3'</span> coro=&lt;say_after() done, <span class=\"hljs-keyword\">defined</span> at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/hello.<span class=\"hljs-symbol\">py:</span><span class=\"hljs-number\">4</span>&gt; result=None&gt;\n结束运行 <span class=\"hljs-number\">11</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">37</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">56</span>\n</code></pre>\n    <p>可以发现，我们的结果中多了\"&lt;Task pending ...\"和\"&lt;Task finised ...\"几行语句。这就是 Task\n        的一个状态变化，知道状态的好处就是我们可以根据任务的状态做进一步操作，不像协程函数那样没有状态标示，当然 Task 的状态不只有这些。</p>\n    <p>前面说到 Task 是 Future 的子类，所以 Task 拥有 Future 的一些状态。</p>\n    <h4 id=\"future-1\">Future 的状态</h4>\n    <p>大概有如下几种:</p>\n    <ul>\n        <li>Pending</li>\n        <li>Running</li>\n        <li>Done</li>\n        <li>Cancelled</li>\n    </ul>\n    <p>创建 future 的时候，task 为 pending，事件循环调用执行的时候当然就是 running，调用完毕自然就是 done，如果需要停止事件循环，就需要先把 task 取消，状态为 cancel。这里先做了解知道\n        Task 是有状态的就够了。</p>\n    <h3 id=\"-5\">并发运行任务</h3>\n    <p>一系列的协程可以通过 await 链式的调用，但是有的时候我们需要在一个协程里等待多个协程，比如我们在一个协程里等待 1000 个异步网络请求，对于访问次序有没有要求的时候，就可以使用另外的关键字 asyncio.wait 或\n        asyncio.gather 来解决了。</p>\n    <h4 id=\"asynciogather\">asyncio.gather</h4>\n    <p>使用方法：</p>\n    <pre><code class=\"hljs python\">asyncio.gather(*aws, loop=<span class=\"hljs-keyword\">None</span>, return_exceptions=<span class=\"hljs-keyword\">False</span>)¶\n</code></pre>\n    <p>也就是说使用 gather 语句并发协程，就得用 await 去执行它。这个方法可以接收三个参数，第一个 aws。</p>\n    <p>aws 一般是一个列表，如果里面的元素是 awaitable 类型，在运行的时候它将自动被包装成 Task，gather 会根据 aws 中元素添加的顺序。顺序执行并返回结果列表。</p>\n    <p>第二个 loop 可以传入一个事件循环对象，一般不用管，最后一个 <code>return_exceptions</code> 默认是 False，如果 return_exceptions 为\n        True，异常将被视为成功结果，然后添加到结果列表中。</p>\n    <p>下面是一个 10 个数字并输出的例子：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> num\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    coro = [asyncio.create_task(foo(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>) ]\n    done= <span class=\"hljs-keyword\">await</span> asyncio.gather(*coro)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> done:\n        print(i)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行之后结果如下：</p>\n    <pre><code class=\"hljs\">0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n</code></pre>\n    <p>gather 返回的结果是一个列表，迭代这个列表可以看到任务依次输出。</p>\n    <p>gather 通常被用来阶段性的一个操作，做完第一步才能做第二步，比如下面这样：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">import</span> time\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">step1</span><span class=\"hljs-params\">(n, start)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    print(<span class=\"hljs-string\">\"第一阶段完成\"</span>)\n    print(<span class=\"hljs-string\">\"此时用时\"</span>, time.time() - start)\n    <span class=\"hljs-keyword\">return</span> n\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">step2</span><span class=\"hljs-params\">(n, start)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    print(<span class=\"hljs-string\">\"第二阶段完成\"</span>)\n    print(<span class=\"hljs-string\">\"此时用时\"</span>, time.time() - start)\n    <span class=\"hljs-keyword\">return</span> n\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    now = time.time()\n    result = <span class=\"hljs-keyword\">await</span> asyncio.gather(step1(<span class=\"hljs-number\">5</span>, now), step2(<span class=\"hljs-number\">2</span>, now))\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> result:\n        print(i)\n    print(<span class=\"hljs-string\">\"总用时\"</span>, time.time() - now)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n   asyncio.run(main())\n</code></pre>\n    <p>输出内容：</p>\n    <pre><code class=\"hljs css\">第二阶段完成\n此时用时 2<span class=\"hljs-selector-class\">.0041821002960205</span>\n第一阶段完成\n此时用时 5<span class=\"hljs-selector-class\">.0009942054748535</span>\n5\n2\n总用时 5<span class=\"hljs-selector-class\">.001508951187134</span>\n</code></pre>\n    <p>可以通过上面结果得到如下结论：</p>\n    <ol>\n        <li>step1 和 step2 是并行运行的。</li>\n        <li>gather 会等待最耗时的那个完成之后才返回结果，耗时总时间取决于其中任务最长时间的那个。</li>\n    </ol>\n    <h4 id=\"asynciowait\">asyncio.wait</h4>\n    <p>我们先看一下 wait 的语法结构：</p>\n    <pre><code class=\"hljs python\">asyncio.wait(aws, *, loop=<span class=\"hljs-keyword\">None</span>, timeout=<span class=\"hljs-keyword\">None</span>, return_when=ALL_COMPLETED)¶\n</code></pre>\n    <p>wait 一共有 4 个参数，第一个参数 aws，一般是一个任务列表。</p>\n    <p>第二个*之后的都是强制关键字参数，即 loop、timeout、return_when。</p>\n    <p>loop 通 gather 的参数是一个事件循环，该参数计划在 Python 3.10 中删除。</p>\n    <p>timeout 可以指定这组任务的超时时间，请注意，此函数不会引发 asyncio.TimeoutError，超时的时候会返回已完成的任务。</p>\n    <p>return_when 可以指定什么条件下返回结果，默认是所以任务完成就返回结果列表。</p>\n    <p>return_when 的具体参数看下面的表格：</p>\n    <table>\n        <thead>\n        <tr>\n            <th>参数名</th>\n            <th>含义</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td>FIRST_COMPLETED</td>\n            <td>任何一个 future 完成或取消时返回</td>\n        </tr>\n        <tr>\n            <td>FIRST_EXCEPTION</td>\n            <td>任何一个 future 出现错误将返回，如果没有出现异常等价于 ALL_COMPLETED</td>\n        </tr>\n        <tr>\n            <td>ALL_COMPLETED</td>\n            <td>当所有任务完成或者被取消时返回结果，默认值。</td>\n        </tr>\n        </tbody>\n    </table>\n    <p>wait 返回的结果是一个元组，第一部分是完成的任务，第二部分是准备中的任务。</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">done</span>, pending = await asyncio.wait(aws)\n</code></pre>\n    <p>其中 done 表示完成的任务，可以通过迭代获取每个任务。</p>\n    <p>pending 表示的是还没执行的任务。</p>\n    <p>下面看一个例子来进一步了解：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.99991</span>)\n    <span class=\"hljs-keyword\">return</span> num\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\">#coro = foo()</span>\n    coro = [asyncio.create_task(foo(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>) ]\n    done, pending = <span class=\"hljs-keyword\">await</span> asyncio.wait(coro,timeout=<span class=\"hljs-number\">1</span>,return_when=<span class=\"hljs-string\">\"ALL_COMPLETED\"</span>)\n\n    <span class=\"hljs-keyword\">for</span> coro <span class=\"hljs-keyword\">in</span> done:\n        print(coro.result())\n    print(<span class=\"hljs-string\">\"pending\"</span>,pending)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> pending:\n         print(item)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行结果如下:</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">7</span>\npending {&lt;Task pending name=<span class=\"hljs-string\">'Task-10'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span class=\"hljs-keyword\">None</span>&gt;&gt;, &lt;Task pending name=<span class=\"hljs-string\">'Task-11'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span class=\"hljs-keyword\">None</span>&gt;&gt;}\n&lt;Task pending name=<span class=\"hljs-string\">'Task-10'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span class=\"hljs-keyword\">None</span>&gt;&gt;\n&lt;Task pending name=<span class=\"hljs-string\">'Task-11'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span class=\"hljs-keyword\">None</span>&gt;&gt;\n</code></pre>\n    <p>首先说代码，使用 wait 实现并发的程序是无序的，所以我们看到数字不是一次出现的，这个是和 gather 的不同之处。另外在返回的参数上也有差别，wait 返回两个参数 done 和 pending。</p>\n    <p>上面的代码指定了一个 timeout，因为任务没在指定时间完成，所以就导致只有完成的任务输出了结果，没有完成的部分可以看到它们的状态是 pending。</p>\n    <h4 id=\"-6\">总结</h4>\n    <p>最后我们总结一下 wait 和 gather 的相同之处和不同之处：</p>\n    <p>相同之处：都可以完成多个任务的并发操作。\n        不同之外：gather 适合按照顺序去做的任务，或者按照阶段去做的任务，返回的是结果列表，而 wait 不讲究任务的顺序，这个在做爬虫中经常使用到，然后 wait 可以返回 2 个结果，done 和 pending。</p>\n    <h3 id=\"-7\">任务完成时处理</h3>\n    <h4 id=\"asyncioas_completed\">asyncio.as_completed</h4>\n    <p><code>as_complete</code> 是一个生成器，会管理指定的一个任务列表，并生成他们的结果。每个协程结束运行时一次生成一个结果。与 wait 一样，<code>as_complete</code>\n        不能保证顺序，不过执行其他动作之前没有必要等待所有后台操作完成。</p>\n    <p>我们看下这个函数都有哪些参数：</p>\n    <pre><code class=\"hljs python\">asyncio.as_completed(aws, *, loop=<span class=\"hljs-keyword\">None</span>, timeout=<span class=\"hljs-keyword\">None</span>)\n</code></pre>\n    <p>和前面的 wait 类似，第一个参数 awas，然后 loop，最后 timeout，需要注意的是 timeout 如果指定了，那么在指定时间没完成的话会抛出 asyncio.exceptions.TimeoutError\n        异常。</p>\n    <p>下面看一个例子:</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> time\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(n)</span>:</span>\n    print(<span class=\"hljs-string\">f'等待<span class=\"hljs-subst\">{n}</span>秒'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    <span class=\"hljs-keyword\">return</span> n\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    coroutine1 = foo(<span class=\"hljs-number\">1</span>)\n    coroutine2 = foo(<span class=\"hljs-number\">2</span>)\n    coroutine3 = foo(<span class=\"hljs-number\">4</span>)\n\n    tasks = [asyncio.create_task(coroutine1),asyncio.create_task(coroutine2),asyncio.create_task(coroutine3)]\n    <span class=\"hljs-keyword\">for</span> task <span class=\"hljs-keyword\">in</span> asyncio.as_completed(tasks):\n        result = <span class=\"hljs-keyword\">await</span> task\n        print(<span class=\"hljs-string\">f'获取返回结果: <span class=\"hljs-subst\">{result}</span>'</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    now = <span class=\"hljs-keyword\">lambda</span> : time.time()\n    start = now()\n    asyncio.run(main())\n    print(now() - start)\n</code></pre>\n    <p>输出结果：</p>\n    <pre><code class=\"hljs makefile\">等待1秒\n等待2秒\n等待4秒\n<span class=\"hljs-section\">获取返回结果: 1</span>\n<span class=\"hljs-section\">获取返回结果: 2</span>\n<span class=\"hljs-section\">获取返回结果: 4</span>\n4.002715826034546\n</code></pre>\n    <p>可以看出整个执行过程总用时取决 等待时间最长的那个，即 4 秒。</p>\n    <p>接下来，对上面的代码稍作修改。</p>\n    <p>将</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">for</span> task <span class=\"hljs-keyword\">in</span> asyncio.as_completed(tasks):\n</code></pre>\n    <p>改为</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">for</span> task <span class=\"hljs-keyword\">in</span> asyncio.as_completed(tasks,timeout=2):\n</code></pre>\n    <p>其他地方不变，改完运行之后会看到上面提到的错误。</p>\n    <pre><code class=\"hljs sql\">等待1秒\n等待2秒\n等待4秒\n获取返回结果: 1\nTraceback (most recent <span class=\"hljs-keyword\">call</span> <span class=\"hljs-keyword\">last</span>):\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Users/chennan/Desktop/2019/aiochatuse/ascomplete.py\"</span>, line <span class=\"hljs-number\">25</span>, <span class=\"hljs-keyword\">in</span> &lt;<span class=\"hljs-keyword\">module</span>&gt;\n    asyncio.run(<span class=\"hljs-keyword\">main</span>())\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/runners.py\"</span>, line <span class=\"hljs-number\">43</span>, <span class=\"hljs-keyword\">in</span> run\n    <span class=\"hljs-keyword\">return</span> loop.run_until_complete(<span class=\"hljs-keyword\">main</span>)\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py\"</span>, line <span class=\"hljs-number\">589</span>, <span class=\"hljs-keyword\">in</span> run_until_complete\n    <span class=\"hljs-keyword\">return</span> future.result()\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Users/chennan/Desktop/2019/aiochatuse/ascomplete.py\"</span>, line <span class=\"hljs-number\">18</span>, <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">main</span>\n    <span class=\"hljs-keyword\">result</span> = await task\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/tasks.py\"</span>, line <span class=\"hljs-number\">570</span>, <span class=\"hljs-keyword\">in</span> _wait_for_one\n    <span class=\"hljs-keyword\">raise</span> exceptions.TimeoutError\nasyncio.exceptions.TimeoutError\n</code></pre>\n    <h3 id=\"-8\">取消任务的时候保证其他协程运行完毕</h3>\n    <p>在取消任务的时候存在一个问题,首先先看一段代码：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">coro</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">'开始休眠'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">2</span>)\n    print(<span class=\"hljs-string\">'结束休眠'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">cancel_it</span><span class=\"hljs-params\">(some_task)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>)\n    some_task.cancel()\n    print(<span class=\"hljs-string\">'取消some_task任务'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    real_task = asyncio.create_task(coro())\n    <span class=\"hljs-keyword\">await</span> cancel_it(real_task)\n    <span class=\"hljs-keyword\">await</span> real_task\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行之后你会看到如下结果：</p>\n    <pre><code class=\"hljs sql\">开始休眠\n取消some_task任务\nTraceback (most recent <span class=\"hljs-keyword\">call</span> <span class=\"hljs-keyword\">last</span>):\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Users/chennan/Desktop/2019/aiochatuse/shielddemo.py\"</span>, line <span class=\"hljs-number\">24</span>, <span class=\"hljs-keyword\">in</span> &lt;<span class=\"hljs-keyword\">module</span>&gt;\n    asyncio.run(<span class=\"hljs-keyword\">main</span>())\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/runners.py\"</span>, line <span class=\"hljs-number\">43</span>, <span class=\"hljs-keyword\">in</span> run\n    <span class=\"hljs-keyword\">return</span> loop.run_until_complete(<span class=\"hljs-keyword\">main</span>)\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py\"</span>, line <span class=\"hljs-number\">589</span>, <span class=\"hljs-keyword\">in</span> run_until_complete\n    <span class=\"hljs-keyword\">return</span> future.result()\nasyncio.exceptions.CancelledError\n</code></pre>\n    <p>下面说一下代码中的逻辑，在 main 协程中将 coro 协程封装为任务 <code>real_task</code>，然后 <code>cancel_it</code> 方法做了一个取消任务的逻辑 <code>some_task.cancel()</code>，并打印一句话。然后通过\n        await 去运行 <code>real_task</code> 方法，执行代码之后看到上面的结果。出现了 asyncio.exceptions.CancelledError 错误，同时看到 coro\n        只打印了一个开始休眠，后面的结束休眠没有打印。也就是说我们在取消一个任务的时候，里面对于的协程也被取消了。如果我们想在取消任务之后协程还能顺利执行完，就需要用到另外一个函数 shield。</p>\n    <h4 id=\"asyncioshield\">asyncio.shield</h4>\n    <p>该方法的作用是，在执行 cancel 取消一个 task 之后，task 里面的协程仍然可以执行结束，不会像上面的 coro 那样出现错误。</p>\n    <pre><code class=\"hljs coffeescript\">asyncio.shield(aw, *, <span class=\"hljs-keyword\">loop</span>=None)\n</code></pre>\n    <p>aw 表示需要传入一个 Task。</p>\n    <p>接下来我们就使用这个方法对上面的例子做一个修改。</p>\n    <p>从代码中体会它的作用。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">coro</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">'开始休眠'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">2</span>)\n    print(<span class=\"hljs-string\">'结束休眠'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">cancel_it</span><span class=\"hljs-params\">(some_task)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>)\n    some_task.cancel()\n    print(<span class=\"hljs-string\">'取消some_task任务'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    real_task = asyncio.create_task(coro())\n    shield = asyncio.shield(real_task)\n    <span class=\"hljs-keyword\">await</span> cancel_it(shield)\n    <span class=\"hljs-keyword\">await</span> real_task\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行之后的结果：</p>\n    <pre><code class=\"hljs\">开始休眠\n取消some_task任务\n结束休眠\n</code></pre>\n    <p>可以看到尽管 some_task 任务被取消，但是 coro 仍然成功的打印了最好的“结束休眠”。通过上面的例子我想大家应该知道 shield 的作用了。 </p>\n    <h3 id=\"-9\">超时等待</h3>\n    <p>有时候需要等待一个任务完成之后再进行下一个，但是有的时候并不需要运行完就返回。</p>\n    <p>这个时候可以使用 wait_for。</p>\n    <h4 id=\"asynciowait_for\">asyncio.wait_for</h4>\n    <p>该方法的语法如下：</p>\n    <pre><code class=\"hljs coffeescript\">asyncio.wait_for(aw, timeout, *, <span class=\"hljs-keyword\">loop</span>=None)\n</code></pre>\n    <p>aw 是一个任务，timeout 可以指定超时时间。如果发生超时，它将取消该任务并引发 asyncio.TimeoutError，此时为了保证任务中协程完成可以使用上面说的 shield。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>:</span>\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">\"in foo\"</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">eternity</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># Sleep for one hour</span>\n    <span class=\"hljs-keyword\">await</span> foo()\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">3600</span>)\n    print(<span class=\"hljs-string\">'yay!'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># Wait for at most 1 second</span>\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">await</span> asyncio.wait_for(asyncio.shield(eternity()), timeout=<span class=\"hljs-number\">1.0</span>)\n    <span class=\"hljs-keyword\">except</span> asyncio.TimeoutError:\n        print(<span class=\"hljs-string\">'timeout!'</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>输出：</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">in</span> foo\ntimeout!\n</code></pre>\n    <p>按照上面的经验可知道，如果我们把 asyncio.shield 去掉之后，“in foo” 就无法输出了。</p>\n    <h3 id=\"-10\">协程配合线程</h3>\n    <h4 id=\"asynciorun_coroutine_threadsafe\">asyncio.run<em>coroutine</em>threadsafe</h4>\n    <p>该方法的语法如下：</p>\n    <pre><code class=\"hljs coffeescript\">asyncio.run_coroutine_threadsafe(coro, <span class=\"hljs-keyword\">loop</span>)\n</code></pre>\n    <p>其实在协程中也可以使用多线程,有时候我们需要在主线程中启动一个子线程去做别的任务，这个时候我们就要用到下面的方法了，先上一个流畅的 Python 中的代码。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span>  threading <span class=\"hljs-keyword\">import</span> Thread\n\nnow = <span class=\"hljs-keyword\">lambda</span>: time.time()\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">start_loop</span><span class=\"hljs-params\">(loop)</span>:</span>\n    asyncio.set_event_loop(loop)\n    loop.run_forever()\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">do_some_work</span><span class=\"hljs-params\">(x)</span>:</span>\n    print(<span class=\"hljs-string\">f'Waiting <span class=\"hljs-subst\">{x}</span>'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(x)\n    print(<span class=\"hljs-string\">f'Done after <span class=\"hljs-subst\">{x}</span>s'</span>)\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">more_work</span><span class=\"hljs-params\">(x)</span>:</span>\n    print(<span class=\"hljs-string\">f'More work <span class=\"hljs-subst\">{x}</span>'</span>)\n    time.sleep(x)\n    print(<span class=\"hljs-string\">'Finished more work {x}'</span>)\n\n\nstart = now()\n<span class=\"hljs-comment\"># 主线程中创建一个 new_loop</span>\nnew_loop = asyncio.get_event_loop()\n<span class=\"hljs-comment\"># 创建子线程 在其中开启无限事件循环</span>\nt = Thread(target=start_loop, args=(new_loop,))\nt.start()\nprint(<span class=\"hljs-string\">f'TIME: <span class=\"hljs-subst\">{time.time() - start}</span>'</span>)\n\n<span class=\"hljs-comment\"># 在主线程中新注册协程对象</span>\n<span class=\"hljs-comment\"># 这样即可在子线程中进行事件循环的并发操作 同时主线程又不会被 block </span>\n<span class=\"hljs-comment\"># 一共执行的时间大概在 6 s 左右 </span>\nasyncio.run_coroutine_threadsafe(do_some_work(<span class=\"hljs-number\">6</span>), new_loop)\nasyncio.run_coroutine_threadsafe(do_some_work(<span class=\"hljs-number\">4</span>), new_loop)\n</code></pre>\n    <p>上述的例子，主线程中创建一个 <code>new_loop</code>，然后在另外的子线程中开启一个无限事件循环。主线程通过 <code>run_coroutine_threadsafe</code>\n        新注册协程对象。这样就能在子线程中进行事件循环的并发操作，同时主线程又不会被 block。一共执行的时间大概在 6s 左右。</p>\n    <h3 id=\"-11\">同步原语</h3>\n    <p>尽管 asyncio 应用通常作为单线程运行，不过仍被构建为并发应用。由于 I/O 以及其他外部事件的延迟和中断，每个协程或任务可能按一种不可预知的顺序执行。为了支持安全的并发执行，asyncio 包含了 threading\n        和 multiprocessing 模块中的一些底层原语的实现。</p>\n    <p>这里介绍两个经常用到的例子。</p>\n    <h4 id=\"queue\">队列（Queue）</h4>\n    <p>asyncio.Queue 为协程提供了一个先进先出的数据结构，这与线程的 queue.Queue 或进程的multiprocessing.Queue 很类似，下面先看一个简单的例子，它是一个非阻塞的队列。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span> asyncio <span class=\"hljs-keyword\">import</span> Queue\n\nqueue=Queue()\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span>:</span>\n        [queue.put_nowait(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>)]\n        <span class=\"hljs-keyword\">await</span> asyncio.create_task(work()) <span class=\"hljs-comment\">#put_nowait表示放入元素</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">work</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> queue.empty():<span class=\"hljs-comment\">#判断队列的元素是否为空</span>\n            num = queue.get_nowait()<span class=\"hljs-comment\">#获取元素</span>\n            print(<span class=\"hljs-string\">f\"获取数字:<span class=\"hljs-subst\">{num}</span>\"</span>)\n            queue.task_done()<span class=\"hljs-comment\">#告诉队列该任务处理完。</span>\n    <span class=\"hljs-keyword\">except</span> asyncio.CancelledError:\n        <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(start())\n</code></pre>\n    <p>输出结果:</p>\n    <pre><code class=\"hljs css\">获取数字<span class=\"hljs-selector-pseudo\">:1</span>\n获取数字<span class=\"hljs-selector-pseudo\">:2</span>\n获取数字<span class=\"hljs-selector-pseudo\">:3</span>\n获取数字<span class=\"hljs-selector-pseudo\">:4</span>\n获取数字<span class=\"hljs-selector-pseudo\">:5</span>\n获取数字<span class=\"hljs-selector-pseudo\">:6</span>\n获取数字<span class=\"hljs-selector-pseudo\">:7</span>\n获取数字<span class=\"hljs-selector-pseudo\">:8</span>\n获取数字<span class=\"hljs-selector-pseudo\">:9</span>\n</code></pre>\n    <p>在做爬虫的时候对于 url 的处理，经常会用到队列的操作。另外一个要说的同步原语就是信号量。</p>\n    <h2 id=\"semaphore\">信号量（Semaphore）</h2>\n    <p>简单说下什么是信号量，我们用停车场和车进行比喻。一个停车场一共就 5 个车位，所以我们知道可以同时容纳最多 5 辆车，这五个车位就是信号量。</p>\n    <p>然后说信号量的行为，当有车离开停车场的时候外面的车就会进来补，比如有 2 辆车离开，那么就可以再进来 2 辆车，依次类推，上面这个过程就是描述了信号量这个东西。</p>\n    <p>下面我们看如何在程序中使用。</p>\n    <p>asyncio.Semaphore 模块就是一个维持并发量的模块，我们用它起到一个限流的效果。首先来一段代码：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\nsem=asyncio.Semaphore(<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">#信号量指定为3</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">branch</span><span class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> sem:  <span class=\"hljs-comment\">#通过异步上下文关键子控制并发量</span>\n        print(<span class=\"hljs-string\">f\"获取当前数字:<span class=\"hljs-subst\">{num}</span>\"</span>)\n        <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n\n     tasks=[asyncio.create_task(branch(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>)] <span class=\"hljs-comment\">#将协程封装成任务共10个</span>\n     <span class=\"hljs-keyword\">await</span> asyncio.wait(tasks) <span class=\"hljs-comment\">#执行这些任务</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>执行之后你会发现：</p>\n    <pre><code class=\"hljs makefile\"><span class=\"hljs-section\">获取当前数字:0</span>\n<span class=\"hljs-section\">获取当前数字:1</span>\n<span class=\"hljs-section\">获取当前数字:2</span>\nTask exception was never retrieved\n<span class=\"hljs-section\">future: &lt;Task finished name='Task-11' coro=&lt;branch() done, defined at /Users/chennan/Desktop/2019/aiochatuse/semaphoredemo.py:26&gt; exception=RuntimeError(\"Task &lt;Task pending name='Task-11' coro=&lt;branch() running at /Users/chennan/Desktop/2019/aiochatuse/semaphoredemo.py:27&gt; cb=[_wait.&lt;locals&gt;._on_completion() at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/tasks.py:478]&gt; got Future &lt;Future pending&gt; attached to a different loop\")&gt;</span>\n</code></pre>\n    <p>关键就是 attached to a different loop，这个地方说是当前的事件循环发生了改变，这个问题在Python3.6 的时候是不会出现的。</p>\n    <p>为什么 3.8 出错了？</p>\n    <p>这是因为：</p>\n    <p>我的信号量没有在循环内创建。也就是在 asyncio.run() 创建的循环之外创建了它们，因此它们使用 <code>events.get_event_loop()</code> 这就导致了新的事件循环产生。\n        asyncio.run() 创建一个新循环，然后在一个循环中创建的 future\n        不能在另一个循环中使用。所以问题就明确了，我们需要在循环之内创建。也就是我们需要定义一个全局变量，然后在主循环内部给其赋值。看到这，可能大家想到了 global，Python 3.7 增加了上下文变量 Context\n        Variables，至于为什么不用全局变量，因为可能会被其他协程修改，不安全，在这里也可以使用。</p>\n    <p>所以我们的代码变成了下面这个样子：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span> contextvars <span class=\"hljs-keyword\">import</span> ContextVar\n\nconcurrent=ContextVar(<span class=\"hljs-string\">\"concurrent\"</span>)<span class=\"hljs-comment\">#定义全局上下文管理器</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">branch</span><span class=\"hljs-params\">(num)</span>:</span>\n    sem=concurrent.get()<span class=\"hljs-comment\">#获取上下文关键字</span>\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> sem:\n        print(<span class=\"hljs-string\">f\"获取当前数字:<span class=\"hljs-subst\">{num}</span>\"</span>)\n        <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>) <span class=\"hljs-comment\">#为了看到明显的效果</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n     concurrent.set(asyncio.Semaphore(<span class=\"hljs-number\">3</span>)) <span class=\"hljs-comment\">#上下文管理器赋值</span>\n     tasks=[asyncio.create_task(branch(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>)]\n     <span class=\"hljs-keyword\">await</span> asyncio.wait(tasks)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>然后我们再次输出：</p>\n    <pre><code class=\"hljs css\">获取当前数字<span class=\"hljs-selector-pseudo\">:0</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:1</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:2</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:3</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:4</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:5</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:6</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:7</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:8</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:9</span>\n</code></pre>\n    <p>可以看到程序每隔 3 组输出一次，这就达到了我们想要的效果了。</p>\n    </div>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>asyncio使用指南</title>\n</head>\n<body>\n<div id=\"article_content\" class=\"mazi-article-content dont-break-out\">\n    <h3 id>协程的演变</h3>\n    <p>其实早在 Python3.4 的时候就有协程,当时的协程是通过 @asyncio.coroutine 和 yeild from 实现的。在一些很老教程中你可能看到的是下面这种形式:</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> asyncio\n\n@asyncio.coroutine\ndef print_hello():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello world!\"</span>)\n    r = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello again!\"</span>)\n\n<span class=\"hljs-comment\"># 创建并获取EventLoop:</span>\n<span class=\"hljs-keyword\">loop</span> = asyncio.get_event_loop()\n<span class=\"hljs-comment\"># 执行协程</span>\n<span class=\"hljs-keyword\">loop</span>.run_until_complete(print_hello())\n<span class=\"hljs-keyword\">loop</span>.close()\n</code></pre>\n    <p>因为现在几乎没有人这样写了，所以仅作为了解即可。</p>\n    <p>然后到了 Python3.5 引入了 async/await 语法糖，一直到现在Python3.8 都是用这种形式来表示协程，示例如下。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">print_hello</span><span class=\"hljs-params\">()</span>:</span>\n     print(<span class=\"hljs-string\">\"Hello world!\"</span>)\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">\"Hello again!\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    loop = asyncio.get_event_loop()\n    <span class=\"hljs-keyword\">try</span>:\n        print(<span class=\"hljs-string\">\"开始运行协程\"</span>)\n        coro = print_hello()\n        print(<span class=\"hljs-string\">\"进入事件循环\"</span>)\n        loop.run_until_complete(coro)\n    <span class=\"hljs-keyword\">finally</span>:\n        print(<span class=\"hljs-string\">\"关闭事件循环\"</span>)\n        loop.close()\n</code></pre>\n    <p>这种是目前应用范围最广的，可以看到比之前的代码舒服了不少，不用再使用装饰器的形式了。</p>\n    <p>然后就到了 Python3.7 和 Python3.8，协程发生了很多细小的变化，但是最大的一个变化就是，启动协程的方法变简单了，一句就可以搞定，不用再像上面那样，创建循环然后再仍到事件循环去执行。使用 asyncio.run\n        这个顶级 API 就可以了。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">print_hello</span><span class=\"hljs-params\">()</span>:</span>\n     print(<span class=\"hljs-string\">\"Hello world!\"</span>)\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">\"Hello again!\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n        print(<span class=\"hljs-string\">\"开始运行协程\"</span>)\n        asyncio.run(print_hello())\n        print(<span class=\"hljs-string\">\"进入事件循环\"</span>)\n</code></pre>\n    <p>怎么样是不是代码更少了，启动协程更简单了。所以这也正是我们使用 3.8 作为本教程的 Python 版，与时俱进嘛。</p>\n    <h3 id=\"asyncio\">asyncio 的组成部分</h3>\n    <p>根据目前的官方文档，总的来说分为了两部分：高层级 API 和低层级 API。</p>\n    <p>首先看高层级 API 也是接下来重点要讲的。</p>\n    <h4 id=\"api\">高层级 API</h4>\n    <ul>\n        <li>协程对象和 Tasks 对象</li>\n        <li>数据流</li>\n        <li>同步源语</li>\n        <li>子进程</li>\n        <li>队列</li>\n        <li>异常</li>\n    </ul>\n    <h4 id=\"api-1\">低层级 API</h4>\n    <ul>\n        <li>事件循环</li>\n        <li>Futures 对象</li>\n        <li>传输和协议</li>\n        <li>策略</li>\n        <li>平台支持</li>\n    </ul>\n    <p>上面列出了这么多的项目我们怎么去选择自己所需要的呢，总的来说对于刚入门的新手或者只是写一个自己用的程序一般都只会用到高级 API\n        的部分，这部分就属于开箱即用的那种，对于高级用户比如框架开发者，往往可以需要去适应各种需要，需要重新改写一些内部的结构，这个时候就需要用到低层级的 API，但是这两个层级呢只能是一个大概方向吧，主要是方便 API\n        的查看，下面呢我将围绕者高层级 API 和低层级 API 在日常实际工作中经常用到的内容做一些讲解。</p>\n    <h3 id=\"-1\">了解几个概念</h3>\n    <p>在学习 asyncio 之前需要知道这样的几个概念。</p>\n    <h4 id=\"-2\">事件循环</h4>\n    <p>事件循环是一种处理多并发量的有效方式，在维基百科中它被描述为「一种等待程序分配事件或消息的编程架构」，我们可以定义事件循环来简化使用轮询方法来监控事件，通俗的说法就是「当 A 发生时，执行\n        B」。所谓的事件，其实就是函数。事件循环，就是有一个队列，里面存放着一堆函数，从第一个函数开始执行，在函数执行的过程中，可能会有新的函数继续加入到这个队列中。一直到队列中所有的函数被执行完毕，并且再也不会有新的函数被添加到这个队列中，程序就结束了。</p>\n    <h4 id=\"future\">Future</h4>\n    <p>Future 是一个数据结构，表示还未完成的工作结果。事件循环可以监视 Future 对象是否完成。从而允许应用的一部分等待另一部分完成一些工作。</p>\n    <p>简单说，Future 就是一个类，用生成器实现了回调。</p>\n    <h4 id=\"task\">Task</h4>\n    <p>Task 是 Future 的一个子类，它知道如何包装和管理一个协程的执行。任务所需的资源可用时，事件循环会调度任务允许，并生成一个结果，从而可以由其他协程消费。一般操作最多的还是 Task。用 Task\n        来封装协程，给原本没有状态的协程增加一些状态。</p>\n    <h4 id=\"awaitableobjects\">awaitable objects（可等待对象）</h4>\n    <p>如果一个对象可以用在 wait 表达式中，那么它就是一个可等待的对象。在 asyncio 模块中会一直提到这个概念，其中协程函数，Task，Future 都是 awaitable 对象。</p>\n    <p>用于 await 表达式中的对象。可以是 coroutine 也可以是实现了 <code>__await__()</code> 方法的对象，参见 PEP 492。类比于 Iterable 对象是 Generator 或实现了\n        <code>__iter__()</code> 方法的对象。</p>\n    <p><strong>object._<em>await</em>_(self)</strong></p>\n    <p>必须返回生成器，asyncio.Future 类也实现了该方法，用于兼容 await 表达式。</p>\n    <p>而 Task 继承自 Future，因此 awaitable 对象有三种：coroutines、Tasks 和 Futures。</p>\n    <p>await 的目的：</p>\n    <ul>\n        <li>获取协程的结果</li>\n        <li>挂起当前协程，将控制交由事件循环，切换到其他协程，然后等待结果，最后恢复协程继续执行</li>\n    </ul>\n    <h3 id=\"-3\">启动一个协程</h3>\n    <p>现在我们使用 async/await 语法来声明一个协程。 代码如下：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n     print(<span class=\"hljs-string\">'hello'</span>)\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">'world'</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>asyncio.run 只能用来启动程序入口协程，反过来你在程序中如果使用 asyncio.run 就会出错，之前我们提到对于其他的协程通过 await 链来实现，这里也是一样的。</p>\n    <p>下面说下代码的含义，首先启动 main 这个协程，main 方法就是先打印 hello，然后在打印过程中通过使用 asyncio.sleep 来等待 1 秒，之后再打印\n        world。前面我们提到用协程就意味着我们要一直使用非阻塞的代码，才能达到速度提升，所以这里我们用了非阻塞版的 time.sleep 即 asyncio.sleep 。</p>\n    <h3 id=\"-4\">协程中调用协程</h3>\n    <p>之前我们提到了在协程中，可以使用 await 来调用一个协程。</p>\n    <p>就像下面的代码:</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">say_after</span><span class=\"hljs-params\">(delay, what)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(delay)\n    print(what)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\">#使用f-string拼接字符串</span>\n    print(<span class=\"hljs-string\">f\"开始运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n\n    child1=<span class=\"hljs-keyword\">await</span> say_after(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'hello'</span>) <span class=\"hljs-comment\">#通过await调用协程，然后接收一下返回值</span>\n    child2=<span class=\"hljs-keyword\">await</span> say_after(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'world'</span>)\n    print(<span class=\"hljs-string\">\"child1\"</span>,child1)\n    print(<span class=\"hljs-string\">\"child2\"</span>,child2)\n\n    print(<span class=\"hljs-string\">f\"结束运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n      asyncio.run(main())\n</code></pre>\n    <p>运行结果：</p>\n    <pre><code class=\"hljs css\">开始运行 11<span class=\"hljs-selector-pseudo\">:17</span><span class=\"hljs-selector-pseudo\">:26</span>\n<span class=\"hljs-selector-tag\">hello</span>\n<span class=\"hljs-selector-tag\">world</span>\n<span class=\"hljs-selector-tag\">child1</span> <span class=\"hljs-selector-tag\">None</span>\n<span class=\"hljs-selector-tag\">child2</span> <span class=\"hljs-selector-tag\">None</span>\n结束运行 11<span class=\"hljs-selector-pseudo\">:17</span><span class=\"hljs-selector-pseudo\">:29</span>\n<span class=\"hljs-selector-attr\">[Finished in 3.1s]</span>\n</code></pre>\n    <p>代码是没什么问题,正常运行。但是一般情况下我们用到更多的是下面的方式。将协程封装为 Task 让原本没有状态标示的协程添加上状态 。</p>\n    <p>我们可以通过 asyncio.create_task 方法来实现。</p>\n    <h4 id=\"asynciocreate_task\">asyncio.create_task</h4>\n    <p><code>create_task</code>（在 3.6 版本中需要使用低层级的 API <code>asyncio.ensure_future</code>。）是\n        3.7以后加入的语法，作用是将协程包装为一个任务（Task），相比 3.6 版本的 <code>ensure_future</code> 可读性提高。</p>\n    <p>将上面的代码做如下修改：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">say_after</span><span class=\"hljs-params\">(delay, what)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(delay)\n    print(what)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">f\"开始运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n\n    child1=asyncio.create_task(say_after(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'hello'</span>)) <span class=\"hljs-comment\">#通过await调用协程，然后接收一下返回值</span>\n    child2=asyncio.create_task(say_after(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'world'</span>))\n    print(<span class=\"hljs-string\">\"调用任务child1前\"</span>,child1)\n    print(<span class=\"hljs-string\">\"调用任务child2前\"</span>,child2)\n    <span class=\"hljs-keyword\">await</span> child1\n    <span class=\"hljs-keyword\">await</span> child2\n    print(<span class=\"hljs-string\">\"调用任务child1后\"</span>,child1)\n    print(<span class=\"hljs-string\">\"调用任务child2前\"</span>,child2)\n\n    print(<span class=\"hljs-string\">f\"结束运行 <span class=\"hljs-subst\">{time.strftime(<span class=\"hljs-string\">'%X'</span>)}</span>\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n      asyncio.run(main())\n</code></pre>\n    <p>运行结果如下:</p>\n    <pre><code class=\"hljs ruby\">开始运行 <span class=\"hljs-number\">11</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">37</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">54</span>\n调用任务child1前 &lt;Task pending name=<span class=\"hljs-string\">'Task-2'</span> coro=&lt;say_after() running at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/hello.<span class=\"hljs-symbol\">py:</span><span class=\"hljs-number\">4</span><span class=\"hljs-meta\">&gt;&gt;\n</span>调用任务child2前 &lt;Task pending name=<span class=\"hljs-string\">'Task-3'</span> coro=&lt;say_after() running at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/hello.<span class=\"hljs-symbol\">py:</span><span class=\"hljs-number\">4</span>&gt;&gt;\nhello\nworld\n调用任务child1后 &lt;Task finished name=<span class=\"hljs-string\">'Task-2'</span> coro=&lt;say_after() done, <span class=\"hljs-keyword\">defined</span> at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/hello.<span class=\"hljs-symbol\">py:</span><span class=\"hljs-number\">4</span>&gt; result=None&gt;\n调用任务child2前 &lt;Task finished name=<span class=\"hljs-string\">'Task-3'</span> coro=&lt;say_after() done, <span class=\"hljs-keyword\">defined</span> at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/hello.<span class=\"hljs-symbol\">py:</span><span class=\"hljs-number\">4</span>&gt; result=None&gt;\n结束运行 <span class=\"hljs-number\">11</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">37</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">56</span>\n</code></pre>\n    <p>可以发现，我们的结果中多了\"&lt;Task pending ...\"和\"&lt;Task finised ...\"几行语句。这就是 Task\n        的一个状态变化，知道状态的好处就是我们可以根据任务的状态做进一步操作，不像协程函数那样没有状态标示，当然 Task 的状态不只有这些。</p>\n    <p>前面说到 Task 是 Future 的子类，所以 Task 拥有 Future 的一些状态。</p>\n    <h4 id=\"future-1\">Future 的状态</h4>\n    <p>大概有如下几种:</p>\n    <ul>\n        <li>Pending</li>\n        <li>Running</li>\n        <li>Done</li>\n        <li>Cancelled</li>\n    </ul>\n    <p>创建 future 的时候，task 为 pending，事件循环调用执行的时候当然就是 running，调用完毕自然就是 done，如果需要停止事件循环，就需要先把 task 取消，状态为 cancel。这里先做了解知道\n        Task 是有状态的就够了。</p>\n    <h3 id=\"-5\">并发运行任务</h3>\n    <p>一系列的协程可以通过 await 链式的调用，但是有的时候我们需要在一个协程里等待多个协程，比如我们在一个协程里等待 1000 个异步网络请求，对于访问次序有没有要求的时候，就可以使用另外的关键字 asyncio.wait 或\n        asyncio.gather 来解决了。</p>\n    <h4 id=\"asynciogather\">asyncio.gather</h4>\n    <p>使用方法：</p>\n    <pre><code class=\"hljs python\">asyncio.gather(*aws, loop=<span class=\"hljs-keyword\">None</span>, return_exceptions=<span class=\"hljs-keyword\">False</span>)¶\n</code></pre>\n    <p>也就是说使用 gather 语句并发协程，就得用 await 去执行它。这个方法可以接收三个参数，第一个 aws。</p>\n    <p>aws 一般是一个列表，如果里面的元素是 awaitable 类型，在运行的时候它将自动被包装成 Task，gather 会根据 aws 中元素添加的顺序。顺序执行并返回结果列表。</p>\n    <p>第二个 loop 可以传入一个事件循环对象，一般不用管，最后一个 <code>return_exceptions</code> 默认是 False，如果 return_exceptions 为\n        True，异常将被视为成功结果，然后添加到结果列表中。</p>\n    <p>下面是一个 10 个数字并输出的例子：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> num\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    coro = [asyncio.create_task(foo(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>) ]\n    done= <span class=\"hljs-keyword\">await</span> asyncio.gather(*coro)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> done:\n        print(i)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行之后结果如下：</p>\n    <pre><code class=\"hljs\">0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n</code></pre>\n    <p>gather 返回的结果是一个列表，迭代这个列表可以看到任务依次输出。</p>\n    <p>gather 通常被用来阶段性的一个操作，做完第一步才能做第二步，比如下面这样：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">import</span> time\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">step1</span><span class=\"hljs-params\">(n, start)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    print(<span class=\"hljs-string\">\"第一阶段完成\"</span>)\n    print(<span class=\"hljs-string\">\"此时用时\"</span>, time.time() - start)\n    <span class=\"hljs-keyword\">return</span> n\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">step2</span><span class=\"hljs-params\">(n, start)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    print(<span class=\"hljs-string\">\"第二阶段完成\"</span>)\n    print(<span class=\"hljs-string\">\"此时用时\"</span>, time.time() - start)\n    <span class=\"hljs-keyword\">return</span> n\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    now = time.time()\n    result = <span class=\"hljs-keyword\">await</span> asyncio.gather(step1(<span class=\"hljs-number\">5</span>, now), step2(<span class=\"hljs-number\">2</span>, now))\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> result:\n        print(i)\n    print(<span class=\"hljs-string\">\"总用时\"</span>, time.time() - now)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n   asyncio.run(main())\n</code></pre>\n    <p>输出内容：</p>\n    <pre><code class=\"hljs css\">第二阶段完成\n此时用时 2<span class=\"hljs-selector-class\">.0041821002960205</span>\n第一阶段完成\n此时用时 5<span class=\"hljs-selector-class\">.0009942054748535</span>\n5\n2\n总用时 5<span class=\"hljs-selector-class\">.001508951187134</span>\n</code></pre>\n    <p>可以通过上面结果得到如下结论：</p>\n    <ol>\n        <li>step1 和 step2 是并行运行的。</li>\n        <li>gather 会等待最耗时的那个完成之后才返回结果，耗时总时间取决于其中任务最长时间的那个。</li>\n    </ol>\n    <h4 id=\"asynciowait\">asyncio.wait</h4>\n    <p>我们先看一下 wait 的语法结构：</p>\n    <pre><code class=\"hljs python\">asyncio.wait(aws, *, loop=<span class=\"hljs-keyword\">None</span>, timeout=<span class=\"hljs-keyword\">None</span>, return_when=ALL_COMPLETED)¶\n</code></pre>\n    <p>wait 一共有 4 个参数，第一个参数 aws，一般是一个任务列表。</p>\n    <p>第二个*之后的都是强制关键字参数，即 loop、timeout、return_when。</p>\n    <p>loop 通 gather 的参数是一个事件循环，该参数计划在 Python 3.10 中删除。</p>\n    <p>timeout 可以指定这组任务的超时时间，请注意，此函数不会引发 asyncio.TimeoutError，超时的时候会返回已完成的任务。</p>\n    <p>return_when 可以指定什么条件下返回结果，默认是所以任务完成就返回结果列表。</p>\n    <p>return_when 的具体参数看下面的表格：</p>\n    <table>\n        <thead>\n        <tr>\n            <th>参数名</th>\n            <th>含义</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td>FIRST_COMPLETED</td>\n            <td>任何一个 future 完成或取消时返回</td>\n        </tr>\n        <tr>\n            <td>FIRST_EXCEPTION</td>\n            <td>任何一个 future 出现错误将返回，如果没有出现异常等价于 ALL_COMPLETED</td>\n        </tr>\n        <tr>\n            <td>ALL_COMPLETED</td>\n            <td>当所有任务完成或者被取消时返回结果，默认值。</td>\n        </tr>\n        </tbody>\n    </table>\n    <p>wait 返回的结果是一个元组，第一部分是完成的任务，第二部分是准备中的任务。</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">done</span>, pending = await asyncio.wait(aws)\n</code></pre>\n    <p>其中 done 表示完成的任务，可以通过迭代获取每个任务。</p>\n    <p>pending 表示的是还没执行的任务。</p>\n    <p>下面看一个例子来进一步了解：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.99991</span>)\n    <span class=\"hljs-keyword\">return</span> num\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\">#coro = foo()</span>\n    coro = [asyncio.create_task(foo(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>) ]\n    done, pending = <span class=\"hljs-keyword\">await</span> asyncio.wait(coro,timeout=<span class=\"hljs-number\">1</span>,return_when=<span class=\"hljs-string\">\"ALL_COMPLETED\"</span>)\n\n    <span class=\"hljs-keyword\">for</span> coro <span class=\"hljs-keyword\">in</span> done:\n        print(coro.result())\n    print(<span class=\"hljs-string\">\"pending\"</span>,pending)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> pending:\n         print(item)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行结果如下:</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">7</span>\npending {&lt;Task pending name=<span class=\"hljs-string\">'Task-10'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span class=\"hljs-keyword\">None</span>&gt;&gt;, &lt;Task pending name=<span class=\"hljs-string\">'Task-11'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span class=\"hljs-keyword\">None</span>&gt;&gt;}\n&lt;Task pending name=<span class=\"hljs-string\">'Task-10'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span class=\"hljs-keyword\">None</span>&gt;&gt;\n&lt;Task pending name=<span class=\"hljs-string\">'Task-11'</span> coro=&lt;foo() running at /Users/chennan/Desktop/<span class=\"hljs-number\">2019</span>/aiochatuse/waitdemo.py:<span class=\"hljs-number\">4</span>&gt; wait_for=&lt;Future finished result=<span class=\"hljs-keyword\">None</span>&gt;&gt;\n</code></pre>\n    <p>首先说代码，使用 wait 实现并发的程序是无序的，所以我们看到数字不是一次出现的，这个是和 gather 的不同之处。另外在返回的参数上也有差别，wait 返回两个参数 done 和 pending。</p>\n    <p>上面的代码指定了一个 timeout，因为任务没在指定时间完成，所以就导致只有完成的任务输出了结果，没有完成的部分可以看到它们的状态是 pending。</p>\n    <h4 id=\"-6\">总结</h4>\n    <p>最后我们总结一下 wait 和 gather 的相同之处和不同之处：</p>\n    <p>相同之处：都可以完成多个任务的并发操作。\n        不同之外：gather 适合按照顺序去做的任务，或者按照阶段去做的任务，返回的是结果列表，而 wait 不讲究任务的顺序，这个在做爬虫中经常使用到，然后 wait 可以返回 2 个结果，done 和 pending。</p>\n    <h3 id=\"-7\">任务完成时处理</h3>\n    <h4 id=\"asyncioas_completed\">asyncio.as_completed</h4>\n    <p><code>as_complete</code> 是一个生成器，会管理指定的一个任务列表，并生成他们的结果。每个协程结束运行时一次生成一个结果。与 wait 一样，<code>as_complete</code>\n        不能保证顺序，不过执行其他动作之前没有必要等待所有后台操作完成。</p>\n    <p>我们看下这个函数都有哪些参数：</p>\n    <pre><code class=\"hljs python\">asyncio.as_completed(aws, *, loop=<span class=\"hljs-keyword\">None</span>, timeout=<span class=\"hljs-keyword\">None</span>)\n</code></pre>\n    <p>和前面的 wait 类似，第一个参数 awas，然后 loop，最后 timeout，需要注意的是 timeout 如果指定了，那么在指定时间没完成的话会抛出 asyncio.exceptions.TimeoutError\n        异常。</p>\n    <p>下面看一个例子:</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> time\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(n)</span>:</span>\n    print(<span class=\"hljs-string\">f'等待<span class=\"hljs-subst\">{n}</span>秒'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(n)\n    <span class=\"hljs-keyword\">return</span> n\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    coroutine1 = foo(<span class=\"hljs-number\">1</span>)\n    coroutine2 = foo(<span class=\"hljs-number\">2</span>)\n    coroutine3 = foo(<span class=\"hljs-number\">4</span>)\n\n    tasks = [asyncio.create_task(coroutine1),asyncio.create_task(coroutine2),asyncio.create_task(coroutine3)]\n    <span class=\"hljs-keyword\">for</span> task <span class=\"hljs-keyword\">in</span> asyncio.as_completed(tasks):\n        result = <span class=\"hljs-keyword\">await</span> task\n        print(<span class=\"hljs-string\">f'获取返回结果: <span class=\"hljs-subst\">{result}</span>'</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    now = <span class=\"hljs-keyword\">lambda</span> : time.time()\n    start = now()\n    asyncio.run(main())\n    print(now() - start)\n</code></pre>\n    <p>输出结果：</p>\n    <pre><code class=\"hljs makefile\">等待1秒\n等待2秒\n等待4秒\n<span class=\"hljs-section\">获取返回结果: 1</span>\n<span class=\"hljs-section\">获取返回结果: 2</span>\n<span class=\"hljs-section\">获取返回结果: 4</span>\n4.002715826034546\n</code></pre>\n    <p>可以看出整个执行过程总用时取决 等待时间最长的那个，即 4 秒。</p>\n    <p>接下来，对上面的代码稍作修改。</p>\n    <p>将</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">for</span> task <span class=\"hljs-keyword\">in</span> asyncio.as_completed(tasks):\n</code></pre>\n    <p>改为</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">for</span> task <span class=\"hljs-keyword\">in</span> asyncio.as_completed(tasks,timeout=2):\n</code></pre>\n    <p>其他地方不变，改完运行之后会看到上面提到的错误。</p>\n    <pre><code class=\"hljs sql\">等待1秒\n等待2秒\n等待4秒\n获取返回结果: 1\nTraceback (most recent <span class=\"hljs-keyword\">call</span> <span class=\"hljs-keyword\">last</span>):\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Users/chennan/Desktop/2019/aiochatuse/ascomplete.py\"</span>, line <span class=\"hljs-number\">25</span>, <span class=\"hljs-keyword\">in</span> &lt;<span class=\"hljs-keyword\">module</span>&gt;\n    asyncio.run(<span class=\"hljs-keyword\">main</span>())\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/runners.py\"</span>, line <span class=\"hljs-number\">43</span>, <span class=\"hljs-keyword\">in</span> run\n    <span class=\"hljs-keyword\">return</span> loop.run_until_complete(<span class=\"hljs-keyword\">main</span>)\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py\"</span>, line <span class=\"hljs-number\">589</span>, <span class=\"hljs-keyword\">in</span> run_until_complete\n    <span class=\"hljs-keyword\">return</span> future.result()\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Users/chennan/Desktop/2019/aiochatuse/ascomplete.py\"</span>, line <span class=\"hljs-number\">18</span>, <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">main</span>\n    <span class=\"hljs-keyword\">result</span> = await task\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/tasks.py\"</span>, line <span class=\"hljs-number\">570</span>, <span class=\"hljs-keyword\">in</span> _wait_for_one\n    <span class=\"hljs-keyword\">raise</span> exceptions.TimeoutError\nasyncio.exceptions.TimeoutError\n</code></pre>\n    <h3 id=\"-8\">取消任务的时候保证其他协程运行完毕</h3>\n    <p>在取消任务的时候存在一个问题,首先先看一段代码：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">coro</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">'开始休眠'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">2</span>)\n    print(<span class=\"hljs-string\">'结束休眠'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">cancel_it</span><span class=\"hljs-params\">(some_task)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>)\n    some_task.cancel()\n    print(<span class=\"hljs-string\">'取消some_task任务'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    real_task = asyncio.create_task(coro())\n    <span class=\"hljs-keyword\">await</span> cancel_it(real_task)\n    <span class=\"hljs-keyword\">await</span> real_task\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行之后你会看到如下结果：</p>\n    <pre><code class=\"hljs sql\">开始休眠\n取消some_task任务\nTraceback (most recent <span class=\"hljs-keyword\">call</span> <span class=\"hljs-keyword\">last</span>):\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Users/chennan/Desktop/2019/aiochatuse/shielddemo.py\"</span>, line <span class=\"hljs-number\">24</span>, <span class=\"hljs-keyword\">in</span> &lt;<span class=\"hljs-keyword\">module</span>&gt;\n    asyncio.run(<span class=\"hljs-keyword\">main</span>())\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/runners.py\"</span>, line <span class=\"hljs-number\">43</span>, <span class=\"hljs-keyword\">in</span> run\n    <span class=\"hljs-keyword\">return</span> loop.run_until_complete(<span class=\"hljs-keyword\">main</span>)\n  <span class=\"hljs-keyword\">File</span> <span class=\"hljs-string\">\"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py\"</span>, line <span class=\"hljs-number\">589</span>, <span class=\"hljs-keyword\">in</span> run_until_complete\n    <span class=\"hljs-keyword\">return</span> future.result()\nasyncio.exceptions.CancelledError\n</code></pre>\n    <p>下面说一下代码中的逻辑，在 main 协程中将 coro 协程封装为任务 <code>real_task</code>，然后 <code>cancel_it</code> 方法做了一个取消任务的逻辑 <code>some_task.cancel()</code>，并打印一句话。然后通过\n        await 去运行 <code>real_task</code> 方法，执行代码之后看到上面的结果。出现了 asyncio.exceptions.CancelledError 错误，同时看到 coro\n        只打印了一个开始休眠，后面的结束休眠没有打印。也就是说我们在取消一个任务的时候，里面对于的协程也被取消了。如果我们想在取消任务之后协程还能顺利执行完，就需要用到另外一个函数 shield。</p>\n    <h4 id=\"asyncioshield\">asyncio.shield</h4>\n    <p>该方法的作用是，在执行 cancel 取消一个 task 之后，task 里面的协程仍然可以执行结束，不会像上面的 coro 那样出现错误。</p>\n    <pre><code class=\"hljs coffeescript\">asyncio.shield(aw, *, <span class=\"hljs-keyword\">loop</span>=None)\n</code></pre>\n    <p>aw 表示需要传入一个 Task。</p>\n    <p>接下来我们就使用这个方法对上面的例子做一个修改。</p>\n    <p>从代码中体会它的作用。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">coro</span><span class=\"hljs-params\">()</span>:</span>\n    print(<span class=\"hljs-string\">'开始休眠'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">2</span>)\n    print(<span class=\"hljs-string\">'结束休眠'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">cancel_it</span><span class=\"hljs-params\">(some_task)</span>:</span>\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>)\n    some_task.cancel()\n    print(<span class=\"hljs-string\">'取消some_task任务'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    real_task = asyncio.create_task(coro())\n    shield = asyncio.shield(real_task)\n    <span class=\"hljs-keyword\">await</span> cancel_it(shield)\n    <span class=\"hljs-keyword\">await</span> real_task\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>运行之后的结果：</p>\n    <pre><code class=\"hljs\">开始休眠\n取消some_task任务\n结束休眠\n</code></pre>\n    <p>可以看到尽管 some_task 任务被取消，但是 coro 仍然成功的打印了最好的“结束休眠”。通过上面的例子我想大家应该知道 shield 的作用了。 </p>\n    <h3 id=\"-9\">超时等待</h3>\n    <p>有时候需要等待一个任务完成之后再进行下一个，但是有的时候并不需要运行完就返回。</p>\n    <p>这个时候可以使用 wait_for。</p>\n    <h4 id=\"asynciowait_for\">asyncio.wait_for</h4>\n    <p>该方法的语法如下：</p>\n    <pre><code class=\"hljs coffeescript\">asyncio.wait_for(aw, timeout, *, <span class=\"hljs-keyword\">loop</span>=None)\n</code></pre>\n    <p>aw 是一个任务，timeout 可以指定超时时间。如果发生超时，它将取消该任务并引发 asyncio.TimeoutError，此时为了保证任务中协程完成可以使用上面说的 shield。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>:</span>\n     <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)\n     print(<span class=\"hljs-string\">\"in foo\"</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">eternity</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># Sleep for one hour</span>\n    <span class=\"hljs-keyword\">await</span> foo()\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">3600</span>)\n    print(<span class=\"hljs-string\">'yay!'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># Wait for at most 1 second</span>\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">await</span> asyncio.wait_for(asyncio.shield(eternity()), timeout=<span class=\"hljs-number\">1.0</span>)\n    <span class=\"hljs-keyword\">except</span> asyncio.TimeoutError:\n        print(<span class=\"hljs-string\">'timeout!'</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>输出：</p>\n    <pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">in</span> foo\ntimeout!\n</code></pre>\n    <p>按照上面的经验可知道，如果我们把 asyncio.shield 去掉之后，“in foo” 就无法输出了。</p>\n    <h3 id=\"-10\">协程配合线程</h3>\n    <h4 id=\"asynciorun_coroutine_threadsafe\">asyncio.run<em>coroutine</em>threadsafe</h4>\n    <p>该方法的语法如下：</p>\n    <pre><code class=\"hljs coffeescript\">asyncio.run_coroutine_threadsafe(coro, <span class=\"hljs-keyword\">loop</span>)\n</code></pre>\n    <p>其实在协程中也可以使用多线程,有时候我们需要在主线程中启动一个子线程去做别的任务，这个时候我们就要用到下面的方法了，先上一个流畅的 Python 中的代码。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span>  threading <span class=\"hljs-keyword\">import</span> Thread\n\nnow = <span class=\"hljs-keyword\">lambda</span>: time.time()\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">start_loop</span><span class=\"hljs-params\">(loop)</span>:</span>\n    asyncio.set_event_loop(loop)\n    loop.run_forever()\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">do_some_work</span><span class=\"hljs-params\">(x)</span>:</span>\n    print(<span class=\"hljs-string\">f'Waiting <span class=\"hljs-subst\">{x}</span>'</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(x)\n    print(<span class=\"hljs-string\">f'Done after <span class=\"hljs-subst\">{x}</span>s'</span>)\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">more_work</span><span class=\"hljs-params\">(x)</span>:</span>\n    print(<span class=\"hljs-string\">f'More work <span class=\"hljs-subst\">{x}</span>'</span>)\n    time.sleep(x)\n    print(<span class=\"hljs-string\">'Finished more work {x}'</span>)\n\n\nstart = now()\n<span class=\"hljs-comment\"># 主线程中创建一个 new_loop</span>\nnew_loop = asyncio.get_event_loop()\n<span class=\"hljs-comment\"># 创建子线程 在其中开启无限事件循环</span>\nt = Thread(target=start_loop, args=(new_loop,))\nt.start()\nprint(<span class=\"hljs-string\">f'TIME: <span class=\"hljs-subst\">{time.time() - start}</span>'</span>)\n\n<span class=\"hljs-comment\"># 在主线程中新注册协程对象</span>\n<span class=\"hljs-comment\"># 这样即可在子线程中进行事件循环的并发操作 同时主线程又不会被 block </span>\n<span class=\"hljs-comment\"># 一共执行的时间大概在 6 s 左右 </span>\nasyncio.run_coroutine_threadsafe(do_some_work(<span class=\"hljs-number\">6</span>), new_loop)\nasyncio.run_coroutine_threadsafe(do_some_work(<span class=\"hljs-number\">4</span>), new_loop)\n</code></pre>\n    <p>上述的例子，主线程中创建一个 <code>new_loop</code>，然后在另外的子线程中开启一个无限事件循环。主线程通过 <code>run_coroutine_threadsafe</code>\n        新注册协程对象。这样就能在子线程中进行事件循环的并发操作，同时主线程又不会被 block。一共执行的时间大概在 6s 左右。</p>\n    <h3 id=\"-11\">同步原语</h3>\n    <p>尽管 asyncio 应用通常作为单线程运行，不过仍被构建为并发应用。由于 I/O 以及其他外部事件的延迟和中断，每个协程或任务可能按一种不可预知的顺序执行。为了支持安全的并发执行，asyncio 包含了 threading\n        和 multiprocessing 模块中的一些底层原语的实现。</p>\n    <p>这里介绍两个经常用到的例子。</p>\n    <h4 id=\"queue\">队列（Queue）</h4>\n    <p>asyncio.Queue 为协程提供了一个先进先出的数据结构，这与线程的 queue.Queue 或进程的multiprocessing.Queue 很类似，下面先看一个简单的例子，它是一个非阻塞的队列。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span> asyncio <span class=\"hljs-keyword\">import</span> Queue\n\nqueue=Queue()\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span>:</span>\n        [queue.put_nowait(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>)]\n        <span class=\"hljs-keyword\">await</span> asyncio.create_task(work()) <span class=\"hljs-comment\">#put_nowait表示放入元素</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">work</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> queue.empty():<span class=\"hljs-comment\">#判断队列的元素是否为空</span>\n            num = queue.get_nowait()<span class=\"hljs-comment\">#获取元素</span>\n            print(<span class=\"hljs-string\">f\"获取数字:<span class=\"hljs-subst\">{num}</span>\"</span>)\n            queue.task_done()<span class=\"hljs-comment\">#告诉队列该任务处理完。</span>\n    <span class=\"hljs-keyword\">except</span> asyncio.CancelledError:\n        <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(start())\n</code></pre>\n    <p>输出结果:</p>\n    <pre><code class=\"hljs css\">获取数字<span class=\"hljs-selector-pseudo\">:1</span>\n获取数字<span class=\"hljs-selector-pseudo\">:2</span>\n获取数字<span class=\"hljs-selector-pseudo\">:3</span>\n获取数字<span class=\"hljs-selector-pseudo\">:4</span>\n获取数字<span class=\"hljs-selector-pseudo\">:5</span>\n获取数字<span class=\"hljs-selector-pseudo\">:6</span>\n获取数字<span class=\"hljs-selector-pseudo\">:7</span>\n获取数字<span class=\"hljs-selector-pseudo\">:8</span>\n获取数字<span class=\"hljs-selector-pseudo\">:9</span>\n</code></pre>\n    <p>在做爬虫的时候对于 url 的处理，经常会用到队列的操作。另外一个要说的同步原语就是信号量。</p>\n    <h2 id=\"semaphore\">信号量（Semaphore）</h2>\n    <p>简单说下什么是信号量，我们用停车场和车进行比喻。一个停车场一共就 5 个车位，所以我们知道可以同时容纳最多 5 辆车，这五个车位就是信号量。</p>\n    <p>然后说信号量的行为，当有车离开停车场的时候外面的车就会进来补，比如有 2 辆车离开，那么就可以再进来 2 辆车，依次类推，上面这个过程就是描述了信号量这个东西。</p>\n    <p>下面我们看如何在程序中使用。</p>\n    <p>asyncio.Semaphore 模块就是一个维持并发量的模块，我们用它起到一个限流的效果。首先来一段代码：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n\nsem=asyncio.Semaphore(<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">#信号量指定为3</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">branch</span><span class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> sem:  <span class=\"hljs-comment\">#通过异步上下文关键子控制并发量</span>\n        print(<span class=\"hljs-string\">f\"获取当前数字:<span class=\"hljs-subst\">{num}</span>\"</span>)\n        <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>)\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n\n     tasks=[asyncio.create_task(branch(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>)] <span class=\"hljs-comment\">#将协程封装成任务共10个</span>\n     <span class=\"hljs-keyword\">await</span> asyncio.wait(tasks) <span class=\"hljs-comment\">#执行这些任务</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>执行之后你会发现：</p>\n    <pre><code class=\"hljs makefile\"><span class=\"hljs-section\">获取当前数字:0</span>\n<span class=\"hljs-section\">获取当前数字:1</span>\n<span class=\"hljs-section\">获取当前数字:2</span>\nTask exception was never retrieved\n<span class=\"hljs-section\">future: &lt;Task finished name='Task-11' coro=&lt;branch() done, defined at /Users/chennan/Desktop/2019/aiochatuse/semaphoredemo.py:26&gt; exception=RuntimeError(\"Task &lt;Task pending name='Task-11' coro=&lt;branch() running at /Users/chennan/Desktop/2019/aiochatuse/semaphoredemo.py:27&gt; cb=[_wait.&lt;locals&gt;._on_completion() at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/tasks.py:478]&gt; got Future &lt;Future pending&gt; attached to a different loop\")&gt;</span>\n</code></pre>\n    <p>关键就是 attached to a different loop，这个地方说是当前的事件循环发生了改变，这个问题在Python3.6 的时候是不会出现的。</p>\n    <p>为什么 3.8 出错了？</p>\n    <p>这是因为：</p>\n    <p>我的信号量没有在循环内创建。也就是在 asyncio.run() 创建的循环之外创建了它们，因此它们使用 <code>events.get_event_loop()</code> 这就导致了新的事件循环产生。\n        asyncio.run() 创建一个新循环，然后在一个循环中创建的 future\n        不能在另一个循环中使用。所以问题就明确了，我们需要在循环之内创建。也就是我们需要定义一个全局变量，然后在主循环内部给其赋值。看到这，可能大家想到了 global，Python 3.7 增加了上下文变量 Context\n        Variables，至于为什么不用全局变量，因为可能会被其他协程修改，不安全，在这里也可以使用。</p>\n    <p>所以我们的代码变成了下面这个样子：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span> contextvars <span class=\"hljs-keyword\">import</span> ContextVar\n\nconcurrent=ContextVar(<span class=\"hljs-string\">\"concurrent\"</span>)<span class=\"hljs-comment\">#定义全局上下文管理器</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">branch</span><span class=\"hljs-params\">(num)</span>:</span>\n    sem=concurrent.get()<span class=\"hljs-comment\">#获取上下文关键字</span>\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> sem:\n        print(<span class=\"hljs-string\">f\"获取当前数字:<span class=\"hljs-subst\">{num}</span>\"</span>)\n        <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">0.5</span>) <span class=\"hljs-comment\">#为了看到明显的效果</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n     concurrent.set(asyncio.Semaphore(<span class=\"hljs-number\">3</span>)) <span class=\"hljs-comment\">#上下文管理器赋值</span>\n     tasks=[asyncio.create_task(branch(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>)]\n     <span class=\"hljs-keyword\">await</span> asyncio.wait(tasks)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    asyncio.run(main())\n</code></pre>\n    <p>然后我们再次输出：</p>\n    <pre><code class=\"hljs css\">获取当前数字<span class=\"hljs-selector-pseudo\">:0</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:1</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:2</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:3</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:4</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:5</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:6</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:7</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:8</span>\n获取当前数字<span class=\"hljs-selector-pseudo\">:9</span>\n</code></pre>\n    <p>可以看到程序每隔 3 组输出一次，这就达到了我们想要的效果了。</p>\n    </div>\n</body>\n</html>"},{"title":"work_0528","_content":"\ndone\n\n    确定源数据获取准确并补充channel_id, chl_bed_type, spl_bedtype_desc等信息;\n    \n    调整对供应商携程床型更新规则，BedType非0的不更新;\n    \n    确认UI数据与数据表数据是否一致;\n    \n    观察供应商携程拼接属性（窗、面积、吸烟）后的数据，确认数据分布情况，有了初步的解决方案\n\ndoing\n    \n    排查床型错误\n    \n    房型校验兼容供应商携程拼接属性\n    \nwarning\n    \n    本地测试使用Python3.6.6版本，加载有序字典OrderDict正常，符合预期\n    服务器使用Python3.5.2版本，加载有序字典OrderDict异常，不符合预期。\n    在有严格顺序要求的情况下，不要使用 \"字典\"结构。\n    这个问题并不是\"调用接口与调用方法所得结果不一致\"\n    而是\"同一个方法在本地与服务器所得结果不一致\"，排查原因为所用Python版本不一致导致。\n    \n    确定有严格顺序要求的情况下，不要使用 \"字典\"结构\n    \n    ","source":"_posts/work_coding/work0528.md","raw":"---\ntitle: work_0528\n---\n\ndone\n\n    确定源数据获取准确并补充channel_id, chl_bed_type, spl_bedtype_desc等信息;\n    \n    调整对供应商携程床型更新规则，BedType非0的不更新;\n    \n    确认UI数据与数据表数据是否一致;\n    \n    观察供应商携程拼接属性（窗、面积、吸烟）后的数据，确认数据分布情况，有了初步的解决方案\n\ndoing\n    \n    排查床型错误\n    \n    房型校验兼容供应商携程拼接属性\n    \nwarning\n    \n    本地测试使用Python3.6.6版本，加载有序字典OrderDict正常，符合预期\n    服务器使用Python3.5.2版本，加载有序字典OrderDict异常，不符合预期。\n    在有严格顺序要求的情况下，不要使用 \"字典\"结构。\n    这个问题并不是\"调用接口与调用方法所得结果不一致\"\n    而是\"同一个方法在本地与服务器所得结果不一致\"，排查原因为所用Python版本不一致导致。\n    \n    确定有严格顺序要求的情况下，不要使用 \"字典\"结构\n    \n    ","slug":"work_coding/work0528","published":1,"date":"2019-05-29T05:42:44.637Z","updated":"2019-05-29T05:42:44.637Z","_id":"cjwd4avuf000asv72h9jnril8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>done</p>\n<pre><code>确定源数据获取准确并补充channel_id, chl_bed_type, spl_bedtype_desc等信息;\n\n调整对供应商携程床型更新规则，BedType非0的不更新;\n\n确认UI数据与数据表数据是否一致;\n\n观察供应商携程拼接属性（窗、面积、吸烟）后的数据，确认数据分布情况，有了初步的解决方案\n</code></pre><p>doing</p>\n<pre><code>排查床型错误\n\n房型校验兼容供应商携程拼接属性\n</code></pre><p>warning</p>\n<pre><code>本地测试使用Python3.6.6版本，加载有序字典OrderDict正常，符合预期\n服务器使用Python3.5.2版本，加载有序字典OrderDict异常，不符合预期。\n在有严格顺序要求的情况下，不要使用 &quot;字典&quot;结构。\n这个问题并不是&quot;调用接口与调用方法所得结果不一致&quot;\n而是&quot;同一个方法在本地与服务器所得结果不一致&quot;，排查原因为所用Python版本不一致导致。\n\n确定有严格顺序要求的情况下，不要使用 &quot;字典&quot;结构\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>done</p>\n<pre><code>确定源数据获取准确并补充channel_id, chl_bed_type, spl_bedtype_desc等信息;\n\n调整对供应商携程床型更新规则，BedType非0的不更新;\n\n确认UI数据与数据表数据是否一致;\n\n观察供应商携程拼接属性（窗、面积、吸烟）后的数据，确认数据分布情况，有了初步的解决方案\n</code></pre><p>doing</p>\n<pre><code>排查床型错误\n\n房型校验兼容供应商携程拼接属性\n</code></pre><p>warning</p>\n<pre><code>本地测试使用Python3.6.6版本，加载有序字典OrderDict正常，符合预期\n服务器使用Python3.5.2版本，加载有序字典OrderDict异常，不符合预期。\n在有严格顺序要求的情况下，不要使用 &quot;字典&quot;结构。\n这个问题并不是&quot;调用接口与调用方法所得结果不一致&quot;\n而是&quot;同一个方法在本地与服务器所得结果不一致&quot;，排查原因为所用Python版本不一致导致。\n\n确定有严格顺序要求的情况下，不要使用 &quot;字典&quot;结构\n</code></pre>"},{"title":"work_0529","_content":"\ndone\n\n    解决床型分类功能在本地、服务器上有出入的BUG;\n    整理床型测试用例与单测工具;\n    发现GTA、DOTW、EAN部分房型数据有问题，需要核实\n        grid 93002564906\n        床型 1 twin bed\n        房型 Executive Harbour View Twin Suite with Lounge Access\n             行政海港景双床床套房 - 可享用行政贵宾廊\n             \n        grid 272064016602\n        床型 \n        房型 Deluxe Twin Bed\n             精致客房双床房\n             \n        grid 87691875005\n        床型\n        房型 DELUXE TWIN BED\n             豪华房\n    数据部反馈的几个床型分类错误\n\ndoing\n    \n    分析供应商反馈信息，进行代码修改\n    房型校验兼容现在的供应商携程房型数据\n    ","source":"_posts/work_coding/work0529.md","raw":"---\ntitle: work_0529\n---\n\ndone\n\n    解决床型分类功能在本地、服务器上有出入的BUG;\n    整理床型测试用例与单测工具;\n    发现GTA、DOTW、EAN部分房型数据有问题，需要核实\n        grid 93002564906\n        床型 1 twin bed\n        房型 Executive Harbour View Twin Suite with Lounge Access\n             行政海港景双床床套房 - 可享用行政贵宾廊\n             \n        grid 272064016602\n        床型 \n        房型 Deluxe Twin Bed\n             精致客房双床房\n             \n        grid 87691875005\n        床型\n        房型 DELUXE TWIN BED\n             豪华房\n    数据部反馈的几个床型分类错误\n\ndoing\n    \n    分析供应商反馈信息，进行代码修改\n    房型校验兼容现在的供应商携程房型数据\n    ","slug":"work_coding/work0529","published":1,"date":"2019-05-30T02:12:46.134Z","updated":"2019-05-30T02:12:46.134Z","_id":"cjwd4avug000bsv72jtg9hiyf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>done</p>\n<pre><code>解决床型分类功能在本地、服务器上有出入的BUG;\n整理床型测试用例与单测工具;\n发现GTA、DOTW、EAN部分房型数据有问题，需要核实\n    grid 93002564906\n    床型 1 twin bed\n    房型 Executive Harbour View Twin Suite with Lounge Access\n         行政海港景双床床套房 - 可享用行政贵宾廊\n\n    grid 272064016602\n    床型 \n    房型 Deluxe Twin Bed\n         精致客房双床房\n\n    grid 87691875005\n    床型\n    房型 DELUXE TWIN BED\n         豪华房\n数据部反馈的几个床型分类错误\n</code></pre><p>doing</p>\n<pre><code>分析供应商反馈信息，进行代码修改\n房型校验兼容现在的供应商携程房型数据\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>done</p>\n<pre><code>解决床型分类功能在本地、服务器上有出入的BUG;\n整理床型测试用例与单测工具;\n发现GTA、DOTW、EAN部分房型数据有问题，需要核实\n    grid 93002564906\n    床型 1 twin bed\n    房型 Executive Harbour View Twin Suite with Lounge Access\n         行政海港景双床床套房 - 可享用行政贵宾廊\n\n    grid 272064016602\n    床型 \n    房型 Deluxe Twin Bed\n         精致客房双床房\n\n    grid 87691875005\n    床型\n    房型 DELUXE TWIN BED\n         豪华房\n数据部反馈的几个床型分类错误\n</code></pre><p>doing</p>\n<pre><code>分析供应商反馈信息，进行代码修改\n房型校验兼容现在的供应商携程房型数据\n</code></pre>"},{"title":"work_0530","_content":"\ndone\n\n    解决携程房型拼接属性不兼容问题\n    \n        过滤属性\n![](../../img/190530解决携程房型拼接属性不兼容问题.jpg)\n\n\ndoing \n    \n    测试用例与单测工具","source":"_posts/work_coding/work0530.md","raw":"---\ntitle: work_0530\n---\n\ndone\n\n    解决携程房型拼接属性不兼容问题\n    \n        过滤属性\n![](../../img/190530解决携程房型拼接属性不兼容问题.jpg)\n\n\ndoing \n    \n    测试用例与单测工具","slug":"work_coding/work0530","published":1,"date":"2019-06-01T06:12:07.169Z","updated":"2019-06-01T06:12:07.170Z","_id":"cjwd4avuh000csv723v4rlb90","comments":1,"layout":"post","photos":[],"link":"","content":"<p>done</p>\n<pre><code>解决携程房型拼接属性不兼容问题\n\n    过滤属性\n</code></pre><p><img src=\"../../img/190530解决携程房型拼接属性不兼容问题.jpg\" alt></p>\n<p>doing </p>\n<pre><code>测试用例与单测工具\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>done</p>\n<pre><code>解决携程房型拼接属性不兼容问题\n\n    过滤属性\n</code></pre><p><img src=\"../../img/190530解决携程房型拼接属性不兼容问题.jpg\" alt></p>\n<p>doing </p>\n<pre><code>测试用例与单测工具\n</code></pre>"},{"title":"work_0531","_content":"\ndone\n    \n    针对供应商美团补充部分房型中文关键词\n    新增RoomAuto接口测试工具\n\ndoing\n\n    ","source":"_posts/work_coding/work_0531.md","raw":"---\ntitle: work_0531\n---\n\ndone\n    \n    针对供应商美团补充部分房型中文关键词\n    新增RoomAuto接口测试工具\n\ndoing\n\n    ","slug":"work_coding/work_0531","published":1,"date":"2019-05-31T10:19:52.747Z","updated":"2019-05-31T10:19:52.748Z","_id":"cjwd4avui000dsv72ggcnf2pg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>done</p>\n<pre><code>针对供应商美团补充部分房型中文关键词\n新增RoomAuto接口测试工具\n</code></pre><p>doing</p>\n","site":{"data":{}},"excerpt":"","more":"<p>done</p>\n<pre><code>针对供应商美团补充部分房型中文关键词\n新增RoomAuto接口测试工具\n</code></pre><p>doing</p>\n"},{"title":"投资问题","_content":"\n动态规划理论的提出\n    \n    最早是用来解决资源的有效分配问题。\n    在总资源量有限，要分配给若干个项目，\n    每个项目都有一个投入与收益的关系，\n    最终的问题是求如何规划在不同项目上的投资，\n    使得收益能够最大化。\n\n问题分析\n\n项目投资/回报表, 可投资600万元 \n\n![](https://images.gitbook.cn/eb8bacc0-eba9-11e8-af4c-6f74b09e97f2)\n\n显然，投资和收益不是线性等比例关系，否则的话，把钱全投到收益比最高的那个项目上就行了，也没啥好规划的了。这个算法也可以用穷举法，因为 N 不是固定的值，所以穷举时可以考虑用递归的方式实现，但是这一课我们考虑用动态规划法来设计这个算法。\n\n投资 N 个项目，看起来好像是毫无关系的离散事件，但是因为投资的总钱数是固定的，这就使它们有了关系。如果我们换个角度看投资的项目，把所有的投资看作是一个求最优解的操作，把对每个项目的投资看作这个操作的一个阶段，就成功地将其转换成了多阶段决策问题。如果要考虑用动态规划解决这个多阶段决策问题，就需要首先证明每个阶段的决策能满足无后向性的要求。在这之前，先要确定决策状态的定义。\n\n状态里肯定要有一个量是标识决策阶段（也就是当前决策的项目）的，不妨用 i 表示决策阶段。肯定还要有一个量是标识投资的钱数，如果我们定义 j 为当前项目（阶段）i 投入的钱数，那么状态 \nd\n[\ni\n,\nj\n]\nd[i,j] 就表示项目 i 投入 j 万元获取的最大收益。现在考虑一下这个状态的定义是否满足无后向性，我们假设给第 2 个项目投入 2 百万元时获取的最大收益为 \nd\n[\n2\n,\n2\n]\nd[2,2]，这个 \nd\n[\n2\n,\n2\n]\nd[2,2] 包含两部分收益，一部分是第 2 个项目投 2 百万元获得的 85 万元固定收益，另一部分是给另两个项目投入剩下的（M − 2）百万元获取的收益。很显然，这（M − 2）百万元在第 1 个项目中有很多种投资方法，每种方法获取的收益都不一样，这会使得通过不同的 d[1,x] 计算出来的 \nd\n[\n2\n,\n2\n]\nd[2,2] 各不相同，后续依赖 \nd\n[\n2\n,\n2\n]\nd[2,2] 的决策就如同建立在浮沙之上，因此不满足无后向性要求。\n\n单独对第 i 个项目定义状态不能满足无后向性要求，现在换个思路，我们将前 i 个项目合在一起考虑，即定义状态 \nd\n[\ni\n,\nj\n]\nd[i,j] 为给前 i 个项目投入 j 万元时能获得的最大收益。前 i 个项目无论怎么分配这 j 万元投资，总能得到一个确定的最大收益，并且这个最大收益在到达 \nd\n[\ni\n,\nj\n]\nd[i,j] 状态后不会因为之前的分配方式不同而变化，后续做决策时也不会变化，因此满足无后向性要求。","source":"_posts/训练营/动态规划05.md","raw":"---\ntitle: 投资问题\n---\n\n动态规划理论的提出\n    \n    最早是用来解决资源的有效分配问题。\n    在总资源量有限，要分配给若干个项目，\n    每个项目都有一个投入与收益的关系，\n    最终的问题是求如何规划在不同项目上的投资，\n    使得收益能够最大化。\n\n问题分析\n\n项目投资/回报表, 可投资600万元 \n\n![](https://images.gitbook.cn/eb8bacc0-eba9-11e8-af4c-6f74b09e97f2)\n\n显然，投资和收益不是线性等比例关系，否则的话，把钱全投到收益比最高的那个项目上就行了，也没啥好规划的了。这个算法也可以用穷举法，因为 N 不是固定的值，所以穷举时可以考虑用递归的方式实现，但是这一课我们考虑用动态规划法来设计这个算法。\n\n投资 N 个项目，看起来好像是毫无关系的离散事件，但是因为投资的总钱数是固定的，这就使它们有了关系。如果我们换个角度看投资的项目，把所有的投资看作是一个求最优解的操作，把对每个项目的投资看作这个操作的一个阶段，就成功地将其转换成了多阶段决策问题。如果要考虑用动态规划解决这个多阶段决策问题，就需要首先证明每个阶段的决策能满足无后向性的要求。在这之前，先要确定决策状态的定义。\n\n状态里肯定要有一个量是标识决策阶段（也就是当前决策的项目）的，不妨用 i 表示决策阶段。肯定还要有一个量是标识投资的钱数，如果我们定义 j 为当前项目（阶段）i 投入的钱数，那么状态 \nd\n[\ni\n,\nj\n]\nd[i,j] 就表示项目 i 投入 j 万元获取的最大收益。现在考虑一下这个状态的定义是否满足无后向性，我们假设给第 2 个项目投入 2 百万元时获取的最大收益为 \nd\n[\n2\n,\n2\n]\nd[2,2]，这个 \nd\n[\n2\n,\n2\n]\nd[2,2] 包含两部分收益，一部分是第 2 个项目投 2 百万元获得的 85 万元固定收益，另一部分是给另两个项目投入剩下的（M − 2）百万元获取的收益。很显然，这（M − 2）百万元在第 1 个项目中有很多种投资方法，每种方法获取的收益都不一样，这会使得通过不同的 d[1,x] 计算出来的 \nd\n[\n2\n,\n2\n]\nd[2,2] 各不相同，后续依赖 \nd\n[\n2\n,\n2\n]\nd[2,2] 的决策就如同建立在浮沙之上，因此不满足无后向性要求。\n\n单独对第 i 个项目定义状态不能满足无后向性要求，现在换个思路，我们将前 i 个项目合在一起考虑，即定义状态 \nd\n[\ni\n,\nj\n]\nd[i,j] 为给前 i 个项目投入 j 万元时能获得的最大收益。前 i 个项目无论怎么分配这 j 万元投资，总能得到一个确定的最大收益，并且这个最大收益在到达 \nd\n[\ni\n,\nj\n]\nd[i,j] 状态后不会因为之前的分配方式不同而变化，后续做决策时也不会变化，因此满足无后向性要求。","slug":"训练营/动态规划05","published":1,"date":"2019-04-15T07:02:00.836Z","updated":"2019-04-15T07:02:00.837Z","_id":"cjwd4bmoo000esv72y8dat94r","comments":1,"layout":"post","photos":[],"link":"","content":"<p>动态规划理论的提出</p>\n<pre><code>最早是用来解决资源的有效分配问题。\n在总资源量有限，要分配给若干个项目，\n每个项目都有一个投入与收益的关系，\n最终的问题是求如何规划在不同项目上的投资，\n使得收益能够最大化。\n</code></pre><p>问题分析</p>\n<p>项目投资/回报表, 可投资600万元 </p>\n<p><img src=\"https://images.gitbook.cn/eb8bacc0-eba9-11e8-af4c-6f74b09e97f2\" alt></p>\n<p>显然，投资和收益不是线性等比例关系，否则的话，把钱全投到收益比最高的那个项目上就行了，也没啥好规划的了。这个算法也可以用穷举法，因为 N 不是固定的值，所以穷举时可以考虑用递归的方式实现，但是这一课我们考虑用动态规划法来设计这个算法。</p>\n<p>投资 N 个项目，看起来好像是毫无关系的离散事件，但是因为投资的总钱数是固定的，这就使它们有了关系。如果我们换个角度看投资的项目，把所有的投资看作是一个求最优解的操作，把对每个项目的投资看作这个操作的一个阶段，就成功地将其转换成了多阶段决策问题。如果要考虑用动态规划解决这个多阶段决策问题，就需要首先证明每个阶段的决策能满足无后向性的要求。在这之前，先要确定决策状态的定义。</p>\n<p>状态里肯定要有一个量是标识决策阶段（也就是当前决策的项目）的，不妨用 i 表示决策阶段。肯定还要有一个量是标识投资的钱数，如果我们定义 j 为当前项目（阶段）i 投入的钱数，那么状态<br>d<br>[<br>i<br>,<br>j<br>]<br>d[i,j] 就表示项目 i 投入 j 万元获取的最大收益。现在考虑一下这个状态的定义是否满足无后向性，我们假设给第 2 个项目投入 2 百万元时获取的最大收益为<br>d<br>[<br>2<br>,<br>2<br>]<br>d[2,2]，这个<br>d<br>[<br>2<br>,<br>2<br>]<br>d[2,2] 包含两部分收益，一部分是第 2 个项目投 2 百万元获得的 85 万元固定收益，另一部分是给另两个项目投入剩下的（M − 2）百万元获取的收益。很显然，这（M − 2）百万元在第 1 个项目中有很多种投资方法，每种方法获取的收益都不一样，这会使得通过不同的 d[1,x] 计算出来的<br>d<br>[<br>2<br>,<br>2<br>]<br>d[2,2] 各不相同，后续依赖<br>d<br>[<br>2<br>,<br>2<br>]<br>d[2,2] 的决策就如同建立在浮沙之上，因此不满足无后向性要求。</p>\n<p>单独对第 i 个项目定义状态不能满足无后向性要求，现在换个思路，我们将前 i 个项目合在一起考虑，即定义状态<br>d<br>[<br>i<br>,<br>j<br>]<br>d[i,j] 为给前 i 个项目投入 j 万元时能获得的最大收益。前 i 个项目无论怎么分配这 j 万元投资，总能得到一个确定的最大收益，并且这个最大收益在到达<br>d<br>[<br>i<br>,<br>j<br>]<br>d[i,j] 状态后不会因为之前的分配方式不同而变化，后续做决策时也不会变化，因此满足无后向性要求。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>动态规划理论的提出</p>\n<pre><code>最早是用来解决资源的有效分配问题。\n在总资源量有限，要分配给若干个项目，\n每个项目都有一个投入与收益的关系，\n最终的问题是求如何规划在不同项目上的投资，\n使得收益能够最大化。\n</code></pre><p>问题分析</p>\n<p>项目投资/回报表, 可投资600万元 </p>\n<p><img src=\"https://images.gitbook.cn/eb8bacc0-eba9-11e8-af4c-6f74b09e97f2\" alt></p>\n<p>显然，投资和收益不是线性等比例关系，否则的话，把钱全投到收益比最高的那个项目上就行了，也没啥好规划的了。这个算法也可以用穷举法，因为 N 不是固定的值，所以穷举时可以考虑用递归的方式实现，但是这一课我们考虑用动态规划法来设计这个算法。</p>\n<p>投资 N 个项目，看起来好像是毫无关系的离散事件，但是因为投资的总钱数是固定的，这就使它们有了关系。如果我们换个角度看投资的项目，把所有的投资看作是一个求最优解的操作，把对每个项目的投资看作这个操作的一个阶段，就成功地将其转换成了多阶段决策问题。如果要考虑用动态规划解决这个多阶段决策问题，就需要首先证明每个阶段的决策能满足无后向性的要求。在这之前，先要确定决策状态的定义。</p>\n<p>状态里肯定要有一个量是标识决策阶段（也就是当前决策的项目）的，不妨用 i 表示决策阶段。肯定还要有一个量是标识投资的钱数，如果我们定义 j 为当前项目（阶段）i 投入的钱数，那么状态<br>d<br>[<br>i<br>,<br>j<br>]<br>d[i,j] 就表示项目 i 投入 j 万元获取的最大收益。现在考虑一下这个状态的定义是否满足无后向性，我们假设给第 2 个项目投入 2 百万元时获取的最大收益为<br>d<br>[<br>2<br>,<br>2<br>]<br>d[2,2]，这个<br>d<br>[<br>2<br>,<br>2<br>]<br>d[2,2] 包含两部分收益，一部分是第 2 个项目投 2 百万元获得的 85 万元固定收益，另一部分是给另两个项目投入剩下的（M − 2）百万元获取的收益。很显然，这（M − 2）百万元在第 1 个项目中有很多种投资方法，每种方法获取的收益都不一样，这会使得通过不同的 d[1,x] 计算出来的<br>d<br>[<br>2<br>,<br>2<br>]<br>d[2,2] 各不相同，后续依赖<br>d<br>[<br>2<br>,<br>2<br>]<br>d[2,2] 的决策就如同建立在浮沙之上，因此不满足无后向性要求。</p>\n<p>单独对第 i 个项目定义状态不能满足无后向性要求，现在换个思路，我们将前 i 个项目合在一起考虑，即定义状态<br>d<br>[<br>i<br>,<br>j<br>]<br>d[i,j] 为给前 i 个项目投入 j 万元时能获得的最大收益。前 i 个项目无论怎么分配这 j 万元投资，总能得到一个确定的最大收益，并且这个最大收益在到达<br>d<br>[<br>i<br>,<br>j<br>]<br>d[i,j] 状态后不会因为之前的分配方式不同而变化，后续做决策时也不会变化，因此满足无后向性要求。</p>\n"},{"title":"如何理解动态规划法","_content":"\n动态规划需要明确的三个问题：\n    \n    子问题与决策阶段状态的定义\n    状态递推关系式\n    边界条件\n\n动态规划\n    \n    带备忘录的穷举 + 分治\n\n上楼梯的备忘录升级\n题目来源：小米OJ第10题\n```python\nimport sys\n\nd = [0, 1, 2]\n\nN = 0\n\n\ndef dp():\n    for _ in range(2, N-len(d)+3):\n        d.append(d[-1] + d[-2])\n\n\nfor line in sys.stdin:\n    line = int(line.strip())\n    if N < line:\n        N = line\n        dp()\n    print(d[line])\n```","source":"_posts/训练营/动态规划法01.md","raw":"---\ntitle: 如何理解动态规划法\n---\n\n动态规划需要明确的三个问题：\n    \n    子问题与决策阶段状态的定义\n    状态递推关系式\n    边界条件\n\n动态规划\n    \n    带备忘录的穷举 + 分治\n\n上楼梯的备忘录升级\n题目来源：小米OJ第10题\n```python\nimport sys\n\nd = [0, 1, 2]\n\nN = 0\n\n\ndef dp():\n    for _ in range(2, N-len(d)+3):\n        d.append(d[-1] + d[-2])\n\n\nfor line in sys.stdin:\n    line = int(line.strip())\n    if N < line:\n        N = line\n        dp()\n    print(d[line])\n```","slug":"训练营/动态规划法01","published":1,"date":"2019-04-11T14:14:56.056Z","updated":"2019-04-11T14:14:56.057Z","_id":"cjwd4bmop000fsv72cfnlwehf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>动态规划需要明确的三个问题：</p>\n<pre><code>子问题与决策阶段状态的定义\n状态递推关系式\n边界条件\n</code></pre><p>动态规划</p>\n<pre><code>带备忘录的穷举 + 分治\n</code></pre><p>上楼梯的备忘录升级<br>题目来源：小米OJ第10题<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">d = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">N = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dp</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, N-len(d)+<span class=\"number\">3</span>):</span><br><span class=\"line\">        d.append(d[<span class=\"number\">-1</span>] + d[<span class=\"number\">-2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> sys.stdin:</span><br><span class=\"line\">    line = int(line.strip())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> N &lt; line:</span><br><span class=\"line\">        N = line</span><br><span class=\"line\">        dp()</span><br><span class=\"line\">    print(d[line])</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>动态规划需要明确的三个问题：</p>\n<pre><code>子问题与决策阶段状态的定义\n状态递推关系式\n边界条件\n</code></pre><p>动态规划</p>\n<pre><code>带备忘录的穷举 + 分治\n</code></pre><p>上楼梯的备忘录升级<br>题目来源：小米OJ第10题<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">d = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">N = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dp</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, N-len(d)+<span class=\"number\">3</span>):</span><br><span class=\"line\">        d.append(d[<span class=\"number\">-1</span>] + d[<span class=\"number\">-2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> sys.stdin:</span><br><span class=\"line\">    line = int(line.strip())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> N &lt; line:</span><br><span class=\"line\">        N = line</span><br><span class=\"line\">        dp()</span><br><span class=\"line\">    print(d[line])</span><br></pre></td></tr></table></figure></p>\n"},{"title":"算法设计常用思想之贪婪法","_content":"\n介绍\n    \n    贪婪法(Greedy Alogorithm), 又称贪心算法，\n    是寻找最优解的常用方法，\n    但是只有在很少的情况下可以得到真正的最优解，\n    如最短路径问题、图的最小生成树问题。\n    \n特点\n    \n    贪婪法简单、高效、省去了为找最优解可能需要的穷举操作，\n    可以得到与最优解比较接近的最优解，\n    通常作为其他算法的辅助算法来使用。\n    \n步骤\n    \n    1. 建立对问题精确描述的数学模型，\n       包括定义最优解的模型；\n    2. 将问题分解为一系列的子问题，\n       同时定义子问题的最优解结构；\n    3. 应用贪心原则确定每个子问题的局部最优解，\n       并根据最优解的模型，\n       用子问题的局部最优解来堆叠出全局最优解。\n    \n0-1背包问题 使用Python语言实现\n```python\n\"\"\"\n    思路\n    目标：在背包容量范围内，装入更多价值的物品\n    原则：p/w -> 价值质量密度\n         优先取出密度大的物品\n         已操作并可存放背包设置密度为 -1\n         已操作但不能放入背包的设置密度为 -2\n\"\"\"\nW_Max = 150\n\nWi = [35, 30, 60, 50, 40, 10, 25]\nPi = [10, 40, 30, 50, 35, 40, 30]\ndensity = [p / w for w, p in zip(Wi, Pi)]\n\nindex_list = []\nwhile 0 < max(density) <= W_Max:\n\n    Max = max(density)\n    index = density.index(Max)\n    if W_Max >= Wi[index]:\n        W_Max -= Wi[index]\n        density[index] = -1\n        index_list.append(index + 1)\n    else:\n        density[index] = -2\n\nprint(index_list)\n```\n\n需要刻意学习的算法\n    \n    Prim\n    Kruskal\n    Dijkstra ","source":"_posts/训练营/基础卡01-贪婪法.md","raw":"---\ntitle: 算法设计常用思想之贪婪法\n---\n\n介绍\n    \n    贪婪法(Greedy Alogorithm), 又称贪心算法，\n    是寻找最优解的常用方法，\n    但是只有在很少的情况下可以得到真正的最优解，\n    如最短路径问题、图的最小生成树问题。\n    \n特点\n    \n    贪婪法简单、高效、省去了为找最优解可能需要的穷举操作，\n    可以得到与最优解比较接近的最优解，\n    通常作为其他算法的辅助算法来使用。\n    \n步骤\n    \n    1. 建立对问题精确描述的数学模型，\n       包括定义最优解的模型；\n    2. 将问题分解为一系列的子问题，\n       同时定义子问题的最优解结构；\n    3. 应用贪心原则确定每个子问题的局部最优解，\n       并根据最优解的模型，\n       用子问题的局部最优解来堆叠出全局最优解。\n    \n0-1背包问题 使用Python语言实现\n```python\n\"\"\"\n    思路\n    目标：在背包容量范围内，装入更多价值的物品\n    原则：p/w -> 价值质量密度\n         优先取出密度大的物品\n         已操作并可存放背包设置密度为 -1\n         已操作但不能放入背包的设置密度为 -2\n\"\"\"\nW_Max = 150\n\nWi = [35, 30, 60, 50, 40, 10, 25]\nPi = [10, 40, 30, 50, 35, 40, 30]\ndensity = [p / w for w, p in zip(Wi, Pi)]\n\nindex_list = []\nwhile 0 < max(density) <= W_Max:\n\n    Max = max(density)\n    index = density.index(Max)\n    if W_Max >= Wi[index]:\n        W_Max -= Wi[index]\n        density[index] = -1\n        index_list.append(index + 1)\n    else:\n        density[index] = -2\n\nprint(index_list)\n```\n\n需要刻意学习的算法\n    \n    Prim\n    Kruskal\n    Dijkstra ","slug":"训练营/基础卡01-贪婪法","published":1,"date":"2019-04-03T04:46:50.040Z","updated":"2019-04-03T04:46:50.040Z","_id":"cjwd4bmoq000gsv7223rxz8mk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>介绍</p>\n<pre><code>贪婪法(Greedy Alogorithm), 又称贪心算法，\n是寻找最优解的常用方法，\n但是只有在很少的情况下可以得到真正的最优解，\n如最短路径问题、图的最小生成树问题。\n</code></pre><p>特点</p>\n<pre><code>贪婪法简单、高效、省去了为找最优解可能需要的穷举操作，\n可以得到与最优解比较接近的最优解，\n通常作为其他算法的辅助算法来使用。\n</code></pre><p>步骤</p>\n<pre><code>1. 建立对问题精确描述的数学模型，\n   包括定义最优解的模型；\n2. 将问题分解为一系列的子问题，\n   同时定义子问题的最优解结构；\n3. 应用贪心原则确定每个子问题的局部最优解，\n   并根据最优解的模型，\n   用子问题的局部最优解来堆叠出全局最优解。\n</code></pre><p>0-1背包问题 使用Python语言实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    思路</span></span><br><span class=\"line\"><span class=\"string\">    目标：在背包容量范围内，装入更多价值的物品</span></span><br><span class=\"line\"><span class=\"string\">    原则：p/w -&gt; 价值质量密度</span></span><br><span class=\"line\"><span class=\"string\">         优先取出密度大的物品</span></span><br><span class=\"line\"><span class=\"string\">         已操作并可存放背包设置密度为 -1</span></span><br><span class=\"line\"><span class=\"string\">         已操作但不能放入背包的设置密度为 -2</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">W_Max = <span class=\"number\">150</span></span><br><span class=\"line\"></span><br><span class=\"line\">Wi = [<span class=\"number\">35</span>, <span class=\"number\">30</span>, <span class=\"number\">60</span>, <span class=\"number\">50</span>, <span class=\"number\">40</span>, <span class=\"number\">10</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\">Pi = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>, <span class=\"number\">50</span>, <span class=\"number\">35</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">density = [p / w <span class=\"keyword\">for</span> w, p <span class=\"keyword\">in</span> zip(Wi, Pi)]</span><br><span class=\"line\"></span><br><span class=\"line\">index_list = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"number\">0</span> &lt; max(density) &lt;= W_Max:</span><br><span class=\"line\"></span><br><span class=\"line\">    Max = max(density)</span><br><span class=\"line\">    index = density.index(Max)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> W_Max &gt;= Wi[index]:</span><br><span class=\"line\">        W_Max -= Wi[index]</span><br><span class=\"line\">        density[index] = <span class=\"number\">-1</span></span><br><span class=\"line\">        index_list.append(index + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        density[index] = <span class=\"number\">-2</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(index_list)</span><br></pre></td></tr></table></figure></p>\n<p>需要刻意学习的算法</p>\n<pre><code>Prim\nKruskal\nDijkstra \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>介绍</p>\n<pre><code>贪婪法(Greedy Alogorithm), 又称贪心算法，\n是寻找最优解的常用方法，\n但是只有在很少的情况下可以得到真正的最优解，\n如最短路径问题、图的最小生成树问题。\n</code></pre><p>特点</p>\n<pre><code>贪婪法简单、高效、省去了为找最优解可能需要的穷举操作，\n可以得到与最优解比较接近的最优解，\n通常作为其他算法的辅助算法来使用。\n</code></pre><p>步骤</p>\n<pre><code>1. 建立对问题精确描述的数学模型，\n   包括定义最优解的模型；\n2. 将问题分解为一系列的子问题，\n   同时定义子问题的最优解结构；\n3. 应用贪心原则确定每个子问题的局部最优解，\n   并根据最优解的模型，\n   用子问题的局部最优解来堆叠出全局最优解。\n</code></pre><p>0-1背包问题 使用Python语言实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    思路</span></span><br><span class=\"line\"><span class=\"string\">    目标：在背包容量范围内，装入更多价值的物品</span></span><br><span class=\"line\"><span class=\"string\">    原则：p/w -&gt; 价值质量密度</span></span><br><span class=\"line\"><span class=\"string\">         优先取出密度大的物品</span></span><br><span class=\"line\"><span class=\"string\">         已操作并可存放背包设置密度为 -1</span></span><br><span class=\"line\"><span class=\"string\">         已操作但不能放入背包的设置密度为 -2</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">W_Max = <span class=\"number\">150</span></span><br><span class=\"line\"></span><br><span class=\"line\">Wi = [<span class=\"number\">35</span>, <span class=\"number\">30</span>, <span class=\"number\">60</span>, <span class=\"number\">50</span>, <span class=\"number\">40</span>, <span class=\"number\">10</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\">Pi = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>, <span class=\"number\">50</span>, <span class=\"number\">35</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">density = [p / w <span class=\"keyword\">for</span> w, p <span class=\"keyword\">in</span> zip(Wi, Pi)]</span><br><span class=\"line\"></span><br><span class=\"line\">index_list = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"number\">0</span> &lt; max(density) &lt;= W_Max:</span><br><span class=\"line\"></span><br><span class=\"line\">    Max = max(density)</span><br><span class=\"line\">    index = density.index(Max)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> W_Max &gt;= Wi[index]:</span><br><span class=\"line\">        W_Max -= Wi[index]</span><br><span class=\"line\">        density[index] = <span class=\"number\">-1</span></span><br><span class=\"line\">        index_list.append(index + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        density[index] = <span class=\"number\">-2</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(index_list)</span><br></pre></td></tr></table></figure></p>\n<p>需要刻意学习的算法</p>\n<pre><code>Prim\nKruskal\nDijkstra \n</code></pre>"},{"title":"算法设计常用思想之分治法","_content":"\n介绍\n    \n    分治，顾名思义，分而治之。\n    将无法着手解决的大问题分解为一系列规模较小的相同问题，\n    然后逐个解决小问题。\n    \n    只要是数学归纳法可以证明的问题，一般也可以应用分治法解决，\n    这是一个应用分治法的强烈信号。\n\n\n作用\n    \n    1. 通过分解问题，使得无法着手解决的大问题变成容易解决的小问题。\n    2. 通过减小问题的规模，降低解决问题的复杂度。\n    \n\n步骤\n    \n    1. 分解：将问题分解为若干个规模较小，\n            相互独立且与原问题形式相同的子问题，\n            确保各个子问题的解具有相同的子结构。\n    2. 解决：如果上一步分解得到的子问题可以解决，\n            则解决这些子问题，否则，\n            对每个子问题使用和上一步相同的方法再次分解，\n            然后求解分解后的子问题，\n            这个过程可能是个递归的过程。\n    3. 合并：将上一步解决的各个子问题的解通过某种规则合并起来，\n            得到原问题的解。\n    \n    分治法伪代码\n    T DivideAndConquer(P)\n    {\n        if(P 可以直接解决)\n        {\n            T <- P 的结果;\n            return T;\n        }\n    \n        将 P 分解为子问题{P1, P2,..., Pn};\n        for_each(Pi : {P1, P2,..., Pn})\n        {\n            ti <- DivideAndConquer(Pi); //递归解决子问题 Pi\n        }\n        T <- Merge(t1, t2,...,tn); //合并子问题的解\n    \n        return T;\n    }\n\n\n递归实现和分治法\n    \n    分解问题肯定不是一步到位，往往需要反复使用分治手段，\n    在多个层次上层层分解，这种分解的方法很自然地导致了递归方式的使用。\n    从算法的角度看，分治法得到的子问题和原问题是相同的，\n    当然可以使用相同的函数来解决，区别在于问题的规模和范围不同。\n    而通过特定的函数参数安排，使得同一函数可以解决不同规模的相同问题，\n    这是递归方法的基础。\n    \n使用Python语言实现 快速排序\n```python\ndef quick_sort(array, left, right):\n    if left < right:\n        mid = partition(array, left, right)\n        quick_sort(array, left,  mid-1)\n        quick_sort(array, mid+1, right)\n\ndef partition(array, left, right):\n    tmp = array[left]\n    while left < right:\n        while left < right and array[right] >= tmp:\n            right -= 1\n        array[left] = array[right]\n        while left < right and array[left] <= tmp:\n            left += 1\n        array[right] = array[left]\n    array[left] = tmp\n    return left\n```\n\n作业之 二分查找实现\n```python\n\"\"\"\n    二分查找\n\n    首先，假设表中元素是按升序排列，\n    将表中间位置记录的关键字与查找关键字比较，\n    如果两者相等，则查找成功；\n    否则利用中间位置记录将表分成前、后两个子表，\n    如果中间位置记录的关键字大于查找关键字，\n    则进一步查找前一子表，否则进一步查找后一子表。\n    重复以上过程，直到找到满足条件的记录，\n    使查找成功，或直到子表不存在为止，此时查找不成功。\n\"\"\"\n\ndef bin_search(data_list, val):\n    low = 0  # 最小数下标\n    high = len(data_list) - 1  # 最大数下标\n    while low <= high:\n        mid = (low + high) // 2  # 中间数下标\n        if data_list[mid] == val:  # 如果中间数下标等于val, 返回\n            return mid\n        elif data_list[mid] > val:  # 如果val在中间数左边, 移动high下标\n            high = mid - 1\n        else:  # 如果val在中间数右边, 移动low下标\n            low = mid + 1\n    return -1   # val不存在, 返回 -1\n     \n```\n    ","source":"_posts/训练营/基础卡02-分治法.md","raw":"---\ntitle: 算法设计常用思想之分治法\n---\n\n介绍\n    \n    分治，顾名思义，分而治之。\n    将无法着手解决的大问题分解为一系列规模较小的相同问题，\n    然后逐个解决小问题。\n    \n    只要是数学归纳法可以证明的问题，一般也可以应用分治法解决，\n    这是一个应用分治法的强烈信号。\n\n\n作用\n    \n    1. 通过分解问题，使得无法着手解决的大问题变成容易解决的小问题。\n    2. 通过减小问题的规模，降低解决问题的复杂度。\n    \n\n步骤\n    \n    1. 分解：将问题分解为若干个规模较小，\n            相互独立且与原问题形式相同的子问题，\n            确保各个子问题的解具有相同的子结构。\n    2. 解决：如果上一步分解得到的子问题可以解决，\n            则解决这些子问题，否则，\n            对每个子问题使用和上一步相同的方法再次分解，\n            然后求解分解后的子问题，\n            这个过程可能是个递归的过程。\n    3. 合并：将上一步解决的各个子问题的解通过某种规则合并起来，\n            得到原问题的解。\n    \n    分治法伪代码\n    T DivideAndConquer(P)\n    {\n        if(P 可以直接解决)\n        {\n            T <- P 的结果;\n            return T;\n        }\n    \n        将 P 分解为子问题{P1, P2,..., Pn};\n        for_each(Pi : {P1, P2,..., Pn})\n        {\n            ti <- DivideAndConquer(Pi); //递归解决子问题 Pi\n        }\n        T <- Merge(t1, t2,...,tn); //合并子问题的解\n    \n        return T;\n    }\n\n\n递归实现和分治法\n    \n    分解问题肯定不是一步到位，往往需要反复使用分治手段，\n    在多个层次上层层分解，这种分解的方法很自然地导致了递归方式的使用。\n    从算法的角度看，分治法得到的子问题和原问题是相同的，\n    当然可以使用相同的函数来解决，区别在于问题的规模和范围不同。\n    而通过特定的函数参数安排，使得同一函数可以解决不同规模的相同问题，\n    这是递归方法的基础。\n    \n使用Python语言实现 快速排序\n```python\ndef quick_sort(array, left, right):\n    if left < right:\n        mid = partition(array, left, right)\n        quick_sort(array, left,  mid-1)\n        quick_sort(array, mid+1, right)\n\ndef partition(array, left, right):\n    tmp = array[left]\n    while left < right:\n        while left < right and array[right] >= tmp:\n            right -= 1\n        array[left] = array[right]\n        while left < right and array[left] <= tmp:\n            left += 1\n        array[right] = array[left]\n    array[left] = tmp\n    return left\n```\n\n作业之 二分查找实现\n```python\n\"\"\"\n    二分查找\n\n    首先，假设表中元素是按升序排列，\n    将表中间位置记录的关键字与查找关键字比较，\n    如果两者相等，则查找成功；\n    否则利用中间位置记录将表分成前、后两个子表，\n    如果中间位置记录的关键字大于查找关键字，\n    则进一步查找前一子表，否则进一步查找后一子表。\n    重复以上过程，直到找到满足条件的记录，\n    使查找成功，或直到子表不存在为止，此时查找不成功。\n\"\"\"\n\ndef bin_search(data_list, val):\n    low = 0  # 最小数下标\n    high = len(data_list) - 1  # 最大数下标\n    while low <= high:\n        mid = (low + high) // 2  # 中间数下标\n        if data_list[mid] == val:  # 如果中间数下标等于val, 返回\n            return mid\n        elif data_list[mid] > val:  # 如果val在中间数左边, 移动high下标\n            high = mid - 1\n        else:  # 如果val在中间数右边, 移动low下标\n            low = mid + 1\n    return -1   # val不存在, 返回 -1\n     \n```\n    ","slug":"训练营/基础卡02-分治法","published":1,"date":"2019-04-01T14:12:59.024Z","updated":"2019-04-01T14:12:59.024Z","_id":"cjwd4bmor000hsv72ho0jhbe4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>介绍</p>\n<pre><code>分治，顾名思义，分而治之。\n将无法着手解决的大问题分解为一系列规模较小的相同问题，\n然后逐个解决小问题。\n\n只要是数学归纳法可以证明的问题，一般也可以应用分治法解决，\n这是一个应用分治法的强烈信号。\n</code></pre><p>作用</p>\n<pre><code>1. 通过分解问题，使得无法着手解决的大问题变成容易解决的小问题。\n2. 通过减小问题的规模，降低解决问题的复杂度。\n</code></pre><p>步骤</p>\n<pre><code>1. 分解：将问题分解为若干个规模较小，\n        相互独立且与原问题形式相同的子问题，\n        确保各个子问题的解具有相同的子结构。\n2. 解决：如果上一步分解得到的子问题可以解决，\n        则解决这些子问题，否则，\n        对每个子问题使用和上一步相同的方法再次分解，\n        然后求解分解后的子问题，\n        这个过程可能是个递归的过程。\n3. 合并：将上一步解决的各个子问题的解通过某种规则合并起来，\n        得到原问题的解。\n\n分治法伪代码\nT DivideAndConquer(P)\n{\n    if(P 可以直接解决)\n    {\n        T &lt;- P 的结果;\n        return T;\n    }\n\n    将 P 分解为子问题{P1, P2,..., Pn};\n    for_each(Pi : {P1, P2,..., Pn})\n    {\n        ti &lt;- DivideAndConquer(Pi); //递归解决子问题 Pi\n    }\n    T &lt;- Merge(t1, t2,...,tn); //合并子问题的解\n\n    return T;\n}\n</code></pre><p>递归实现和分治法</p>\n<pre><code>分解问题肯定不是一步到位，往往需要反复使用分治手段，\n在多个层次上层层分解，这种分解的方法很自然地导致了递归方式的使用。\n从算法的角度看，分治法得到的子问题和原问题是相同的，\n当然可以使用相同的函数来解决，区别在于问题的规模和范围不同。\n而通过特定的函数参数安排，使得同一函数可以解决不同规模的相同问题，\n这是递归方法的基础。\n</code></pre><p>使用Python语言实现 快速排序<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        mid = partition(array, left, right)</span><br><span class=\"line\">        quick_sort(array, left,  mid<span class=\"number\">-1</span>)</span><br><span class=\"line\">        quick_sort(array, mid+<span class=\"number\">1</span>, right)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partition</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    tmp = array[left]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> array[right] &gt;= tmp:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span></span><br><span class=\"line\">        array[left] = array[right]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> array[left] &lt;= tmp:</span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">        array[right] = array[left]</span><br><span class=\"line\">    array[left] = tmp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left</span><br></pre></td></tr></table></figure></p>\n<p>作业之 二分查找实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    二分查找</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    首先，假设表中元素是按升序排列，</span></span><br><span class=\"line\"><span class=\"string\">    将表中间位置记录的关键字与查找关键字比较，</span></span><br><span class=\"line\"><span class=\"string\">    如果两者相等，则查找成功；</span></span><br><span class=\"line\"><span class=\"string\">    否则利用中间位置记录将表分成前、后两个子表，</span></span><br><span class=\"line\"><span class=\"string\">    如果中间位置记录的关键字大于查找关键字，</span></span><br><span class=\"line\"><span class=\"string\">    则进一步查找前一子表，否则进一步查找后一子表。</span></span><br><span class=\"line\"><span class=\"string\">    重复以上过程，直到找到满足条件的记录，</span></span><br><span class=\"line\"><span class=\"string\">    使查找成功，或直到子表不存在为止，此时查找不成功。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bin_search</span><span class=\"params\">(data_list, val)</span>:</span></span><br><span class=\"line\">    low = <span class=\"number\">0</span>  <span class=\"comment\"># 最小数下标</span></span><br><span class=\"line\">    high = len(data_list) - <span class=\"number\">1</span>  <span class=\"comment\"># 最大数下标</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span>  <span class=\"comment\"># 中间数下标</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> data_list[mid] == val:  <span class=\"comment\"># 如果中间数下标等于val, 返回</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> data_list[mid] &gt; val:  <span class=\"comment\"># 如果val在中间数左边, 移动high下标</span></span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># 如果val在中间数右边, 移动low下标</span></span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>   <span class=\"comment\"># val不存在, 返回 -1</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>介绍</p>\n<pre><code>分治，顾名思义，分而治之。\n将无法着手解决的大问题分解为一系列规模较小的相同问题，\n然后逐个解决小问题。\n\n只要是数学归纳法可以证明的问题，一般也可以应用分治法解决，\n这是一个应用分治法的强烈信号。\n</code></pre><p>作用</p>\n<pre><code>1. 通过分解问题，使得无法着手解决的大问题变成容易解决的小问题。\n2. 通过减小问题的规模，降低解决问题的复杂度。\n</code></pre><p>步骤</p>\n<pre><code>1. 分解：将问题分解为若干个规模较小，\n        相互独立且与原问题形式相同的子问题，\n        确保各个子问题的解具有相同的子结构。\n2. 解决：如果上一步分解得到的子问题可以解决，\n        则解决这些子问题，否则，\n        对每个子问题使用和上一步相同的方法再次分解，\n        然后求解分解后的子问题，\n        这个过程可能是个递归的过程。\n3. 合并：将上一步解决的各个子问题的解通过某种规则合并起来，\n        得到原问题的解。\n\n分治法伪代码\nT DivideAndConquer(P)\n{\n    if(P 可以直接解决)\n    {\n        T &lt;- P 的结果;\n        return T;\n    }\n\n    将 P 分解为子问题{P1, P2,..., Pn};\n    for_each(Pi : {P1, P2,..., Pn})\n    {\n        ti &lt;- DivideAndConquer(Pi); //递归解决子问题 Pi\n    }\n    T &lt;- Merge(t1, t2,...,tn); //合并子问题的解\n\n    return T;\n}\n</code></pre><p>递归实现和分治法</p>\n<pre><code>分解问题肯定不是一步到位，往往需要反复使用分治手段，\n在多个层次上层层分解，这种分解的方法很自然地导致了递归方式的使用。\n从算法的角度看，分治法得到的子问题和原问题是相同的，\n当然可以使用相同的函数来解决，区别在于问题的规模和范围不同。\n而通过特定的函数参数安排，使得同一函数可以解决不同规模的相同问题，\n这是递归方法的基础。\n</code></pre><p>使用Python语言实现 快速排序<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        mid = partition(array, left, right)</span><br><span class=\"line\">        quick_sort(array, left,  mid<span class=\"number\">-1</span>)</span><br><span class=\"line\">        quick_sort(array, mid+<span class=\"number\">1</span>, right)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partition</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    tmp = array[left]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> array[right] &gt;= tmp:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span></span><br><span class=\"line\">        array[left] = array[right]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> array[left] &lt;= tmp:</span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">        array[right] = array[left]</span><br><span class=\"line\">    array[left] = tmp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left</span><br></pre></td></tr></table></figure></p>\n<p>作业之 二分查找实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    二分查找</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    首先，假设表中元素是按升序排列，</span></span><br><span class=\"line\"><span class=\"string\">    将表中间位置记录的关键字与查找关键字比较，</span></span><br><span class=\"line\"><span class=\"string\">    如果两者相等，则查找成功；</span></span><br><span class=\"line\"><span class=\"string\">    否则利用中间位置记录将表分成前、后两个子表，</span></span><br><span class=\"line\"><span class=\"string\">    如果中间位置记录的关键字大于查找关键字，</span></span><br><span class=\"line\"><span class=\"string\">    则进一步查找前一子表，否则进一步查找后一子表。</span></span><br><span class=\"line\"><span class=\"string\">    重复以上过程，直到找到满足条件的记录，</span></span><br><span class=\"line\"><span class=\"string\">    使查找成功，或直到子表不存在为止，此时查找不成功。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bin_search</span><span class=\"params\">(data_list, val)</span>:</span></span><br><span class=\"line\">    low = <span class=\"number\">0</span>  <span class=\"comment\"># 最小数下标</span></span><br><span class=\"line\">    high = len(data_list) - <span class=\"number\">1</span>  <span class=\"comment\"># 最大数下标</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span>  <span class=\"comment\"># 中间数下标</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> data_list[mid] == val:  <span class=\"comment\"># 如果中间数下标等于val, 返回</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> data_list[mid] &gt; val:  <span class=\"comment\"># 如果val在中间数左边, 移动high下标</span></span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># 如果val在中间数右边, 移动low下标</span></span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>   <span class=\"comment\"># val不存在, 返回 -1</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"算法设计常用思想之动态规划法","_content":"\n动态规划\n\n    是解决多阶段决策问题常用的最优化理论\n    想法简单，落地困难，\n    需要经由大量实践\n    积累对子问题的分解和\n    决策状态的定义的经验。\n    比穷举法高效，\n    但效率在很大程度上还是取决于问题本身\n    内在机制为广域搜索\n    需要满足条件：\n        1. 最优化原理\n        2. 子问题的\"无后向性\"\n\n最优化原理：\n\n    最优化原理其实就是问题的最优子结构的性质，\n    如果一个问题的最优子结构是不论过去状态和决策如何，\n    对前面的决策所形成的状态而言，\n    其后的决策必须构成最优策略。也就是说，\n    不管之前的决策是否是最优决策，\n    都必须保证从现在开始的决策是在之前决策基础上的最优决策，\n    则这样的最优子结构就符合最优化原理。\n\n无后向性：\n\n    所谓“无后向性”，就是当各个阶段的子问题确定以后，\n    对于某个特定阶段的子问题来说，\n    它之前各个阶段的子问题的决策只影响该阶段的决策，\n    对该阶段之后的决策不产生影响。\n    即前面的不被后面的影响。\n    \n\n步骤\n    \n    定义最优子问题（最优解的子结构）\n    定义状态（最优解的值）\n    定义决策和状态转换方程（定义计算最优解的值的方法）\n    确定边界条件\n    \n难点\n    \n    状态如何描述\n    状态转移方程如何定义\n\n最长公共子序列（LCS）问题 使用Python实现\n```python\ndef lcs(str1, str2):\n    length_1 = len(str1)\n    length_2 = len(str2)\n\n    dp = [[0] * (length_2 + 1) for _ in range(length_1 + 1)]\n\n    for i in range(1, length_1 + 1):\n\n        for j in range(1, length_2 + 1):\n\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[length_1][length_2]\n```","source":"_posts/训练营/基础卡03-动态规划.md","raw":"---\ntitle: 算法设计常用思想之动态规划法\n---\n\n动态规划\n\n    是解决多阶段决策问题常用的最优化理论\n    想法简单，落地困难，\n    需要经由大量实践\n    积累对子问题的分解和\n    决策状态的定义的经验。\n    比穷举法高效，\n    但效率在很大程度上还是取决于问题本身\n    内在机制为广域搜索\n    需要满足条件：\n        1. 最优化原理\n        2. 子问题的\"无后向性\"\n\n最优化原理：\n\n    最优化原理其实就是问题的最优子结构的性质，\n    如果一个问题的最优子结构是不论过去状态和决策如何，\n    对前面的决策所形成的状态而言，\n    其后的决策必须构成最优策略。也就是说，\n    不管之前的决策是否是最优决策，\n    都必须保证从现在开始的决策是在之前决策基础上的最优决策，\n    则这样的最优子结构就符合最优化原理。\n\n无后向性：\n\n    所谓“无后向性”，就是当各个阶段的子问题确定以后，\n    对于某个特定阶段的子问题来说，\n    它之前各个阶段的子问题的决策只影响该阶段的决策，\n    对该阶段之后的决策不产生影响。\n    即前面的不被后面的影响。\n    \n\n步骤\n    \n    定义最优子问题（最优解的子结构）\n    定义状态（最优解的值）\n    定义决策和状态转换方程（定义计算最优解的值的方法）\n    确定边界条件\n    \n难点\n    \n    状态如何描述\n    状态转移方程如何定义\n\n最长公共子序列（LCS）问题 使用Python实现\n```python\ndef lcs(str1, str2):\n    length_1 = len(str1)\n    length_2 = len(str2)\n\n    dp = [[0] * (length_2 + 1) for _ in range(length_1 + 1)]\n\n    for i in range(1, length_1 + 1):\n\n        for j in range(1, length_2 + 1):\n\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[length_1][length_2]\n```","slug":"训练营/基础卡03-动态规划","published":1,"date":"2019-04-03T07:17:37.311Z","updated":"2019-04-03T07:17:37.311Z","_id":"cjwd4bmot000isv72f4nbh7bx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>动态规划</p>\n<pre><code>是解决多阶段决策问题常用的最优化理论\n想法简单，落地困难，\n需要经由大量实践\n积累对子问题的分解和\n决策状态的定义的经验。\n比穷举法高效，\n但效率在很大程度上还是取决于问题本身\n内在机制为广域搜索\n需要满足条件：\n    1. 最优化原理\n    2. 子问题的&quot;无后向性&quot;\n</code></pre><p>最优化原理：</p>\n<pre><code>最优化原理其实就是问题的最优子结构的性质，\n如果一个问题的最优子结构是不论过去状态和决策如何，\n对前面的决策所形成的状态而言，\n其后的决策必须构成最优策略。也就是说，\n不管之前的决策是否是最优决策，\n都必须保证从现在开始的决策是在之前决策基础上的最优决策，\n则这样的最优子结构就符合最优化原理。\n</code></pre><p>无后向性：</p>\n<pre><code>所谓“无后向性”，就是当各个阶段的子问题确定以后，\n对于某个特定阶段的子问题来说，\n它之前各个阶段的子问题的决策只影响该阶段的决策，\n对该阶段之后的决策不产生影响。\n即前面的不被后面的影响。\n</code></pre><p>步骤</p>\n<pre><code>定义最优子问题（最优解的子结构）\n定义状态（最优解的值）\n定义决策和状态转换方程（定义计算最优解的值的方法）\n确定边界条件\n</code></pre><p>难点</p>\n<pre><code>状态如何描述\n状态转移方程如何定义\n</code></pre><p>最长公共子序列（LCS）问题 使用Python实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lcs</span><span class=\"params\">(str1, str2)</span>:</span></span><br><span class=\"line\">    length_1 = len(str1)</span><br><span class=\"line\">    length_2 = len(str2)</span><br><span class=\"line\"></span><br><span class=\"line\">    dp = [[<span class=\"number\">0</span>] * (length_2 + <span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(length_1 + <span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, length_1 + <span class=\"number\">1</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, length_2 + <span class=\"number\">1</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> str1[i - <span class=\"number\">1</span>] == str2[j - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                dp[i][j] = max(dp[i - <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[length_1][length_2]</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>动态规划</p>\n<pre><code>是解决多阶段决策问题常用的最优化理论\n想法简单，落地困难，\n需要经由大量实践\n积累对子问题的分解和\n决策状态的定义的经验。\n比穷举法高效，\n但效率在很大程度上还是取决于问题本身\n内在机制为广域搜索\n需要满足条件：\n    1. 最优化原理\n    2. 子问题的&quot;无后向性&quot;\n</code></pre><p>最优化原理：</p>\n<pre><code>最优化原理其实就是问题的最优子结构的性质，\n如果一个问题的最优子结构是不论过去状态和决策如何，\n对前面的决策所形成的状态而言，\n其后的决策必须构成最优策略。也就是说，\n不管之前的决策是否是最优决策，\n都必须保证从现在开始的决策是在之前决策基础上的最优决策，\n则这样的最优子结构就符合最优化原理。\n</code></pre><p>无后向性：</p>\n<pre><code>所谓“无后向性”，就是当各个阶段的子问题确定以后，\n对于某个特定阶段的子问题来说，\n它之前各个阶段的子问题的决策只影响该阶段的决策，\n对该阶段之后的决策不产生影响。\n即前面的不被后面的影响。\n</code></pre><p>步骤</p>\n<pre><code>定义最优子问题（最优解的子结构）\n定义状态（最优解的值）\n定义决策和状态转换方程（定义计算最优解的值的方法）\n确定边界条件\n</code></pre><p>难点</p>\n<pre><code>状态如何描述\n状态转移方程如何定义\n</code></pre><p>最长公共子序列（LCS）问题 使用Python实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lcs</span><span class=\"params\">(str1, str2)</span>:</span></span><br><span class=\"line\">    length_1 = len(str1)</span><br><span class=\"line\">    length_2 = len(str2)</span><br><span class=\"line\"></span><br><span class=\"line\">    dp = [[<span class=\"number\">0</span>] * (length_2 + <span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(length_1 + <span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, length_1 + <span class=\"number\">1</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, length_2 + <span class=\"number\">1</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> str1[i - <span class=\"number\">1</span>] == str2[j - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                dp[i][j] = max(dp[i - <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[length_1][length_2]</span><br></pre></td></tr></table></figure></p>\n"},{"title":"算法设计常用思想之穷举法","_content":"\n穷举法\n    \n    是一种在问题域的解空间中对所有可能的解穷举搜索，\n    并根据条件选择最优解的方法的总称。\n    \n    穷举法作为计算机算法使用时，\n    就是依赖计算机不知疲倦的计算能力。\n    \n    穷举法作为一种算法模式，\n    也常常与其他模式配合使用，\n    成为某个具体算法中的一部分。\n\n\n难点\n    \n    1. 解空间或状态空间的定义没有具体的模式，\n       不同问题的解空间形式上也差异巨大\n    2. 针对不同问题要选择不同的搜索算法，\n       有很多问题的搜索算法并不直观，\n       需要对问题做细致的分析并且依靠丰富的经验才能设计出来。\n    3. 在问题的规模大到一定范围时，穷举法只是理论可行。\n       在这种不能对解空间进行完全搜索时，\n       需要对搜索算法进行评估，\n       并确定一些收敛原则。   \n       \n步骤\n\n    1. 确定问题的解（或状态）的定义、\n       解空间的范围以及正确解的判定条件。\n    2. 根据解空间的特点来选择搜索策略，\n       逐个检验解空间中的候选解是否正确。\n    \n\n解空间的定义\n    \n    解空间就是全部可能的候选解的一个约束范围，\n    确定问题的解就在这个约束范围内，\n    将搜索策略应用到这个约束范围就可以找到问题的解。\n\n\n穷举解空间的策略\n    \n    1. 盲目搜索\n        不带任何假设的穷举搜索，\n        把所有可能的解都检查一遍。\n        -- 广度优先\n            需要额外的存储空间，则应考虑额外空间的规模\n        -- 深度优先\n            容易陷入死循环，则要做状态循环的判断和避免\n    \n    2. 启发式搜索\n        由启发函数策动有目的的搜索行为，\n        这些策略和依据通常能够加快算法的收敛速度，\n        或能够划定一个更小的、最有可能出现解的空间上搜索。\n        -- 假设解空间符合正态分布\n            可以从分布中间值开始向两边搜索。\n     \n    3. 剪枝策略\n        在对解空间穷举搜索时，\n        如果有一些状态节点可以根据问题所提供的信息，\n        明确地判定为不可能演化出最优解，\n        则可以跳过此状态节点的遍历。\n        \n\n剪枝和启发\n\n    剪枝是对已产生的结果，根据最优解的判断条件，\n        确定在该方向上不可能存在最优解，\n        从而放弃对这个方向的搜素。\n        \n    启发是根据启发函数给出的评估值，\n        在结果出来之前就朝着最优解方向搜索\n    \n\n评估与收敛\n    \n    收敛原则是只要能找到一个比较好的解就返回，\n    根据解的评估判断是否需要继续下一次搜索。  \n\n\n百钱买百鸡 Python语言实现\n```python\np_m = 5\np_w = 3\np_x = 1 / 3\n\nn = 100\nfor i in range(0, n // p_m):\n\n    for j in range(0, n // p_w):\n\n        if i * p_m + j * p_w + (100 - i - j) * p_x == 100:\n            print(i, j, 100 - i - j)\n\n```\n\n作业之 鸡兔同笼\n```python\nt = 50\nj = 120\nji = 2\ntu = 4\n\nfor tu_num in range(j // tu):\n\n    if tu_num * tu + (t - tu_num) * ji == j:\n        print(tu_num, t - tu_num)\n\n```","source":"_posts/训练营/基础卡04-穷举法.md","raw":"---\ntitle: 算法设计常用思想之穷举法\n---\n\n穷举法\n    \n    是一种在问题域的解空间中对所有可能的解穷举搜索，\n    并根据条件选择最优解的方法的总称。\n    \n    穷举法作为计算机算法使用时，\n    就是依赖计算机不知疲倦的计算能力。\n    \n    穷举法作为一种算法模式，\n    也常常与其他模式配合使用，\n    成为某个具体算法中的一部分。\n\n\n难点\n    \n    1. 解空间或状态空间的定义没有具体的模式，\n       不同问题的解空间形式上也差异巨大\n    2. 针对不同问题要选择不同的搜索算法，\n       有很多问题的搜索算法并不直观，\n       需要对问题做细致的分析并且依靠丰富的经验才能设计出来。\n    3. 在问题的规模大到一定范围时，穷举法只是理论可行。\n       在这种不能对解空间进行完全搜索时，\n       需要对搜索算法进行评估，\n       并确定一些收敛原则。   \n       \n步骤\n\n    1. 确定问题的解（或状态）的定义、\n       解空间的范围以及正确解的判定条件。\n    2. 根据解空间的特点来选择搜索策略，\n       逐个检验解空间中的候选解是否正确。\n    \n\n解空间的定义\n    \n    解空间就是全部可能的候选解的一个约束范围，\n    确定问题的解就在这个约束范围内，\n    将搜索策略应用到这个约束范围就可以找到问题的解。\n\n\n穷举解空间的策略\n    \n    1. 盲目搜索\n        不带任何假设的穷举搜索，\n        把所有可能的解都检查一遍。\n        -- 广度优先\n            需要额外的存储空间，则应考虑额外空间的规模\n        -- 深度优先\n            容易陷入死循环，则要做状态循环的判断和避免\n    \n    2. 启发式搜索\n        由启发函数策动有目的的搜索行为，\n        这些策略和依据通常能够加快算法的收敛速度，\n        或能够划定一个更小的、最有可能出现解的空间上搜索。\n        -- 假设解空间符合正态分布\n            可以从分布中间值开始向两边搜索。\n     \n    3. 剪枝策略\n        在对解空间穷举搜索时，\n        如果有一些状态节点可以根据问题所提供的信息，\n        明确地判定为不可能演化出最优解，\n        则可以跳过此状态节点的遍历。\n        \n\n剪枝和启发\n\n    剪枝是对已产生的结果，根据最优解的判断条件，\n        确定在该方向上不可能存在最优解，\n        从而放弃对这个方向的搜素。\n        \n    启发是根据启发函数给出的评估值，\n        在结果出来之前就朝着最优解方向搜索\n    \n\n评估与收敛\n    \n    收敛原则是只要能找到一个比较好的解就返回，\n    根据解的评估判断是否需要继续下一次搜索。  \n\n\n百钱买百鸡 Python语言实现\n```python\np_m = 5\np_w = 3\np_x = 1 / 3\n\nn = 100\nfor i in range(0, n // p_m):\n\n    for j in range(0, n // p_w):\n\n        if i * p_m + j * p_w + (100 - i - j) * p_x == 100:\n            print(i, j, 100 - i - j)\n\n```\n\n作业之 鸡兔同笼\n```python\nt = 50\nj = 120\nji = 2\ntu = 4\n\nfor tu_num in range(j // tu):\n\n    if tu_num * tu + (t - tu_num) * ji == j:\n        print(tu_num, t - tu_num)\n\n```","slug":"训练营/基础卡04-穷举法","published":1,"date":"2019-04-03T06:15:56.590Z","updated":"2019-04-03T06:15:56.591Z","_id":"cjwd4bmot000jsv72bpwwslt1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>穷举法</p>\n<pre><code>是一种在问题域的解空间中对所有可能的解穷举搜索，\n并根据条件选择最优解的方法的总称。\n\n穷举法作为计算机算法使用时，\n就是依赖计算机不知疲倦的计算能力。\n\n穷举法作为一种算法模式，\n也常常与其他模式配合使用，\n成为某个具体算法中的一部分。\n</code></pre><p>难点</p>\n<pre><code>1. 解空间或状态空间的定义没有具体的模式，\n   不同问题的解空间形式上也差异巨大\n2. 针对不同问题要选择不同的搜索算法，\n   有很多问题的搜索算法并不直观，\n   需要对问题做细致的分析并且依靠丰富的经验才能设计出来。\n3. 在问题的规模大到一定范围时，穷举法只是理论可行。\n   在这种不能对解空间进行完全搜索时，\n   需要对搜索算法进行评估，\n   并确定一些收敛原则。   \n</code></pre><p>步骤</p>\n<pre><code>1. 确定问题的解（或状态）的定义、\n   解空间的范围以及正确解的判定条件。\n2. 根据解空间的特点来选择搜索策略，\n   逐个检验解空间中的候选解是否正确。\n</code></pre><p>解空间的定义</p>\n<pre><code>解空间就是全部可能的候选解的一个约束范围，\n确定问题的解就在这个约束范围内，\n将搜索策略应用到这个约束范围就可以找到问题的解。\n</code></pre><p>穷举解空间的策略</p>\n<pre><code>1. 盲目搜索\n    不带任何假设的穷举搜索，\n    把所有可能的解都检查一遍。\n    -- 广度优先\n        需要额外的存储空间，则应考虑额外空间的规模\n    -- 深度优先\n        容易陷入死循环，则要做状态循环的判断和避免\n\n2. 启发式搜索\n    由启发函数策动有目的的搜索行为，\n    这些策略和依据通常能够加快算法的收敛速度，\n    或能够划定一个更小的、最有可能出现解的空间上搜索。\n    -- 假设解空间符合正态分布\n        可以从分布中间值开始向两边搜索。\n\n3. 剪枝策略\n    在对解空间穷举搜索时，\n    如果有一些状态节点可以根据问题所提供的信息，\n    明确地判定为不可能演化出最优解，\n    则可以跳过此状态节点的遍历。\n</code></pre><p>剪枝和启发</p>\n<pre><code>剪枝是对已产生的结果，根据最优解的判断条件，\n    确定在该方向上不可能存在最优解，\n    从而放弃对这个方向的搜素。\n\n启发是根据启发函数给出的评估值，\n    在结果出来之前就朝着最优解方向搜索\n</code></pre><p>评估与收敛</p>\n<pre><code>收敛原则是只要能找到一个比较好的解就返回，\n根据解的评估判断是否需要继续下一次搜索。  \n</code></pre><p>百钱买百鸡 Python语言实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p_m = <span class=\"number\">5</span></span><br><span class=\"line\">p_w = <span class=\"number\">3</span></span><br><span class=\"line\">p_x = <span class=\"number\">1</span> / <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, n // p_m):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, n // p_w):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i * p_m + j * p_w + (<span class=\"number\">100</span> - i - j) * p_x == <span class=\"number\">100</span>:</span><br><span class=\"line\">            print(i, j, <span class=\"number\">100</span> - i - j)</span><br></pre></td></tr></table></figure></p>\n<p>作业之 鸡兔同笼<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t = <span class=\"number\">50</span></span><br><span class=\"line\">j = <span class=\"number\">120</span></span><br><span class=\"line\">ji = <span class=\"number\">2</span></span><br><span class=\"line\">tu = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> tu_num <span class=\"keyword\">in</span> range(j // tu):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> tu_num * tu + (t - tu_num) * ji == j:</span><br><span class=\"line\">        print(tu_num, t - tu_num)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>穷举法</p>\n<pre><code>是一种在问题域的解空间中对所有可能的解穷举搜索，\n并根据条件选择最优解的方法的总称。\n\n穷举法作为计算机算法使用时，\n就是依赖计算机不知疲倦的计算能力。\n\n穷举法作为一种算法模式，\n也常常与其他模式配合使用，\n成为某个具体算法中的一部分。\n</code></pre><p>难点</p>\n<pre><code>1. 解空间或状态空间的定义没有具体的模式，\n   不同问题的解空间形式上也差异巨大\n2. 针对不同问题要选择不同的搜索算法，\n   有很多问题的搜索算法并不直观，\n   需要对问题做细致的分析并且依靠丰富的经验才能设计出来。\n3. 在问题的规模大到一定范围时，穷举法只是理论可行。\n   在这种不能对解空间进行完全搜索时，\n   需要对搜索算法进行评估，\n   并确定一些收敛原则。   \n</code></pre><p>步骤</p>\n<pre><code>1. 确定问题的解（或状态）的定义、\n   解空间的范围以及正确解的判定条件。\n2. 根据解空间的特点来选择搜索策略，\n   逐个检验解空间中的候选解是否正确。\n</code></pre><p>解空间的定义</p>\n<pre><code>解空间就是全部可能的候选解的一个约束范围，\n确定问题的解就在这个约束范围内，\n将搜索策略应用到这个约束范围就可以找到问题的解。\n</code></pre><p>穷举解空间的策略</p>\n<pre><code>1. 盲目搜索\n    不带任何假设的穷举搜索，\n    把所有可能的解都检查一遍。\n    -- 广度优先\n        需要额外的存储空间，则应考虑额外空间的规模\n    -- 深度优先\n        容易陷入死循环，则要做状态循环的判断和避免\n\n2. 启发式搜索\n    由启发函数策动有目的的搜索行为，\n    这些策略和依据通常能够加快算法的收敛速度，\n    或能够划定一个更小的、最有可能出现解的空间上搜索。\n    -- 假设解空间符合正态分布\n        可以从分布中间值开始向两边搜索。\n\n3. 剪枝策略\n    在对解空间穷举搜索时，\n    如果有一些状态节点可以根据问题所提供的信息，\n    明确地判定为不可能演化出最优解，\n    则可以跳过此状态节点的遍历。\n</code></pre><p>剪枝和启发</p>\n<pre><code>剪枝是对已产生的结果，根据最优解的判断条件，\n    确定在该方向上不可能存在最优解，\n    从而放弃对这个方向的搜素。\n\n启发是根据启发函数给出的评估值，\n    在结果出来之前就朝着最优解方向搜索\n</code></pre><p>评估与收敛</p>\n<pre><code>收敛原则是只要能找到一个比较好的解就返回，\n根据解的评估判断是否需要继续下一次搜索。  \n</code></pre><p>百钱买百鸡 Python语言实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p_m = <span class=\"number\">5</span></span><br><span class=\"line\">p_w = <span class=\"number\">3</span></span><br><span class=\"line\">p_x = <span class=\"number\">1</span> / <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, n // p_m):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, n // p_w):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i * p_m + j * p_w + (<span class=\"number\">100</span> - i - j) * p_x == <span class=\"number\">100</span>:</span><br><span class=\"line\">            print(i, j, <span class=\"number\">100</span> - i - j)</span><br></pre></td></tr></table></figure></p>\n<p>作业之 鸡兔同笼<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t = <span class=\"number\">50</span></span><br><span class=\"line\">j = <span class=\"number\">120</span></span><br><span class=\"line\">ji = <span class=\"number\">2</span></span><br><span class=\"line\">tu = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> tu_num <span class=\"keyword\">in</span> range(j // tu):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> tu_num * tu + (t - tu_num) * ji == j:</span><br><span class=\"line\">        print(tu_num, t - tu_num)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"算法设计常用思想之迭代法","_content":"\n迭代法\n\n    数字意义上是一种不断用变量的旧值递推新值的过程，\n    其相应的迭代算法也是用计算机解决问题的一种基本方法。\n    \n    迭代法，还有一种更广泛的观点，\n    就是所有使用了迭代思想的算法实现，\n    都可以理解为是使用了迭代法。\n    从这个角度理解，\n    除了线性动态规划算法、\n    遗传算法、退火算法等算法\n    也可归入迭代法的范畴。\n    \n迭代法的实现\n\n    确定迭代变量：\n        迭代变量一般就是要求解的问题的解，\n        利用迭代递推公式可以不断地由旧值递推出新值。\n        根据问题的不同，迭代变量可以是一个，也可以是多个。\n        确定迭代变量，通常还要根据迭代递推关系给出迭代变量的初始值，\n        这一点也很重要。\n    \n    确定迭代递推关系：\n        迭代递推关系是根据旧值计算新值的关系或公式，\n        这是迭代法实现的关键，如果不能确定迭代关系，\n        则无法用迭代法实现算法。\n    \n    确定迭代终止条件：\n        迭代终止条件是控制迭代过程退出的关键条件。\n        迭代不可能无休止地进行，必须设置迭代终止条件，\n        在适当的时候退出迭代。\n        \n        迭代终止条件一般有三种假设：\n        其一是迭代变量已经求得问题的精确值；\n        其二是迭代变量无法得到精确值，\n        但是某个迭代的值的精度已经满足要求；\n        其三是指定明确的迭代计算次数。\n        \n        迭代算法的具体实现，可根据问题的类型选择迭代终止条件。\n        一般情况下，为了防止迭代关系在某个区间上发散（不收敛）\n        使得算法进入死循环，都会把第三个条件作为异常退出条件\n        和其他迭代终止条件配合使用，也就是说，\n        即使无法得到符合条件的解，\n        只要迭代计算次数达到某个限制值，\n        也退出迭代过程。\n\n    \n常见的迭代法\n    \n    梯度法\n    最小二乘法\n    牛顿迭代法\n\n迭代法和递推法\n\n    迭代法作为很多数学问题的求解算法，\n    是解决数学问题的一种常用的算法模式，\n    可以独立构成解决问题的算法。\n    \n    递推法作为一种设计算法的常用思想，\n    没有固定的算法实现模式，\n    通常是与其他算法模式配合形成算法实现。\n    比如线性动态规划问题，\n    一般都有明确的子问题最优解递推公式，\n    递推思想常常作为算法实现的一部分\n    融入到动态规划算法的实现中。\n\n使用Python实现 求根函数 并与内置求根函数对比\n```python\nimport math\n\n\ndef like_sqrt(num: int):\n    xi = num / 2\n    xt = xi\n    xi = (xt + num / xt) / 2\n    count = 1\n    eps = 0.1 ** 6\n\n    while abs(xi - xt) > eps:\n        xt = xi\n        xi = (xt + num / xt) / 2\n\n        count += 1\n    print(xi)\n\n\nprint(math.sqrt(3))\nlike_sqrt(3)\n```","source":"_posts/训练营/基础卡05-迭代法.md","raw":"---\ntitle: 算法设计常用思想之迭代法\n---\n\n迭代法\n\n    数字意义上是一种不断用变量的旧值递推新值的过程，\n    其相应的迭代算法也是用计算机解决问题的一种基本方法。\n    \n    迭代法，还有一种更广泛的观点，\n    就是所有使用了迭代思想的算法实现，\n    都可以理解为是使用了迭代法。\n    从这个角度理解，\n    除了线性动态规划算法、\n    遗传算法、退火算法等算法\n    也可归入迭代法的范畴。\n    \n迭代法的实现\n\n    确定迭代变量：\n        迭代变量一般就是要求解的问题的解，\n        利用迭代递推公式可以不断地由旧值递推出新值。\n        根据问题的不同，迭代变量可以是一个，也可以是多个。\n        确定迭代变量，通常还要根据迭代递推关系给出迭代变量的初始值，\n        这一点也很重要。\n    \n    确定迭代递推关系：\n        迭代递推关系是根据旧值计算新值的关系或公式，\n        这是迭代法实现的关键，如果不能确定迭代关系，\n        则无法用迭代法实现算法。\n    \n    确定迭代终止条件：\n        迭代终止条件是控制迭代过程退出的关键条件。\n        迭代不可能无休止地进行，必须设置迭代终止条件，\n        在适当的时候退出迭代。\n        \n        迭代终止条件一般有三种假设：\n        其一是迭代变量已经求得问题的精确值；\n        其二是迭代变量无法得到精确值，\n        但是某个迭代的值的精度已经满足要求；\n        其三是指定明确的迭代计算次数。\n        \n        迭代算法的具体实现，可根据问题的类型选择迭代终止条件。\n        一般情况下，为了防止迭代关系在某个区间上发散（不收敛）\n        使得算法进入死循环，都会把第三个条件作为异常退出条件\n        和其他迭代终止条件配合使用，也就是说，\n        即使无法得到符合条件的解，\n        只要迭代计算次数达到某个限制值，\n        也退出迭代过程。\n\n    \n常见的迭代法\n    \n    梯度法\n    最小二乘法\n    牛顿迭代法\n\n迭代法和递推法\n\n    迭代法作为很多数学问题的求解算法，\n    是解决数学问题的一种常用的算法模式，\n    可以独立构成解决问题的算法。\n    \n    递推法作为一种设计算法的常用思想，\n    没有固定的算法实现模式，\n    通常是与其他算法模式配合形成算法实现。\n    比如线性动态规划问题，\n    一般都有明确的子问题最优解递推公式，\n    递推思想常常作为算法实现的一部分\n    融入到动态规划算法的实现中。\n\n使用Python实现 求根函数 并与内置求根函数对比\n```python\nimport math\n\n\ndef like_sqrt(num: int):\n    xi = num / 2\n    xt = xi\n    xi = (xt + num / xt) / 2\n    count = 1\n    eps = 0.1 ** 6\n\n    while abs(xi - xt) > eps:\n        xt = xi\n        xi = (xt + num / xt) / 2\n\n        count += 1\n    print(xi)\n\n\nprint(math.sqrt(3))\nlike_sqrt(3)\n```","slug":"训练营/基础卡05-迭代法","published":1,"date":"2019-04-05T10:12:00.664Z","updated":"2019-04-05T10:12:00.665Z","_id":"cjwd4bmov000ksv72s4d7jsby","comments":1,"layout":"post","photos":[],"link":"","content":"<p>迭代法</p>\n<pre><code>数字意义上是一种不断用变量的旧值递推新值的过程，\n其相应的迭代算法也是用计算机解决问题的一种基本方法。\n\n迭代法，还有一种更广泛的观点，\n就是所有使用了迭代思想的算法实现，\n都可以理解为是使用了迭代法。\n从这个角度理解，\n除了线性动态规划算法、\n遗传算法、退火算法等算法\n也可归入迭代法的范畴。\n</code></pre><p>迭代法的实现</p>\n<pre><code>确定迭代变量：\n    迭代变量一般就是要求解的问题的解，\n    利用迭代递推公式可以不断地由旧值递推出新值。\n    根据问题的不同，迭代变量可以是一个，也可以是多个。\n    确定迭代变量，通常还要根据迭代递推关系给出迭代变量的初始值，\n    这一点也很重要。\n\n确定迭代递推关系：\n    迭代递推关系是根据旧值计算新值的关系或公式，\n    这是迭代法实现的关键，如果不能确定迭代关系，\n    则无法用迭代法实现算法。\n\n确定迭代终止条件：\n    迭代终止条件是控制迭代过程退出的关键条件。\n    迭代不可能无休止地进行，必须设置迭代终止条件，\n    在适当的时候退出迭代。\n\n    迭代终止条件一般有三种假设：\n    其一是迭代变量已经求得问题的精确值；\n    其二是迭代变量无法得到精确值，\n    但是某个迭代的值的精度已经满足要求；\n    其三是指定明确的迭代计算次数。\n\n    迭代算法的具体实现，可根据问题的类型选择迭代终止条件。\n    一般情况下，为了防止迭代关系在某个区间上发散（不收敛）\n    使得算法进入死循环，都会把第三个条件作为异常退出条件\n    和其他迭代终止条件配合使用，也就是说，\n    即使无法得到符合条件的解，\n    只要迭代计算次数达到某个限制值，\n    也退出迭代过程。\n</code></pre><p>常见的迭代法</p>\n<pre><code>梯度法\n最小二乘法\n牛顿迭代法\n</code></pre><p>迭代法和递推法</p>\n<pre><code>迭代法作为很多数学问题的求解算法，\n是解决数学问题的一种常用的算法模式，\n可以独立构成解决问题的算法。\n\n递推法作为一种设计算法的常用思想，\n没有固定的算法实现模式，\n通常是与其他算法模式配合形成算法实现。\n比如线性动态规划问题，\n一般都有明确的子问题最优解递推公式，\n递推思想常常作为算法实现的一部分\n融入到动态规划算法的实现中。\n</code></pre><p>使用Python实现 求根函数 并与内置求根函数对比<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">like_sqrt</span><span class=\"params\">(num: int)</span>:</span></span><br><span class=\"line\">    xi = num / <span class=\"number\">2</span></span><br><span class=\"line\">    xt = xi</span><br><span class=\"line\">    xi = (xt + num / xt) / <span class=\"number\">2</span></span><br><span class=\"line\">    count = <span class=\"number\">1</span></span><br><span class=\"line\">    eps = <span class=\"number\">0.1</span> ** <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> abs(xi - xt) &gt; eps:</span><br><span class=\"line\">        xt = xi</span><br><span class=\"line\">        xi = (xt + num / xt) / <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">    print(xi)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(math.sqrt(<span class=\"number\">3</span>))</span><br><span class=\"line\">like_sqrt(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>迭代法</p>\n<pre><code>数字意义上是一种不断用变量的旧值递推新值的过程，\n其相应的迭代算法也是用计算机解决问题的一种基本方法。\n\n迭代法，还有一种更广泛的观点，\n就是所有使用了迭代思想的算法实现，\n都可以理解为是使用了迭代法。\n从这个角度理解，\n除了线性动态规划算法、\n遗传算法、退火算法等算法\n也可归入迭代法的范畴。\n</code></pre><p>迭代法的实现</p>\n<pre><code>确定迭代变量：\n    迭代变量一般就是要求解的问题的解，\n    利用迭代递推公式可以不断地由旧值递推出新值。\n    根据问题的不同，迭代变量可以是一个，也可以是多个。\n    确定迭代变量，通常还要根据迭代递推关系给出迭代变量的初始值，\n    这一点也很重要。\n\n确定迭代递推关系：\n    迭代递推关系是根据旧值计算新值的关系或公式，\n    这是迭代法实现的关键，如果不能确定迭代关系，\n    则无法用迭代法实现算法。\n\n确定迭代终止条件：\n    迭代终止条件是控制迭代过程退出的关键条件。\n    迭代不可能无休止地进行，必须设置迭代终止条件，\n    在适当的时候退出迭代。\n\n    迭代终止条件一般有三种假设：\n    其一是迭代变量已经求得问题的精确值；\n    其二是迭代变量无法得到精确值，\n    但是某个迭代的值的精度已经满足要求；\n    其三是指定明确的迭代计算次数。\n\n    迭代算法的具体实现，可根据问题的类型选择迭代终止条件。\n    一般情况下，为了防止迭代关系在某个区间上发散（不收敛）\n    使得算法进入死循环，都会把第三个条件作为异常退出条件\n    和其他迭代终止条件配合使用，也就是说，\n    即使无法得到符合条件的解，\n    只要迭代计算次数达到某个限制值，\n    也退出迭代过程。\n</code></pre><p>常见的迭代法</p>\n<pre><code>梯度法\n最小二乘法\n牛顿迭代法\n</code></pre><p>迭代法和递推法</p>\n<pre><code>迭代法作为很多数学问题的求解算法，\n是解决数学问题的一种常用的算法模式，\n可以独立构成解决问题的算法。\n\n递推法作为一种设计算法的常用思想，\n没有固定的算法实现模式，\n通常是与其他算法模式配合形成算法实现。\n比如线性动态规划问题，\n一般都有明确的子问题最优解递推公式，\n递推思想常常作为算法实现的一部分\n融入到动态规划算法的实现中。\n</code></pre><p>使用Python实现 求根函数 并与内置求根函数对比<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">like_sqrt</span><span class=\"params\">(num: int)</span>:</span></span><br><span class=\"line\">    xi = num / <span class=\"number\">2</span></span><br><span class=\"line\">    xt = xi</span><br><span class=\"line\">    xi = (xt + num / xt) / <span class=\"number\">2</span></span><br><span class=\"line\">    count = <span class=\"number\">1</span></span><br><span class=\"line\">    eps = <span class=\"number\">0.1</span> ** <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> abs(xi - xt) &gt; eps:</span><br><span class=\"line\">        xt = xi</span><br><span class=\"line\">        xi = (xt + num / xt) / <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">    print(xi)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(math.sqrt(<span class=\"number\">3</span>))</span><br><span class=\"line\">like_sqrt(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"基础开胃菜","_content":"\n常用技巧\n\n    哨兵位\n        \n        通常起到两个作用，\n        一个是作为一个临时存储空间使用，\n        另一个是减少不必要的越界判断，\n        简化算法代码复杂度。\n    \n    \n    巧用数组下标\n        \n        数组的下标是一个隐含的很有用的属性，\n        巧妙地使用这个属性，\n        对简化算法实现有很大的帮助。\n        \n    \n    取余的用法\n    \n        取余运算基本上还是一个除法运算，\n        如果仅仅是判断奇偶数，\n        判断（number & 1）是否等于 0 是更好的方法。\n        \n        更一般的情况，当取余运算的除数是 2 的 n 次方的时候，\n        用 & 运算符代替取余会更高效。比如当 x=2n 的时候，\n        a % x 的结果与 a & (x - 1) 的结果是等价的。\n        \n    使用双指针来判断链表是否有环\n    \n    \n    数组链表\n        \n        数组的特点是存储空间固定，数据存取高效，\n        但是缺点是数据插入和删除需要移动数组元素，\n        不适合插入和删除比较频繁的场合。\n        链表的特点恰恰是插入和删除比较高效，\n        但是缺点是需要动态申请存储空间，在一些系统上，\n        内存申请和释放的开销比较大，使用链表存在性能问题。\n    \n    \n    topN 问题和最小堆\n        \n    常用的 hash 算法 作字符串比较\n    \n    以空间换时间的策略\n","source":"_posts/训练营/基础卡06-基础开胃菜.md","raw":"---\ntitle: 基础开胃菜\n---\n\n常用技巧\n\n    哨兵位\n        \n        通常起到两个作用，\n        一个是作为一个临时存储空间使用，\n        另一个是减少不必要的越界判断，\n        简化算法代码复杂度。\n    \n    \n    巧用数组下标\n        \n        数组的下标是一个隐含的很有用的属性，\n        巧妙地使用这个属性，\n        对简化算法实现有很大的帮助。\n        \n    \n    取余的用法\n    \n        取余运算基本上还是一个除法运算，\n        如果仅仅是判断奇偶数，\n        判断（number & 1）是否等于 0 是更好的方法。\n        \n        更一般的情况，当取余运算的除数是 2 的 n 次方的时候，\n        用 & 运算符代替取余会更高效。比如当 x=2n 的时候，\n        a % x 的结果与 a & (x - 1) 的结果是等价的。\n        \n    使用双指针来判断链表是否有环\n    \n    \n    数组链表\n        \n        数组的特点是存储空间固定，数据存取高效，\n        但是缺点是数据插入和删除需要移动数组元素，\n        不适合插入和删除比较频繁的场合。\n        链表的特点恰恰是插入和删除比较高效，\n        但是缺点是需要动态申请存储空间，在一些系统上，\n        内存申请和释放的开销比较大，使用链表存在性能问题。\n    \n    \n    topN 问题和最小堆\n        \n    常用的 hash 算法 作字符串比较\n    \n    以空间换时间的策略\n","slug":"训练营/基础卡06-基础开胃菜","published":1,"date":"2019-04-04T15:23:44.593Z","updated":"2019-04-04T15:23:44.593Z","_id":"cjwd4bmow000lsv72rexyzxji","comments":1,"layout":"post","photos":[],"link":"","content":"<p>常用技巧</p>\n<pre><code>哨兵位\n\n    通常起到两个作用，\n    一个是作为一个临时存储空间使用，\n    另一个是减少不必要的越界判断，\n    简化算法代码复杂度。\n\n\n巧用数组下标\n\n    数组的下标是一个隐含的很有用的属性，\n    巧妙地使用这个属性，\n    对简化算法实现有很大的帮助。\n\n\n取余的用法\n\n    取余运算基本上还是一个除法运算，\n    如果仅仅是判断奇偶数，\n    判断（number &amp; 1）是否等于 0 是更好的方法。\n\n    更一般的情况，当取余运算的除数是 2 的 n 次方的时候，\n    用 &amp; 运算符代替取余会更高效。比如当 x=2n 的时候，\n    a % x 的结果与 a &amp; (x - 1) 的结果是等价的。\n\n使用双指针来判断链表是否有环\n\n\n数组链表\n\n    数组的特点是存储空间固定，数据存取高效，\n    但是缺点是数据插入和删除需要移动数组元素，\n    不适合插入和删除比较频繁的场合。\n    链表的特点恰恰是插入和删除比较高效，\n    但是缺点是需要动态申请存储空间，在一些系统上，\n    内存申请和释放的开销比较大，使用链表存在性能问题。\n\n\ntopN 问题和最小堆\n\n常用的 hash 算法 作字符串比较\n\n以空间换时间的策略\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>常用技巧</p>\n<pre><code>哨兵位\n\n    通常起到两个作用，\n    一个是作为一个临时存储空间使用，\n    另一个是减少不必要的越界判断，\n    简化算法代码复杂度。\n\n\n巧用数组下标\n\n    数组的下标是一个隐含的很有用的属性，\n    巧妙地使用这个属性，\n    对简化算法实现有很大的帮助。\n\n\n取余的用法\n\n    取余运算基本上还是一个除法运算，\n    如果仅仅是判断奇偶数，\n    判断（number &amp; 1）是否等于 0 是更好的方法。\n\n    更一般的情况，当取余运算的除数是 2 的 n 次方的时候，\n    用 &amp; 运算符代替取余会更高效。比如当 x=2n 的时候，\n    a % x 的结果与 a &amp; (x - 1) 的结果是等价的。\n\n使用双指针来判断链表是否有环\n\n\n数组链表\n\n    数组的特点是存储空间固定，数据存取高效，\n    但是缺点是数据插入和删除需要移动数组元素，\n    不适合插入和删除比较频繁的场合。\n    链表的特点恰恰是插入和删除比较高效，\n    但是缺点是需要动态申请存储空间，在一些系统上，\n    内存申请和释放的开销比较大，使用链表存在性能问题。\n\n\ntopN 问题和最小堆\n\n常用的 hash 算法 作字符串比较\n\n以空间换时间的策略\n</code></pre>"},{"title":"开营仪式","_content":"\n什么是算法\n    \n    任何一个解决问题的方法都不会凭空出现，\n    而在计算机中解决问题的方法统称为算法。\n    \n    一系列的数学计算或解题步骤，\n    算法存在的意义是解决问题，\n    软件开发工作着的日常就是开发各种能够解决问题的算法。\n    \n    算法并非不食人间烟火之物，\n    更不是ACM竞赛选手的特权，\n    大部分人在工作中遇到的问题并非像ACM竞赛那样的难题。\n    \n\n算法的作用：\n\n    编程能力大致体现在，\n    逻辑思维能力、\n    抽象建模能力、\n    编程方法和技巧，\n    都需要通过实践获得。\n    \n    时间复杂度，\n    空间复杂度，\n    计算效率，\n    计算过程对其他模块的影响。\n\n\n开营的目的：\n    \n    掌握设计算法的方法与技巧\n    \n    也是软件开发人员必备的条件\n        \n    掌握常用设计模式\n    \n    在练习中积累经验\n    \n分类：\n    \n    1. 已知的并有成熟或高效的实现方法\n    2. 只有理论但是没有具体实现的算法，\n       需要掌握算法原理，翻译成代码实现。\n        遗传算法，基本思想 迭代法，\n        根据迭代中的遗传和变异，\n        淘汰掉不符合的个体，\n        得到优良的种群。\n        不同的问题针对基因有不同的建模，\n        需要根据算法的原理，基因的不同，方法的实现进行调整。\n    3. 工作中遇见的实际问题，\n       或竞赛中具有针对性的问题\n        需要掌握常用的算法模式。\n        文字信息数字化。\n    \n课后练习：\n    \n    针对知识点设计的练习题，要按时按量完成。\n\n\n学习强度高，跟着走，坚持\n\n    长风破浪会有时，直挂云帆济沧海\n    动手能力\n    解决问题的能力","source":"_posts/训练营/开营仪式.md","raw":"---\ntitle: 开营仪式\n---\n\n什么是算法\n    \n    任何一个解决问题的方法都不会凭空出现，\n    而在计算机中解决问题的方法统称为算法。\n    \n    一系列的数学计算或解题步骤，\n    算法存在的意义是解决问题，\n    软件开发工作着的日常就是开发各种能够解决问题的算法。\n    \n    算法并非不食人间烟火之物，\n    更不是ACM竞赛选手的特权，\n    大部分人在工作中遇到的问题并非像ACM竞赛那样的难题。\n    \n\n算法的作用：\n\n    编程能力大致体现在，\n    逻辑思维能力、\n    抽象建模能力、\n    编程方法和技巧，\n    都需要通过实践获得。\n    \n    时间复杂度，\n    空间复杂度，\n    计算效率，\n    计算过程对其他模块的影响。\n\n\n开营的目的：\n    \n    掌握设计算法的方法与技巧\n    \n    也是软件开发人员必备的条件\n        \n    掌握常用设计模式\n    \n    在练习中积累经验\n    \n分类：\n    \n    1. 已知的并有成熟或高效的实现方法\n    2. 只有理论但是没有具体实现的算法，\n       需要掌握算法原理，翻译成代码实现。\n        遗传算法，基本思想 迭代法，\n        根据迭代中的遗传和变异，\n        淘汰掉不符合的个体，\n        得到优良的种群。\n        不同的问题针对基因有不同的建模，\n        需要根据算法的原理，基因的不同，方法的实现进行调整。\n    3. 工作中遇见的实际问题，\n       或竞赛中具有针对性的问题\n        需要掌握常用的算法模式。\n        文字信息数字化。\n    \n课后练习：\n    \n    针对知识点设计的练习题，要按时按量完成。\n\n\n学习强度高，跟着走，坚持\n\n    长风破浪会有时，直挂云帆济沧海\n    动手能力\n    解决问题的能力","slug":"训练营/开营仪式","published":1,"date":"2019-04-01T13:59:00.284Z","updated":"2019-04-01T13:59:00.284Z","_id":"cjwd4bvbn000msv72ji46pkzh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>什么是算法</p>\n<pre><code>任何一个解决问题的方法都不会凭空出现，\n而在计算机中解决问题的方法统称为算法。\n\n一系列的数学计算或解题步骤，\n算法存在的意义是解决问题，\n软件开发工作着的日常就是开发各种能够解决问题的算法。\n\n算法并非不食人间烟火之物，\n更不是ACM竞赛选手的特权，\n大部分人在工作中遇到的问题并非像ACM竞赛那样的难题。\n</code></pre><p>算法的作用：</p>\n<pre><code>编程能力大致体现在，\n逻辑思维能力、\n抽象建模能力、\n编程方法和技巧，\n都需要通过实践获得。\n\n时间复杂度，\n空间复杂度，\n计算效率，\n计算过程对其他模块的影响。\n</code></pre><p>开营的目的：</p>\n<pre><code>掌握设计算法的方法与技巧\n\n也是软件开发人员必备的条件\n\n掌握常用设计模式\n\n在练习中积累经验\n</code></pre><p>分类：</p>\n<pre><code>1. 已知的并有成熟或高效的实现方法\n2. 只有理论但是没有具体实现的算法，\n   需要掌握算法原理，翻译成代码实现。\n    遗传算法，基本思想 迭代法，\n    根据迭代中的遗传和变异，\n    淘汰掉不符合的个体，\n    得到优良的种群。\n    不同的问题针对基因有不同的建模，\n    需要根据算法的原理，基因的不同，方法的实现进行调整。\n3. 工作中遇见的实际问题，\n   或竞赛中具有针对性的问题\n    需要掌握常用的算法模式。\n    文字信息数字化。\n</code></pre><p>课后练习：</p>\n<pre><code>针对知识点设计的练习题，要按时按量完成。\n</code></pre><p>学习强度高，跟着走，坚持</p>\n<pre><code>长风破浪会有时，直挂云帆济沧海\n动手能力\n解决问题的能力\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>什么是算法</p>\n<pre><code>任何一个解决问题的方法都不会凭空出现，\n而在计算机中解决问题的方法统称为算法。\n\n一系列的数学计算或解题步骤，\n算法存在的意义是解决问题，\n软件开发工作着的日常就是开发各种能够解决问题的算法。\n\n算法并非不食人间烟火之物，\n更不是ACM竞赛选手的特权，\n大部分人在工作中遇到的问题并非像ACM竞赛那样的难题。\n</code></pre><p>算法的作用：</p>\n<pre><code>编程能力大致体现在，\n逻辑思维能力、\n抽象建模能力、\n编程方法和技巧，\n都需要通过实践获得。\n\n时间复杂度，\n空间复杂度，\n计算效率，\n计算过程对其他模块的影响。\n</code></pre><p>开营的目的：</p>\n<pre><code>掌握设计算法的方法与技巧\n\n也是软件开发人员必备的条件\n\n掌握常用设计模式\n\n在练习中积累经验\n</code></pre><p>分类：</p>\n<pre><code>1. 已知的并有成熟或高效的实现方法\n2. 只有理论但是没有具体实现的算法，\n   需要掌握算法原理，翻译成代码实现。\n    遗传算法，基本思想 迭代法，\n    根据迭代中的遗传和变异，\n    淘汰掉不符合的个体，\n    得到优良的种群。\n    不同的问题针对基因有不同的建模，\n    需要根据算法的原理，基因的不同，方法的实现进行调整。\n3. 工作中遇见的实际问题，\n   或竞赛中具有针对性的问题\n    需要掌握常用的算法模式。\n    文字信息数字化。\n</code></pre><p>课后练习：</p>\n<pre><code>针对知识点设计的练习题，要按时按量完成。\n</code></pre><p>学习强度高，跟着走，坚持</p>\n<pre><code>长风破浪会有时，直挂云帆济沧海\n动手能力\n解决问题的能力\n</code></pre>"},{"title":"算法是程序的\"灵魂\"","_content":"\n目标\n    \n    通过学习各算法的实现，掌握算法设计方法，在面对实际问题的时候，具备设计并实现解决问题的算法\n\n\n算法的两大特点\n    \n    纷繁复杂、知识多广。\n    设计数学模型并不会因为设计模式的完善而变得简单。\n\n常见的算法设计方法\n    \n    迭代法\n    穷举搜索法\n    分界界限法(剪枝法)\n    递推法\n    递归法\n    回溯法\n    分治法\n    贪婪法\n    动态规划法\n    \n注意\n    \n    尽管算法设计的常用方法很多，但是这些放法之间并不是孤立的。\n    如牛顿迭代法，还有些递推关系需要通过广域搜索来实现，比如常见的动态规划算法。\n    贪婪法很少单独用于解决最优解问题，但是贪婪法的思想体现在很多算法中，\n    比如著名的“Dijkstra 算法”，在确定某个顶点的下一个最短路径点时，\n    就使用了贪婪法的思想，每次选择距离最近的那个点作为下一个顶点。","source":"_posts/训练营/热身卡01-开篇词：算法是程序的灵魂.md","raw":"---\ntitle: 算法是程序的\"灵魂\"\n---\n\n目标\n    \n    通过学习各算法的实现，掌握算法设计方法，在面对实际问题的时候，具备设计并实现解决问题的算法\n\n\n算法的两大特点\n    \n    纷繁复杂、知识多广。\n    设计数学模型并不会因为设计模式的完善而变得简单。\n\n常见的算法设计方法\n    \n    迭代法\n    穷举搜索法\n    分界界限法(剪枝法)\n    递推法\n    递归法\n    回溯法\n    分治法\n    贪婪法\n    动态规划法\n    \n注意\n    \n    尽管算法设计的常用方法很多，但是这些放法之间并不是孤立的。\n    如牛顿迭代法，还有些递推关系需要通过广域搜索来实现，比如常见的动态规划算法。\n    贪婪法很少单独用于解决最优解问题，但是贪婪法的思想体现在很多算法中，\n    比如著名的“Dijkstra 算法”，在确定某个顶点的下一个最短路径点时，\n    就使用了贪婪法的思想，每次选择距离最近的那个点作为下一个顶点。","slug":"训练营/热身卡01-开篇词：算法是程序的灵魂","published":1,"date":"2019-04-01T09:59:49.338Z","updated":"2019-04-01T09:59:49.338Z","_id":"cjwd4c78d000nsv72822yuam0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>目标</p>\n<pre><code>通过学习各算法的实现，掌握算法设计方法，在面对实际问题的时候，具备设计并实现解决问题的算法\n</code></pre><p>算法的两大特点</p>\n<pre><code>纷繁复杂、知识多广。\n设计数学模型并不会因为设计模式的完善而变得简单。\n</code></pre><p>常见的算法设计方法</p>\n<pre><code>迭代法\n穷举搜索法\n分界界限法(剪枝法)\n递推法\n递归法\n回溯法\n分治法\n贪婪法\n动态规划法\n</code></pre><p>注意</p>\n<pre><code>尽管算法设计的常用方法很多，但是这些放法之间并不是孤立的。\n如牛顿迭代法，还有些递推关系需要通过广域搜索来实现，比如常见的动态规划算法。\n贪婪法很少单独用于解决最优解问题，但是贪婪法的思想体现在很多算法中，\n比如著名的“Dijkstra 算法”，在确定某个顶点的下一个最短路径点时，\n就使用了贪婪法的思想，每次选择距离最近的那个点作为下一个顶点。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>目标</p>\n<pre><code>通过学习各算法的实现，掌握算法设计方法，在面对实际问题的时候，具备设计并实现解决问题的算法\n</code></pre><p>算法的两大特点</p>\n<pre><code>纷繁复杂、知识多广。\n设计数学模型并不会因为设计模式的完善而变得简单。\n</code></pre><p>常见的算法设计方法</p>\n<pre><code>迭代法\n穷举搜索法\n分界界限法(剪枝法)\n递推法\n递归法\n回溯法\n分治法\n贪婪法\n动态规划法\n</code></pre><p>注意</p>\n<pre><code>尽管算法设计的常用方法很多，但是这些放法之间并不是孤立的。\n如牛顿迭代法，还有些递推关系需要通过广域搜索来实现，比如常见的动态规划算法。\n贪婪法很少单独用于解决最优解问题，但是贪婪法的思想体现在很多算法中，\n比如著名的“Dijkstra 算法”，在确定某个顶点的下一个最短路径点时，\n就使用了贪婪法的思想，每次选择距离最近的那个点作为下一个顶点。\n</code></pre>"},{"title":"入门测试题","_content":"\n目标\n    \n    定位自我\n    \n\n思考点1 [只是了解一般不用 == 判断浮点数相等，对于能够判断的浮点数集认识不深刻]\n    \n    在诸如Java、C++或Python语言中，一般不用 \"==\" 判断两个浮点数相等。\n    浮点数在计算机内的表达有误差，直接使用 \"==\" 来判断两个浮点数是否相等是不安全的。\n    只有部分能够精确表达的浮点数，如0.0, 0.5(1/2)，0.25(1/4)等浮点数，使用 \"==\" 判断\n    浮点数值相等是没问题的，其他情况则会产生意想不到的结果。\n    \n\n思考点2 [动态规划和分治法的区别，增加例子来理解]\n    \n    动态规划区别于分治法是其子问题具备\"无后向性\"，在各阶段的子问题确定后，\n    对于特定阶段的子问题来说，它之前各个阶段的子问题的决策只影响该阶段的决策，\n    对该阶段之后的决策不产生影响。\n    \n\n思考点3 [对诸如Dijkstra、A*等经典算法生疏，对图结构生疏]\n\n\n思考点4 [由排序算法时间复杂度引出的讨论]\n\n>@5年-余努力-成都-杂家 \n\n    桶排序的平均时间复杂度为线性的O(N+C)，其中C=N*(logN-logM)。\n    如果相对于同样的N，桶数量M越大，其效率越高，最好的时间复杂度达到O(N)。\n    当N=M时，就是计数排序。\n    \n   \n>@应届-乌凌-c++    \n```c++\nvoid radix_sort(int *num, int n) {\n#define MAX 65536\n\tint *temp = (int*)calloc(n, sizeof(int));\n\tint *cnt = (int*)calloc(MAX + 5, sizeof(int));\n\tfor (int i = 0; i < n; i++) {\n\t\tcnt[(num[i] & 65535) + 1] += 1;\n\t}\n\tfor (int i = 0; i < MAX; i++) cnt[i] += cnt[i - 1];\n\tfor (int i = 0; i < n; i++) {\n\t\ttemp[cnt[num[i] & 65535]++] = num[i];\n\t}\n\tmemset(cnt, 0, sizeof(int) * MAX);\n\tint *p = temp;\n\ttemp = num;\n\tnum = p;\n\tfor (int i = 0; i < n; i++) {\n\t\tcnt[((num[i] >> 16) & 65535) + 1] += 1;\n\t}\n\tfor (int i = 0; i < MAX; i++) cnt[i] += cnt[i - 1];\n\tfor (int i = 0; i < n; i++) {\n\t\ttemp[cnt[(num[i] >> 16) & 65535]++] = num[i];\n\t}\n\tfree(num);\n\tnum = temp;\n\tfree(cnt);\n#undef MAX\n}\n\n```\n\n>个人对排序的补充\n    \n    快速排序\n    归并排序\n    堆排序","source":"_posts/训练营/热身卡02-入门测试题.md","raw":"---\ntitle: 入门测试题\n---\n\n目标\n    \n    定位自我\n    \n\n思考点1 [只是了解一般不用 == 判断浮点数相等，对于能够判断的浮点数集认识不深刻]\n    \n    在诸如Java、C++或Python语言中，一般不用 \"==\" 判断两个浮点数相等。\n    浮点数在计算机内的表达有误差，直接使用 \"==\" 来判断两个浮点数是否相等是不安全的。\n    只有部分能够精确表达的浮点数，如0.0, 0.5(1/2)，0.25(1/4)等浮点数，使用 \"==\" 判断\n    浮点数值相等是没问题的，其他情况则会产生意想不到的结果。\n    \n\n思考点2 [动态规划和分治法的区别，增加例子来理解]\n    \n    动态规划区别于分治法是其子问题具备\"无后向性\"，在各阶段的子问题确定后，\n    对于特定阶段的子问题来说，它之前各个阶段的子问题的决策只影响该阶段的决策，\n    对该阶段之后的决策不产生影响。\n    \n\n思考点3 [对诸如Dijkstra、A*等经典算法生疏，对图结构生疏]\n\n\n思考点4 [由排序算法时间复杂度引出的讨论]\n\n>@5年-余努力-成都-杂家 \n\n    桶排序的平均时间复杂度为线性的O(N+C)，其中C=N*(logN-logM)。\n    如果相对于同样的N，桶数量M越大，其效率越高，最好的时间复杂度达到O(N)。\n    当N=M时，就是计数排序。\n    \n   \n>@应届-乌凌-c++    \n```c++\nvoid radix_sort(int *num, int n) {\n#define MAX 65536\n\tint *temp = (int*)calloc(n, sizeof(int));\n\tint *cnt = (int*)calloc(MAX + 5, sizeof(int));\n\tfor (int i = 0; i < n; i++) {\n\t\tcnt[(num[i] & 65535) + 1] += 1;\n\t}\n\tfor (int i = 0; i < MAX; i++) cnt[i] += cnt[i - 1];\n\tfor (int i = 0; i < n; i++) {\n\t\ttemp[cnt[num[i] & 65535]++] = num[i];\n\t}\n\tmemset(cnt, 0, sizeof(int) * MAX);\n\tint *p = temp;\n\ttemp = num;\n\tnum = p;\n\tfor (int i = 0; i < n; i++) {\n\t\tcnt[((num[i] >> 16) & 65535) + 1] += 1;\n\t}\n\tfor (int i = 0; i < MAX; i++) cnt[i] += cnt[i - 1];\n\tfor (int i = 0; i < n; i++) {\n\t\ttemp[cnt[(num[i] >> 16) & 65535]++] = num[i];\n\t}\n\tfree(num);\n\tnum = temp;\n\tfree(cnt);\n#undef MAX\n}\n\n```\n\n>个人对排序的补充\n    \n    快速排序\n    归并排序\n    堆排序","slug":"训练营/热身卡02-入门测试题","published":1,"date":"2019-04-01T09:59:49.330Z","updated":"2019-04-01T09:59:49.330Z","_id":"cjwd4c78e000osv72wfla2yc5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>目标</p>\n<pre><code>定位自我\n</code></pre><p>思考点1 [只是了解一般不用 == 判断浮点数相等，对于能够判断的浮点数集认识不深刻]</p>\n<pre><code>在诸如Java、C++或Python语言中，一般不用 &quot;==&quot; 判断两个浮点数相等。\n浮点数在计算机内的表达有误差，直接使用 &quot;==&quot; 来判断两个浮点数是否相等是不安全的。\n只有部分能够精确表达的浮点数，如0.0, 0.5(1/2)，0.25(1/4)等浮点数，使用 &quot;==&quot; 判断\n浮点数值相等是没问题的，其他情况则会产生意想不到的结果。\n</code></pre><p>思考点2 [动态规划和分治法的区别，增加例子来理解]</p>\n<pre><code>动态规划区别于分治法是其子问题具备&quot;无后向性&quot;，在各阶段的子问题确定后，\n对于特定阶段的子问题来说，它之前各个阶段的子问题的决策只影响该阶段的决策，\n对该阶段之后的决策不产生影响。\n</code></pre><p>思考点3 [对诸如Dijkstra、A*等经典算法生疏，对图结构生疏]</p>\n<p>思考点4 [由排序算法时间复杂度引出的讨论]</p>\n<blockquote>\n<p>@5年-余努力-成都-杂家 </p>\n</blockquote>\n<pre><code>桶排序的平均时间复杂度为线性的O(N+C)，其中C=N*(logN-logM)。\n如果相对于同样的N，桶数量M越大，其效率越高，最好的时间复杂度达到O(N)。\n当N=M时，就是计数排序。\n</code></pre><blockquote>\n<p>@应届-乌凌-c++<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">radix_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *num, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 65536</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *temp = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">calloc</span>(n, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *cnt = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">calloc</span>(MAX + <span class=\"number\">5</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\tcnt[(num[i] &amp; <span class=\"number\">65535</span>) + <span class=\"number\">1</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX; i++) cnt[i] += cnt[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\ttemp[cnt[num[i] &amp; <span class=\"number\">65535</span>]++] = num[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(cnt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * MAX);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *p = temp;</span><br><span class=\"line\">\ttemp = num;</span><br><span class=\"line\">\tnum = p;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\tcnt[((num[i] &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">65535</span>) + <span class=\"number\">1</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX; i++) cnt[i] += cnt[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\ttemp[cnt[(num[i] &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">65535</span>]++] = num[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(num);</span><br><span class=\"line\">\tnum = temp;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(cnt);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">undef</span> MAX</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>个人对排序的补充</p>\n</blockquote>\n<pre><code>快速排序\n归并排序\n堆排序\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>目标</p>\n<pre><code>定位自我\n</code></pre><p>思考点1 [只是了解一般不用 == 判断浮点数相等，对于能够判断的浮点数集认识不深刻]</p>\n<pre><code>在诸如Java、C++或Python语言中，一般不用 &quot;==&quot; 判断两个浮点数相等。\n浮点数在计算机内的表达有误差，直接使用 &quot;==&quot; 来判断两个浮点数是否相等是不安全的。\n只有部分能够精确表达的浮点数，如0.0, 0.5(1/2)，0.25(1/4)等浮点数，使用 &quot;==&quot; 判断\n浮点数值相等是没问题的，其他情况则会产生意想不到的结果。\n</code></pre><p>思考点2 [动态规划和分治法的区别，增加例子来理解]</p>\n<pre><code>动态规划区别于分治法是其子问题具备&quot;无后向性&quot;，在各阶段的子问题确定后，\n对于特定阶段的子问题来说，它之前各个阶段的子问题的决策只影响该阶段的决策，\n对该阶段之后的决策不产生影响。\n</code></pre><p>思考点3 [对诸如Dijkstra、A*等经典算法生疏，对图结构生疏]</p>\n<p>思考点4 [由排序算法时间复杂度引出的讨论]</p>\n<blockquote>\n<p>@5年-余努力-成都-杂家 </p>\n</blockquote>\n<pre><code>桶排序的平均时间复杂度为线性的O(N+C)，其中C=N*(logN-logM)。\n如果相对于同样的N，桶数量M越大，其效率越高，最好的时间复杂度达到O(N)。\n当N=M时，就是计数排序。\n</code></pre><blockquote>\n<p>@应届-乌凌-c++<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">radix_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *num, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 65536</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *temp = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">calloc</span>(n, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *cnt = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">calloc</span>(MAX + <span class=\"number\">5</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\tcnt[(num[i] &amp; <span class=\"number\">65535</span>) + <span class=\"number\">1</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX; i++) cnt[i] += cnt[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\ttemp[cnt[num[i] &amp; <span class=\"number\">65535</span>]++] = num[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(cnt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * MAX);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *p = temp;</span><br><span class=\"line\">\ttemp = num;</span><br><span class=\"line\">\tnum = p;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\tcnt[((num[i] &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">65535</span>) + <span class=\"number\">1</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX; i++) cnt[i] += cnt[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\ttemp[cnt[(num[i] &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">65535</span>]++] = num[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(num);</span><br><span class=\"line\">\tnum = temp;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(cnt);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">undef</span> MAX</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>个人对排序的补充</p>\n</blockquote>\n<pre><code>快速排序\n归并排序\n堆排序\n</code></pre>"},{"title":"A*算法","_content":"\n","source":"_posts/训练营/游戏算法卡01-A*算法.md","raw":"---\ntitle: A*算法\n---\n\n","slug":"训练营/游戏算法卡01-A*算法","published":1,"date":"2019-04-19T04:49:01.314Z","updated":"2019-04-19T04:49:01.314Z","_id":"cjwd4c78e000psv72xkf8xe18","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"如何\"玩\"算法","_content":"\n目标\n    \n    1. 对遇到的特殊的问题要能够设计出算法实现\n    2. 对原理公开的知名算法，要能够翻译成具体的算法代码\n    3. 对已有具体实现的算法，要能够设计出合适的数学模型，将算法应用到实际问题中。\n\n条件\n\n    1. 了解算法设计的常用思想和模式，并将题目转换成数据模型\n    2. 进一步用数据结构实现数据模型的一般方法。\n\n\n将问题抽象成数据模型\n\n    信息数据化：把自然语言描述转换成方便代码数据模型表达的数字化信息。\n    类比和转化：像使用模式一样使用那些经典的或常用的模型，\n              或者根据不同对象的某些相似性，借用已知领域的模型。\n\n\n堆[深有体会。某游戏公司有考察]\n    \n    在问题规模比较大的时候，每次查找dist数组中的最小值可能会成为效率的瓶颈，\n    可以用最小的堆来维护dist的结果，使得每次取出最小值的操作为O(1)时间复杂度，\n    因为堆顶即为最小值。\n    \n    \n穷举法[想法简单, 遗漏情况]\n    \n    尽管部分人看不起穷举法，但是不可否认，有些人却连基本的穷举算法都设计不出来。\n\n\n需要刻意补充的知识点\n    \n    区间树\n    有向图\n    \n    \n需要刻意练习的算法\n    \n    图论\n","source":"_posts/训练营/热身卡03-如何\"玩\"算法.md","raw":"---\ntitle: 如何\"玩\"算法\n---\n\n目标\n    \n    1. 对遇到的特殊的问题要能够设计出算法实现\n    2. 对原理公开的知名算法，要能够翻译成具体的算法代码\n    3. 对已有具体实现的算法，要能够设计出合适的数学模型，将算法应用到实际问题中。\n\n条件\n\n    1. 了解算法设计的常用思想和模式，并将题目转换成数据模型\n    2. 进一步用数据结构实现数据模型的一般方法。\n\n\n将问题抽象成数据模型\n\n    信息数据化：把自然语言描述转换成方便代码数据模型表达的数字化信息。\n    类比和转化：像使用模式一样使用那些经典的或常用的模型，\n              或者根据不同对象的某些相似性，借用已知领域的模型。\n\n\n堆[深有体会。某游戏公司有考察]\n    \n    在问题规模比较大的时候，每次查找dist数组中的最小值可能会成为效率的瓶颈，\n    可以用最小的堆来维护dist的结果，使得每次取出最小值的操作为O(1)时间复杂度，\n    因为堆顶即为最小值。\n    \n    \n穷举法[想法简单, 遗漏情况]\n    \n    尽管部分人看不起穷举法，但是不可否认，有些人却连基本的穷举算法都设计不出来。\n\n\n需要刻意补充的知识点\n    \n    区间树\n    有向图\n    \n    \n需要刻意练习的算法\n    \n    图论\n","slug":"训练营/热身卡03-如何\"玩\"算法","published":1,"date":"2019-04-01T09:59:49.335Z","updated":"2019-04-01T09:59:49.335Z","_id":"cjwd4c78f000qsv72gmaeiizg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>目标</p>\n<pre><code>1. 对遇到的特殊的问题要能够设计出算法实现\n2. 对原理公开的知名算法，要能够翻译成具体的算法代码\n3. 对已有具体实现的算法，要能够设计出合适的数学模型，将算法应用到实际问题中。\n</code></pre><p>条件</p>\n<pre><code>1. 了解算法设计的常用思想和模式，并将题目转换成数据模型\n2. 进一步用数据结构实现数据模型的一般方法。\n</code></pre><p>将问题抽象成数据模型</p>\n<pre><code>信息数据化：把自然语言描述转换成方便代码数据模型表达的数字化信息。\n类比和转化：像使用模式一样使用那些经典的或常用的模型，\n          或者根据不同对象的某些相似性，借用已知领域的模型。\n</code></pre><p>堆[深有体会。某游戏公司有考察]</p>\n<pre><code>在问题规模比较大的时候，每次查找dist数组中的最小值可能会成为效率的瓶颈，\n可以用最小的堆来维护dist的结果，使得每次取出最小值的操作为O(1)时间复杂度，\n因为堆顶即为最小值。\n</code></pre><p>穷举法[想法简单, 遗漏情况]</p>\n<pre><code>尽管部分人看不起穷举法，但是不可否认，有些人却连基本的穷举算法都设计不出来。\n</code></pre><p>需要刻意补充的知识点</p>\n<pre><code>区间树\n有向图\n</code></pre><p>需要刻意练习的算法</p>\n<pre><code>图论\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>目标</p>\n<pre><code>1. 对遇到的特殊的问题要能够设计出算法实现\n2. 对原理公开的知名算法，要能够翻译成具体的算法代码\n3. 对已有具体实现的算法，要能够设计出合适的数学模型，将算法应用到实际问题中。\n</code></pre><p>条件</p>\n<pre><code>1. 了解算法设计的常用思想和模式，并将题目转换成数据模型\n2. 进一步用数据结构实现数据模型的一般方法。\n</code></pre><p>将问题抽象成数据模型</p>\n<pre><code>信息数据化：把自然语言描述转换成方便代码数据模型表达的数字化信息。\n类比和转化：像使用模式一样使用那些经典的或常用的模型，\n          或者根据不同对象的某些相似性，借用已知领域的模型。\n</code></pre><p>堆[深有体会。某游戏公司有考察]</p>\n<pre><code>在问题规模比较大的时候，每次查找dist数组中的最小值可能会成为效率的瓶颈，\n可以用最小的堆来维护dist的结果，使得每次取出最小值的操作为O(1)时间复杂度，\n因为堆顶即为最小值。\n</code></pre><p>穷举法[想法简单, 遗漏情况]</p>\n<pre><code>尽管部分人看不起穷举法，但是不可否认，有些人却连基本的穷举算法都设计不出来。\n</code></pre><p>需要刻意补充的知识点</p>\n<pre><code>区间树\n有向图\n</code></pre><p>需要刻意练习的算法</p>\n<pre><code>图论\n</code></pre>"},{"title":"装配线与工作站问题","_content":"","source":"_posts/训练营/穷举搜索卡01.md","raw":"---\ntitle: 装配线与工作站问题\n---\n","slug":"训练营/穷举搜索卡01","published":1,"date":"2019-04-06T12:51:21.328Z","updated":"2019-04-06T12:51:21.328Z","_id":"cjwd4c78f000rsv72mfl2n575","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"3个桶等分8升水","_content":"\n给出容量分别为8、5和3升的桶，需要等分成2个4升水。\n    \n    [8,0,0]\n    [3,5,0] [5,0,3] [3,5,0]\n    [3,2,3] [0,5,3] [0,5,3]\n    [6,2,0] [3,5,0]\n    [6,0,2] [3,2,3]\n    [1,5,2]\n    [1,4,3]\n    [4,4,0]\n    \n    \n```python\nfrom collections import deque\n\n\nclass WaterStatus(object):\n    def __init__(self, limit, water):\n        self.limit = limit  # 最大容量\n        self.water = water  # 装水容量\n\n\ndef change_water(src: WaterStatus, dst: WaterStatus):\n    if src.water == 0 or dst.water == dst.limit:\n        water = 0\n    if src.water >= dst.limit - dst.water:\n        water = dst.limit - dst.water\n    else:\n        water = src.water\n    src.water -= water\n    dst.water += water\n\n\nif __name__ == '__main__':\n    a = WaterStatus(8, 8)\n    b = WaterStatus(5, 0)\n    c = WaterStatus(3, 0)\n    water_list = [a, b, c]\n    # 队列\n    water_queue = deque()\n    water_queue.append([8, 0, 0])\n\n    cur_status = []\n    cnt = 1\n    while True:\n        print('***第 %d 次循环***' % cnt)\n        cnt += 1\n        if [4, 4, 0] == cur_status:\n            print('find it!')\n            break\n        for water1 in water_list:\n            for water2 in water_list:\n                # 记录当前状态，深拷贝deepcopy，创建新的对象\n                cur_status = list(water_queue[-1])\n                water_list[0].water = cur_status[0]\n                water_list[1].water = cur_status[1]\n                water_list[2].water = cur_status[2]\n                # print water_list[0].water, water_list[1].water, water_list[2].water\n                # 计算一次迁移\n                if water1.limit != water2.limit:\n                    change_water(water1, water2)\n                    next_status = [water_list[0].water, water_list[1].water, water_list[2].water]\n                    # print 'next_status' , next_status\n                    if next_status in water_queue:\n                        # print '迁移后的状态在记录中存在，将当前状态转到迁移之前的状态'\n                        pass\n                    else:\n                        # print '记录迁移后的状态,一定要用list()来新建一个对象'\n                        cur_status = next_status\n                        water_queue.append(list(next_status))\n                    # print water1.limit , water2.limit, cur_status\n                    print('---', water_queue)\n\n```","source":"_posts/训练营/穷举搜索卡02.md","raw":"---\ntitle: 3个桶等分8升水\n---\n\n给出容量分别为8、5和3升的桶，需要等分成2个4升水。\n    \n    [8,0,0]\n    [3,5,0] [5,0,3] [3,5,0]\n    [3,2,3] [0,5,3] [0,5,3]\n    [6,2,0] [3,5,0]\n    [6,0,2] [3,2,3]\n    [1,5,2]\n    [1,4,3]\n    [4,4,0]\n    \n    \n```python\nfrom collections import deque\n\n\nclass WaterStatus(object):\n    def __init__(self, limit, water):\n        self.limit = limit  # 最大容量\n        self.water = water  # 装水容量\n\n\ndef change_water(src: WaterStatus, dst: WaterStatus):\n    if src.water == 0 or dst.water == dst.limit:\n        water = 0\n    if src.water >= dst.limit - dst.water:\n        water = dst.limit - dst.water\n    else:\n        water = src.water\n    src.water -= water\n    dst.water += water\n\n\nif __name__ == '__main__':\n    a = WaterStatus(8, 8)\n    b = WaterStatus(5, 0)\n    c = WaterStatus(3, 0)\n    water_list = [a, b, c]\n    # 队列\n    water_queue = deque()\n    water_queue.append([8, 0, 0])\n\n    cur_status = []\n    cnt = 1\n    while True:\n        print('***第 %d 次循环***' % cnt)\n        cnt += 1\n        if [4, 4, 0] == cur_status:\n            print('find it!')\n            break\n        for water1 in water_list:\n            for water2 in water_list:\n                # 记录当前状态，深拷贝deepcopy，创建新的对象\n                cur_status = list(water_queue[-1])\n                water_list[0].water = cur_status[0]\n                water_list[1].water = cur_status[1]\n                water_list[2].water = cur_status[2]\n                # print water_list[0].water, water_list[1].water, water_list[2].water\n                # 计算一次迁移\n                if water1.limit != water2.limit:\n                    change_water(water1, water2)\n                    next_status = [water_list[0].water, water_list[1].water, water_list[2].water]\n                    # print 'next_status' , next_status\n                    if next_status in water_queue:\n                        # print '迁移后的状态在记录中存在，将当前状态转到迁移之前的状态'\n                        pass\n                    else:\n                        # print '记录迁移后的状态,一定要用list()来新建一个对象'\n                        cur_status = next_status\n                        water_queue.append(list(next_status))\n                    # print water1.limit , water2.limit, cur_status\n                    print('---', water_queue)\n\n```","slug":"训练营/穷举搜索卡02","published":1,"date":"2019-04-06T14:09:12.518Z","updated":"2019-04-06T14:09:12.518Z","_id":"cjwd4c78i000ssv72h3k6gqju","comments":1,"layout":"post","photos":[],"link":"","content":"<p>给出容量分别为8、5和3升的桶，需要等分成2个4升水。</p>\n<pre><code>[8,0,0]\n[3,5,0] [5,0,3] [3,5,0]\n[3,2,3] [0,5,3] [0,5,3]\n[6,2,0] [3,5,0]\n[6,0,2] [3,2,3]\n[1,5,2]\n[1,4,3]\n[4,4,0]\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaterStatus</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, limit, water)</span>:</span></span><br><span class=\"line\">        self.limit = limit  <span class=\"comment\"># 最大容量</span></span><br><span class=\"line\">        self.water = water  <span class=\"comment\"># 装水容量</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change_water</span><span class=\"params\">(src: WaterStatus, dst: WaterStatus)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> src.water == <span class=\"number\">0</span> <span class=\"keyword\">or</span> dst.water == dst.limit:</span><br><span class=\"line\">        water = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> src.water &gt;= dst.limit - dst.water:</span><br><span class=\"line\">        water = dst.limit - dst.water</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        water = src.water</span><br><span class=\"line\">    src.water -= water</span><br><span class=\"line\">    dst.water += water</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    a = WaterStatus(<span class=\"number\">8</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">    b = WaterStatus(<span class=\"number\">5</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    c = WaterStatus(<span class=\"number\">3</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    water_list = [a, b, c]</span><br><span class=\"line\">    <span class=\"comment\"># 队列</span></span><br><span class=\"line\">    water_queue = deque()</span><br><span class=\"line\">    water_queue.append([<span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    cur_status = []</span><br><span class=\"line\">    cnt = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'***第 %d 次循环***'</span> % cnt)</span><br><span class=\"line\">        cnt += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [<span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>] == cur_status:</span><br><span class=\"line\">            print(<span class=\"string\">'find it!'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> water1 <span class=\"keyword\">in</span> water_list:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> water2 <span class=\"keyword\">in</span> water_list:</span><br><span class=\"line\">                <span class=\"comment\"># 记录当前状态，深拷贝deepcopy，创建新的对象</span></span><br><span class=\"line\">                cur_status = list(water_queue[<span class=\"number\">-1</span>])</span><br><span class=\"line\">                water_list[<span class=\"number\">0</span>].water = cur_status[<span class=\"number\">0</span>]</span><br><span class=\"line\">                water_list[<span class=\"number\">1</span>].water = cur_status[<span class=\"number\">1</span>]</span><br><span class=\"line\">                water_list[<span class=\"number\">2</span>].water = cur_status[<span class=\"number\">2</span>]</span><br><span class=\"line\">                <span class=\"comment\"># print water_list[0].water, water_list[1].water, water_list[2].water</span></span><br><span class=\"line\">                <span class=\"comment\"># 计算一次迁移</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> water1.limit != water2.limit:</span><br><span class=\"line\">                    change_water(water1, water2)</span><br><span class=\"line\">                    next_status = [water_list[<span class=\"number\">0</span>].water, water_list[<span class=\"number\">1</span>].water, water_list[<span class=\"number\">2</span>].water]</span><br><span class=\"line\">                    <span class=\"comment\"># print 'next_status' , next_status</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> next_status <span class=\"keyword\">in</span> water_queue:</span><br><span class=\"line\">                        <span class=\"comment\"># print '迁移后的状态在记录中存在，将当前状态转到迁移之前的状态'</span></span><br><span class=\"line\">                        <span class=\"keyword\">pass</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        <span class=\"comment\"># print '记录迁移后的状态,一定要用list()来新建一个对象'</span></span><br><span class=\"line\">                        cur_status = next_status</span><br><span class=\"line\">                        water_queue.append(list(next_status))</span><br><span class=\"line\">                    <span class=\"comment\"># print water1.limit , water2.limit, cur_status</span></span><br><span class=\"line\">                    print(<span class=\"string\">'---'</span>, water_queue)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>给出容量分别为8、5和3升的桶，需要等分成2个4升水。</p>\n<pre><code>[8,0,0]\n[3,5,0] [5,0,3] [3,5,0]\n[3,2,3] [0,5,3] [0,5,3]\n[6,2,0] [3,5,0]\n[6,0,2] [3,2,3]\n[1,5,2]\n[1,4,3]\n[4,4,0]\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaterStatus</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, limit, water)</span>:</span></span><br><span class=\"line\">        self.limit = limit  <span class=\"comment\"># 最大容量</span></span><br><span class=\"line\">        self.water = water  <span class=\"comment\"># 装水容量</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change_water</span><span class=\"params\">(src: WaterStatus, dst: WaterStatus)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> src.water == <span class=\"number\">0</span> <span class=\"keyword\">or</span> dst.water == dst.limit:</span><br><span class=\"line\">        water = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> src.water &gt;= dst.limit - dst.water:</span><br><span class=\"line\">        water = dst.limit - dst.water</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        water = src.water</span><br><span class=\"line\">    src.water -= water</span><br><span class=\"line\">    dst.water += water</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    a = WaterStatus(<span class=\"number\">8</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">    b = WaterStatus(<span class=\"number\">5</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    c = WaterStatus(<span class=\"number\">3</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    water_list = [a, b, c]</span><br><span class=\"line\">    <span class=\"comment\"># 队列</span></span><br><span class=\"line\">    water_queue = deque()</span><br><span class=\"line\">    water_queue.append([<span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    cur_status = []</span><br><span class=\"line\">    cnt = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'***第 %d 次循环***'</span> % cnt)</span><br><span class=\"line\">        cnt += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [<span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>] == cur_status:</span><br><span class=\"line\">            print(<span class=\"string\">'find it!'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> water1 <span class=\"keyword\">in</span> water_list:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> water2 <span class=\"keyword\">in</span> water_list:</span><br><span class=\"line\">                <span class=\"comment\"># 记录当前状态，深拷贝deepcopy，创建新的对象</span></span><br><span class=\"line\">                cur_status = list(water_queue[<span class=\"number\">-1</span>])</span><br><span class=\"line\">                water_list[<span class=\"number\">0</span>].water = cur_status[<span class=\"number\">0</span>]</span><br><span class=\"line\">                water_list[<span class=\"number\">1</span>].water = cur_status[<span class=\"number\">1</span>]</span><br><span class=\"line\">                water_list[<span class=\"number\">2</span>].water = cur_status[<span class=\"number\">2</span>]</span><br><span class=\"line\">                <span class=\"comment\"># print water_list[0].water, water_list[1].water, water_list[2].water</span></span><br><span class=\"line\">                <span class=\"comment\"># 计算一次迁移</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> water1.limit != water2.limit:</span><br><span class=\"line\">                    change_water(water1, water2)</span><br><span class=\"line\">                    next_status = [water_list[<span class=\"number\">0</span>].water, water_list[<span class=\"number\">1</span>].water, water_list[<span class=\"number\">2</span>].water]</span><br><span class=\"line\">                    <span class=\"comment\"># print 'next_status' , next_status</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> next_status <span class=\"keyword\">in</span> water_queue:</span><br><span class=\"line\">                        <span class=\"comment\"># print '迁移后的状态在记录中存在，将当前状态转到迁移之前的状态'</span></span><br><span class=\"line\">                        <span class=\"keyword\">pass</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        <span class=\"comment\"># print '记录迁移后的状态,一定要用list()来新建一个对象'</span></span><br><span class=\"line\">                        cur_status = next_status</span><br><span class=\"line\">                        water_queue.append(list(next_status))</span><br><span class=\"line\">                    <span class=\"comment\"># print water1.limit , water2.limit, cur_status</span></span><br><span class=\"line\">                    print(<span class=\"string\">'---'</span>, water_queue)</span><br></pre></td></tr></table></figure>"},{"title":"过河","_content":"\n问题描述：\n\n    农夫需要把狼、羊、菜和自己运到河对岸去，\n    只有农夫能够划船，而且船比较小，\n    除农夫之外每次只能运一种东西，\n    还有一个棘手的问题，就是如果没有农夫看着，\n    羊会偷吃菜，狼会吃羊。\n    请考虑一种方法，\n    让农夫能够安全地安排这些东西和他自己过河。\n    \n\n主要思路：\n    \n    在狼、羊和菜这个食物链上，\n    关键是中间的羊，因为狼不吃菜，\n    所以要安全过河，\n    农夫的第一件事就是带羊走，\n    拆开这个食物链。\n    \n目标：\n    \n    [0,0,0,0] -> [1,1,1,1]\n\n过程：\n\n    [0,0,0,0]\n    [1,0,1,0]\n    [0,0,1,0]\n    [1,1,1,0]\n    [0,1,0,0]\n    [1,1,0,1]\n    [0,1,0,1]\n    [1,1,1,1]\n","source":"_posts/训练营/穷举搜索卡03.md","raw":"---\ntitle: 过河\n---\n\n问题描述：\n\n    农夫需要把狼、羊、菜和自己运到河对岸去，\n    只有农夫能够划船，而且船比较小，\n    除农夫之外每次只能运一种东西，\n    还有一个棘手的问题，就是如果没有农夫看着，\n    羊会偷吃菜，狼会吃羊。\n    请考虑一种方法，\n    让农夫能够安全地安排这些东西和他自己过河。\n    \n\n主要思路：\n    \n    在狼、羊和菜这个食物链上，\n    关键是中间的羊，因为狼不吃菜，\n    所以要安全过河，\n    农夫的第一件事就是带羊走，\n    拆开这个食物链。\n    \n目标：\n    \n    [0,0,0,0] -> [1,1,1,1]\n\n过程：\n\n    [0,0,0,0]\n    [1,0,1,0]\n    [0,0,1,0]\n    [1,1,1,0]\n    [0,1,0,0]\n    [1,1,0,1]\n    [0,1,0,1]\n    [1,1,1,1]\n","slug":"训练营/穷举搜索卡03","published":1,"date":"2019-04-07T13:13:35.552Z","updated":"2019-04-07T13:13:35.552Z","_id":"cjwd4c78j000tsv72lt6xp7pj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>问题描述：</p>\n<pre><code>农夫需要把狼、羊、菜和自己运到河对岸去，\n只有农夫能够划船，而且船比较小，\n除农夫之外每次只能运一种东西，\n还有一个棘手的问题，就是如果没有农夫看着，\n羊会偷吃菜，狼会吃羊。\n请考虑一种方法，\n让农夫能够安全地安排这些东西和他自己过河。\n</code></pre><p>主要思路：</p>\n<pre><code>在狼、羊和菜这个食物链上，\n关键是中间的羊，因为狼不吃菜，\n所以要安全过河，\n农夫的第一件事就是带羊走，\n拆开这个食物链。\n</code></pre><p>目标：</p>\n<pre><code>[0,0,0,0] -&gt; [1,1,1,1]\n</code></pre><p>过程：</p>\n<pre><code>[0,0,0,0]\n[1,0,1,0]\n[0,0,1,0]\n[1,1,1,0]\n[0,1,0,0]\n[1,1,0,1]\n[0,1,0,1]\n[1,1,1,1]\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>问题描述：</p>\n<pre><code>农夫需要把狼、羊、菜和自己运到河对岸去，\n只有农夫能够划船，而且船比较小，\n除农夫之外每次只能运一种东西，\n还有一个棘手的问题，就是如果没有农夫看着，\n羊会偷吃菜，狼会吃羊。\n请考虑一种方法，\n让农夫能够安全地安排这些东西和他自己过河。\n</code></pre><p>主要思路：</p>\n<pre><code>在狼、羊和菜这个食物链上，\n关键是中间的羊，因为狼不吃菜，\n所以要安全过河，\n农夫的第一件事就是带羊走，\n拆开这个食物链。\n</code></pre><p>目标：</p>\n<pre><code>[0,0,0,0] -&gt; [1,1,1,1]\n</code></pre><p>过程：</p>\n<pre><code>[0,0,0,0]\n[1,0,1,0]\n[0,0,1,0]\n[1,1,1,0]\n[0,1,0,0]\n[1,1,0,1]\n[0,1,0,1]\n[1,1,1,1]\n</code></pre>"},{"title":"24点计数器","_content":"\n问题描述：\n    \n    任给四个小于10的数，\n    对四个数字用各种组合\n    进行加、减、乘、除四则运算，\n    看看结果是否能等于 24？\n\n\n\n策略：\n    \n    穷举法+分治法\n\n分治：\n    \n    原始问题的规模是 4 个数字计算 24 点，\n    那么分解子问题可以从两个方向考虑：\n    一种是只考虑减少问题的规模，\n    对于这个问题来说，\n    减少规模不就是变成 3 个数字计算 24 点吗？\n    然后再减少为两个数字计算 24 点，\n    以此类推，直到问题能够直接求解为止；\n    另一种是在减少问题规模的同时，\n    调整结果的范围，同样，对这个问题来说，\n    假如说我将问题规模从 4 个变成 3 个，\n    被排除的数字是 3，那么子问题就应该变成\n    “3 个数字计算 21 点”。\n    进一步将问题规模减少成两个数字时，\n    假如被排除的数字是 7，\n    则子问题就变成“2 个数字计算 14 点”，\n    以此类推，直到问题能直接解决为止。\n\n\n以空间换时间","source":"_posts/训练营/穷举搜索卡04.md","raw":"---\ntitle: 24点计数器\n---\n\n问题描述：\n    \n    任给四个小于10的数，\n    对四个数字用各种组合\n    进行加、减、乘、除四则运算，\n    看看结果是否能等于 24？\n\n\n\n策略：\n    \n    穷举法+分治法\n\n分治：\n    \n    原始问题的规模是 4 个数字计算 24 点，\n    那么分解子问题可以从两个方向考虑：\n    一种是只考虑减少问题的规模，\n    对于这个问题来说，\n    减少规模不就是变成 3 个数字计算 24 点吗？\n    然后再减少为两个数字计算 24 点，\n    以此类推，直到问题能够直接求解为止；\n    另一种是在减少问题规模的同时，\n    调整结果的范围，同样，对这个问题来说，\n    假如说我将问题规模从 4 个变成 3 个，\n    被排除的数字是 3，那么子问题就应该变成\n    “3 个数字计算 21 点”。\n    进一步将问题规模减少成两个数字时，\n    假如被排除的数字是 7，\n    则子问题就变成“2 个数字计算 14 点”，\n    以此类推，直到问题能直接解决为止。\n\n\n以空间换时间","slug":"训练营/穷举搜索卡04","published":1,"date":"2019-04-07T13:25:09.670Z","updated":"2019-04-07T13:25:09.670Z","_id":"cjwd4c7az000usv723h5gcdzt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>问题描述：</p>\n<pre><code>任给四个小于10的数，\n对四个数字用各种组合\n进行加、减、乘、除四则运算，\n看看结果是否能等于 24？\n</code></pre><p>策略：</p>\n<pre><code>穷举法+分治法\n</code></pre><p>分治：</p>\n<pre><code>原始问题的规模是 4 个数字计算 24 点，\n那么分解子问题可以从两个方向考虑：\n一种是只考虑减少问题的规模，\n对于这个问题来说，\n减少规模不就是变成 3 个数字计算 24 点吗？\n然后再减少为两个数字计算 24 点，\n以此类推，直到问题能够直接求解为止；\n另一种是在减少问题规模的同时，\n调整结果的范围，同样，对这个问题来说，\n假如说我将问题规模从 4 个变成 3 个，\n被排除的数字是 3，那么子问题就应该变成\n“3 个数字计算 21 点”。\n进一步将问题规模减少成两个数字时，\n假如被排除的数字是 7，\n则子问题就变成“2 个数字计算 14 点”，\n以此类推，直到问题能直接解决为止。\n</code></pre><p>以空间换时间</p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题描述：</p>\n<pre><code>任给四个小于10的数，\n对四个数字用各种组合\n进行加、减、乘、除四则运算，\n看看结果是否能等于 24？\n</code></pre><p>策略：</p>\n<pre><code>穷举法+分治法\n</code></pre><p>分治：</p>\n<pre><code>原始问题的规模是 4 个数字计算 24 点，\n那么分解子问题可以从两个方向考虑：\n一种是只考虑减少问题的规模，\n对于这个问题来说，\n减少规模不就是变成 3 个数字计算 24 点吗？\n然后再减少为两个数字计算 24 点，\n以此类推，直到问题能够直接求解为止；\n另一种是在减少问题规模的同时，\n调整结果的范围，同样，对这个问题来说，\n假如说我将问题规模从 4 个变成 3 个，\n被排除的数字是 3，那么子问题就应该变成\n“3 个数字计算 21 点”。\n进一步将问题规模减少成两个数字时，\n假如被排除的数字是 7，\n则子问题就变成“2 个数字计算 14 点”，\n以此类推，直到问题能直接解决为止。\n</code></pre><p>以空间换时间</p>\n"},{"title":"爱因斯坦的思考题 上","_content":"\n题目描述：\n    \n    据说有五个不同颜色的房间排成一排，\n    每个房间里分别住着一个不同国籍的人，\n    每个人都喝一种特定品牌的饮料，\n    抽一种特定品牌的烟，养一种宠物，\n    没有任意两个人抽相同品牌的香烟，\n    或喝相同品牌的饮料，或养相同的宠物，\n    问题是谁在养鱼作为宠物？\n    \n线索：\n\n    （1）英国人住在红色的房子里\n    （2）瑞典人养狗作为宠物\n    （3）丹麦人喝茶\n    （4）绿房子紧挨着白房子，在白房子的左边\n    （5）绿房子的主人喝咖啡\n    （6）抽 Pall Mall 牌香烟的人养鸟\n    （7）黄色房子里的人抽 Dunhill 牌香烟\n    （8）住在中间那个房子里的人喝牛奶\n    （9）挪威人住在第一个房子里面\n    （10）抽 Blends 牌香烟的人和养猫的人相邻\n    （11）养马的人和抽 Dunhill 牌香烟的人相邻\n    （12）抽 BlueMaster 牌香烟的人喝啤酒\n    （13）德国人抽 Prince 牌香烟\n    （14）挪威人和住在蓝房子的人相邻\n    （15）抽 Blends 牌香烟的人和喝矿泉水的人相邻\n\n状态描述[也是答案的一种]\n    \n    房子      国籍\t    饮料\t    宠物\t    烟\n    黄色      挪威\t    水\t    猫\t    Dunhill\n    蓝色      丹麦\t    茶\t    马\t    Blends\n    红色      英国\t    牛奶\t    鸟\t    PallMall\n    绿色      德国\t    咖啡\t    鱼\t    Prince\n    白色      瑞典\t    啤酒\t    狗\t    BlueMaster\n    \n根据线索得到的状态分布\n    \n    房子      国籍      饮料      宠物      烟\n    住蓝房邻   挪威\n    蓝色\n    红色      英国      \n             瑞典                狗\n             丹麦      茶\n    绿色               咖啡\n    白色\n                                鸟       PallMall\n    黄色                                 Dunhill\n                      啤酒               BlueMaster\n             德国                        Prince\n    中间              牛奶         \n                     邻矿泉水  和养猫的人相邻  Blends \n                                马        和Dunhill相邻\n                                \n分析\n\n    从状态分布来看，所提供的线索完整。并且可以固定部分位置\n    [0][1] = 挪威\n    [1][0] = 蓝色\n    [2][2] = 牛奶\n    多数线索提供 状态绑定关系。\n    Blends 无绑定关系，但相邻关系多，或许是个入手点。","source":"_posts/训练营/穷举搜索法05.md","raw":"---\ntitle: 爱因斯坦的思考题 上\n---\n\n题目描述：\n    \n    据说有五个不同颜色的房间排成一排，\n    每个房间里分别住着一个不同国籍的人，\n    每个人都喝一种特定品牌的饮料，\n    抽一种特定品牌的烟，养一种宠物，\n    没有任意两个人抽相同品牌的香烟，\n    或喝相同品牌的饮料，或养相同的宠物，\n    问题是谁在养鱼作为宠物？\n    \n线索：\n\n    （1）英国人住在红色的房子里\n    （2）瑞典人养狗作为宠物\n    （3）丹麦人喝茶\n    （4）绿房子紧挨着白房子，在白房子的左边\n    （5）绿房子的主人喝咖啡\n    （6）抽 Pall Mall 牌香烟的人养鸟\n    （7）黄色房子里的人抽 Dunhill 牌香烟\n    （8）住在中间那个房子里的人喝牛奶\n    （9）挪威人住在第一个房子里面\n    （10）抽 Blends 牌香烟的人和养猫的人相邻\n    （11）养马的人和抽 Dunhill 牌香烟的人相邻\n    （12）抽 BlueMaster 牌香烟的人喝啤酒\n    （13）德国人抽 Prince 牌香烟\n    （14）挪威人和住在蓝房子的人相邻\n    （15）抽 Blends 牌香烟的人和喝矿泉水的人相邻\n\n状态描述[也是答案的一种]\n    \n    房子      国籍\t    饮料\t    宠物\t    烟\n    黄色      挪威\t    水\t    猫\t    Dunhill\n    蓝色      丹麦\t    茶\t    马\t    Blends\n    红色      英国\t    牛奶\t    鸟\t    PallMall\n    绿色      德国\t    咖啡\t    鱼\t    Prince\n    白色      瑞典\t    啤酒\t    狗\t    BlueMaster\n    \n根据线索得到的状态分布\n    \n    房子      国籍      饮料      宠物      烟\n    住蓝房邻   挪威\n    蓝色\n    红色      英国      \n             瑞典                狗\n             丹麦      茶\n    绿色               咖啡\n    白色\n                                鸟       PallMall\n    黄色                                 Dunhill\n                      啤酒               BlueMaster\n             德国                        Prince\n    中间              牛奶         \n                     邻矿泉水  和养猫的人相邻  Blends \n                                马        和Dunhill相邻\n                                \n分析\n\n    从状态分布来看，所提供的线索完整。并且可以固定部分位置\n    [0][1] = 挪威\n    [1][0] = 蓝色\n    [2][2] = 牛奶\n    多数线索提供 状态绑定关系。\n    Blends 无绑定关系，但相邻关系多，或许是个入手点。","slug":"训练营/穷举搜索法05","published":1,"date":"2019-04-08T14:08:14.224Z","updated":"2019-04-08T14:08:14.224Z","_id":"cjwd4c7b0000vsv72392663vb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>题目描述：</p>\n<pre><code>据说有五个不同颜色的房间排成一排，\n每个房间里分别住着一个不同国籍的人，\n每个人都喝一种特定品牌的饮料，\n抽一种特定品牌的烟，养一种宠物，\n没有任意两个人抽相同品牌的香烟，\n或喝相同品牌的饮料，或养相同的宠物，\n问题是谁在养鱼作为宠物？\n</code></pre><p>线索：</p>\n<pre><code>（1）英国人住在红色的房子里\n（2）瑞典人养狗作为宠物\n（3）丹麦人喝茶\n（4）绿房子紧挨着白房子，在白房子的左边\n（5）绿房子的主人喝咖啡\n（6）抽 Pall Mall 牌香烟的人养鸟\n（7）黄色房子里的人抽 Dunhill 牌香烟\n（8）住在中间那个房子里的人喝牛奶\n（9）挪威人住在第一个房子里面\n（10）抽 Blends 牌香烟的人和养猫的人相邻\n（11）养马的人和抽 Dunhill 牌香烟的人相邻\n（12）抽 BlueMaster 牌香烟的人喝啤酒\n（13）德国人抽 Prince 牌香烟\n（14）挪威人和住在蓝房子的人相邻\n（15）抽 Blends 牌香烟的人和喝矿泉水的人相邻\n</code></pre><p>状态描述[也是答案的一种]</p>\n<pre><code>房子      国籍        饮料        宠物        烟\n黄色      挪威        水        猫        Dunhill\n蓝色      丹麦        茶        马        Blends\n红色      英国        牛奶        鸟        PallMall\n绿色      德国        咖啡        鱼        Prince\n白色      瑞典        啤酒        狗        BlueMaster\n</code></pre><p>根据线索得到的状态分布</p>\n<pre><code>房子      国籍      饮料      宠物      烟\n住蓝房邻   挪威\n蓝色\n红色      英国      \n         瑞典                狗\n         丹麦      茶\n绿色               咖啡\n白色\n                            鸟       PallMall\n黄色                                 Dunhill\n                  啤酒               BlueMaster\n         德国                        Prince\n中间              牛奶         \n                 邻矿泉水  和养猫的人相邻  Blends \n                            马        和Dunhill相邻\n</code></pre><p>分析</p>\n<pre><code>从状态分布来看，所提供的线索完整。并且可以固定部分位置\n[0][1] = 挪威\n[1][0] = 蓝色\n[2][2] = 牛奶\n多数线索提供 状态绑定关系。\nBlends 无绑定关系，但相邻关系多，或许是个入手点。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>题目描述：</p>\n<pre><code>据说有五个不同颜色的房间排成一排，\n每个房间里分别住着一个不同国籍的人，\n每个人都喝一种特定品牌的饮料，\n抽一种特定品牌的烟，养一种宠物，\n没有任意两个人抽相同品牌的香烟，\n或喝相同品牌的饮料，或养相同的宠物，\n问题是谁在养鱼作为宠物？\n</code></pre><p>线索：</p>\n<pre><code>（1）英国人住在红色的房子里\n（2）瑞典人养狗作为宠物\n（3）丹麦人喝茶\n（4）绿房子紧挨着白房子，在白房子的左边\n（5）绿房子的主人喝咖啡\n（6）抽 Pall Mall 牌香烟的人养鸟\n（7）黄色房子里的人抽 Dunhill 牌香烟\n（8）住在中间那个房子里的人喝牛奶\n（9）挪威人住在第一个房子里面\n（10）抽 Blends 牌香烟的人和养猫的人相邻\n（11）养马的人和抽 Dunhill 牌香烟的人相邻\n（12）抽 BlueMaster 牌香烟的人喝啤酒\n（13）德国人抽 Prince 牌香烟\n（14）挪威人和住在蓝房子的人相邻\n（15）抽 Blends 牌香烟的人和喝矿泉水的人相邻\n</code></pre><p>状态描述[也是答案的一种]</p>\n<pre><code>房子      国籍        饮料        宠物        烟\n黄色      挪威        水        猫        Dunhill\n蓝色      丹麦        茶        马        Blends\n红色      英国        牛奶        鸟        PallMall\n绿色      德国        咖啡        鱼        Prince\n白色      瑞典        啤酒        狗        BlueMaster\n</code></pre><p>根据线索得到的状态分布</p>\n<pre><code>房子      国籍      饮料      宠物      烟\n住蓝房邻   挪威\n蓝色\n红色      英国      \n         瑞典                狗\n         丹麦      茶\n绿色               咖啡\n白色\n                            鸟       PallMall\n黄色                                 Dunhill\n                  啤酒               BlueMaster\n         德国                        Prince\n中间              牛奶         \n                 邻矿泉水  和养猫的人相邻  Blends \n                            马        和Dunhill相邻\n</code></pre><p>分析</p>\n<pre><code>从状态分布来看，所提供的线索完整。并且可以固定部分位置\n[0][1] = 挪威\n[1][0] = 蓝色\n[2][2] = 牛奶\n多数线索提供 状态绑定关系。\nBlends 无绑定关系，但相邻关系多，或许是个入手点。\n</code></pre>"},{"title":"爱因斯坦的思考题 下","_content":"\n穷举来源\n    \n    每个状态有 5 个类型\n    每个类型又要对 5 个值进行排列组合\n\n穷举实现\n    \n    根据状态分布，有3个类型是有值在固定位置的\n    则对于国籍需要对4个位置进行排列\n    对于颜色 由于5间房子排成一排\n    所以 蓝色固定在第二间房 \n    而 绿和白存在绑定关系 则对3个位置进行排列\n    对于饮料 住中间位置的人 喝牛奶\n    则需要对 4 个位置进行排列\n    \n    剪枝操作 --。感觉智商不够用\n\n\n使用Python语言实现 \n```python\nfrom itertools import permutations\nfrom copy import deepcopy\n\n#  房子      国籍     饮料     宠物     烟\n# 初始化5个组 用以代表5个人以及5个属性\nmap_info = [\n    [''] * 5 for _ in range(5)\n]\n\n# 根据线索9 得到\nmap_info[0][1] = '挪威'\n\n# 根据 房间排成一排 与线索14 得到\nmap_info[1][0] = '蓝色'\n\n# 根据 线索8 得到\nmap_info[2][2] = '牛奶'\n\n# 线索绑定 s4 得到 绿色白色为一体\n# 并且只能在2，3 或3，4位置，0开始\n# s1 = ['红色', '英国', '', '', '']\n# s2 = ['', '瑞典', '', '狗', '']\n# s3 = ['', '丹麦', '茶', '', '']\n# s5 = ['绿色', '', '咖啡', '', '']\n# s6 = ['', '', '', '鸟', 'PallMall']\n# s7 = ['黄色', '', '', '', 'Dunhill']\n# s12 = ['', '', '啤酒', '', 'BlueMaster']\n# s13 = ['', '德国', '', '', 'Prince']\n\n#    # s11 10, 15\n\n# 从颜色开始，绿白只能或3，4位置 绿房 喝 咖啡\n# 2位置已经固定为牛奶了 s5\nmap_info[3][0] = '绿色'\nmap_info[3][2] = '咖啡'\nmap_info[4][0] = '白色'\n\n# 结合国籍看 那么剩下颜色中间位置\nmap_info[2][0] = '红色'\nmap_info[2][1] = '英国'\nmap_info[0][0] = '黄色'\n# print(map_info)\n# todo ---以上 颜色排列完整\n\n# s7 绑定 Dunhill\nmap_info[0][4] = 'Dunhill'\n# s11 养马的人和抽 Dunhill 牌香烟的人相邻\nmap_info[1][3] = '马'\n# print(map_info)\n\n\n# 对剩下的7个线索做为消费数据对象\n# 对剩下的4个类型作为排列对象生产数据\n\n\n# 消费数据\ndef check(map_info_test):\n    for i in range(5):\n\n        if map_info_test[i][1] == '瑞典' and map_info_test[i][3] != '狗':\n            return False\n        if map_info_test[i][1] == '丹麦' and map_info_test[i][2] != '茶':\n            return False\n        if map_info_test[i][3] == '鸟' and map_info_test[i][4] != 'PallMall':\n            return False\n        if map_info_test[i][2] == '啤酒' and map_info_test[i][4] != 'BlueMaster':\n            return False\n        if map_info_test[i][1] == '德国' and map_info_test[i][4] != 'Prince':\n            return False\n        if map_info_test[i][4] == 'Blends':\n            status = False\n            try:\n                if map_info_test[i - 1][3] == '猫':\n                    status = True\n            except:\n                pass\n            try:\n                if map_info_test[i + 1][3] == '猫':\n                    status = True\n            except:\n                pass\n            if status is False:\n                return False\n\n        if map_info_test[i][4] == 'Blends':\n\n            status = False\n            try:\n                if map_info_test[i - 1][2] == '水':\n                    status = True\n            except:\n                pass\n            try:\n                if map_info_test[i + 1][2] == '水':\n                    status = True\n            except:\n                pass\n            if status is False:\n                return False\n    # 通过校验\n    return True\n\n\n# 生产数据\n\"\"\"\n1. 国籍 1，3，4 -- 丹麦、德国、瑞典\n2. 饮料 0，1，4 -- 水、茶、啤酒\n3. 宠物 0，2，3，4 -- 猫、鸟、鱼、狗\n4. 烟 1，2，3，4 -- Blends、PallMall、Prince、BlueMaster\n\"\"\"\n\nres = []\nfor g in permutations({'丹麦', '德国', '瑞典'}, 3):\n    map_info[1][1], map_info[3][1], map_info[4][1] = g\n    # print(map_info)\n\n    for yl in permutations({'水', '茶', ' 啤酒'}, 3):\n        map_info[0][2], map_info[1][2], map_info[4][2] = yl\n\n        for c in permutations({'猫', '鸟', '鱼', '狗'}, 4):\n            map_info[0][3], map_info[2][3], map_info[3][3], map_info[4][3] = c\n\n            for y in permutations({'Blends', 'PallMall', 'Prince', 'BlueMaster'}, 4):\n                map_info[1][4], map_info[2][4], map_info[3][4], map_info[4][4] = y\n\n                if check(map_info):\n                    res.append(deepcopy(map_info))\n\nfor r in res:\n    print(r)\n\n```","source":"_posts/训练营/穷举搜索法06.md","raw":"---\ntitle: 爱因斯坦的思考题 下\n---\n\n穷举来源\n    \n    每个状态有 5 个类型\n    每个类型又要对 5 个值进行排列组合\n\n穷举实现\n    \n    根据状态分布，有3个类型是有值在固定位置的\n    则对于国籍需要对4个位置进行排列\n    对于颜色 由于5间房子排成一排\n    所以 蓝色固定在第二间房 \n    而 绿和白存在绑定关系 则对3个位置进行排列\n    对于饮料 住中间位置的人 喝牛奶\n    则需要对 4 个位置进行排列\n    \n    剪枝操作 --。感觉智商不够用\n\n\n使用Python语言实现 \n```python\nfrom itertools import permutations\nfrom copy import deepcopy\n\n#  房子      国籍     饮料     宠物     烟\n# 初始化5个组 用以代表5个人以及5个属性\nmap_info = [\n    [''] * 5 for _ in range(5)\n]\n\n# 根据线索9 得到\nmap_info[0][1] = '挪威'\n\n# 根据 房间排成一排 与线索14 得到\nmap_info[1][0] = '蓝色'\n\n# 根据 线索8 得到\nmap_info[2][2] = '牛奶'\n\n# 线索绑定 s4 得到 绿色白色为一体\n# 并且只能在2，3 或3，4位置，0开始\n# s1 = ['红色', '英国', '', '', '']\n# s2 = ['', '瑞典', '', '狗', '']\n# s3 = ['', '丹麦', '茶', '', '']\n# s5 = ['绿色', '', '咖啡', '', '']\n# s6 = ['', '', '', '鸟', 'PallMall']\n# s7 = ['黄色', '', '', '', 'Dunhill']\n# s12 = ['', '', '啤酒', '', 'BlueMaster']\n# s13 = ['', '德国', '', '', 'Prince']\n\n#    # s11 10, 15\n\n# 从颜色开始，绿白只能或3，4位置 绿房 喝 咖啡\n# 2位置已经固定为牛奶了 s5\nmap_info[3][0] = '绿色'\nmap_info[3][2] = '咖啡'\nmap_info[4][0] = '白色'\n\n# 结合国籍看 那么剩下颜色中间位置\nmap_info[2][0] = '红色'\nmap_info[2][1] = '英国'\nmap_info[0][0] = '黄色'\n# print(map_info)\n# todo ---以上 颜色排列完整\n\n# s7 绑定 Dunhill\nmap_info[0][4] = 'Dunhill'\n# s11 养马的人和抽 Dunhill 牌香烟的人相邻\nmap_info[1][3] = '马'\n# print(map_info)\n\n\n# 对剩下的7个线索做为消费数据对象\n# 对剩下的4个类型作为排列对象生产数据\n\n\n# 消费数据\ndef check(map_info_test):\n    for i in range(5):\n\n        if map_info_test[i][1] == '瑞典' and map_info_test[i][3] != '狗':\n            return False\n        if map_info_test[i][1] == '丹麦' and map_info_test[i][2] != '茶':\n            return False\n        if map_info_test[i][3] == '鸟' and map_info_test[i][4] != 'PallMall':\n            return False\n        if map_info_test[i][2] == '啤酒' and map_info_test[i][4] != 'BlueMaster':\n            return False\n        if map_info_test[i][1] == '德国' and map_info_test[i][4] != 'Prince':\n            return False\n        if map_info_test[i][4] == 'Blends':\n            status = False\n            try:\n                if map_info_test[i - 1][3] == '猫':\n                    status = True\n            except:\n                pass\n            try:\n                if map_info_test[i + 1][3] == '猫':\n                    status = True\n            except:\n                pass\n            if status is False:\n                return False\n\n        if map_info_test[i][4] == 'Blends':\n\n            status = False\n            try:\n                if map_info_test[i - 1][2] == '水':\n                    status = True\n            except:\n                pass\n            try:\n                if map_info_test[i + 1][2] == '水':\n                    status = True\n            except:\n                pass\n            if status is False:\n                return False\n    # 通过校验\n    return True\n\n\n# 生产数据\n\"\"\"\n1. 国籍 1，3，4 -- 丹麦、德国、瑞典\n2. 饮料 0，1，4 -- 水、茶、啤酒\n3. 宠物 0，2，3，4 -- 猫、鸟、鱼、狗\n4. 烟 1，2，3，4 -- Blends、PallMall、Prince、BlueMaster\n\"\"\"\n\nres = []\nfor g in permutations({'丹麦', '德国', '瑞典'}, 3):\n    map_info[1][1], map_info[3][1], map_info[4][1] = g\n    # print(map_info)\n\n    for yl in permutations({'水', '茶', ' 啤酒'}, 3):\n        map_info[0][2], map_info[1][2], map_info[4][2] = yl\n\n        for c in permutations({'猫', '鸟', '鱼', '狗'}, 4):\n            map_info[0][3], map_info[2][3], map_info[3][3], map_info[4][3] = c\n\n            for y in permutations({'Blends', 'PallMall', 'Prince', 'BlueMaster'}, 4):\n                map_info[1][4], map_info[2][4], map_info[3][4], map_info[4][4] = y\n\n                if check(map_info):\n                    res.append(deepcopy(map_info))\n\nfor r in res:\n    print(r)\n\n```","slug":"训练营/穷举搜索法06","published":1,"date":"2019-04-08T16:45:49.390Z","updated":"2019-04-08T16:45:49.390Z","_id":"cjwd4c7b1000wsv72iiqavkvm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>穷举来源</p>\n<pre><code>每个状态有 5 个类型\n每个类型又要对 5 个值进行排列组合\n</code></pre><p>穷举实现</p>\n<pre><code>根据状态分布，有3个类型是有值在固定位置的\n则对于国籍需要对4个位置进行排列\n对于颜色 由于5间房子排成一排\n所以 蓝色固定在第二间房 \n而 绿和白存在绑定关系 则对3个位置进行排列\n对于饮料 住中间位置的人 喝牛奶\n则需要对 4 个位置进行排列\n\n剪枝操作 --。感觉智商不够用\n</code></pre><p>使用Python语言实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> permutations</span><br><span class=\"line\"><span class=\"keyword\">from</span> copy <span class=\"keyword\">import</span> deepcopy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  房子      国籍     饮料     宠物     烟</span></span><br><span class=\"line\"><span class=\"comment\"># 初始化5个组 用以代表5个人以及5个属性</span></span><br><span class=\"line\">map_info = [</span><br><span class=\"line\">    [<span class=\"string\">''</span>] * <span class=\"number\">5</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据线索9 得到</span></span><br><span class=\"line\">map_info[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"string\">'挪威'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据 房间排成一排 与线索14 得到</span></span><br><span class=\"line\">map_info[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"string\">'蓝色'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据 线索8 得到</span></span><br><span class=\"line\">map_info[<span class=\"number\">2</span>][<span class=\"number\">2</span>] = <span class=\"string\">'牛奶'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 线索绑定 s4 得到 绿色白色为一体</span></span><br><span class=\"line\"><span class=\"comment\"># 并且只能在2，3 或3，4位置，0开始</span></span><br><span class=\"line\"><span class=\"comment\"># s1 = ['红色', '英国', '', '', '']</span></span><br><span class=\"line\"><span class=\"comment\"># s2 = ['', '瑞典', '', '狗', '']</span></span><br><span class=\"line\"><span class=\"comment\"># s3 = ['', '丹麦', '茶', '', '']</span></span><br><span class=\"line\"><span class=\"comment\"># s5 = ['绿色', '', '咖啡', '', '']</span></span><br><span class=\"line\"><span class=\"comment\"># s6 = ['', '', '', '鸟', 'PallMall']</span></span><br><span class=\"line\"><span class=\"comment\"># s7 = ['黄色', '', '', '', 'Dunhill']</span></span><br><span class=\"line\"><span class=\"comment\"># s12 = ['', '', '啤酒', '', 'BlueMaster']</span></span><br><span class=\"line\"><span class=\"comment\"># s13 = ['', '德国', '', '', 'Prince']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#    # s11 10, 15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从颜色开始，绿白只能或3，4位置 绿房 喝 咖啡</span></span><br><span class=\"line\"><span class=\"comment\"># 2位置已经固定为牛奶了 s5</span></span><br><span class=\"line\">map_info[<span class=\"number\">3</span>][<span class=\"number\">0</span>] = <span class=\"string\">'绿色'</span></span><br><span class=\"line\">map_info[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = <span class=\"string\">'咖啡'</span></span><br><span class=\"line\">map_info[<span class=\"number\">4</span>][<span class=\"number\">0</span>] = <span class=\"string\">'白色'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 结合国籍看 那么剩下颜色中间位置</span></span><br><span class=\"line\">map_info[<span class=\"number\">2</span>][<span class=\"number\">0</span>] = <span class=\"string\">'红色'</span></span><br><span class=\"line\">map_info[<span class=\"number\">2</span>][<span class=\"number\">1</span>] = <span class=\"string\">'英国'</span></span><br><span class=\"line\">map_info[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"string\">'黄色'</span></span><br><span class=\"line\"><span class=\"comment\"># print(map_info)</span></span><br><span class=\"line\"><span class=\"comment\"># todo ---以上 颜色排列完整</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># s7 绑定 Dunhill</span></span><br><span class=\"line\">map_info[<span class=\"number\">0</span>][<span class=\"number\">4</span>] = <span class=\"string\">'Dunhill'</span></span><br><span class=\"line\"><span class=\"comment\"># s11 养马的人和抽 Dunhill 牌香烟的人相邻</span></span><br><span class=\"line\">map_info[<span class=\"number\">1</span>][<span class=\"number\">3</span>] = <span class=\"string\">'马'</span></span><br><span class=\"line\"><span class=\"comment\"># print(map_info)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对剩下的7个线索做为消费数据对象</span></span><br><span class=\"line\"><span class=\"comment\"># 对剩下的4个类型作为排列对象生产数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 消费数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(map_info_test)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> map_info_test[i][<span class=\"number\">1</span>] == <span class=\"string\">'瑞典'</span> <span class=\"keyword\">and</span> map_info_test[i][<span class=\"number\">3</span>] != <span class=\"string\">'狗'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> map_info_test[i][<span class=\"number\">1</span>] == <span class=\"string\">'丹麦'</span> <span class=\"keyword\">and</span> map_info_test[i][<span class=\"number\">2</span>] != <span class=\"string\">'茶'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> map_info_test[i][<span class=\"number\">3</span>] == <span class=\"string\">'鸟'</span> <span class=\"keyword\">and</span> map_info_test[i][<span class=\"number\">4</span>] != <span class=\"string\">'PallMall'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> map_info_test[i][<span class=\"number\">2</span>] == <span class=\"string\">'啤酒'</span> <span class=\"keyword\">and</span> map_info_test[i][<span class=\"number\">4</span>] != <span class=\"string\">'BlueMaster'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> map_info_test[i][<span class=\"number\">1</span>] == <span class=\"string\">'德国'</span> <span class=\"keyword\">and</span> map_info_test[i][<span class=\"number\">4</span>] != <span class=\"string\">'Prince'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> map_info_test[i][<span class=\"number\">4</span>] == <span class=\"string\">'Blends'</span>:</span><br><span class=\"line\">            status = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> map_info_test[i - <span class=\"number\">1</span>][<span class=\"number\">3</span>] == <span class=\"string\">'猫'</span>:</span><br><span class=\"line\">                    status = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> map_info_test[i + <span class=\"number\">1</span>][<span class=\"number\">3</span>] == <span class=\"string\">'猫'</span>:</span><br><span class=\"line\">                    status = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> status <span class=\"keyword\">is</span> <span class=\"literal\">False</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> map_info_test[i][<span class=\"number\">4</span>] == <span class=\"string\">'Blends'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            status = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> map_info_test[i - <span class=\"number\">1</span>][<span class=\"number\">2</span>] == <span class=\"string\">'水'</span>:</span><br><span class=\"line\">                    status = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> map_info_test[i + <span class=\"number\">1</span>][<span class=\"number\">2</span>] == <span class=\"string\">'水'</span>:</span><br><span class=\"line\">                    status = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> status <span class=\"keyword\">is</span> <span class=\"literal\">False</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过校验</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生产数据</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">1. 国籍 1，3，4 -- 丹麦、德国、瑞典</span></span><br><span class=\"line\"><span class=\"string\">2. 饮料 0，1，4 -- 水、茶、啤酒</span></span><br><span class=\"line\"><span class=\"string\">3. 宠物 0，2，3，4 -- 猫、鸟、鱼、狗</span></span><br><span class=\"line\"><span class=\"string\">4. 烟 1，2，3，4 -- Blends、PallMall、Prince、BlueMaster</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">res = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> g <span class=\"keyword\">in</span> permutations(&#123;<span class=\"string\">'丹麦'</span>, <span class=\"string\">'德国'</span>, <span class=\"string\">'瑞典'</span>&#125;, <span class=\"number\">3</span>):</span><br><span class=\"line\">    map_info[<span class=\"number\">1</span>][<span class=\"number\">1</span>], map_info[<span class=\"number\">3</span>][<span class=\"number\">1</span>], map_info[<span class=\"number\">4</span>][<span class=\"number\">1</span>] = g</span><br><span class=\"line\">    <span class=\"comment\"># print(map_info)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> yl <span class=\"keyword\">in</span> permutations(&#123;<span class=\"string\">'水'</span>, <span class=\"string\">'茶'</span>, <span class=\"string\">' 啤酒'</span>&#125;, <span class=\"number\">3</span>):</span><br><span class=\"line\">        map_info[<span class=\"number\">0</span>][<span class=\"number\">2</span>], map_info[<span class=\"number\">1</span>][<span class=\"number\">2</span>], map_info[<span class=\"number\">4</span>][<span class=\"number\">2</span>] = yl</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> permutations(&#123;<span class=\"string\">'猫'</span>, <span class=\"string\">'鸟'</span>, <span class=\"string\">'鱼'</span>, <span class=\"string\">'狗'</span>&#125;, <span class=\"number\">4</span>):</span><br><span class=\"line\">            map_info[<span class=\"number\">0</span>][<span class=\"number\">3</span>], map_info[<span class=\"number\">2</span>][<span class=\"number\">3</span>], map_info[<span class=\"number\">3</span>][<span class=\"number\">3</span>], map_info[<span class=\"number\">4</span>][<span class=\"number\">3</span>] = c</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> permutations(&#123;<span class=\"string\">'Blends'</span>, <span class=\"string\">'PallMall'</span>, <span class=\"string\">'Prince'</span>, <span class=\"string\">'BlueMaster'</span>&#125;, <span class=\"number\">4</span>):</span><br><span class=\"line\">                map_info[<span class=\"number\">1</span>][<span class=\"number\">4</span>], map_info[<span class=\"number\">2</span>][<span class=\"number\">4</span>], map_info[<span class=\"number\">3</span>][<span class=\"number\">4</span>], map_info[<span class=\"number\">4</span>][<span class=\"number\">4</span>] = y</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> check(map_info):</span><br><span class=\"line\">                    res.append(deepcopy(map_info))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> res:</span><br><span class=\"line\">    print(r)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>穷举来源</p>\n<pre><code>每个状态有 5 个类型\n每个类型又要对 5 个值进行排列组合\n</code></pre><p>穷举实现</p>\n<pre><code>根据状态分布，有3个类型是有值在固定位置的\n则对于国籍需要对4个位置进行排列\n对于颜色 由于5间房子排成一排\n所以 蓝色固定在第二间房 \n而 绿和白存在绑定关系 则对3个位置进行排列\n对于饮料 住中间位置的人 喝牛奶\n则需要对 4 个位置进行排列\n\n剪枝操作 --。感觉智商不够用\n</code></pre><p>使用Python语言实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> permutations</span><br><span class=\"line\"><span class=\"keyword\">from</span> copy <span class=\"keyword\">import</span> deepcopy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  房子      国籍     饮料     宠物     烟</span></span><br><span class=\"line\"><span class=\"comment\"># 初始化5个组 用以代表5个人以及5个属性</span></span><br><span class=\"line\">map_info = [</span><br><span class=\"line\">    [<span class=\"string\">''</span>] * <span class=\"number\">5</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据线索9 得到</span></span><br><span class=\"line\">map_info[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"string\">'挪威'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据 房间排成一排 与线索14 得到</span></span><br><span class=\"line\">map_info[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"string\">'蓝色'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据 线索8 得到</span></span><br><span class=\"line\">map_info[<span class=\"number\">2</span>][<span class=\"number\">2</span>] = <span class=\"string\">'牛奶'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 线索绑定 s4 得到 绿色白色为一体</span></span><br><span class=\"line\"><span class=\"comment\"># 并且只能在2，3 或3，4位置，0开始</span></span><br><span class=\"line\"><span class=\"comment\"># s1 = ['红色', '英国', '', '', '']</span></span><br><span class=\"line\"><span class=\"comment\"># s2 = ['', '瑞典', '', '狗', '']</span></span><br><span class=\"line\"><span class=\"comment\"># s3 = ['', '丹麦', '茶', '', '']</span></span><br><span class=\"line\"><span class=\"comment\"># s5 = ['绿色', '', '咖啡', '', '']</span></span><br><span class=\"line\"><span class=\"comment\"># s6 = ['', '', '', '鸟', 'PallMall']</span></span><br><span class=\"line\"><span class=\"comment\"># s7 = ['黄色', '', '', '', 'Dunhill']</span></span><br><span class=\"line\"><span class=\"comment\"># s12 = ['', '', '啤酒', '', 'BlueMaster']</span></span><br><span class=\"line\"><span class=\"comment\"># s13 = ['', '德国', '', '', 'Prince']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#    # s11 10, 15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从颜色开始，绿白只能或3，4位置 绿房 喝 咖啡</span></span><br><span class=\"line\"><span class=\"comment\"># 2位置已经固定为牛奶了 s5</span></span><br><span class=\"line\">map_info[<span class=\"number\">3</span>][<span class=\"number\">0</span>] = <span class=\"string\">'绿色'</span></span><br><span class=\"line\">map_info[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = <span class=\"string\">'咖啡'</span></span><br><span class=\"line\">map_info[<span class=\"number\">4</span>][<span class=\"number\">0</span>] = <span class=\"string\">'白色'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 结合国籍看 那么剩下颜色中间位置</span></span><br><span class=\"line\">map_info[<span class=\"number\">2</span>][<span class=\"number\">0</span>] = <span class=\"string\">'红色'</span></span><br><span class=\"line\">map_info[<span class=\"number\">2</span>][<span class=\"number\">1</span>] = <span class=\"string\">'英国'</span></span><br><span class=\"line\">map_info[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"string\">'黄色'</span></span><br><span class=\"line\"><span class=\"comment\"># print(map_info)</span></span><br><span class=\"line\"><span class=\"comment\"># todo ---以上 颜色排列完整</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># s7 绑定 Dunhill</span></span><br><span class=\"line\">map_info[<span class=\"number\">0</span>][<span class=\"number\">4</span>] = <span class=\"string\">'Dunhill'</span></span><br><span class=\"line\"><span class=\"comment\"># s11 养马的人和抽 Dunhill 牌香烟的人相邻</span></span><br><span class=\"line\">map_info[<span class=\"number\">1</span>][<span class=\"number\">3</span>] = <span class=\"string\">'马'</span></span><br><span class=\"line\"><span class=\"comment\"># print(map_info)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对剩下的7个线索做为消费数据对象</span></span><br><span class=\"line\"><span class=\"comment\"># 对剩下的4个类型作为排列对象生产数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 消费数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(map_info_test)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> map_info_test[i][<span class=\"number\">1</span>] == <span class=\"string\">'瑞典'</span> <span class=\"keyword\">and</span> map_info_test[i][<span class=\"number\">3</span>] != <span class=\"string\">'狗'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> map_info_test[i][<span class=\"number\">1</span>] == <span class=\"string\">'丹麦'</span> <span class=\"keyword\">and</span> map_info_test[i][<span class=\"number\">2</span>] != <span class=\"string\">'茶'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> map_info_test[i][<span class=\"number\">3</span>] == <span class=\"string\">'鸟'</span> <span class=\"keyword\">and</span> map_info_test[i][<span class=\"number\">4</span>] != <span class=\"string\">'PallMall'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> map_info_test[i][<span class=\"number\">2</span>] == <span class=\"string\">'啤酒'</span> <span class=\"keyword\">and</span> map_info_test[i][<span class=\"number\">4</span>] != <span class=\"string\">'BlueMaster'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> map_info_test[i][<span class=\"number\">1</span>] == <span class=\"string\">'德国'</span> <span class=\"keyword\">and</span> map_info_test[i][<span class=\"number\">4</span>] != <span class=\"string\">'Prince'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> map_info_test[i][<span class=\"number\">4</span>] == <span class=\"string\">'Blends'</span>:</span><br><span class=\"line\">            status = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> map_info_test[i - <span class=\"number\">1</span>][<span class=\"number\">3</span>] == <span class=\"string\">'猫'</span>:</span><br><span class=\"line\">                    status = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> map_info_test[i + <span class=\"number\">1</span>][<span class=\"number\">3</span>] == <span class=\"string\">'猫'</span>:</span><br><span class=\"line\">                    status = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> status <span class=\"keyword\">is</span> <span class=\"literal\">False</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> map_info_test[i][<span class=\"number\">4</span>] == <span class=\"string\">'Blends'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            status = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> map_info_test[i - <span class=\"number\">1</span>][<span class=\"number\">2</span>] == <span class=\"string\">'水'</span>:</span><br><span class=\"line\">                    status = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> map_info_test[i + <span class=\"number\">1</span>][<span class=\"number\">2</span>] == <span class=\"string\">'水'</span>:</span><br><span class=\"line\">                    status = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> status <span class=\"keyword\">is</span> <span class=\"literal\">False</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过校验</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生产数据</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">1. 国籍 1，3，4 -- 丹麦、德国、瑞典</span></span><br><span class=\"line\"><span class=\"string\">2. 饮料 0，1，4 -- 水、茶、啤酒</span></span><br><span class=\"line\"><span class=\"string\">3. 宠物 0，2，3，4 -- 猫、鸟、鱼、狗</span></span><br><span class=\"line\"><span class=\"string\">4. 烟 1，2，3，4 -- Blends、PallMall、Prince、BlueMaster</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">res = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> g <span class=\"keyword\">in</span> permutations(&#123;<span class=\"string\">'丹麦'</span>, <span class=\"string\">'德国'</span>, <span class=\"string\">'瑞典'</span>&#125;, <span class=\"number\">3</span>):</span><br><span class=\"line\">    map_info[<span class=\"number\">1</span>][<span class=\"number\">1</span>], map_info[<span class=\"number\">3</span>][<span class=\"number\">1</span>], map_info[<span class=\"number\">4</span>][<span class=\"number\">1</span>] = g</span><br><span class=\"line\">    <span class=\"comment\"># print(map_info)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> yl <span class=\"keyword\">in</span> permutations(&#123;<span class=\"string\">'水'</span>, <span class=\"string\">'茶'</span>, <span class=\"string\">' 啤酒'</span>&#125;, <span class=\"number\">3</span>):</span><br><span class=\"line\">        map_info[<span class=\"number\">0</span>][<span class=\"number\">2</span>], map_info[<span class=\"number\">1</span>][<span class=\"number\">2</span>], map_info[<span class=\"number\">4</span>][<span class=\"number\">2</span>] = yl</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> permutations(&#123;<span class=\"string\">'猫'</span>, <span class=\"string\">'鸟'</span>, <span class=\"string\">'鱼'</span>, <span class=\"string\">'狗'</span>&#125;, <span class=\"number\">4</span>):</span><br><span class=\"line\">            map_info[<span class=\"number\">0</span>][<span class=\"number\">3</span>], map_info[<span class=\"number\">2</span>][<span class=\"number\">3</span>], map_info[<span class=\"number\">3</span>][<span class=\"number\">3</span>], map_info[<span class=\"number\">4</span>][<span class=\"number\">3</span>] = c</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> permutations(&#123;<span class=\"string\">'Blends'</span>, <span class=\"string\">'PallMall'</span>, <span class=\"string\">'Prince'</span>, <span class=\"string\">'BlueMaster'</span>&#125;, <span class=\"number\">4</span>):</span><br><span class=\"line\">                map_info[<span class=\"number\">1</span>][<span class=\"number\">4</span>], map_info[<span class=\"number\">2</span>][<span class=\"number\">4</span>], map_info[<span class=\"number\">3</span>][<span class=\"number\">4</span>], map_info[<span class=\"number\">4</span>][<span class=\"number\">4</span>] = y</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> check(map_info):</span><br><span class=\"line\">                    res.append(deepcopy(map_info))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> res:</span><br><span class=\"line\">    print(r)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"多点共线问题","_content":"\n问题提出\n    \n    一个几何平面上有 N 个点，\n    根据欧氏（欧几里得）几何原理，\n    每两个点可以连成一条直线，\n    N 个点可以连成很多条直线。\n    当然，也会有多个点共线的情况出现，\n    现在我们的问题是，在这 N 个点中，\n    找出哪两个点组成的直线上包含最多的点，\n    也就是找出含有最多点的那条直线。\n    \n注意浮点数不要直接比较值相等\n    \n解题思路\n    \n    确定一个点为原点\n    其他点过原点的斜率计算\n    统计出斜率频次并取最大，并记录\n    依次遍历点作为原点，重复上面操作\n    从记录的频次列表中\n    求得最大的即为含有最多点的那条直线。\n    \n使用Python实现\n```python\nfrom collections import Counter\n\n\ndef get_most_count(spot_list):\n    res = set()\n    for j in range(len(spot_list)):\n        tmp = list()\n        for i, spot in enumerate(spot_list):\n\n            if j == i:\n                continue\n            x, y = spot\n            x0, y0 = spot_list[j]\n            # 注意x==x0时的情况为斜率不存在\n            if (x - x0) != 0:\n                tmp.append(format((y - y0) / (x - x0), '.8f'))\n            else:\n                tmp.append(float(\"inf\"))\n        res.add(max(Counter(tmp).values()))\n    return max(res) + 1\n```\n    ","source":"_posts/训练营/穷举搜索法07.md","raw":"---\ntitle: 多点共线问题\n---\n\n问题提出\n    \n    一个几何平面上有 N 个点，\n    根据欧氏（欧几里得）几何原理，\n    每两个点可以连成一条直线，\n    N 个点可以连成很多条直线。\n    当然，也会有多个点共线的情况出现，\n    现在我们的问题是，在这 N 个点中，\n    找出哪两个点组成的直线上包含最多的点，\n    也就是找出含有最多点的那条直线。\n    \n注意浮点数不要直接比较值相等\n    \n解题思路\n    \n    确定一个点为原点\n    其他点过原点的斜率计算\n    统计出斜率频次并取最大，并记录\n    依次遍历点作为原点，重复上面操作\n    从记录的频次列表中\n    求得最大的即为含有最多点的那条直线。\n    \n使用Python实现\n```python\nfrom collections import Counter\n\n\ndef get_most_count(spot_list):\n    res = set()\n    for j in range(len(spot_list)):\n        tmp = list()\n        for i, spot in enumerate(spot_list):\n\n            if j == i:\n                continue\n            x, y = spot\n            x0, y0 = spot_list[j]\n            # 注意x==x0时的情况为斜率不存在\n            if (x - x0) != 0:\n                tmp.append(format((y - y0) / (x - x0), '.8f'))\n            else:\n                tmp.append(float(\"inf\"))\n        res.add(max(Counter(tmp).values()))\n    return max(res) + 1\n```\n    ","slug":"训练营/穷举搜索法07","published":1,"date":"2019-04-09T13:54:18.913Z","updated":"2019-04-09T13:54:18.913Z","_id":"cjwd4c7dz000xsv72vokm3wvc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>问题提出</p>\n<pre><code>一个几何平面上有 N 个点，\n根据欧氏（欧几里得）几何原理，\n每两个点可以连成一条直线，\nN 个点可以连成很多条直线。\n当然，也会有多个点共线的情况出现，\n现在我们的问题是，在这 N 个点中，\n找出哪两个点组成的直线上包含最多的点，\n也就是找出含有最多点的那条直线。\n</code></pre><p>注意浮点数不要直接比较值相等</p>\n<p>解题思路</p>\n<pre><code>确定一个点为原点\n其他点过原点的斜率计算\n统计出斜率频次并取最大，并记录\n依次遍历点作为原点，重复上面操作\n从记录的频次列表中\n求得最大的即为含有最多点的那条直线。\n</code></pre><p>使用Python实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_most_count</span><span class=\"params\">(spot_list)</span>:</span></span><br><span class=\"line\">    res = set()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(spot_list)):</span><br><span class=\"line\">        tmp = list()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, spot <span class=\"keyword\">in</span> enumerate(spot_list):</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> j == i:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            x, y = spot</span><br><span class=\"line\">            x0, y0 = spot_list[j]</span><br><span class=\"line\">            <span class=\"comment\"># 注意x==x0时的情况为斜率不存在</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x - x0) != <span class=\"number\">0</span>:</span><br><span class=\"line\">                tmp.append(format((y - y0) / (x - x0), <span class=\"string\">'.8f'</span>))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                tmp.append(float(<span class=\"string\">\"inf\"</span>))</span><br><span class=\"line\">        res.add(max(Counter(tmp).values()))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(res) + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题提出</p>\n<pre><code>一个几何平面上有 N 个点，\n根据欧氏（欧几里得）几何原理，\n每两个点可以连成一条直线，\nN 个点可以连成很多条直线。\n当然，也会有多个点共线的情况出现，\n现在我们的问题是，在这 N 个点中，\n找出哪两个点组成的直线上包含最多的点，\n也就是找出含有最多点的那条直线。\n</code></pre><p>注意浮点数不要直接比较值相等</p>\n<p>解题思路</p>\n<pre><code>确定一个点为原点\n其他点过原点的斜率计算\n统计出斜率频次并取最大，并记录\n依次遍历点作为原点，重复上面操作\n从记录的频次列表中\n求得最大的即为含有最多点的那条直线。\n</code></pre><p>使用Python实现<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_most_count</span><span class=\"params\">(spot_list)</span>:</span></span><br><span class=\"line\">    res = set()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(spot_list)):</span><br><span class=\"line\">        tmp = list()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, spot <span class=\"keyword\">in</span> enumerate(spot_list):</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> j == i:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            x, y = spot</span><br><span class=\"line\">            x0, y0 = spot_list[j]</span><br><span class=\"line\">            <span class=\"comment\"># 注意x==x0时的情况为斜率不存在</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x - x0) != <span class=\"number\">0</span>:</span><br><span class=\"line\">                tmp.append(format((y - y0) / (x - x0), <span class=\"string\">'.8f'</span>))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                tmp.append(float(<span class=\"string\">\"inf\"</span>))</span><br><span class=\"line\">        res.add(max(Counter(tmp).values()))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(res) + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"如何设计递归函数","_content":"\n递归\n    \n    1. 确定递归子结构\n    2. 确定递归退出条件和退出处理\n    3. 递归的自我触发机制\n\n    基本原则是能不使用递归就不使用递归，\n    毕竟递归方法存在效率和栈的开销问题，\n    在搞不清楚问题规模的情况下，\n    很容易出现问题。\n\n\n二叉树的前序遍历\n    \n    根-->左-->右\n    \n    \n举个简单的例子\n```python\ndef fib(n):\n    \n    if n <= 1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n\n```","source":"_posts/训练营/穷举搜索法08.md","raw":"---\ntitle: 如何设计递归函数\n---\n\n递归\n    \n    1. 确定递归子结构\n    2. 确定递归退出条件和退出处理\n    3. 递归的自我触发机制\n\n    基本原则是能不使用递归就不使用递归，\n    毕竟递归方法存在效率和栈的开销问题，\n    在搞不清楚问题规模的情况下，\n    很容易出现问题。\n\n\n二叉树的前序遍历\n    \n    根-->左-->右\n    \n    \n举个简单的例子\n```python\ndef fib(n):\n    \n    if n <= 1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n\n```","slug":"训练营/穷举搜索法08","published":1,"date":"2019-04-09T15:05:30.183Z","updated":"2019-04-09T15:05:30.183Z","_id":"cjwd4c7e0000ysv72wfxtcp5c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>递归</p>\n<pre><code>1. 确定递归子结构\n2. 确定递归退出条件和退出处理\n3. 递归的自我触发机制\n\n基本原则是能不使用递归就不使用递归，\n毕竟递归方法存在效率和栈的开销问题，\n在搞不清楚问题规模的情况下，\n很容易出现问题。\n</code></pre><p>二叉树的前序遍历</p>\n<pre><code>根--&gt;左--&gt;右\n</code></pre><p>举个简单的例子<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fib(n<span class=\"number\">-1</span>)+fib(n<span class=\"number\">-2</span>)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>递归</p>\n<pre><code>1. 确定递归子结构\n2. 确定递归退出条件和退出处理\n3. 递归的自我触发机制\n\n基本原则是能不使用递归就不使用递归，\n毕竟递归方法存在效率和栈的开销问题，\n在搞不清楚问题规模的情况下，\n很容易出现问题。\n</code></pre><p>二叉树的前序遍历</p>\n<pre><code>根--&gt;左--&gt;右\n</code></pre><p>举个简单的例子<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fib(n<span class=\"number\">-1</span>)+fib(n<span class=\"number\">-2</span>)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"推箱子游戏","_content":"\nGET\n\n    偏移量数组 { { -1,0 }、{ 0,1 }、{ 1,0 }、{ 0,-1 } } \n    分别表示“上”、“右”、“下”和“左”四个方向的偏移，\n    对这个数组遍历一遍，即可完成对某个位置四周的四个小格子的遍历。\n\n[回顾](https://leetcode-cn.com/contest/weekly-contest-125/problems/available-captures-for-rook/)\n    \n    在一个 8 x 8 的棋盘上，\n    有一个白色车（rook）。\n    也可能有空方块，白色的象（bishop）\n    和黑色的卒（pawn）。\n    它们分别以字符 “R”，“.”，“B” 和 “p” 给出。\n    大写字符表示白棋，小写字符表示黑棋。\n\n    车按国际象棋中的规则移动：\n    它选择四个基本方向中的一个（北，东，西和南），\n    然后朝那个方向移动，直到它选择停止、\n    到达棋盘的边缘或移动到同一方格\n    来捕获该方格上颜色相反的卒。\n    另外，车不能与其他友方（白色）象进入同一个方格。\n    返回车能够在一次移动中捕获到的卒的数量。\n    \n    ","source":"_posts/训练营/穷举搜索法09.md","raw":"---\ntitle: 推箱子游戏\n---\n\nGET\n\n    偏移量数组 { { -1,0 }、{ 0,1 }、{ 1,0 }、{ 0,-1 } } \n    分别表示“上”、“右”、“下”和“左”四个方向的偏移，\n    对这个数组遍历一遍，即可完成对某个位置四周的四个小格子的遍历。\n\n[回顾](https://leetcode-cn.com/contest/weekly-contest-125/problems/available-captures-for-rook/)\n    \n    在一个 8 x 8 的棋盘上，\n    有一个白色车（rook）。\n    也可能有空方块，白色的象（bishop）\n    和黑色的卒（pawn）。\n    它们分别以字符 “R”，“.”，“B” 和 “p” 给出。\n    大写字符表示白棋，小写字符表示黑棋。\n\n    车按国际象棋中的规则移动：\n    它选择四个基本方向中的一个（北，东，西和南），\n    然后朝那个方向移动，直到它选择停止、\n    到达棋盘的边缘或移动到同一方格\n    来捕获该方格上颜色相反的卒。\n    另外，车不能与其他友方（白色）象进入同一个方格。\n    返回车能够在一次移动中捕获到的卒的数量。\n    \n    ","slug":"训练营/穷举搜索法09","published":1,"date":"2019-04-10T13:26:13.369Z","updated":"2019-04-10T13:26:13.369Z","_id":"cjwd4c7e1000zsv72ldczaz1k","comments":1,"layout":"post","photos":[],"link":"","content":"<p>GET</p>\n<pre><code>偏移量数组 { { -1,0 }、{ 0,1 }、{ 1,0 }、{ 0,-1 } } \n分别表示“上”、“右”、“下”和“左”四个方向的偏移，\n对这个数组遍历一遍，即可完成对某个位置四周的四个小格子的遍历。\n</code></pre><p><a href=\"https://leetcode-cn.com/contest/weekly-contest-125/problems/available-captures-for-rook/\" target=\"_blank\" rel=\"noopener\">回顾</a></p>\n<pre><code>在一个 8 x 8 的棋盘上，\n有一个白色车（rook）。\n也可能有空方块，白色的象（bishop）\n和黑色的卒（pawn）。\n它们分别以字符 “R”，“.”，“B” 和 “p” 给出。\n大写字符表示白棋，小写字符表示黑棋。\n\n车按国际象棋中的规则移动：\n它选择四个基本方向中的一个（北，东，西和南），\n然后朝那个方向移动，直到它选择停止、\n到达棋盘的边缘或移动到同一方格\n来捕获该方格上颜色相反的卒。\n另外，车不能与其他友方（白色）象进入同一个方格。\n返回车能够在一次移动中捕获到的卒的数量。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>GET</p>\n<pre><code>偏移量数组 { { -1,0 }、{ 0,1 }、{ 1,0 }、{ 0,-1 } } \n分别表示“上”、“右”、“下”和“左”四个方向的偏移，\n对这个数组遍历一遍，即可完成对某个位置四周的四个小格子的遍历。\n</code></pre><p><a href=\"https://leetcode-cn.com/contest/weekly-contest-125/problems/available-captures-for-rook/\" target=\"_blank\" rel=\"noopener\">回顾</a></p>\n<pre><code>在一个 8 x 8 的棋盘上，\n有一个白色车（rook）。\n也可能有空方块，白色的象（bishop）\n和黑色的卒（pawn）。\n它们分别以字符 “R”，“.”，“B” 和 “p” 给出。\n大写字符表示白棋，小写字符表示黑棋。\n\n车按国际象棋中的规则移动：\n它选择四个基本方向中的一个（北，东，西和南），\n然后朝那个方向移动，直到它选择停止、\n到达棋盘的边缘或移动到同一方格\n来捕获该方格上颜色相反的卒。\n另外，车不能与其他友方（白色）象进入同一个方格。\n返回车能够在一次移动中捕获到的卒的数量。\n</code></pre>"},{"title":"整数的范围","_content":"\n    8 位有符号整数能表示的范围是 −128 到 127，\n    无符号时能表示的范围是 0 ~ 255。\n    \n    16 位的有符号整数能表示的范围是 −32768 到 32767，\n    无符号时能表示的范围是 0 ~ 65535。\n    \n    32 位的有符号整数能表示的范围是\n     −2,147,483,648 到 2,147,483,647，\n    无符号时能表示的范围是 0 ~ 4,294,967,295。\n    \n    64 位的有符号整数能表示的范围是\n     −9,223,372,036,854,775,808 到 9,223,372,036,854,775,807，\n     无符号时能表示的范围是 0 ~ 18,446,744,073,709,551,615。\n     \n","source":"_posts/训练营/穷举搜索法10.md","raw":"---\ntitle: 整数的范围\n---\n\n    8 位有符号整数能表示的范围是 −128 到 127，\n    无符号时能表示的范围是 0 ~ 255。\n    \n    16 位的有符号整数能表示的范围是 −32768 到 32767，\n    无符号时能表示的范围是 0 ~ 65535。\n    \n    32 位的有符号整数能表示的范围是\n     −2,147,483,648 到 2,147,483,647，\n    无符号时能表示的范围是 0 ~ 4,294,967,295。\n    \n    64 位的有符号整数能表示的范围是\n     −9,223,372,036,854,775,808 到 9,223,372,036,854,775,807，\n     无符号时能表示的范围是 0 ~ 18,446,744,073,709,551,615。\n     \n","slug":"训练营/穷举搜索法10","published":1,"date":"2019-04-10T13:28:01.068Z","updated":"2019-04-10T13:28:01.068Z","_id":"cjwd4c7e30010sv72037uxj0p","comments":1,"layout":"post","photos":[],"link":"","content":"<pre><code>8 位有符号整数能表示的范围是 −128 到 127，\n无符号时能表示的范围是 0 ~ 255。\n\n16 位的有符号整数能表示的范围是 −32768 到 32767，\n无符号时能表示的范围是 0 ~ 65535。\n\n32 位的有符号整数能表示的范围是\n −2,147,483,648 到 2,147,483,647，\n无符号时能表示的范围是 0 ~ 4,294,967,295。\n\n64 位的有符号整数能表示的范围是\n −9,223,372,036,854,775,808 到 9,223,372,036,854,775,807，\n 无符号时能表示的范围是 0 ~ 18,446,744,073,709,551,615。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>8 位有符号整数能表示的范围是 −128 到 127，\n无符号时能表示的范围是 0 ~ 255。\n\n16 位的有符号整数能表示的范围是 −32768 到 32767，\n无符号时能表示的范围是 0 ~ 65535。\n\n32 位的有符号整数能表示的范围是\n −2,147,483,648 到 2,147,483,647，\n无符号时能表示的范围是 0 ~ 4,294,967,295。\n\n64 位的有符号整数能表示的范围是\n −9,223,372,036,854,775,808 到 9,223,372,036,854,775,807，\n 无符号时能表示的范围是 0 ~ 18,446,744,073,709,551,615。\n</code></pre>"},{"title":"非线性方程与牛顿迭代法","_content":"\n求解一元非线性方程的常用方法\n\n    二分逼近法\n    牛顿迭代法\n    \n二分逼近法\n\n    数学原理：对于实数域的函数 f(x)f(x)，\n    如果存在实数 kk，使得 f(k) = 0f(k)=0，\n    则 x = kx=k 就是函数 f(x)f(x) 的零点。\n    如果函数 f(x)f(x) 是连续函数，\n    且在区间 [a,b] 上是单调函数，\n    只要 f(a)和 f(b)异号，\n    就说明在区间 [a,b] 内一定有零点。\n\n使用Python语言实现 二分逼近法 求解方程\n```python\n\ndef func(x):\n    return 2.0 * x * x + 3.2 * x - 1.8\n\n\ndef dichotomy_equation(a, b, f):\n    esp = 0.1 ** 6\n    mid = (a + b) / 2\n    while abs(b - a) > esp:\n\n        # 说明零点[方程解]存在于（a, mid）\n        if f(a) * f(mid) < 0:\n            b = mid\n        else:\n            a = mid\n        mid = (a + b) / 2\n    return mid\n\n\n# 求 2.0 * x * x + 3.2 * x - 1.8 在 (-1,2)上的解\nres = dichotomy_equation(-1, 2, func)\n# 0.4409674406051636\nprint(res)\n\n```\n\n牛顿迭代法\n\n\n使用Python实现 牛顿迭代法\n```python\ndef calc_derivative(func, x):\n    a = 0.000001\n    b = a*5\n    return (func(x+b) - func(x-b))/a\n    \ndef newton_raphson(func, x0, invalid_value):\n    \n    esp = 0.1**6\n    x1 = x0 - func(x0)/calc_derivative(func, x0)\n    while abs(x1 - x0) > esp:\n        if invalid_value == x1:\n            break\n        x0 = x1\n    return x1\n\n```    \n","source":"_posts/训练营/迭代递推卡01.md","raw":"---\ntitle: 非线性方程与牛顿迭代法\n---\n\n求解一元非线性方程的常用方法\n\n    二分逼近法\n    牛顿迭代法\n    \n二分逼近法\n\n    数学原理：对于实数域的函数 f(x)f(x)，\n    如果存在实数 kk，使得 f(k) = 0f(k)=0，\n    则 x = kx=k 就是函数 f(x)f(x) 的零点。\n    如果函数 f(x)f(x) 是连续函数，\n    且在区间 [a,b] 上是单调函数，\n    只要 f(a)和 f(b)异号，\n    就说明在区间 [a,b] 内一定有零点。\n\n使用Python语言实现 二分逼近法 求解方程\n```python\n\ndef func(x):\n    return 2.0 * x * x + 3.2 * x - 1.8\n\n\ndef dichotomy_equation(a, b, f):\n    esp = 0.1 ** 6\n    mid = (a + b) / 2\n    while abs(b - a) > esp:\n\n        # 说明零点[方程解]存在于（a, mid）\n        if f(a) * f(mid) < 0:\n            b = mid\n        else:\n            a = mid\n        mid = (a + b) / 2\n    return mid\n\n\n# 求 2.0 * x * x + 3.2 * x - 1.8 在 (-1,2)上的解\nres = dichotomy_equation(-1, 2, func)\n# 0.4409674406051636\nprint(res)\n\n```\n\n牛顿迭代法\n\n\n使用Python实现 牛顿迭代法\n```python\ndef calc_derivative(func, x):\n    a = 0.000001\n    b = a*5\n    return (func(x+b) - func(x-b))/a\n    \ndef newton_raphson(func, x0, invalid_value):\n    \n    esp = 0.1**6\n    x1 = x0 - func(x0)/calc_derivative(func, x0)\n    while abs(x1 - x0) > esp:\n        if invalid_value == x1:\n            break\n        x0 = x1\n    return x1\n\n```    \n","slug":"训练营/迭代递推卡01","published":1,"date":"2019-04-05T11:55:56.750Z","updated":"2019-04-05T11:55:56.750Z","_id":"cjwd4c7e40011sv72991dqymg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>求解一元非线性方程的常用方法</p>\n<pre><code>二分逼近法\n牛顿迭代法\n</code></pre><p>二分逼近法</p>\n<pre><code>数学原理：对于实数域的函数 f(x)f(x)，\n如果存在实数 kk，使得 f(k) = 0f(k)=0，\n则 x = kx=k 就是函数 f(x)f(x) 的零点。\n如果函数 f(x)f(x) 是连续函数，\n且在区间 [a,b] 上是单调函数，\n只要 f(a)和 f(b)异号，\n就说明在区间 [a,b] 内一定有零点。\n</code></pre><p>使用Python语言实现 二分逼近法 求解方程<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2.0</span> * x * x + <span class=\"number\">3.2</span> * x - <span class=\"number\">1.8</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dichotomy_equation</span><span class=\"params\">(a, b, f)</span>:</span></span><br><span class=\"line\">    esp = <span class=\"number\">0.1</span> ** <span class=\"number\">6</span></span><br><span class=\"line\">    mid = (a + b) / <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> abs(b - a) &gt; esp:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 说明零点[方程解]存在于（a, mid）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> f(a) * f(mid) &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            b = mid</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            a = mid</span><br><span class=\"line\">        mid = (a + b) / <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mid</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 求 2.0 * x * x + 3.2 * x - 1.8 在 (-1,2)上的解</span></span><br><span class=\"line\">res = dichotomy_equation(<span class=\"number\">-1</span>, <span class=\"number\">2</span>, func)</span><br><span class=\"line\"><span class=\"comment\"># 0.4409674406051636</span></span><br><span class=\"line\">print(res)</span><br></pre></td></tr></table></figure></p>\n<p>牛顿迭代法</p>\n<p>使用Python实现 牛顿迭代法</p>\n<pre><code class=\"python\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc_derivative</span><span class=\"params\">(func, x)</span>:</span>\n    a = <span class=\"number\">0.000001</span>\n    b = a*<span class=\"number\">5</span>\n    <span class=\"keyword\">return</span> (func(x+b) - func(x-b))/a\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">newton_raphson</span><span class=\"params\">(func, x0, invalid_value)</span>:</span>\n\n    esp = <span class=\"number\">0.1</span>**<span class=\"number\">6</span>\n    x1 = x0 - func(x0)/calc_derivative(func, x0)\n    <span class=\"keyword\">while</span> abs(x1 - x0) &gt; esp:\n        <span class=\"keyword\">if</span> invalid_value == x1:\n            <span class=\"keyword\">break</span>\n        x0 = x1\n    <span class=\"keyword\">return</span> x1\n\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>求解一元非线性方程的常用方法</p>\n<pre><code>二分逼近法\n牛顿迭代法\n</code></pre><p>二分逼近法</p>\n<pre><code>数学原理：对于实数域的函数 f(x)f(x)，\n如果存在实数 kk，使得 f(k) = 0f(k)=0，\n则 x = kx=k 就是函数 f(x)f(x) 的零点。\n如果函数 f(x)f(x) 是连续函数，\n且在区间 [a,b] 上是单调函数，\n只要 f(a)和 f(b)异号，\n就说明在区间 [a,b] 内一定有零点。\n</code></pre><p>使用Python语言实现 二分逼近法 求解方程<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2.0</span> * x * x + <span class=\"number\">3.2</span> * x - <span class=\"number\">1.8</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dichotomy_equation</span><span class=\"params\">(a, b, f)</span>:</span></span><br><span class=\"line\">    esp = <span class=\"number\">0.1</span> ** <span class=\"number\">6</span></span><br><span class=\"line\">    mid = (a + b) / <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> abs(b - a) &gt; esp:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 说明零点[方程解]存在于（a, mid）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> f(a) * f(mid) &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            b = mid</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            a = mid</span><br><span class=\"line\">        mid = (a + b) / <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mid</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 求 2.0 * x * x + 3.2 * x - 1.8 在 (-1,2)上的解</span></span><br><span class=\"line\">res = dichotomy_equation(<span class=\"number\">-1</span>, <span class=\"number\">2</span>, func)</span><br><span class=\"line\"><span class=\"comment\"># 0.4409674406051636</span></span><br><span class=\"line\">print(res)</span><br></pre></td></tr></table></figure></p>\n<p>牛顿迭代法</p>\n<p>使用Python实现 牛顿迭代法</p>\n<pre><code class=\"python\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc_derivative</span><span class=\"params\">(func, x)</span>:</span>\n    a = <span class=\"number\">0.000001</span>\n    b = a*<span class=\"number\">5</span>\n    <span class=\"keyword\">return</span> (func(x+b) - func(x-b))/a\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">newton_raphson</span><span class=\"params\">(func, x0, invalid_value)</span>:</span>\n\n    esp = <span class=\"number\">0.1</span>**<span class=\"number\">6</span>\n    x1 = x0 - func(x0)/calc_derivative(func, x0)\n    <span class=\"keyword\">while</span> abs(x1 - x0) &gt; esp:\n        <span class=\"keyword\">if</span> invalid_value == x1:\n            <span class=\"keyword\">break</span>\n        x0 = x1\n    <span class=\"keyword\">return</span> x1\n\n</code></pre>\n"},{"title":"线性代数方程组的求解","_content":"\n雅可比迭代法\n    \n    通过计算一次矩阵和向量的乘法，\n    且计算过程中原始矩阵 A 保持不变，\n    便于用多线程并行计算的方式优化效率。\n    对于 n 阶线性方程组 Ax=b，\n    假如其系数矩阵 A 是非奇异矩阵，\n    且对角线元素非 0，\n    就可以证明雅可比迭代过程是收敛的。\n    \n    雅可比迭代原理和算法实现都很简单，\n    但是雅可比迭代存在收敛速度慢的问题。\n    工程中一般不直接使用雅可比迭代法，\n    而是使用各种基于雅可比迭代法的改进方法。\n    \n    \n高斯-赛德尔迭代法\n    \n    雅可比迭代法每次迭代计算时，\n    将上一次的迭代变量整体带入到迭代关系式中，\n    计算新的迭代变量值，\n    也就是所谓的整体迭代。\n    在迭代收敛的前提下，\n    如果迭代变量中的每个分量 x 在计算出新的迭代值后，\n    直接带入迭代，\n    参与其他迭代分量的计算，\n    则能显著地提高迭代效果，\n    这种改进的方法就是高斯-赛德尔迭代法。\n    \n \n    ","source":"_posts/训练营/迭代递推卡02.md","raw":"---\ntitle: 线性代数方程组的求解 \n---\n\n雅可比迭代法\n    \n    通过计算一次矩阵和向量的乘法，\n    且计算过程中原始矩阵 A 保持不变，\n    便于用多线程并行计算的方式优化效率。\n    对于 n 阶线性方程组 Ax=b，\n    假如其系数矩阵 A 是非奇异矩阵，\n    且对角线元素非 0，\n    就可以证明雅可比迭代过程是收敛的。\n    \n    雅可比迭代原理和算法实现都很简单，\n    但是雅可比迭代存在收敛速度慢的问题。\n    工程中一般不直接使用雅可比迭代法，\n    而是使用各种基于雅可比迭代法的改进方法。\n    \n    \n高斯-赛德尔迭代法\n    \n    雅可比迭代法每次迭代计算时，\n    将上一次的迭代变量整体带入到迭代关系式中，\n    计算新的迭代变量值，\n    也就是所谓的整体迭代。\n    在迭代收敛的前提下，\n    如果迭代变量中的每个分量 x 在计算出新的迭代值后，\n    直接带入迭代，\n    参与其他迭代分量的计算，\n    则能显著地提高迭代效果，\n    这种改进的方法就是高斯-赛德尔迭代法。\n    \n \n    ","slug":"训练营/迭代递推卡02","published":1,"date":"2019-04-05T12:09:36.408Z","updated":"2019-04-05T12:09:36.409Z","_id":"cjwd4c7e50012sv72dha9cjfi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>雅可比迭代法</p>\n<pre><code>通过计算一次矩阵和向量的乘法，\n且计算过程中原始矩阵 A 保持不变，\n便于用多线程并行计算的方式优化效率。\n对于 n 阶线性方程组 Ax=b，\n假如其系数矩阵 A 是非奇异矩阵，\n且对角线元素非 0，\n就可以证明雅可比迭代过程是收敛的。\n\n雅可比迭代原理和算法实现都很简单，\n但是雅可比迭代存在收敛速度慢的问题。\n工程中一般不直接使用雅可比迭代法，\n而是使用各种基于雅可比迭代法的改进方法。\n</code></pre><p>高斯-赛德尔迭代法</p>\n<pre><code>雅可比迭代法每次迭代计算时，\n将上一次的迭代变量整体带入到迭代关系式中，\n计算新的迭代变量值，\n也就是所谓的整体迭代。\n在迭代收敛的前提下，\n如果迭代变量中的每个分量 x 在计算出新的迭代值后，\n直接带入迭代，\n参与其他迭代分量的计算，\n则能显著地提高迭代效果，\n这种改进的方法就是高斯-赛德尔迭代法。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>雅可比迭代法</p>\n<pre><code>通过计算一次矩阵和向量的乘法，\n且计算过程中原始矩阵 A 保持不变，\n便于用多线程并行计算的方式优化效率。\n对于 n 阶线性方程组 Ax=b，\n假如其系数矩阵 A 是非奇异矩阵，\n且对角线元素非 0，\n就可以证明雅可比迭代过程是收敛的。\n\n雅可比迭代原理和算法实现都很简单，\n但是雅可比迭代存在收敛速度慢的问题。\n工程中一般不直接使用雅可比迭代法，\n而是使用各种基于雅可比迭代法的改进方法。\n</code></pre><p>高斯-赛德尔迭代法</p>\n<pre><code>雅可比迭代法每次迭代计算时，\n将上一次的迭代变量整体带入到迭代关系式中，\n计算新的迭代变量值，\n也就是所谓的整体迭代。\n在迭代收敛的前提下，\n如果迭代变量中的每个分量 x 在计算出新的迭代值后，\n直接带入迭代，\n参与其他迭代分量的计算，\n则能显著地提高迭代效果，\n这种改进的方法就是高斯-赛德尔迭代法。\n</code></pre>"},{"title":"迭代法计算定积分","_content":"\n计算数值积分的两种常用方法\n    \n    变步长梯形公式法\n    变步长辛普森公式法\n    \n![](../../img/梯型公式法.png)\n\n![](../../img/变长梯型公式法.png)\n\n![](../../img/辛普森公式法.png)\n\n可变长辛普森公式法\n    \n    和梯形公式一样，\n    复合辛普森公式也可以改造为变步长辛普森公式法。\n    改造的方法就是使用迭代法的思想，\n    通过改变区间个数 n 使得步长 step 也跟着变化，\n    当迭代差值符合精度要求时即可停止迭代。\n    算法的迭代变量仍然是每次分割后的小区间上\n    使用辛普森公式计算的插值曲线面积之和，\n    迭代关系则非常简单，\n    就是用本迭代的迭代变量代替上个迭代的迭代自变量的值，\n    迭代终止条件就是两个迭代的迭代变量之差小于精度值。\n    迭代变量的初始值就是在区间 [a,b] 上\n    应用辛普森公式计算最大的区间面积。\n    用一个变量 n 表示当前迭代分割小梯形的个数，\n    n 的值每个迭代增加一倍。\n    而每次分割后的小区间面积和的计算\n    可由第 2-2 课中给出的\n    复合辛普森公式算法 simpson() 函数计算，\n    迭代算法的整体结构与变步长梯形法类似。\n\n\n\n","source":"_posts/训练营/迭代递推卡03.md","raw":"---\ntitle: 迭代法计算定积分\n---\n\n计算数值积分的两种常用方法\n    \n    变步长梯形公式法\n    变步长辛普森公式法\n    \n![](../../img/梯型公式法.png)\n\n![](../../img/变长梯型公式法.png)\n\n![](../../img/辛普森公式法.png)\n\n可变长辛普森公式法\n    \n    和梯形公式一样，\n    复合辛普森公式也可以改造为变步长辛普森公式法。\n    改造的方法就是使用迭代法的思想，\n    通过改变区间个数 n 使得步长 step 也跟着变化，\n    当迭代差值符合精度要求时即可停止迭代。\n    算法的迭代变量仍然是每次分割后的小区间上\n    使用辛普森公式计算的插值曲线面积之和，\n    迭代关系则非常简单，\n    就是用本迭代的迭代变量代替上个迭代的迭代自变量的值，\n    迭代终止条件就是两个迭代的迭代变量之差小于精度值。\n    迭代变量的初始值就是在区间 [a,b] 上\n    应用辛普森公式计算最大的区间面积。\n    用一个变量 n 表示当前迭代分割小梯形的个数，\n    n 的值每个迭代增加一倍。\n    而每次分割后的小区间面积和的计算\n    可由第 2-2 课中给出的\n    复合辛普森公式算法 simpson() 函数计算，\n    迭代算法的整体结构与变步长梯形法类似。\n\n\n\n","slug":"训练营/迭代递推卡03","published":1,"date":"2019-06-01T06:12:07.162Z","updated":"2019-06-01T06:12:07.162Z","_id":"cjwd4c7e60013sv72aatjpw6n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>计算数值积分的两种常用方法</p>\n<pre><code>变步长梯形公式法\n变步长辛普森公式法\n</code></pre><p><img src=\"../../img/梯型公式法.png\" alt></p>\n<p><img src=\"../../img/变长梯型公式法.png\" alt></p>\n<p><img src=\"../../img/辛普森公式法.png\" alt></p>\n<p>可变长辛普森公式法</p>\n<pre><code>和梯形公式一样，\n复合辛普森公式也可以改造为变步长辛普森公式法。\n改造的方法就是使用迭代法的思想，\n通过改变区间个数 n 使得步长 step 也跟着变化，\n当迭代差值符合精度要求时即可停止迭代。\n算法的迭代变量仍然是每次分割后的小区间上\n使用辛普森公式计算的插值曲线面积之和，\n迭代关系则非常简单，\n就是用本迭代的迭代变量代替上个迭代的迭代自变量的值，\n迭代终止条件就是两个迭代的迭代变量之差小于精度值。\n迭代变量的初始值就是在区间 [a,b] 上\n应用辛普森公式计算最大的区间面积。\n用一个变量 n 表示当前迭代分割小梯形的个数，\nn 的值每个迭代增加一倍。\n而每次分割后的小区间面积和的计算\n可由第 2-2 课中给出的\n复合辛普森公式算法 simpson() 函数计算，\n迭代算法的整体结构与变步长梯形法类似。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>计算数值积分的两种常用方法</p>\n<pre><code>变步长梯形公式法\n变步长辛普森公式法\n</code></pre><p><img src=\"../../img/梯型公式法.png\" alt></p>\n<p><img src=\"../../img/变长梯型公式法.png\" alt></p>\n<p><img src=\"../../img/辛普森公式法.png\" alt></p>\n<p>可变长辛普森公式法</p>\n<pre><code>和梯形公式一样，\n复合辛普森公式也可以改造为变步长辛普森公式法。\n改造的方法就是使用迭代法的思想，\n通过改变区间个数 n 使得步长 step 也跟着变化，\n当迭代差值符合精度要求时即可停止迭代。\n算法的迭代变量仍然是每次分割后的小区间上\n使用辛普森公式计算的插值曲线面积之和，\n迭代关系则非常简单，\n就是用本迭代的迭代变量代替上个迭代的迭代自变量的值，\n迭代终止条件就是两个迭代的迭代变量之差小于精度值。\n迭代变量的初始值就是在区间 [a,b] 上\n应用辛普森公式计算最大的区间面积。\n用一个变量 n 表示当前迭代分割小梯形的个数，\nn 的值每个迭代增加一倍。\n而每次分割后的小区间面积和的计算\n可由第 2-2 课中给出的\n复合辛普森公式算法 simpson() 函数计算，\n迭代算法的整体结构与变步长梯形法类似。\n</code></pre>"},{"title":"全连接层","_content":"\n定义\n    \n    输入节点与输出节点组合相连，参数庞大。\n\n优化方法\n\n    使用卷积等操作替代\n    使用Dropout","source":"_posts/Python3_TensorFlow_WechatApplet/全连接层.md","raw":"---\ntitle: 全连接层\n---\n\n定义\n    \n    输入节点与输出节点组合相连，参数庞大。\n\n优化方法\n\n    使用卷积等操作替代\n    使用Dropout","slug":"Python3_TensorFlow_WechatApplet/全连接层","published":1,"date":"2019-06-01T11:18:36.065Z","updated":"2019-06-01T11:18:36.065Z","_id":"cjwd6if0r0000w572zzsu2w9g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>定义</p>\n<pre><code>输入节点与输出节点组合相连，参数庞大。\n</code></pre><p>优化方法</p>\n<pre><code>使用卷积等操作替代\n使用Dropout\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>定义</p>\n<pre><code>输入节点与输出节点组合相连，参数庞大。\n</code></pre><p>优化方法</p>\n<pre><code>使用卷积等操作替代\n使用Dropout\n</code></pre>"},{"title":"常考的内置数据结构与算法","_content":"\n[内置数据结构文档](https://docs.python.org/3.6/library/collections.html?highlight=coll#module-collections)\n\n![](../../img/Python常用内置数据结构与算法.jpg)\n\n### 常用内置数据结构\n```python\nimport collections\n\n# 具名元祖\nPoint = collections.namedtuple('Point', 'x, y')\np = Point(1, 2)\nprint(p.x)\nprint(p.y)\nprint(p[0])\nprint(p[1])\n\n# 双端队列\nde = collections.deque()\nde.append(1)\nde.appendleft(0)\nprint(de)\nde.pop()\nprint(de)\nde.append(22)\nde.popleft()\nprint(de)\n\n# 计数器\nc = collections.Counter('aabbccdeef')\nprint(c)\nprint(c.get('a'))\nprint(c.most_common()) # 从大到小的顺序来获取信息\n\n# 按Key插入先后有序的OrderDict\nod = collections.OrderedDict()\nod['c'] = 'c'\nod['a'] = 'a'\nod['b'] = 'b'\nprint(od.keys())\n\n# 带默认值的字典 \ndd = collections.defaultdict()\ndd['a']\ndd['b'] += 1\nprint(dd)\n\n# list和tuple\n# 都是线性结构，支持下标访问\n# list是可变对象, tuple保存的引用不可变\nt = ([1], 2, 3)\ntry:\n    t[2] = 33\nexcept Exception as e:\n    print(e)\nt[0].append(11)\nprint(t)\n# 保存的引用不可变指的是你没法替换掉这个对象，\n# 但是如果被操作的子对象本身是一个可变对象，\n# 这个引用所指向的可变对象是可以修改的\n\n# list不能用作dict的key, 而tuple可以, 原因是可变对象不可hash\n\n```\n\n### Python Dict 底层结构\n```python\n# 底层使用哈希表，支持快速查找，平均复杂度为O(1), Cython解释器使用二次探查解决哈希冲突问题\n# 常考哈希冲突和扩容\n\n```\n\n### LRUCache\n```python\n# 是一种缓存剔除策略，缓存剔除则是指当缓存空间不够用的时候需要一种方式剔除key\n# 常见策略有LRU、LFU\n\n# LRU通过使用一个循环双端队列不断把最新访问的key放在表头实现，这样最远使用的就在后面。\n# 字典来做缓存，循环双端列表用来记录访问顺序\n# 利用Python内置的dict、collections.OrderDict实现\n# dict用来当作k/v键值对的缓存\n# 使用OrderDict用来更新最近访问的key\nfrom collections import OrderedDict\n\n\nclass LRUCache(object):\n    \n    def __init__(self, capacity=128):\n        self.od = OrderedDict()\n        self.capacity = capacity\n    \n    # 每次访问更新最新使用的key    \n    def get(self, key):\n        if key in self.od:\n            val = self.od[key]\n            self.od.move_to_end(key=key)\n            return val\n        else:\n            return -1\n    \n    # 更新k/v\n    def put(self, key, value):\n        if key in self.od:\n            del  self.od[key]\n            self.od[key] = value    # 更新key到表头\n        else:\n            self.od[key] = value    # 直接将key插入表头\n            # 判断当前容量是否已满\n            if len(self.od) > self.capacity:\n                # 删除最早的元素\n                self.od.popitem(last=False)\n```\n","source":"_posts/Python服务端面试/常考的内置结构与算法.md","raw":"---\ntitle: 常考的内置数据结构与算法\n---\n\n[内置数据结构文档](https://docs.python.org/3.6/library/collections.html?highlight=coll#module-collections)\n\n![](../../img/Python常用内置数据结构与算法.jpg)\n\n### 常用内置数据结构\n```python\nimport collections\n\n# 具名元祖\nPoint = collections.namedtuple('Point', 'x, y')\np = Point(1, 2)\nprint(p.x)\nprint(p.y)\nprint(p[0])\nprint(p[1])\n\n# 双端队列\nde = collections.deque()\nde.append(1)\nde.appendleft(0)\nprint(de)\nde.pop()\nprint(de)\nde.append(22)\nde.popleft()\nprint(de)\n\n# 计数器\nc = collections.Counter('aabbccdeef')\nprint(c)\nprint(c.get('a'))\nprint(c.most_common()) # 从大到小的顺序来获取信息\n\n# 按Key插入先后有序的OrderDict\nod = collections.OrderedDict()\nod['c'] = 'c'\nod['a'] = 'a'\nod['b'] = 'b'\nprint(od.keys())\n\n# 带默认值的字典 \ndd = collections.defaultdict()\ndd['a']\ndd['b'] += 1\nprint(dd)\n\n# list和tuple\n# 都是线性结构，支持下标访问\n# list是可变对象, tuple保存的引用不可变\nt = ([1], 2, 3)\ntry:\n    t[2] = 33\nexcept Exception as e:\n    print(e)\nt[0].append(11)\nprint(t)\n# 保存的引用不可变指的是你没法替换掉这个对象，\n# 但是如果被操作的子对象本身是一个可变对象，\n# 这个引用所指向的可变对象是可以修改的\n\n# list不能用作dict的key, 而tuple可以, 原因是可变对象不可hash\n\n```\n\n### Python Dict 底层结构\n```python\n# 底层使用哈希表，支持快速查找，平均复杂度为O(1), Cython解释器使用二次探查解决哈希冲突问题\n# 常考哈希冲突和扩容\n\n```\n\n### LRUCache\n```python\n# 是一种缓存剔除策略，缓存剔除则是指当缓存空间不够用的时候需要一种方式剔除key\n# 常见策略有LRU、LFU\n\n# LRU通过使用一个循环双端队列不断把最新访问的key放在表头实现，这样最远使用的就在后面。\n# 字典来做缓存，循环双端列表用来记录访问顺序\n# 利用Python内置的dict、collections.OrderDict实现\n# dict用来当作k/v键值对的缓存\n# 使用OrderDict用来更新最近访问的key\nfrom collections import OrderedDict\n\n\nclass LRUCache(object):\n    \n    def __init__(self, capacity=128):\n        self.od = OrderedDict()\n        self.capacity = capacity\n    \n    # 每次访问更新最新使用的key    \n    def get(self, key):\n        if key in self.od:\n            val = self.od[key]\n            self.od.move_to_end(key=key)\n            return val\n        else:\n            return -1\n    \n    # 更新k/v\n    def put(self, key, value):\n        if key in self.od:\n            del  self.od[key]\n            self.od[key] = value    # 更新key到表头\n        else:\n            self.od[key] = value    # 直接将key插入表头\n            # 判断当前容量是否已满\n            if len(self.od) > self.capacity:\n                # 删除最早的元素\n                self.od.popitem(last=False)\n```\n","slug":"Python服务端面试/常考的内置结构与算法","published":1,"date":"2019-06-02T13:07:54.237Z","updated":"2019-06-02T13:07:54.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwfo73nn0000idh7249apdd5","content":"<p><a href=\"https://docs.python.org/3.6/library/collections.html?highlight=coll#module-collections\" target=\"_blank\" rel=\"noopener\">内置数据结构文档</a></p>\n<p><img src=\"../../img/Python常用内置数据结构与算法.jpg\" alt></p>\n<h3 id=\"常用内置数据结构\"><a href=\"#常用内置数据结构\" class=\"headerlink\" title=\"常用内置数据结构\"></a>常用内置数据结构</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collections</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 具名元祖</span></span><br><span class=\"line\">Point = collections.namedtuple(<span class=\"string\">'Point'</span>, <span class=\"string\">'x, y'</span>)</span><br><span class=\"line\">p = Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">print(p.x)</span><br><span class=\"line\">print(p.y)</span><br><span class=\"line\">print(p[<span class=\"number\">0</span>])</span><br><span class=\"line\">print(p[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 双端队列</span></span><br><span class=\"line\">de = collections.deque()</span><br><span class=\"line\">de.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">de.appendleft(<span class=\"number\">0</span>)</span><br><span class=\"line\">print(de)</span><br><span class=\"line\">de.pop()</span><br><span class=\"line\">print(de)</span><br><span class=\"line\">de.append(<span class=\"number\">22</span>)</span><br><span class=\"line\">de.popleft()</span><br><span class=\"line\">print(de)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计数器</span></span><br><span class=\"line\">c = collections.Counter(<span class=\"string\">'aabbccdeef'</span>)</span><br><span class=\"line\">print(c)</span><br><span class=\"line\">print(c.get(<span class=\"string\">'a'</span>))</span><br><span class=\"line\">print(c.most_common()) <span class=\"comment\"># 从大到小的顺序来获取信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按Key插入先后有序的OrderDict</span></span><br><span class=\"line\">od = collections.OrderedDict()</span><br><span class=\"line\">od[<span class=\"string\">'c'</span>] = <span class=\"string\">'c'</span></span><br><span class=\"line\">od[<span class=\"string\">'a'</span>] = <span class=\"string\">'a'</span></span><br><span class=\"line\">od[<span class=\"string\">'b'</span>] = <span class=\"string\">'b'</span></span><br><span class=\"line\">print(od.keys())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 带默认值的字典 </span></span><br><span class=\"line\">dd = collections.defaultdict()</span><br><span class=\"line\">dd[<span class=\"string\">'a'</span>]</span><br><span class=\"line\">dd[<span class=\"string\">'b'</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">print(dd)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># list和tuple</span></span><br><span class=\"line\"><span class=\"comment\"># 都是线性结构，支持下标访问</span></span><br><span class=\"line\"><span class=\"comment\"># list是可变对象, tuple保存的引用不可变</span></span><br><span class=\"line\">t = ([<span class=\"number\">1</span>], <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    t[<span class=\"number\">2</span>] = <span class=\"number\">33</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    print(e)</span><br><span class=\"line\">t[<span class=\"number\">0</span>].append(<span class=\"number\">11</span>)</span><br><span class=\"line\">print(t)</span><br><span class=\"line\"><span class=\"comment\"># 保存的引用不可变指的是你没法替换掉这个对象，</span></span><br><span class=\"line\"><span class=\"comment\"># 但是如果被操作的子对象本身是一个可变对象，</span></span><br><span class=\"line\"><span class=\"comment\"># 这个引用所指向的可变对象是可以修改的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># list不能用作dict的key, 而tuple可以, 原因是可变对象不可hash</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Python-Dict-底层结构\"><a href=\"#Python-Dict-底层结构\" class=\"headerlink\" title=\"Python Dict 底层结构\"></a>Python Dict 底层结构</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 底层使用哈希表，支持快速查找，平均复杂度为O(1), Cython解释器使用二次探查解决哈希冲突问题</span></span><br><span class=\"line\"><span class=\"comment\"># 常考哈希冲突和扩容</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"LRUCache\"><a href=\"#LRUCache\" class=\"headerlink\" title=\"LRUCache\"></a>LRUCache</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 是一种缓存剔除策略，缓存剔除则是指当缓存空间不够用的时候需要一种方式剔除key</span></span><br><span class=\"line\"><span class=\"comment\"># 常见策略有LRU、LFU</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># LRU通过使用一个循环双端队列不断把最新访问的key放在表头实现，这样最远使用的就在后面。</span></span><br><span class=\"line\"><span class=\"comment\"># 字典来做缓存，循环双端列表用来记录访问顺序</span></span><br><span class=\"line\"><span class=\"comment\"># 利用Python内置的dict、collections.OrderDict实现</span></span><br><span class=\"line\"><span class=\"comment\"># dict用来当作k/v键值对的缓存</span></span><br><span class=\"line\"><span class=\"comment\"># 使用OrderDict用来更新最近访问的key</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LRUCache</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, capacity=<span class=\"number\">128</span>)</span>:</span></span><br><span class=\"line\">        self.od = OrderedDict()</span><br><span class=\"line\">        self.capacity = capacity</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 每次访问更新最新使用的key    </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> self.od:</span><br><span class=\"line\">            val = self.od[key]</span><br><span class=\"line\">            self.od.move_to_end(key=key)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> val</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 更新k/v</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span><span class=\"params\">(self, key, value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> self.od:</span><br><span class=\"line\">            <span class=\"keyword\">del</span>  self.od[key]</span><br><span class=\"line\">            self.od[key] = value    <span class=\"comment\"># 更新key到表头</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.od[key] = value    <span class=\"comment\"># 直接将key插入表头</span></span><br><span class=\"line\">            <span class=\"comment\"># 判断当前容量是否已满</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(self.od) &gt; self.capacity:</span><br><span class=\"line\">                <span class=\"comment\"># 删除最早的元素</span></span><br><span class=\"line\">                self.od.popitem(last=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://docs.python.org/3.6/library/collections.html?highlight=coll#module-collections\" target=\"_blank\" rel=\"noopener\">内置数据结构文档</a></p>\n<p><img src=\"../../img/Python常用内置数据结构与算法.jpg\" alt></p>\n<h3 id=\"常用内置数据结构\"><a href=\"#常用内置数据结构\" class=\"headerlink\" title=\"常用内置数据结构\"></a>常用内置数据结构</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collections</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 具名元祖</span></span><br><span class=\"line\">Point = collections.namedtuple(<span class=\"string\">'Point'</span>, <span class=\"string\">'x, y'</span>)</span><br><span class=\"line\">p = Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">print(p.x)</span><br><span class=\"line\">print(p.y)</span><br><span class=\"line\">print(p[<span class=\"number\">0</span>])</span><br><span class=\"line\">print(p[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 双端队列</span></span><br><span class=\"line\">de = collections.deque()</span><br><span class=\"line\">de.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">de.appendleft(<span class=\"number\">0</span>)</span><br><span class=\"line\">print(de)</span><br><span class=\"line\">de.pop()</span><br><span class=\"line\">print(de)</span><br><span class=\"line\">de.append(<span class=\"number\">22</span>)</span><br><span class=\"line\">de.popleft()</span><br><span class=\"line\">print(de)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计数器</span></span><br><span class=\"line\">c = collections.Counter(<span class=\"string\">'aabbccdeef'</span>)</span><br><span class=\"line\">print(c)</span><br><span class=\"line\">print(c.get(<span class=\"string\">'a'</span>))</span><br><span class=\"line\">print(c.most_common()) <span class=\"comment\"># 从大到小的顺序来获取信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按Key插入先后有序的OrderDict</span></span><br><span class=\"line\">od = collections.OrderedDict()</span><br><span class=\"line\">od[<span class=\"string\">'c'</span>] = <span class=\"string\">'c'</span></span><br><span class=\"line\">od[<span class=\"string\">'a'</span>] = <span class=\"string\">'a'</span></span><br><span class=\"line\">od[<span class=\"string\">'b'</span>] = <span class=\"string\">'b'</span></span><br><span class=\"line\">print(od.keys())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 带默认值的字典 </span></span><br><span class=\"line\">dd = collections.defaultdict()</span><br><span class=\"line\">dd[<span class=\"string\">'a'</span>]</span><br><span class=\"line\">dd[<span class=\"string\">'b'</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">print(dd)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># list和tuple</span></span><br><span class=\"line\"><span class=\"comment\"># 都是线性结构，支持下标访问</span></span><br><span class=\"line\"><span class=\"comment\"># list是可变对象, tuple保存的引用不可变</span></span><br><span class=\"line\">t = ([<span class=\"number\">1</span>], <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    t[<span class=\"number\">2</span>] = <span class=\"number\">33</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    print(e)</span><br><span class=\"line\">t[<span class=\"number\">0</span>].append(<span class=\"number\">11</span>)</span><br><span class=\"line\">print(t)</span><br><span class=\"line\"><span class=\"comment\"># 保存的引用不可变指的是你没法替换掉这个对象，</span></span><br><span class=\"line\"><span class=\"comment\"># 但是如果被操作的子对象本身是一个可变对象，</span></span><br><span class=\"line\"><span class=\"comment\"># 这个引用所指向的可变对象是可以修改的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># list不能用作dict的key, 而tuple可以, 原因是可变对象不可hash</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Python-Dict-底层结构\"><a href=\"#Python-Dict-底层结构\" class=\"headerlink\" title=\"Python Dict 底层结构\"></a>Python Dict 底层结构</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 底层使用哈希表，支持快速查找，平均复杂度为O(1), Cython解释器使用二次探查解决哈希冲突问题</span></span><br><span class=\"line\"><span class=\"comment\"># 常考哈希冲突和扩容</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"LRUCache\"><a href=\"#LRUCache\" class=\"headerlink\" title=\"LRUCache\"></a>LRUCache</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 是一种缓存剔除策略，缓存剔除则是指当缓存空间不够用的时候需要一种方式剔除key</span></span><br><span class=\"line\"><span class=\"comment\"># 常见策略有LRU、LFU</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># LRU通过使用一个循环双端队列不断把最新访问的key放在表头实现，这样最远使用的就在后面。</span></span><br><span class=\"line\"><span class=\"comment\"># 字典来做缓存，循环双端列表用来记录访问顺序</span></span><br><span class=\"line\"><span class=\"comment\"># 利用Python内置的dict、collections.OrderDict实现</span></span><br><span class=\"line\"><span class=\"comment\"># dict用来当作k/v键值对的缓存</span></span><br><span class=\"line\"><span class=\"comment\"># 使用OrderDict用来更新最近访问的key</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LRUCache</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, capacity=<span class=\"number\">128</span>)</span>:</span></span><br><span class=\"line\">        self.od = OrderedDict()</span><br><span class=\"line\">        self.capacity = capacity</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 每次访问更新最新使用的key    </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> self.od:</span><br><span class=\"line\">            val = self.od[key]</span><br><span class=\"line\">            self.od.move_to_end(key=key)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> val</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 更新k/v</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span><span class=\"params\">(self, key, value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> self.od:</span><br><span class=\"line\">            <span class=\"keyword\">del</span>  self.od[key]</span><br><span class=\"line\">            self.od[key] = value    <span class=\"comment\"># 更新key到表头</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.od[key] = value    <span class=\"comment\"># 直接将key插入表头</span></span><br><span class=\"line\">            <span class=\"comment\"># 判断当前容量是否已满</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(self.od) &gt; self.capacity:</span><br><span class=\"line\">                <span class=\"comment\"># 删除最早的元素</span></span><br><span class=\"line\">                self.od.popitem(last=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"0602工作周报","_content":"\n### 携程国内供应商疑似错误\n    \n    确保源数据获取准确\n    等待携程售卖房型删除完毕，重启定时任务\n    \n### 床型分类功能调整\n    \n    简化以床型描述优先的功能代码\n    剔除相似度计算相关功能\n    调整床型更新定时任务对于供应商携程只更新Bedtype为0的\n    修复本地功能与服务器功能效果不一致的Bug\n    整理测试用例与单测工具\n    \n### RoomAuto接口功能调整\n    \n    兼容供应商携程额外拼接的属性, 代码调整完毕并初步测试了功能\n    针对供应商美团添加若干中文关键词，在匹配过程中发现了一些比较难问题 hao hua da chuang\n    RoomAuto测试工具的编写\n    \n### 问题\n\n    供应商携程房型数据a, 他的Bedtype开始为0，机器刷出BedType为x, 而后发现BedType实际应为y，如何快速解决。\n    答：开发以根据supplier_id、rate_id或supplier_id、roomtype_code来获得BedType(以及相关房型信息)并更新\n    数据部反映房型疑似错误没有有效找出 \"错误房型\"\n    答: 开发工具给数据部 设置supplier_id,  疑似错误阈值等属性跑疑似错误","source":"_posts/work_coding/work0602.md","raw":"---\ntitle: 0602工作周报\n---\n\n### 携程国内供应商疑似错误\n    \n    确保源数据获取准确\n    等待携程售卖房型删除完毕，重启定时任务\n    \n### 床型分类功能调整\n    \n    简化以床型描述优先的功能代码\n    剔除相似度计算相关功能\n    调整床型更新定时任务对于供应商携程只更新Bedtype为0的\n    修复本地功能与服务器功能效果不一致的Bug\n    整理测试用例与单测工具\n    \n### RoomAuto接口功能调整\n    \n    兼容供应商携程额外拼接的属性, 代码调整完毕并初步测试了功能\n    针对供应商美团添加若干中文关键词，在匹配过程中发现了一些比较难问题 hao hua da chuang\n    RoomAuto测试工具的编写\n    \n### 问题\n\n    供应商携程房型数据a, 他的Bedtype开始为0，机器刷出BedType为x, 而后发现BedType实际应为y，如何快速解决。\n    答：开发以根据supplier_id、rate_id或supplier_id、roomtype_code来获得BedType(以及相关房型信息)并更新\n    数据部反映房型疑似错误没有有效找出 \"错误房型\"\n    答: 开发工具给数据部 设置supplier_id,  疑似错误阈值等属性跑疑似错误","slug":"work_coding/work0602","published":1,"date":"2019-06-02T13:47:39.221Z","updated":"2019-06-02T13:47:39.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwfo73no0001idh7ylvjlm4g","content":"<h3 id=\"携程国内供应商疑似错误\"><a href=\"#携程国内供应商疑似错误\" class=\"headerlink\" title=\"携程国内供应商疑似错误\"></a>携程国内供应商疑似错误</h3><pre><code>确保源数据获取准确\n等待携程售卖房型删除完毕，重启定时任务\n</code></pre><h3 id=\"床型分类功能调整\"><a href=\"#床型分类功能调整\" class=\"headerlink\" title=\"床型分类功能调整\"></a>床型分类功能调整</h3><pre><code>简化以床型描述优先的功能代码\n剔除相似度计算相关功能\n调整床型更新定时任务对于供应商携程只更新Bedtype为0的\n修复本地功能与服务器功能效果不一致的Bug\n整理测试用例与单测工具\n</code></pre><h3 id=\"RoomAuto接口功能调整\"><a href=\"#RoomAuto接口功能调整\" class=\"headerlink\" title=\"RoomAuto接口功能调整\"></a>RoomAuto接口功能调整</h3><pre><code>兼容供应商携程额外拼接的属性, 代码调整完毕并初步测试了功能\n针对供应商美团添加若干中文关键词，在匹配过程中发现了一些比较难问题 hao hua da chuang\nRoomAuto测试工具的编写\n</code></pre><h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><pre><code>供应商携程房型数据a, 他的Bedtype开始为0，机器刷出BedType为x, 而后发现BedType实际应为y，如何快速解决。\n答：开发以根据supplier_id、rate_id或supplier_id、roomtype_code来获得BedType(以及相关房型信息)并更新\n数据部反映房型疑似错误没有有效找出 &quot;错误房型&quot;\n答: 开发工具给数据部 设置supplier_id,  疑似错误阈值等属性跑疑似错误\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"携程国内供应商疑似错误\"><a href=\"#携程国内供应商疑似错误\" class=\"headerlink\" title=\"携程国内供应商疑似错误\"></a>携程国内供应商疑似错误</h3><pre><code>确保源数据获取准确\n等待携程售卖房型删除完毕，重启定时任务\n</code></pre><h3 id=\"床型分类功能调整\"><a href=\"#床型分类功能调整\" class=\"headerlink\" title=\"床型分类功能调整\"></a>床型分类功能调整</h3><pre><code>简化以床型描述优先的功能代码\n剔除相似度计算相关功能\n调整床型更新定时任务对于供应商携程只更新Bedtype为0的\n修复本地功能与服务器功能效果不一致的Bug\n整理测试用例与单测工具\n</code></pre><h3 id=\"RoomAuto接口功能调整\"><a href=\"#RoomAuto接口功能调整\" class=\"headerlink\" title=\"RoomAuto接口功能调整\"></a>RoomAuto接口功能调整</h3><pre><code>兼容供应商携程额外拼接的属性, 代码调整完毕并初步测试了功能\n针对供应商美团添加若干中文关键词，在匹配过程中发现了一些比较难问题 hao hua da chuang\nRoomAuto测试工具的编写\n</code></pre><h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><pre><code>供应商携程房型数据a, 他的Bedtype开始为0，机器刷出BedType为x, 而后发现BedType实际应为y，如何快速解决。\n答：开发以根据supplier_id、rate_id或supplier_id、roomtype_code来获得BedType(以及相关房型信息)并更新\n数据部反映房型疑似错误没有有效找出 &quot;错误房型&quot;\n答: 开发工具给数据部 设置supplier_id,  疑似错误阈值等属性跑疑似错误\n</code></pre>"},{"title":"容器","_content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>容器</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#51\">5.1　方法</a></li>\n<li><a href=\"#52\">5.2　列表</a></li>\n<li><a href=\"#53\">5.3　元组</a></li>\n<li><a href=\"#54\">5.4　字典</a></li>\n<li><a href=\"#55\">5.5　容器嵌套容器</a></li>\n<li><a href=\"#56\">5.6　术语表</a></li>\n<li><a href=\"#57\">5.7　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“愚者困惑，智者提问。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——本杰明 · 迪斯雷利（Benjamin Disraeli）</span></p>\n</blockquote>\n<p>在第 3 章中，我们学习了如何用变量保存对象。本章将讨论如何用容器保存对象。容器就像是文件柜，可有效整理数据。这里将学习 3 个常用的容器：列表、元组和字典。</p>\n<h3 id=\"51\">5.1　方法</h3>\n<p>第 4 章介绍了函数。Python 中有一个类似的概念，叫<strong>方法</strong>（method）。方法是与指定数据类型紧密相关的函数。方法与函数一样，可执行代码并返回结果。不同的是，只有在对象上才能调用方法。同样也可以传递参数给方法。调用字符串的 <code>upper</code> 和 <code>replace</code> 方法的示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zdllght</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Hello\"</span>.upper()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'HELLO'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hfgpst5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Hello\"</span>.replace(<span class=\"hljs-string\">\"o\"</span>, <span class=\"hljs-string\">\"@\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Hell@'</span>\n</code></pre>\n<p>本书第二部分将详细介绍方法。</p>\n<h3 id=\"52\">5.2　列表</h3>\n<p><strong>列表</strong>（list）是以固定顺序保存对象的容器（如图 5-1 所示）。</p>\n<p><img src=\"https://images.gitbook.cn/aab3b280-6fc3-11e9-9e1b-5b6158413fa5\" alt=\"enter image description here\"></p>\n<p>图 5-1　列表</p>\n<p>列表用方括号表示。我们可使用两种语法创建列表，一种是使用 <code>list</code> 函数创建空列表，示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/h4go6kg</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = <span class=\"hljs-built_in\">list</span>()\n<span class=\"hljs-number\">5</span>  fruit\n\n&gt;&gt; []\n</code></pre>\n<p>或者直接使用方括号：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jft8p7x</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = []\n<span class=\"hljs-number\">5</span>  fruit\n\n<span class=\"hljs-meta\">&gt;&gt;</span> []\n</code></pre>\n<p>使用第二种语法，并将你希望放在列表中的所有对象填入方括号中，用逗号分隔，即可创建一个包含所有对象的列表。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2y8nos</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n<span class=\"hljs-number\">5</span>  fruit\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Apple'</span>, <span class=\"hljs-string\">'Orange'</span>, <span class=\"hljs-string\">'Pear'</span>]\n</code></pre>\n<p>上述示例中的列表有 3 个元素：<code>\"Apple\"</code>、<code>\"Orange\"</code> 和 <code>\"Pear\"</code>。列表中的元素是有序的。除非你重新调整列表中元素的顺序，否则 <code>\"Apple\"</code> 永远是第一个元素，<code>\"Orange\"</code> 是第二个元素，<code>\"Pear\"</code> 则是第三个元素。<code>\"Apple\"</code> 位于列表的开头，末尾则是 <code>\"Pear\"</code>。这里可使用 <code>append</code> 方法向列表中添加一个新元素。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h9w3z2m</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n<span class=\"hljs-number\">5</span>  fruit.append(<span class=\"hljs-string\">\"Banana\"</span>)\n<span class=\"hljs-number\">6</span>  fruit.append(<span class=\"hljs-string\">\"Peach\"</span>)\n<span class=\"hljs-number\">7</span>  fruit\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Apple'</span>, <span class=\"hljs-string\">'Orange'</span>, <span class=\"hljs-string\">'Pear'</span>, <span class=\"hljs-string\">'Banana'</span>, <span class=\"hljs-string\">'Peach'</span>]\n</code></pre>\n<p>传递给 <code>append</code> 方法的两个对象现在都加入了列表。但 <code>append</code> 方法永远是将新元素添加至列表的末尾。</p>\n<p>列表不仅可以保存字符串，它还可以保存任意数据类型。示例如下：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhpntsr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  random = []\n<span class=\"hljs-number\">5</span>  random.append(<span class=\"hljs-keyword\">True</span>)\n<span class=\"hljs-number\">6</span>  random.append(<span class=\"hljs-number\">100</span>)\n<span class=\"hljs-number\">7</span>  random.append(<span class=\"hljs-number\">1.1</span>)\n<span class=\"hljs-number\">8</span>  random.append(<span class=\"hljs-string\">\"Hello\"</span>)\n<span class=\"hljs-number\">9</span>  random\n\n&gt;&gt; [<span class=\"hljs-keyword\">True</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1.1</span>, <span class=\"hljs-string\">'Hello'</span>]\n</code></pre>\n<p>字符串、列表和元组都是<strong>可迭代的</strong>（iterable）。如果可以使用循环访问对象中的每一个元素，那么该对象是可迭代的，被称为<strong>可迭代对象</strong>。可迭代对象中的每一个元素都有一个<strong>索引</strong>（index），即表示元素在可迭代对象中位置的数字。列表中第一个元素的索引是 0，而不是 1。</p>\n<p>在如下示例中，<code>\"Apple\"</code> 的索引是 0，<code>\"Orange\"</code> 的索引是 1，<code>\"Pear\"</code> 的索引是 2：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/z8zzk8d</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n</code></pre>\n<p>你可以使用语法[列表名][[索引]]获取一个元素：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jqtlwpf</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n<span class=\"hljs-number\">5</span>  fruit[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">6</span>  fruit[<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-number\">7</span>  fruit[<span class=\"hljs-number\">2</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Apple'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Orange'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Pear'</span>\n</code></pre>\n<p>如果获取的是不存在的索引，Python 会报告异常：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/za3rv95</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors[<span class=\"hljs-number\">4</span>]\n\n&gt;&gt; IndexError: <span class=\"hljs-built_in\">list</span> index out of range\n</code></pre>\n<p>列表是<strong>可变的</strong>（mutable）。如果一个容器是可变的，则可以向该容器中增删对象。将列表中某个元素的索引赋给一个新的对象，即可改变该元素：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4ahvf9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors\n<span class=\"hljs-number\">6</span>  colors[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-string\">\"red\"</span>\n<span class=\"hljs-number\">7</span>  colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'yellow'</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'red'</span>]\n</code></pre>\n<p>也可使用 <code>pop</code> 方法移除列表中的最后一个元素：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j52uvmq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors\n<span class=\"hljs-number\">6</span>  item = colors.pop()\n<span class=\"hljs-number\">7</span>  item\n<span class=\"hljs-number\">8</span>  colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'yellow'</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'yellow'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>]\n</code></pre>\n<p>不能对空列表使用 <code>pop</code> 方法。否则，Python 则会报告异常。</p>\n<p>你可以使用加法操作符来合并两个列表：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jjxnk4z</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors1 = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors2 = [<span class=\"hljs-string\">\"orange\"</span>, <span class=\"hljs-string\">\"pink\"</span>, <span class=\"hljs-string\">\"black\"</span>]\n<span class=\"hljs-number\">6</span>  colors1 + colors2\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'yellow'</span>, <span class=\"hljs-string\">'orange'</span>, <span class=\"hljs-string\">'pink'</span>, <span class=\"hljs-string\">'black'</span>]\n</code></pre>\n<p>也可以使用关键字 <code>in</code> 检查某个元素是否在列表中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z4fnv39</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-string\">\"green\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>使用关键字 <code>not</code> 检查某个元素是否不在列表中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jqzk8pj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-string\">\"black\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>使用函数 <code>len</code> 可获得列表的大小（包含元素的个数）：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hhx6rx4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  len(colors)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>下面是一个在实践中使用列表的例子：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/gq7yjr7</span>\n02\n03\n04  colors = [<span class=\"hljs-string\">\"purple\"</span>,\n05            <span class=\"hljs-string\">\"orange\"</span>,\n06            <span class=\"hljs-string\">\"green\"</span>]\n07\n08\n09  guess = input(<span class=\"hljs-string\">\"Guess a color:\"</span>)\n10\n11\n12<strong><span class=\"hljs-keyword\">if</span></strong> guess <strong><span class=\"hljs-keyword\">in</span></strong> colors:\n13      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"You guessed correctly!\"</span>)\n14<strong><span class=\"hljs-keyword\">else</span></strong>:\n15      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Wrong! Try again.\"</span>)\n\n&gt;&gt; Guess a color:</code></pre>\n<p>列表 <code>colors</code> 包含了代表颜色的不同字符串。程序使用内置函数 <code>input</code> 来让用户猜测是什么颜色，并将用户的答案保存至变量。如果答案在 <code>colors</code> 列表中，则告知用户猜测正确。反之，让用户再次尝试。</p>\n<h3 id=\"53\">5.3　元组</h3>\n<p><strong>元组</strong>（tuple）是存储有序对象的一种容器。与列表不同，元组是<strong>不可变的</strong>（immutable），这意味着其内容不会变化。创建元组后，无法修改其中任何元组的值，也无法添加或修改元素。用圆括号表示元组，且必须用逗号分隔元组中的元素。有两种语法可以创建元组，第一种如下所示：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zo88eal</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_tuple = tuple()\n<span class=\"hljs-number\">5</span>  my_tuple\n\n<span class=\"hljs-meta\">&gt;&gt;</span> ()\n</code></pre>\n<p>以及第二种语法：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zm3y26j</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_tuple = ()\n<span class=\"hljs-number\">5</span>  my_tuple\n\n<span class=\"hljs-meta\">&gt;&gt;</span> ()\n</code></pre>\n<p>如果要向元组中新增对象，可用第二种语法创建一个新的元组，并在其中加入你希望增加的每个元素，用逗号分隔：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zlwwfe3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  rndm = (<span class=\"hljs-string\">\"M. Jackson\"</span>, <span class=\"hljs-number\">1958</span>, <span class=\"hljs-keyword\">True</span>)\n<span class=\"hljs-number\">5</span>  rndm\n\n&gt;&gt; (<span class=\"hljs-string\">'M. Jackson'</span>, <span class=\"hljs-number\">1958</span>, <span class=\"hljs-keyword\">True</span>)\n</code></pre>\n<p>即使元组中只有一个元素，也需要在该元素的后面加上逗号。只有这样，Python 才能将其与其他为了表示运算顺序而放在圆括号中的数字标记进行区分。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8mca8o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 这是元组</span>\n<span class=\"hljs-number\">5</span>  (<span class=\"hljs-string\">\"self_taught\"</span>, )\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-comment\"># 这不是元组</span>\n<span class=\"hljs-number\">9</span>  (<span class=\"hljs-number\">9</span>) + <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> (<span class=\"hljs-string\">'self_taught'</span>, )\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n</code></pre>\n<p>创建元组之后，不能再新增元素或修改已有元素。如果在创建元组后这样做，Python 会报告异常：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z3x34nk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  dys[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"Handmaid's Tale\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">TypeError:</span> <span class=\"hljs-string\">'tuple'</span> object does not support item assignment\n</code></pre>\n<p>可使用与列表一样的方法来获取元组的元素，即引用其索引：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z9dc6lo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  dys[<span class=\"hljs-number\">2</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Fahrenheit 451'</span>\n</code></pre>\n<p>可使用关键字 <code>in</code> 来检查某个元素是否在元组中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j3bsel7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  <span class=\"hljs-string\">\"1984\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> dys\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>在 <code>in</code> 前加上关键字 <code>not</code> 即可检查元素是否不在元组中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jpdjjv9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  <span class=\"hljs-string\">\"Handmaid's Tale\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> dys\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>你可能会疑惑为什么要使用一个看上去没有列表灵活的数据结构。因为在处理明确永远不会改变的，并且也不希望其他程序对其进行修改的值时，元组是非常有用的。地理坐标就是适合使用元组存储的一种数据。城市的经纬度应保存在元组中，因为这些值永远不会改变，保存为元组意味着程序不会意外对其进行修改。元组不像列表那样可以用作字典的键，这个知识点会在下一节介绍。</p>\n<h3 id=\"54\">5.4　字典</h3>\n<p><strong>字典</strong>（dictionary）是另一种用于存储对象的内置容器。它们被用来链接<strong>键</strong>（key）和<strong>值</strong>（value）这两个对象（如图 5-2 所示）。将一个对象链接至另一个对象，也被称为<strong>映射</strong>（mapping），结果为产生一个<strong>键值对</strong>（key-value pair）。可将键值对添加到字典，然后使用键在字典中查询，可获得其对应的值。但是无法使用值来查询键。</p>\n<p><img src=\"https://images.gitbook.cn/38d2e810-6fc4-11e9-9e1b-5b6158413fa5\" alt=\"enter image description here\"></p>\n<p>图 5-2　字典</p>\n<p>字典是可变的，因此可以向字典中新增键值对。与列表和元组不同，字典中存储的对象是无序的。字典的价值在于键与值之间的关联。需要成对存储数据的场景很多。例如，可以将关于某个人的信息存储在字典中，将名为 height 的键，映射至代表这个人身高的值；将名为 eyecolor 的键映射至代表这个人眼睛颜色的值；将名为 nationality 的键映射至代表这个人国籍的值。</p>\n<p>字典用花括号表示。有两种创建字典的语法，其一如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zfn6jmw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_dict = dict()\n<span class=\"hljs-number\">5</span>  my_dict\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {}\n</code></pre>\n<p>另一种方法如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jfgemf2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_dict = {}\n<span class=\"hljs-number\">5</span>  my_dict\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {}\n</code></pre>\n<p>可以在创建字典时直接添加键值对。上述两种语法都要求用冒号分隔键与值，每个键值对之间用逗号分隔。与元组不同的是，如果只有一个键值对，不需要在其后添加逗号。如下示例介绍了创建字典时如何添加键值对：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hplqc4u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruits = {<span class=\"hljs-string\">\"Apple\"</span>:\n<span class=\"hljs-number\">5</span>            <span class=\"hljs-string\">\"Red\"</span>,\n<span class=\"hljs-number\">6</span>            <span class=\"hljs-string\">\"Banana\"</span>:\n<span class=\"hljs-number\">7</span>            <span class=\"hljs-string\">\"Yellow\"</span>}\n<span class=\"hljs-number\">8</span>  fruits\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {<span class=\"hljs-string\">'Apple'</span>: <span class=\"hljs-string\">'Red'</span>, <span class=\"hljs-string\">'Banana'</span>: <span class=\"hljs-string\">'Yellow'</span>}\n</code></pre>\n<p>读者在 shell 中看到的字典元素顺序可能与上例中有所不同，因为字典的键是无序的，Python 会随机打印其元素（本节中所有示例均适用该情况）。</p>\n<p>字典是可变的。创建字典后，可通过语法“<code>[字典名][[键]] = [值]</code>”添加新的键值对，并通过语法“<code>[字典名][[键]]</code>”查找值。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/grc28lh</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  facts = dict()\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  <span class=\"hljs-comment\"># 添加键-值对</span>\n08  facts[<span class=\"hljs-string\">\"code\"</span>] = <span class=\"hljs-string\">\"fun\"</span>\n09  <span class=\"hljs-comment\"># 查找键对应的值</span>\n<span class=\"hljs-number\">10</span>  facts[<span class=\"hljs-string\">\"code\"</span>]\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  <span class=\"hljs-comment\"># 添加键-值对</span>\n<span class=\"hljs-number\">14</span>  facts[<span class=\"hljs-string\">\"Bill\"</span>] = <span class=\"hljs-string\">\"Gates\"</span>\n<span class=\"hljs-number\">15</span>  <span class=\"hljs-comment\"># 查找键对应的值</span>\n<span class=\"hljs-number\">16</span>  facts[<span class=\"hljs-string\">\"Bill\"</span>]\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>  <span class=\"hljs-comment\"># 添加键-值对</span>\n<span class=\"hljs-number\">20</span>  facts[<span class=\"hljs-string\">\"founded\"</span>] = <span class=\"hljs-number\">1776</span>\n<span class=\"hljs-number\">21</span>  <span class=\"hljs-comment\"># 查找键对应的值</span>\n<span class=\"hljs-number\">22</span>  facts[<span class=\"hljs-string\">\"founded\"</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'fun'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Gates\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1776</span>\n</code></pre>\n<p>字典的值可以是任意对象。在上例中，前两个值是字符串，最后一个值 1776 是整数。但是字典的键必须是不可变的。字符串或元组可以用作字典的键，但是列表或字典不可以。</p>\n<p>可以使用关键字 <code>in</code> 检查某个键是否在字典中，但不能用其检查某个值是否在字典中。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hgf9vmp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  bill = dict({<span class=\"hljs-string\">\"Bill Gates\"</span>:\n<span class=\"hljs-number\">5</span>               <span class=\"hljs-string\">\"charitable\"</span>})\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-string\">\"Bill Gates\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> bill\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>如果访问一个不在字典中的键，Python 将报告异常。</p>\n<p>在关键字 <code>in</code> 之前加上关键字 <code>not</code>，可检查键是否不在字典中。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/he3g993</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  bill = dict({<span class=\"hljs-string\">\"Bill Gates\"</span>:\n<span class=\"hljs-number\">5</span>                   <span class=\"hljs-string\">\"charitable\"</span>})\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-string\">\"Bill Doors\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> bill\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>可使用关键字 <code>del</code> 删除字典中的键值对。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/htrd9lj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  books = {<span class=\"hljs-string\">\"Dracula\"</span>: <span class=\"hljs-string\">\"Stoker\"</span>,\n<span class=\"hljs-number\">5</span>           <span class=\"hljs-string\">\"1984\"</span>: <span class=\"hljs-string\">\"Orwell\"</span>,\n<span class=\"hljs-number\">6</span>           <span class=\"hljs-string\">\"The Trial\"</span>: <span class=\"hljs-string\">\"Kafka\"</span>}\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span> <strong>del</strong> books[<span class=\"hljs-string\">\"The Trial\"</span>]\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  books\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {<span class=\"hljs-string\">'Dracula'</span>: <span class=\"hljs-string\">'Stoker'</span>, <span class=\"hljs-string\">'1984'</span>: <span class=\"hljs-string\">'Orwell'</span>}</code></pre>\n<p>一个使用字典的程序示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/gnjvep7</span>\n02\n03\n04  rhymes = {<span class=\"hljs-string\">\"1\"</span>: <span class=\"hljs-string\">\"fun\"</span>,\n05            <span class=\"hljs-string\">\"2\"</span>: <span class=\"hljs-string\">\"blue\"</span>\n06            <span class=\"hljs-string\">\"3\"</span>: <span class=\"hljs-string\">\"me\"</span>,\n07            <span class=\"hljs-string\">\"4\"</span>: <span class=\"hljs-string\">\"floor\"</span>,\n08            <span class=\"hljs-string\">\"5\"</span>: <span class=\"hljs-string\">\"live\"</span>\n09            }\n10\n11\n12  n = input(<span class=\"hljs-string\">\"Type a number:\"</span>)\n13 <strong><span class=\"hljs-keyword\">if</span></strong> n <strong><span class=\"hljs-keyword\">in</span></strong> rhymes:\n14      rhyme = rhymes[n]\n15      <span class=\"hljs-built_in\">print</span>(rhyme)\n16 <strong><span class=\"hljs-keyword\">else</span></strong>:\n17      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Not found.\"</span>)\n\nType a number:</code></pre>\n<p>字典 <code>rhymes</code> 中有 6 个数字（键），分别映射至 6 个单词（值）。程序让用户输入数字，并保存在变量中。在从字典中查找单词之前，记得先用 <code>in</code> 关键字检查字典中是否存在对应的键。如果存在，则查找字典中对应的单词并打印出来。否则会打印消息告诉用户未查找到。</p>\n<h3 id=\"55\">5.5　容器嵌套容器</h3>\n<p>可以在容器中存储容器。例如，你可以在列表中保存列表：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gops9fz</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  lists = []\n<span class=\"hljs-number\">05</span>  rap = [<span class=\"hljs-string\">\"Kanye West\"</span>,\n<span class=\"hljs-number\">06</span>         <span class=\"hljs-string\">\"Jay Z\"</span>,\n<span class=\"hljs-number\">07</span>         <span class=\"hljs-string\">\"Eminem\"</span>,\n08         <span class=\"hljs-string\">\"Nas\"</span>]\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  rock = [<span class=\"hljs-string\">\"Bob Dylan\"</span>,\n<span class=\"hljs-number\">12</span>          <span class=\"hljs-string\">\"The Beatles\"</span>,\n<span class=\"hljs-number\">13</span>          <span class=\"hljs-string\">\"Led Zeppelin\"</span>]\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  djs = [<span class=\"hljs-string\">\"Zeds Dead\"</span>,\n<span class=\"hljs-number\">17</span>         <span class=\"hljs-string\">\"Tiesto\"</span>]\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>  lists.append(rap)\n<span class=\"hljs-number\">21</span>  lists.append(rock)\n<span class=\"hljs-number\">22</span>  lists.append(djs)\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">25</span>  print(lists)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [[<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>], [<span class=\"hljs-string\">'Bob Dylan'</span>, <span class=\"hljs-string\">'The Beatles'</span>, <span class=\"hljs-string\">'Led Zeppelin'</span>], [<span class=\"hljs-string\">'Zeds Dead'</span>, <span class=\"hljs-string\">'Tiesto'</span>]]\n</code></pre>\n<p>在上述例中，<code>lists</code> 有 3 个元素。每个元素都是一个列表：第一个元素是嘻哈歌手列表，第二个元素是摇滚歌手列表，第三个元素是 DJ 列表。可通过元素对应的索引访问这些列表：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gu4mudk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 接上例</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  rap = lists[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">8</span>  print(rap)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>]\n</code></pre>\n<p>如果向列表 <code>rap</code> 中添加一个新元素，该修改也会体现在 <code>lists</code> 列表中：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hdtosm2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 接上例</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n08  rap = lists[<span class=\"hljs-number\">0</span>]\n09  rap.append(<span class=\"hljs-string\">\"Kendrick Lamar\"</span>)\n<span class=\"hljs-number\">10</span>  print(rap)\n<span class=\"hljs-number\">11</span>  print(lists)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>, <span class=\"hljs-string\">'Kendrick Lamar'</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> [[<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>, <span class=\"hljs-string\">'Kendrick Lamar'</span>],\n[<span class=\"hljs-string\">'Bob Dylan'</span>, <span class=\"hljs-string\">'The Beatles'</span>, <span class=\"hljs-string\">'Led Zeppelin'</span>], [<span class=\"hljs-string\">'Zeds Dead'</span>, <span class=\"hljs-string\">'Tiesto'</span>]]\n</code></pre>\n<p>也可以在列表中存储元素，在元组中存储列表，还可以在列表或元组中存储字典：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z9dhema</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  locations = []\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  la = (<span class=\"hljs-number\">34.0522</span>, <span class=\"hljs-number\">188.2437</span>)\n08  chicago = (<span class=\"hljs-number\">41.8781</span>, <span class=\"hljs-number\">87.6298</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  locations.append(la)\n<span class=\"hljs-number\">12</span>  locations.append(chicago)\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  print(locations)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [(<span class=\"hljs-number\">34.0522</span>, <span class=\"hljs-number\">188.2437</span>), (<span class=\"hljs-number\">41.8781</span>, <span class=\"hljs-number\">87.6298</span>)]\n\n<span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ht7gpsd</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  eights = [<span class=\"hljs-string\">\"Edgar Allan Poe\"</span>,\n<span class=\"hljs-number\">05</span>            <span class=\"hljs-string\">\"Charles Dickens\"</span>]\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  nines = [<span class=\"hljs-string\">\"Hemingway\"</span>,\n09           <span class=\"hljs-string\">\"Fitzgerald\"</span>,\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-string\">\"Orwell\"</span>]\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  authors = (eights, nines)\n<span class=\"hljs-number\">14</span>  print(authors)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> ([<span class=\"hljs-string\">'Edgar Allan Poe'</span>, <span class=\"hljs-string\">'Charles Dickens'</span>], [<span class=\"hljs-string\">'Hemingway'</span>, <span class=\"hljs-string\">'Fitzgerald'</span>, <span class=\"hljs-string\">'Orwell'</span>])\n\n<span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h8ck5er</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  bday = {<span class=\"hljs-string\">\"Hemingway\"</span>:\n<span class=\"hljs-number\">05</span>          <span class=\"hljs-string\">\"7.21.1899\"</span>,\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-string\">\"Fitzgerald\"</span>:\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"9.24.1896\"</span>}\n08\n09\n<span class=\"hljs-number\">10</span>  my_list = [bday]\n<span class=\"hljs-number\">11</span>  print(my_list)\n<span class=\"hljs-number\">12</span>  my_tuple = (bday,)\n<span class=\"hljs-number\">13</span>  print(my_tuple)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [{<span class=\"hljs-string\">'Hemingway'</span>: <span class=\"hljs-string\">'7.21.1899'</span>, <span class=\"hljs-string\">'Fitzgerald'</span>: <span class=\"hljs-string\">'9.24.1896'</span>}]\n<span class=\"hljs-meta\">&gt;&gt;</span> ({<span class=\"hljs-string\">'Hemingway'</span>: <span class=\"hljs-string\">'7.21.1899'</span>, <span class=\"hljs-string\">'Fitzgerald'</span>: <span class=\"hljs-string\">'9.24.1896'</span>},)\n</code></pre>\n<p>列表、字典或元组都可以成为字典中的值：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zqupwx4</span></span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  ny = {<span class=\"hljs-string\">\"locations\"</span>:\n<span class=\"hljs-number\">05</span>        (<span class=\"hljs-number\">40.7128</span>,\n<span class=\"hljs-number\">06</span>         <span class=\"hljs-number\">74.0059</span>),\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>        <span class=\"hljs-string\">\"celebs\"</span>:\n<span class=\"hljs-number\">10</span>        [<span class=\"hljs-string\">\"W. Allen\"</span>,\n<span class=\"hljs-number\">11</span>         <span class=\"hljs-string\">\"Jay Z\"</span>,\n<span class=\"hljs-number\">12</span>         <span class=\"hljs-string\">\"K. Bacon\"</span>],\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>         <span class=\"hljs-string\">\"facts\"</span>:\n<span class=\"hljs-number\">15</span>         {<span class=\"hljs-string\">\"state\"</span>:\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-string\">\"NY\"</span>,\n<span class=\"hljs-number\">17</span>          <span class=\"hljs-string\">\"country\"</span>:\n<span class=\"hljs-number\">18</span>          <span class=\"hljs-string\">\"America\"</span>}\n<span class=\"hljs-number\">19</span>  }\n</code></pre>\n<p>本例中，字典 <code>ny</code> 有 3 个键：<code>\"locations\"</code>、<code>\"celebs\"</code> 和 <code>\"facts\"</code>。第一个键的值是一个元组，因为地理坐标永远不会变。第二个键的值是生活在纽约的名人列表，因为可能会变化所以使用列表。第三个键的值是一个字典，因为键值对是表示纽约有关联事实的最好方式。</p>\n<h3 id=\"56\">5.6　术语表</h3>\n<p><strong>方法</strong>：与指定数据类型紧密相关的函数。</p>\n<p><strong>列表</strong>：存储有序对象的一种容器。</p>\n<p><strong>可迭代的</strong>：如果可使用循环访问对象中的每一个元素，则该对象是可迭代的。</p>\n<p><strong>可迭代对象</strong>：可迭代的对象，如字符串、列表和元素。</p>\n<p><strong>索引</strong>：代表元素在可迭代对象中位置的数字。</p>\n<p><strong>可变的</strong>：容器中的内容可以发生变化。</p>\n<p><strong>不可变的</strong>：容器中的内容不能改变。</p>\n<p><strong>字典</strong>：存储对象的一种内置容器，将一个称为键的对象，映射至一个称为值的对象。</p>\n<p><strong>键</strong>：用来查找字典中对应的值。</p>\n<p><strong>值</strong>：字典中映射至键的值。</p>\n<p><strong>映射</strong>：将一个对象链接至另一个对象。</p>\n<p><strong>键值对</strong>：字典中键映射至值。</p>\n<h3 id=\"57\">5.7　挑战练习</h3>\n<p>1．创建一个你最喜欢歌手的列表。</p>\n<p>2．创建一个由元组构成的列表，每个元组包含居住过或旅游过的城市的经纬度。</p>\n<p>3．创建一个包含你的不同属性的字典：身高、最喜欢的颜色和最喜欢的作者等。</p>\n<p>4．编写一个程序，让用户询问你的身高、最喜欢的颜色或最喜欢的作者，并返回上一个挑战中创建的字典。</p>\n<p>5．创建一个字典，将最喜欢的歌手映射至你最喜欢的歌曲。</p>\n<p>6．列表、元组和容器只是 Python 中内置容器的一部分。自行研究 Python 中的集合（也是一种容器）在什么情况下可以使用集合？</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","source":"_posts/Python无师自通/5_container.html","raw":"---\ntitle: 容器\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>容器</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#51\">5.1　方法</a></li>\n<li><a href=\"#52\">5.2　列表</a></li>\n<li><a href=\"#53\">5.3　元组</a></li>\n<li><a href=\"#54\">5.4　字典</a></li>\n<li><a href=\"#55\">5.5　容器嵌套容器</a></li>\n<li><a href=\"#56\">5.6　术语表</a></li>\n<li><a href=\"#57\">5.7　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“愚者困惑，智者提问。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——本杰明 · 迪斯雷利（Benjamin Disraeli）</span></p>\n</blockquote>\n<p>在第 3 章中，我们学习了如何用变量保存对象。本章将讨论如何用容器保存对象。容器就像是文件柜，可有效整理数据。这里将学习 3 个常用的容器：列表、元组和字典。</p>\n<h3 id=\"51\">5.1　方法</h3>\n<p>第 4 章介绍了函数。Python 中有一个类似的概念，叫<strong>方法</strong>（method）。方法是与指定数据类型紧密相关的函数。方法与函数一样，可执行代码并返回结果。不同的是，只有在对象上才能调用方法。同样也可以传递参数给方法。调用字符串的 <code>upper</code> 和 <code>replace</code> 方法的示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zdllght</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Hello\"</span>.upper()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'HELLO'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hfgpst5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Hello\"</span>.replace(<span class=\"hljs-string\">\"o\"</span>, <span class=\"hljs-string\">\"@\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Hell@'</span>\n</code></pre>\n<p>本书第二部分将详细介绍方法。</p>\n<h3 id=\"52\">5.2　列表</h3>\n<p><strong>列表</strong>（list）是以固定顺序保存对象的容器（如图 5-1 所示）。</p>\n<p><img src=\"https://images.gitbook.cn/aab3b280-6fc3-11e9-9e1b-5b6158413fa5\" alt=\"enter image description here\"></p>\n<p>图 5-1　列表</p>\n<p>列表用方括号表示。我们可使用两种语法创建列表，一种是使用 <code>list</code> 函数创建空列表，示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/h4go6kg</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = <span class=\"hljs-built_in\">list</span>()\n<span class=\"hljs-number\">5</span>  fruit\n\n&gt;&gt; []\n</code></pre>\n<p>或者直接使用方括号：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jft8p7x</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = []\n<span class=\"hljs-number\">5</span>  fruit\n\n<span class=\"hljs-meta\">&gt;&gt;</span> []\n</code></pre>\n<p>使用第二种语法，并将你希望放在列表中的所有对象填入方括号中，用逗号分隔，即可创建一个包含所有对象的列表。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2y8nos</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n<span class=\"hljs-number\">5</span>  fruit\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Apple'</span>, <span class=\"hljs-string\">'Orange'</span>, <span class=\"hljs-string\">'Pear'</span>]\n</code></pre>\n<p>上述示例中的列表有 3 个元素：<code>\"Apple\"</code>、<code>\"Orange\"</code> 和 <code>\"Pear\"</code>。列表中的元素是有序的。除非你重新调整列表中元素的顺序，否则 <code>\"Apple\"</code> 永远是第一个元素，<code>\"Orange\"</code> 是第二个元素，<code>\"Pear\"</code> 则是第三个元素。<code>\"Apple\"</code> 位于列表的开头，末尾则是 <code>\"Pear\"</code>。这里可使用 <code>append</code> 方法向列表中添加一个新元素。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h9w3z2m</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n<span class=\"hljs-number\">5</span>  fruit.append(<span class=\"hljs-string\">\"Banana\"</span>)\n<span class=\"hljs-number\">6</span>  fruit.append(<span class=\"hljs-string\">\"Peach\"</span>)\n<span class=\"hljs-number\">7</span>  fruit\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Apple'</span>, <span class=\"hljs-string\">'Orange'</span>, <span class=\"hljs-string\">'Pear'</span>, <span class=\"hljs-string\">'Banana'</span>, <span class=\"hljs-string\">'Peach'</span>]\n</code></pre>\n<p>传递给 <code>append</code> 方法的两个对象现在都加入了列表。但 <code>append</code> 方法永远是将新元素添加至列表的末尾。</p>\n<p>列表不仅可以保存字符串，它还可以保存任意数据类型。示例如下：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhpntsr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  random = []\n<span class=\"hljs-number\">5</span>  random.append(<span class=\"hljs-keyword\">True</span>)\n<span class=\"hljs-number\">6</span>  random.append(<span class=\"hljs-number\">100</span>)\n<span class=\"hljs-number\">7</span>  random.append(<span class=\"hljs-number\">1.1</span>)\n<span class=\"hljs-number\">8</span>  random.append(<span class=\"hljs-string\">\"Hello\"</span>)\n<span class=\"hljs-number\">9</span>  random\n\n&gt;&gt; [<span class=\"hljs-keyword\">True</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1.1</span>, <span class=\"hljs-string\">'Hello'</span>]\n</code></pre>\n<p>字符串、列表和元组都是<strong>可迭代的</strong>（iterable）。如果可以使用循环访问对象中的每一个元素，那么该对象是可迭代的，被称为<strong>可迭代对象</strong>。可迭代对象中的每一个元素都有一个<strong>索引</strong>（index），即表示元素在可迭代对象中位置的数字。列表中第一个元素的索引是 0，而不是 1。</p>\n<p>在如下示例中，<code>\"Apple\"</code> 的索引是 0，<code>\"Orange\"</code> 的索引是 1，<code>\"Pear\"</code> 的索引是 2：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/z8zzk8d</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n</code></pre>\n<p>你可以使用语法[列表名][[索引]]获取一个元素：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jqtlwpf</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n<span class=\"hljs-number\">5</span>  fruit[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">6</span>  fruit[<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-number\">7</span>  fruit[<span class=\"hljs-number\">2</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Apple'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Orange'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Pear'</span>\n</code></pre>\n<p>如果获取的是不存在的索引，Python 会报告异常：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/za3rv95</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors[<span class=\"hljs-number\">4</span>]\n\n&gt;&gt; IndexError: <span class=\"hljs-built_in\">list</span> index out of range\n</code></pre>\n<p>列表是<strong>可变的</strong>（mutable）。如果一个容器是可变的，则可以向该容器中增删对象。将列表中某个元素的索引赋给一个新的对象，即可改变该元素：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4ahvf9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors\n<span class=\"hljs-number\">6</span>  colors[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-string\">\"red\"</span>\n<span class=\"hljs-number\">7</span>  colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'yellow'</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'red'</span>]\n</code></pre>\n<p>也可使用 <code>pop</code> 方法移除列表中的最后一个元素：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j52uvmq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors\n<span class=\"hljs-number\">6</span>  item = colors.pop()\n<span class=\"hljs-number\">7</span>  item\n<span class=\"hljs-number\">8</span>  colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'yellow'</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'yellow'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>]\n</code></pre>\n<p>不能对空列表使用 <code>pop</code> 方法。否则，Python 则会报告异常。</p>\n<p>你可以使用加法操作符来合并两个列表：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jjxnk4z</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors1 = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors2 = [<span class=\"hljs-string\">\"orange\"</span>, <span class=\"hljs-string\">\"pink\"</span>, <span class=\"hljs-string\">\"black\"</span>]\n<span class=\"hljs-number\">6</span>  colors1 + colors2\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'yellow'</span>, <span class=\"hljs-string\">'orange'</span>, <span class=\"hljs-string\">'pink'</span>, <span class=\"hljs-string\">'black'</span>]\n</code></pre>\n<p>也可以使用关键字 <code>in</code> 检查某个元素是否在列表中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z4fnv39</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-string\">\"green\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>使用关键字 <code>not</code> 检查某个元素是否不在列表中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jqzk8pj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-string\">\"black\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>使用函数 <code>len</code> 可获得列表的大小（包含元素的个数）：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hhx6rx4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  len(colors)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>下面是一个在实践中使用列表的例子：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/gq7yjr7</span>\n02\n03\n04  colors = [<span class=\"hljs-string\">\"purple\"</span>,\n05            <span class=\"hljs-string\">\"orange\"</span>,\n06            <span class=\"hljs-string\">\"green\"</span>]\n07\n08\n09  guess = input(<span class=\"hljs-string\">\"Guess a color:\"</span>)\n10\n11\n12<strong><span class=\"hljs-keyword\">if</span></strong> guess <strong><span class=\"hljs-keyword\">in</span></strong> colors:\n13      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"You guessed correctly!\"</span>)\n14<strong><span class=\"hljs-keyword\">else</span></strong>:\n15      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Wrong! Try again.\"</span>)\n\n&gt;&gt; Guess a color:</code></pre>\n<p>列表 <code>colors</code> 包含了代表颜色的不同字符串。程序使用内置函数 <code>input</code> 来让用户猜测是什么颜色，并将用户的答案保存至变量。如果答案在 <code>colors</code> 列表中，则告知用户猜测正确。反之，让用户再次尝试。</p>\n<h3 id=\"53\">5.3　元组</h3>\n<p><strong>元组</strong>（tuple）是存储有序对象的一种容器。与列表不同，元组是<strong>不可变的</strong>（immutable），这意味着其内容不会变化。创建元组后，无法修改其中任何元组的值，也无法添加或修改元素。用圆括号表示元组，且必须用逗号分隔元组中的元素。有两种语法可以创建元组，第一种如下所示：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zo88eal</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_tuple = tuple()\n<span class=\"hljs-number\">5</span>  my_tuple\n\n<span class=\"hljs-meta\">&gt;&gt;</span> ()\n</code></pre>\n<p>以及第二种语法：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zm3y26j</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_tuple = ()\n<span class=\"hljs-number\">5</span>  my_tuple\n\n<span class=\"hljs-meta\">&gt;&gt;</span> ()\n</code></pre>\n<p>如果要向元组中新增对象，可用第二种语法创建一个新的元组，并在其中加入你希望增加的每个元素，用逗号分隔：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zlwwfe3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  rndm = (<span class=\"hljs-string\">\"M. Jackson\"</span>, <span class=\"hljs-number\">1958</span>, <span class=\"hljs-keyword\">True</span>)\n<span class=\"hljs-number\">5</span>  rndm\n\n&gt;&gt; (<span class=\"hljs-string\">'M. Jackson'</span>, <span class=\"hljs-number\">1958</span>, <span class=\"hljs-keyword\">True</span>)\n</code></pre>\n<p>即使元组中只有一个元素，也需要在该元素的后面加上逗号。只有这样，Python 才能将其与其他为了表示运算顺序而放在圆括号中的数字标记进行区分。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8mca8o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 这是元组</span>\n<span class=\"hljs-number\">5</span>  (<span class=\"hljs-string\">\"self_taught\"</span>, )\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-comment\"># 这不是元组</span>\n<span class=\"hljs-number\">9</span>  (<span class=\"hljs-number\">9</span>) + <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> (<span class=\"hljs-string\">'self_taught'</span>, )\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n</code></pre>\n<p>创建元组之后，不能再新增元素或修改已有元素。如果在创建元组后这样做，Python 会报告异常：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z3x34nk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  dys[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"Handmaid's Tale\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">TypeError:</span> <span class=\"hljs-string\">'tuple'</span> object does not support item assignment\n</code></pre>\n<p>可使用与列表一样的方法来获取元组的元素，即引用其索引：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z9dc6lo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  dys[<span class=\"hljs-number\">2</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Fahrenheit 451'</span>\n</code></pre>\n<p>可使用关键字 <code>in</code> 来检查某个元素是否在元组中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j3bsel7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  <span class=\"hljs-string\">\"1984\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> dys\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>在 <code>in</code> 前加上关键字 <code>not</code> 即可检查元素是否不在元组中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jpdjjv9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  <span class=\"hljs-string\">\"Handmaid's Tale\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> dys\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>你可能会疑惑为什么要使用一个看上去没有列表灵活的数据结构。因为在处理明确永远不会改变的，并且也不希望其他程序对其进行修改的值时，元组是非常有用的。地理坐标就是适合使用元组存储的一种数据。城市的经纬度应保存在元组中，因为这些值永远不会改变，保存为元组意味着程序不会意外对其进行修改。元组不像列表那样可以用作字典的键，这个知识点会在下一节介绍。</p>\n<h3 id=\"54\">5.4　字典</h3>\n<p><strong>字典</strong>（dictionary）是另一种用于存储对象的内置容器。它们被用来链接<strong>键</strong>（key）和<strong>值</strong>（value）这两个对象（如图 5-2 所示）。将一个对象链接至另一个对象，也被称为<strong>映射</strong>（mapping），结果为产生一个<strong>键值对</strong>（key-value pair）。可将键值对添加到字典，然后使用键在字典中查询，可获得其对应的值。但是无法使用值来查询键。</p>\n<p><img src=\"https://images.gitbook.cn/38d2e810-6fc4-11e9-9e1b-5b6158413fa5\" alt=\"enter image description here\"></p>\n<p>图 5-2　字典</p>\n<p>字典是可变的，因此可以向字典中新增键值对。与列表和元组不同，字典中存储的对象是无序的。字典的价值在于键与值之间的关联。需要成对存储数据的场景很多。例如，可以将关于某个人的信息存储在字典中，将名为 height 的键，映射至代表这个人身高的值；将名为 eyecolor 的键映射至代表这个人眼睛颜色的值；将名为 nationality 的键映射至代表这个人国籍的值。</p>\n<p>字典用花括号表示。有两种创建字典的语法，其一如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zfn6jmw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_dict = dict()\n<span class=\"hljs-number\">5</span>  my_dict\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {}\n</code></pre>\n<p>另一种方法如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jfgemf2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_dict = {}\n<span class=\"hljs-number\">5</span>  my_dict\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {}\n</code></pre>\n<p>可以在创建字典时直接添加键值对。上述两种语法都要求用冒号分隔键与值，每个键值对之间用逗号分隔。与元组不同的是，如果只有一个键值对，不需要在其后添加逗号。如下示例介绍了创建字典时如何添加键值对：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hplqc4u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruits = {<span class=\"hljs-string\">\"Apple\"</span>:\n<span class=\"hljs-number\">5</span>            <span class=\"hljs-string\">\"Red\"</span>,\n<span class=\"hljs-number\">6</span>            <span class=\"hljs-string\">\"Banana\"</span>:\n<span class=\"hljs-number\">7</span>            <span class=\"hljs-string\">\"Yellow\"</span>}\n<span class=\"hljs-number\">8</span>  fruits\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {<span class=\"hljs-string\">'Apple'</span>: <span class=\"hljs-string\">'Red'</span>, <span class=\"hljs-string\">'Banana'</span>: <span class=\"hljs-string\">'Yellow'</span>}\n</code></pre>\n<p>读者在 shell 中看到的字典元素顺序可能与上例中有所不同，因为字典的键是无序的，Python 会随机打印其元素（本节中所有示例均适用该情况）。</p>\n<p>字典是可变的。创建字典后，可通过语法“<code>[字典名][[键]] = [值]</code>”添加新的键值对，并通过语法“<code>[字典名][[键]]</code>”查找值。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/grc28lh</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  facts = dict()\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  <span class=\"hljs-comment\"># 添加键-值对</span>\n08  facts[<span class=\"hljs-string\">\"code\"</span>] = <span class=\"hljs-string\">\"fun\"</span>\n09  <span class=\"hljs-comment\"># 查找键对应的值</span>\n<span class=\"hljs-number\">10</span>  facts[<span class=\"hljs-string\">\"code\"</span>]\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  <span class=\"hljs-comment\"># 添加键-值对</span>\n<span class=\"hljs-number\">14</span>  facts[<span class=\"hljs-string\">\"Bill\"</span>] = <span class=\"hljs-string\">\"Gates\"</span>\n<span class=\"hljs-number\">15</span>  <span class=\"hljs-comment\"># 查找键对应的值</span>\n<span class=\"hljs-number\">16</span>  facts[<span class=\"hljs-string\">\"Bill\"</span>]\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>  <span class=\"hljs-comment\"># 添加键-值对</span>\n<span class=\"hljs-number\">20</span>  facts[<span class=\"hljs-string\">\"founded\"</span>] = <span class=\"hljs-number\">1776</span>\n<span class=\"hljs-number\">21</span>  <span class=\"hljs-comment\"># 查找键对应的值</span>\n<span class=\"hljs-number\">22</span>  facts[<span class=\"hljs-string\">\"founded\"</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'fun'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Gates\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1776</span>\n</code></pre>\n<p>字典的值可以是任意对象。在上例中，前两个值是字符串，最后一个值 1776 是整数。但是字典的键必须是不可变的。字符串或元组可以用作字典的键，但是列表或字典不可以。</p>\n<p>可以使用关键字 <code>in</code> 检查某个键是否在字典中，但不能用其检查某个值是否在字典中。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hgf9vmp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  bill = dict({<span class=\"hljs-string\">\"Bill Gates\"</span>:\n<span class=\"hljs-number\">5</span>               <span class=\"hljs-string\">\"charitable\"</span>})\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-string\">\"Bill Gates\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> bill\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>如果访问一个不在字典中的键，Python 将报告异常。</p>\n<p>在关键字 <code>in</code> 之前加上关键字 <code>not</code>，可检查键是否不在字典中。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/he3g993</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  bill = dict({<span class=\"hljs-string\">\"Bill Gates\"</span>:\n<span class=\"hljs-number\">5</span>                   <span class=\"hljs-string\">\"charitable\"</span>})\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-string\">\"Bill Doors\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> bill\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>可使用关键字 <code>del</code> 删除字典中的键值对。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/htrd9lj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  books = {<span class=\"hljs-string\">\"Dracula\"</span>: <span class=\"hljs-string\">\"Stoker\"</span>,\n<span class=\"hljs-number\">5</span>           <span class=\"hljs-string\">\"1984\"</span>: <span class=\"hljs-string\">\"Orwell\"</span>,\n<span class=\"hljs-number\">6</span>           <span class=\"hljs-string\">\"The Trial\"</span>: <span class=\"hljs-string\">\"Kafka\"</span>}\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span> <strong>del</strong> books[<span class=\"hljs-string\">\"The Trial\"</span>]\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  books\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {<span class=\"hljs-string\">'Dracula'</span>: <span class=\"hljs-string\">'Stoker'</span>, <span class=\"hljs-string\">'1984'</span>: <span class=\"hljs-string\">'Orwell'</span>}</code></pre>\n<p>一个使用字典的程序示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/gnjvep7</span>\n02\n03\n04  rhymes = {<span class=\"hljs-string\">\"1\"</span>: <span class=\"hljs-string\">\"fun\"</span>,\n05            <span class=\"hljs-string\">\"2\"</span>: <span class=\"hljs-string\">\"blue\"</span>\n06            <span class=\"hljs-string\">\"3\"</span>: <span class=\"hljs-string\">\"me\"</span>,\n07            <span class=\"hljs-string\">\"4\"</span>: <span class=\"hljs-string\">\"floor\"</span>,\n08            <span class=\"hljs-string\">\"5\"</span>: <span class=\"hljs-string\">\"live\"</span>\n09            }\n10\n11\n12  n = input(<span class=\"hljs-string\">\"Type a number:\"</span>)\n13 <strong><span class=\"hljs-keyword\">if</span></strong> n <strong><span class=\"hljs-keyword\">in</span></strong> rhymes:\n14      rhyme = rhymes[n]\n15      <span class=\"hljs-built_in\">print</span>(rhyme)\n16 <strong><span class=\"hljs-keyword\">else</span></strong>:\n17      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Not found.\"</span>)\n\nType a number:</code></pre>\n<p>字典 <code>rhymes</code> 中有 6 个数字（键），分别映射至 6 个单词（值）。程序让用户输入数字，并保存在变量中。在从字典中查找单词之前，记得先用 <code>in</code> 关键字检查字典中是否存在对应的键。如果存在，则查找字典中对应的单词并打印出来。否则会打印消息告诉用户未查找到。</p>\n<h3 id=\"55\">5.5　容器嵌套容器</h3>\n<p>可以在容器中存储容器。例如，你可以在列表中保存列表：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gops9fz</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  lists = []\n<span class=\"hljs-number\">05</span>  rap = [<span class=\"hljs-string\">\"Kanye West\"</span>,\n<span class=\"hljs-number\">06</span>         <span class=\"hljs-string\">\"Jay Z\"</span>,\n<span class=\"hljs-number\">07</span>         <span class=\"hljs-string\">\"Eminem\"</span>,\n08         <span class=\"hljs-string\">\"Nas\"</span>]\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  rock = [<span class=\"hljs-string\">\"Bob Dylan\"</span>,\n<span class=\"hljs-number\">12</span>          <span class=\"hljs-string\">\"The Beatles\"</span>,\n<span class=\"hljs-number\">13</span>          <span class=\"hljs-string\">\"Led Zeppelin\"</span>]\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  djs = [<span class=\"hljs-string\">\"Zeds Dead\"</span>,\n<span class=\"hljs-number\">17</span>         <span class=\"hljs-string\">\"Tiesto\"</span>]\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>  lists.append(rap)\n<span class=\"hljs-number\">21</span>  lists.append(rock)\n<span class=\"hljs-number\">22</span>  lists.append(djs)\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">25</span>  print(lists)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [[<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>], [<span class=\"hljs-string\">'Bob Dylan'</span>, <span class=\"hljs-string\">'The Beatles'</span>, <span class=\"hljs-string\">'Led Zeppelin'</span>], [<span class=\"hljs-string\">'Zeds Dead'</span>, <span class=\"hljs-string\">'Tiesto'</span>]]\n</code></pre>\n<p>在上述例中，<code>lists</code> 有 3 个元素。每个元素都是一个列表：第一个元素是嘻哈歌手列表，第二个元素是摇滚歌手列表，第三个元素是 DJ 列表。可通过元素对应的索引访问这些列表：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gu4mudk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 接上例</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  rap = lists[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">8</span>  print(rap)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>]\n</code></pre>\n<p>如果向列表 <code>rap</code> 中添加一个新元素，该修改也会体现在 <code>lists</code> 列表中：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hdtosm2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 接上例</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n08  rap = lists[<span class=\"hljs-number\">0</span>]\n09  rap.append(<span class=\"hljs-string\">\"Kendrick Lamar\"</span>)\n<span class=\"hljs-number\">10</span>  print(rap)\n<span class=\"hljs-number\">11</span>  print(lists)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>, <span class=\"hljs-string\">'Kendrick Lamar'</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> [[<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>, <span class=\"hljs-string\">'Kendrick Lamar'</span>],\n[<span class=\"hljs-string\">'Bob Dylan'</span>, <span class=\"hljs-string\">'The Beatles'</span>, <span class=\"hljs-string\">'Led Zeppelin'</span>], [<span class=\"hljs-string\">'Zeds Dead'</span>, <span class=\"hljs-string\">'Tiesto'</span>]]\n</code></pre>\n<p>也可以在列表中存储元素，在元组中存储列表，还可以在列表或元组中存储字典：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z9dhema</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  locations = []\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  la = (<span class=\"hljs-number\">34.0522</span>, <span class=\"hljs-number\">188.2437</span>)\n08  chicago = (<span class=\"hljs-number\">41.8781</span>, <span class=\"hljs-number\">87.6298</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  locations.append(la)\n<span class=\"hljs-number\">12</span>  locations.append(chicago)\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  print(locations)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [(<span class=\"hljs-number\">34.0522</span>, <span class=\"hljs-number\">188.2437</span>), (<span class=\"hljs-number\">41.8781</span>, <span class=\"hljs-number\">87.6298</span>)]\n\n<span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ht7gpsd</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  eights = [<span class=\"hljs-string\">\"Edgar Allan Poe\"</span>,\n<span class=\"hljs-number\">05</span>            <span class=\"hljs-string\">\"Charles Dickens\"</span>]\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  nines = [<span class=\"hljs-string\">\"Hemingway\"</span>,\n09           <span class=\"hljs-string\">\"Fitzgerald\"</span>,\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-string\">\"Orwell\"</span>]\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  authors = (eights, nines)\n<span class=\"hljs-number\">14</span>  print(authors)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> ([<span class=\"hljs-string\">'Edgar Allan Poe'</span>, <span class=\"hljs-string\">'Charles Dickens'</span>], [<span class=\"hljs-string\">'Hemingway'</span>, <span class=\"hljs-string\">'Fitzgerald'</span>, <span class=\"hljs-string\">'Orwell'</span>])\n\n<span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h8ck5er</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  bday = {<span class=\"hljs-string\">\"Hemingway\"</span>:\n<span class=\"hljs-number\">05</span>          <span class=\"hljs-string\">\"7.21.1899\"</span>,\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-string\">\"Fitzgerald\"</span>:\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"9.24.1896\"</span>}\n08\n09\n<span class=\"hljs-number\">10</span>  my_list = [bday]\n<span class=\"hljs-number\">11</span>  print(my_list)\n<span class=\"hljs-number\">12</span>  my_tuple = (bday,)\n<span class=\"hljs-number\">13</span>  print(my_tuple)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [{<span class=\"hljs-string\">'Hemingway'</span>: <span class=\"hljs-string\">'7.21.1899'</span>, <span class=\"hljs-string\">'Fitzgerald'</span>: <span class=\"hljs-string\">'9.24.1896'</span>}]\n<span class=\"hljs-meta\">&gt;&gt;</span> ({<span class=\"hljs-string\">'Hemingway'</span>: <span class=\"hljs-string\">'7.21.1899'</span>, <span class=\"hljs-string\">'Fitzgerald'</span>: <span class=\"hljs-string\">'9.24.1896'</span>},)\n</code></pre>\n<p>列表、字典或元组都可以成为字典中的值：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zqupwx4</span></span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  ny = {<span class=\"hljs-string\">\"locations\"</span>:\n<span class=\"hljs-number\">05</span>        (<span class=\"hljs-number\">40.7128</span>,\n<span class=\"hljs-number\">06</span>         <span class=\"hljs-number\">74.0059</span>),\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>        <span class=\"hljs-string\">\"celebs\"</span>:\n<span class=\"hljs-number\">10</span>        [<span class=\"hljs-string\">\"W. Allen\"</span>,\n<span class=\"hljs-number\">11</span>         <span class=\"hljs-string\">\"Jay Z\"</span>,\n<span class=\"hljs-number\">12</span>         <span class=\"hljs-string\">\"K. Bacon\"</span>],\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>         <span class=\"hljs-string\">\"facts\"</span>:\n<span class=\"hljs-number\">15</span>         {<span class=\"hljs-string\">\"state\"</span>:\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-string\">\"NY\"</span>,\n<span class=\"hljs-number\">17</span>          <span class=\"hljs-string\">\"country\"</span>:\n<span class=\"hljs-number\">18</span>          <span class=\"hljs-string\">\"America\"</span>}\n<span class=\"hljs-number\">19</span>  }\n</code></pre>\n<p>本例中，字典 <code>ny</code> 有 3 个键：<code>\"locations\"</code>、<code>\"celebs\"</code> 和 <code>\"facts\"</code>。第一个键的值是一个元组，因为地理坐标永远不会变。第二个键的值是生活在纽约的名人列表，因为可能会变化所以使用列表。第三个键的值是一个字典，因为键值对是表示纽约有关联事实的最好方式。</p>\n<h3 id=\"56\">5.6　术语表</h3>\n<p><strong>方法</strong>：与指定数据类型紧密相关的函数。</p>\n<p><strong>列表</strong>：存储有序对象的一种容器。</p>\n<p><strong>可迭代的</strong>：如果可使用循环访问对象中的每一个元素，则该对象是可迭代的。</p>\n<p><strong>可迭代对象</strong>：可迭代的对象，如字符串、列表和元素。</p>\n<p><strong>索引</strong>：代表元素在可迭代对象中位置的数字。</p>\n<p><strong>可变的</strong>：容器中的内容可以发生变化。</p>\n<p><strong>不可变的</strong>：容器中的内容不能改变。</p>\n<p><strong>字典</strong>：存储对象的一种内置容器，将一个称为键的对象，映射至一个称为值的对象。</p>\n<p><strong>键</strong>：用来查找字典中对应的值。</p>\n<p><strong>值</strong>：字典中映射至键的值。</p>\n<p><strong>映射</strong>：将一个对象链接至另一个对象。</p>\n<p><strong>键值对</strong>：字典中键映射至值。</p>\n<h3 id=\"57\">5.7　挑战练习</h3>\n<p>1．创建一个你最喜欢歌手的列表。</p>\n<p>2．创建一个由元组构成的列表，每个元组包含居住过或旅游过的城市的经纬度。</p>\n<p>3．创建一个包含你的不同属性的字典：身高、最喜欢的颜色和最喜欢的作者等。</p>\n<p>4．编写一个程序，让用户询问你的身高、最喜欢的颜色或最喜欢的作者，并返回上一个挑战中创建的字典。</p>\n<p>5．创建一个字典，将最喜欢的歌手映射至你最喜欢的歌曲。</p>\n<p>6．列表、元组和容器只是 Python 中内置容器的一部分。自行研究 Python 中的集合（也是一种容器）在什么情况下可以使用集合？</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","slug":"Python无师自通/5_container","published":1,"date":"2019-06-03T03:53:04.178Z","updated":"2019-06-03T03:53:04.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwfu9rtq0000ezh7sgzyis9t","content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>容器</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#51\">5.1　方法</a></li>\n<li><a href=\"#52\">5.2　列表</a></li>\n<li><a href=\"#53\">5.3　元组</a></li>\n<li><a href=\"#54\">5.4　字典</a></li>\n<li><a href=\"#55\">5.5　容器嵌套容器</a></li>\n<li><a href=\"#56\">5.6　术语表</a></li>\n<li><a href=\"#57\">5.7　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“愚者困惑，智者提问。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——本杰明 · 迪斯雷利（Benjamin Disraeli）</span></p>\n</blockquote>\n<p>在第 3 章中，我们学习了如何用变量保存对象。本章将讨论如何用容器保存对象。容器就像是文件柜，可有效整理数据。这里将学习 3 个常用的容器：列表、元组和字典。</p>\n<h3 id=\"51\">5.1　方法</h3>\n<p>第 4 章介绍了函数。Python 中有一个类似的概念，叫<strong>方法</strong>（method）。方法是与指定数据类型紧密相关的函数。方法与函数一样，可执行代码并返回结果。不同的是，只有在对象上才能调用方法。同样也可以传递参数给方法。调用字符串的 <code>upper</code> 和 <code>replace</code> 方法的示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zdllght</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Hello\"</span>.upper()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'HELLO'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hfgpst5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Hello\"</span>.replace(<span class=\"hljs-string\">\"o\"</span>, <span class=\"hljs-string\">\"@\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Hell@'</span>\n</code></pre>\n<p>本书第二部分将详细介绍方法。</p>\n<h3 id=\"52\">5.2　列表</h3>\n<p><strong>列表</strong>（list）是以固定顺序保存对象的容器（如图 5-1 所示）。</p>\n<p><img src=\"https://images.gitbook.cn/aab3b280-6fc3-11e9-9e1b-5b6158413fa5\" alt=\"enter image description here\"></p>\n<p>图 5-1　列表</p>\n<p>列表用方括号表示。我们可使用两种语法创建列表，一种是使用 <code>list</code> 函数创建空列表，示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/h4go6kg</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = <span class=\"hljs-built_in\">list</span>()\n<span class=\"hljs-number\">5</span>  fruit\n\n&gt;&gt; []\n</code></pre>\n<p>或者直接使用方括号：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jft8p7x</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = []\n<span class=\"hljs-number\">5</span>  fruit\n\n<span class=\"hljs-meta\">&gt;&gt;</span> []\n</code></pre>\n<p>使用第二种语法，并将你希望放在列表中的所有对象填入方括号中，用逗号分隔，即可创建一个包含所有对象的列表。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2y8nos</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n<span class=\"hljs-number\">5</span>  fruit\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Apple'</span>, <span class=\"hljs-string\">'Orange'</span>, <span class=\"hljs-string\">'Pear'</span>]\n</code></pre>\n<p>上述示例中的列表有 3 个元素：<code>\"Apple\"</code>、<code>\"Orange\"</code> 和 <code>\"Pear\"</code>。列表中的元素是有序的。除非你重新调整列表中元素的顺序，否则 <code>\"Apple\"</code> 永远是第一个元素，<code>\"Orange\"</code> 是第二个元素，<code>\"Pear\"</code> 则是第三个元素。<code>\"Apple\"</code> 位于列表的开头，末尾则是 <code>\"Pear\"</code>。这里可使用 <code>append</code> 方法向列表中添加一个新元素。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h9w3z2m</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n<span class=\"hljs-number\">5</span>  fruit.append(<span class=\"hljs-string\">\"Banana\"</span>)\n<span class=\"hljs-number\">6</span>  fruit.append(<span class=\"hljs-string\">\"Peach\"</span>)\n<span class=\"hljs-number\">7</span>  fruit\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Apple'</span>, <span class=\"hljs-string\">'Orange'</span>, <span class=\"hljs-string\">'Pear'</span>, <span class=\"hljs-string\">'Banana'</span>, <span class=\"hljs-string\">'Peach'</span>]\n</code></pre>\n<p>传递给 <code>append</code> 方法的两个对象现在都加入了列表。但 <code>append</code> 方法永远是将新元素添加至列表的末尾。</p>\n<p>列表不仅可以保存字符串，它还可以保存任意数据类型。示例如下：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhpntsr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  random = []\n<span class=\"hljs-number\">5</span>  random.append(<span class=\"hljs-keyword\">True</span>)\n<span class=\"hljs-number\">6</span>  random.append(<span class=\"hljs-number\">100</span>)\n<span class=\"hljs-number\">7</span>  random.append(<span class=\"hljs-number\">1.1</span>)\n<span class=\"hljs-number\">8</span>  random.append(<span class=\"hljs-string\">\"Hello\"</span>)\n<span class=\"hljs-number\">9</span>  random\n\n&gt;&gt; [<span class=\"hljs-keyword\">True</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1.1</span>, <span class=\"hljs-string\">'Hello'</span>]\n</code></pre>\n<p>字符串、列表和元组都是<strong>可迭代的</strong>（iterable）。如果可以使用循环访问对象中的每一个元素，那么该对象是可迭代的，被称为<strong>可迭代对象</strong>。可迭代对象中的每一个元素都有一个<strong>索引</strong>（index），即表示元素在可迭代对象中位置的数字。列表中第一个元素的索引是 0，而不是 1。</p>\n<p>在如下示例中，<code>\"Apple\"</code> 的索引是 0，<code>\"Orange\"</code> 的索引是 1，<code>\"Pear\"</code> 的索引是 2：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/z8zzk8d</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n</code></pre>\n<p>你可以使用语法[列表名][[索引]]获取一个元素：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jqtlwpf</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n<span class=\"hljs-number\">5</span>  fruit[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">6</span>  fruit[<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-number\">7</span>  fruit[<span class=\"hljs-number\">2</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Apple'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Orange'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Pear'</span>\n</code></pre>\n<p>如果获取的是不存在的索引，Python 会报告异常：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/za3rv95</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors[<span class=\"hljs-number\">4</span>]\n\n&gt;&gt; IndexError: <span class=\"hljs-built_in\">list</span> index out of range\n</code></pre>\n<p>列表是<strong>可变的</strong>（mutable）。如果一个容器是可变的，则可以向该容器中增删对象。将列表中某个元素的索引赋给一个新的对象，即可改变该元素：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4ahvf9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors\n<span class=\"hljs-number\">6</span>  colors[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-string\">\"red\"</span>\n<span class=\"hljs-number\">7</span>  colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'yellow'</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'red'</span>]\n</code></pre>\n<p>也可使用 <code>pop</code> 方法移除列表中的最后一个元素：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j52uvmq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors\n<span class=\"hljs-number\">6</span>  item = colors.pop()\n<span class=\"hljs-number\">7</span>  item\n<span class=\"hljs-number\">8</span>  colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'yellow'</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'yellow'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>]\n</code></pre>\n<p>不能对空列表使用 <code>pop</code> 方法。否则，Python 则会报告异常。</p>\n<p>你可以使用加法操作符来合并两个列表：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jjxnk4z</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors1 = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors2 = [<span class=\"hljs-string\">\"orange\"</span>, <span class=\"hljs-string\">\"pink\"</span>, <span class=\"hljs-string\">\"black\"</span>]\n<span class=\"hljs-number\">6</span>  colors1 + colors2\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'yellow'</span>, <span class=\"hljs-string\">'orange'</span>, <span class=\"hljs-string\">'pink'</span>, <span class=\"hljs-string\">'black'</span>]\n</code></pre>\n<p>也可以使用关键字 <code>in</code> 检查某个元素是否在列表中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z4fnv39</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-string\">\"green\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>使用关键字 <code>not</code> 检查某个元素是否不在列表中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jqzk8pj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-string\">\"black\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>使用函数 <code>len</code> 可获得列表的大小（包含元素的个数）：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hhx6rx4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  len(colors)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>下面是一个在实践中使用列表的例子：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/gq7yjr7</span>\n02\n03\n04  colors = [<span class=\"hljs-string\">\"purple\"</span>,\n05            <span class=\"hljs-string\">\"orange\"</span>,\n06            <span class=\"hljs-string\">\"green\"</span>]\n07\n08\n09  guess = input(<span class=\"hljs-string\">\"Guess a color:\"</span>)\n10\n11\n12<strong><span class=\"hljs-keyword\">if</span></strong> guess <strong><span class=\"hljs-keyword\">in</span></strong> colors:\n13      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"You guessed correctly!\"</span>)\n14<strong><span class=\"hljs-keyword\">else</span></strong>:\n15      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Wrong! Try again.\"</span>)\n\n&gt;&gt; Guess a color:</code></pre>\n<p>列表 <code>colors</code> 包含了代表颜色的不同字符串。程序使用内置函数 <code>input</code> 来让用户猜测是什么颜色，并将用户的答案保存至变量。如果答案在 <code>colors</code> 列表中，则告知用户猜测正确。反之，让用户再次尝试。</p>\n<h3 id=\"53\">5.3　元组</h3>\n<p><strong>元组</strong>（tuple）是存储有序对象的一种容器。与列表不同，元组是<strong>不可变的</strong>（immutable），这意味着其内容不会变化。创建元组后，无法修改其中任何元组的值，也无法添加或修改元素。用圆括号表示元组，且必须用逗号分隔元组中的元素。有两种语法可以创建元组，第一种如下所示：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zo88eal</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_tuple = tuple()\n<span class=\"hljs-number\">5</span>  my_tuple\n\n<span class=\"hljs-meta\">&gt;&gt;</span> ()\n</code></pre>\n<p>以及第二种语法：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zm3y26j</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_tuple = ()\n<span class=\"hljs-number\">5</span>  my_tuple\n\n<span class=\"hljs-meta\">&gt;&gt;</span> ()\n</code></pre>\n<p>如果要向元组中新增对象，可用第二种语法创建一个新的元组，并在其中加入你希望增加的每个元素，用逗号分隔：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zlwwfe3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  rndm = (<span class=\"hljs-string\">\"M. Jackson\"</span>, <span class=\"hljs-number\">1958</span>, <span class=\"hljs-keyword\">True</span>)\n<span class=\"hljs-number\">5</span>  rndm\n\n&gt;&gt; (<span class=\"hljs-string\">'M. Jackson'</span>, <span class=\"hljs-number\">1958</span>, <span class=\"hljs-keyword\">True</span>)\n</code></pre>\n<p>即使元组中只有一个元素，也需要在该元素的后面加上逗号。只有这样，Python 才能将其与其他为了表示运算顺序而放在圆括号中的数字标记进行区分。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8mca8o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 这是元组</span>\n<span class=\"hljs-number\">5</span>  (<span class=\"hljs-string\">\"self_taught\"</span>, )\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-comment\"># 这不是元组</span>\n<span class=\"hljs-number\">9</span>  (<span class=\"hljs-number\">9</span>) + <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> (<span class=\"hljs-string\">'self_taught'</span>, )\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n</code></pre>\n<p>创建元组之后，不能再新增元素或修改已有元素。如果在创建元组后这样做，Python 会报告异常：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z3x34nk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  dys[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"Handmaid's Tale\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">TypeError:</span> <span class=\"hljs-string\">'tuple'</span> object does not support item assignment\n</code></pre>\n<p>可使用与列表一样的方法来获取元组的元素，即引用其索引：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z9dc6lo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  dys[<span class=\"hljs-number\">2</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Fahrenheit 451'</span>\n</code></pre>\n<p>可使用关键字 <code>in</code> 来检查某个元素是否在元组中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j3bsel7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  <span class=\"hljs-string\">\"1984\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> dys\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>在 <code>in</code> 前加上关键字 <code>not</code> 即可检查元素是否不在元组中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jpdjjv9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  <span class=\"hljs-string\">\"Handmaid's Tale\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> dys\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>你可能会疑惑为什么要使用一个看上去没有列表灵活的数据结构。因为在处理明确永远不会改变的，并且也不希望其他程序对其进行修改的值时，元组是非常有用的。地理坐标就是适合使用元组存储的一种数据。城市的经纬度应保存在元组中，因为这些值永远不会改变，保存为元组意味着程序不会意外对其进行修改。元组不像列表那样可以用作字典的键，这个知识点会在下一节介绍。</p>\n<h3 id=\"54\">5.4　字典</h3>\n<p><strong>字典</strong>（dictionary）是另一种用于存储对象的内置容器。它们被用来链接<strong>键</strong>（key）和<strong>值</strong>（value）这两个对象（如图 5-2 所示）。将一个对象链接至另一个对象，也被称为<strong>映射</strong>（mapping），结果为产生一个<strong>键值对</strong>（key-value pair）。可将键值对添加到字典，然后使用键在字典中查询，可获得其对应的值。但是无法使用值来查询键。</p>\n<p><img src=\"https://images.gitbook.cn/38d2e810-6fc4-11e9-9e1b-5b6158413fa5\" alt=\"enter image description here\"></p>\n<p>图 5-2　字典</p>\n<p>字典是可变的，因此可以向字典中新增键值对。与列表和元组不同，字典中存储的对象是无序的。字典的价值在于键与值之间的关联。需要成对存储数据的场景很多。例如，可以将关于某个人的信息存储在字典中，将名为 height 的键，映射至代表这个人身高的值；将名为 eyecolor 的键映射至代表这个人眼睛颜色的值；将名为 nationality 的键映射至代表这个人国籍的值。</p>\n<p>字典用花括号表示。有两种创建字典的语法，其一如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zfn6jmw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_dict = dict()\n<span class=\"hljs-number\">5</span>  my_dict\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {}\n</code></pre>\n<p>另一种方法如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jfgemf2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_dict = {}\n<span class=\"hljs-number\">5</span>  my_dict\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {}\n</code></pre>\n<p>可以在创建字典时直接添加键值对。上述两种语法都要求用冒号分隔键与值，每个键值对之间用逗号分隔。与元组不同的是，如果只有一个键值对，不需要在其后添加逗号。如下示例介绍了创建字典时如何添加键值对：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hplqc4u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruits = {<span class=\"hljs-string\">\"Apple\"</span>:\n<span class=\"hljs-number\">5</span>            <span class=\"hljs-string\">\"Red\"</span>,\n<span class=\"hljs-number\">6</span>            <span class=\"hljs-string\">\"Banana\"</span>:\n<span class=\"hljs-number\">7</span>            <span class=\"hljs-string\">\"Yellow\"</span>}\n<span class=\"hljs-number\">8</span>  fruits\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {<span class=\"hljs-string\">'Apple'</span>: <span class=\"hljs-string\">'Red'</span>, <span class=\"hljs-string\">'Banana'</span>: <span class=\"hljs-string\">'Yellow'</span>}\n</code></pre>\n<p>读者在 shell 中看到的字典元素顺序可能与上例中有所不同，因为字典的键是无序的，Python 会随机打印其元素（本节中所有示例均适用该情况）。</p>\n<p>字典是可变的。创建字典后，可通过语法“<code>[字典名][[键]] = [值]</code>”添加新的键值对，并通过语法“<code>[字典名][[键]]</code>”查找值。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/grc28lh</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  facts = dict()\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  <span class=\"hljs-comment\"># 添加键-值对</span>\n08  facts[<span class=\"hljs-string\">\"code\"</span>] = <span class=\"hljs-string\">\"fun\"</span>\n09  <span class=\"hljs-comment\"># 查找键对应的值</span>\n<span class=\"hljs-number\">10</span>  facts[<span class=\"hljs-string\">\"code\"</span>]\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  <span class=\"hljs-comment\"># 添加键-值对</span>\n<span class=\"hljs-number\">14</span>  facts[<span class=\"hljs-string\">\"Bill\"</span>] = <span class=\"hljs-string\">\"Gates\"</span>\n<span class=\"hljs-number\">15</span>  <span class=\"hljs-comment\"># 查找键对应的值</span>\n<span class=\"hljs-number\">16</span>  facts[<span class=\"hljs-string\">\"Bill\"</span>]\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>  <span class=\"hljs-comment\"># 添加键-值对</span>\n<span class=\"hljs-number\">20</span>  facts[<span class=\"hljs-string\">\"founded\"</span>] = <span class=\"hljs-number\">1776</span>\n<span class=\"hljs-number\">21</span>  <span class=\"hljs-comment\"># 查找键对应的值</span>\n<span class=\"hljs-number\">22</span>  facts[<span class=\"hljs-string\">\"founded\"</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'fun'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Gates\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1776</span>\n</code></pre>\n<p>字典的值可以是任意对象。在上例中，前两个值是字符串，最后一个值 1776 是整数。但是字典的键必须是不可变的。字符串或元组可以用作字典的键，但是列表或字典不可以。</p>\n<p>可以使用关键字 <code>in</code> 检查某个键是否在字典中，但不能用其检查某个值是否在字典中。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hgf9vmp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  bill = dict({<span class=\"hljs-string\">\"Bill Gates\"</span>:\n<span class=\"hljs-number\">5</span>               <span class=\"hljs-string\">\"charitable\"</span>})\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-string\">\"Bill Gates\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> bill\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>如果访问一个不在字典中的键，Python 将报告异常。</p>\n<p>在关键字 <code>in</code> 之前加上关键字 <code>not</code>，可检查键是否不在字典中。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/he3g993</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  bill = dict({<span class=\"hljs-string\">\"Bill Gates\"</span>:\n<span class=\"hljs-number\">5</span>                   <span class=\"hljs-string\">\"charitable\"</span>})\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-string\">\"Bill Doors\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> bill\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>可使用关键字 <code>del</code> 删除字典中的键值对。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/htrd9lj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  books = {<span class=\"hljs-string\">\"Dracula\"</span>: <span class=\"hljs-string\">\"Stoker\"</span>,\n<span class=\"hljs-number\">5</span>           <span class=\"hljs-string\">\"1984\"</span>: <span class=\"hljs-string\">\"Orwell\"</span>,\n<span class=\"hljs-number\">6</span>           <span class=\"hljs-string\">\"The Trial\"</span>: <span class=\"hljs-string\">\"Kafka\"</span>}\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span> <strong>del</strong> books[<span class=\"hljs-string\">\"The Trial\"</span>]\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  books\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {<span class=\"hljs-string\">'Dracula'</span>: <span class=\"hljs-string\">'Stoker'</span>, <span class=\"hljs-string\">'1984'</span>: <span class=\"hljs-string\">'Orwell'</span>}</code></pre>\n<p>一个使用字典的程序示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/gnjvep7</span>\n02\n03\n04  rhymes = {<span class=\"hljs-string\">\"1\"</span>: <span class=\"hljs-string\">\"fun\"</span>,\n05            <span class=\"hljs-string\">\"2\"</span>: <span class=\"hljs-string\">\"blue\"</span>\n06            <span class=\"hljs-string\">\"3\"</span>: <span class=\"hljs-string\">\"me\"</span>,\n07            <span class=\"hljs-string\">\"4\"</span>: <span class=\"hljs-string\">\"floor\"</span>,\n08            <span class=\"hljs-string\">\"5\"</span>: <span class=\"hljs-string\">\"live\"</span>\n09            }\n10\n11\n12  n = input(<span class=\"hljs-string\">\"Type a number:\"</span>)\n13 <strong><span class=\"hljs-keyword\">if</span></strong> n <strong><span class=\"hljs-keyword\">in</span></strong> rhymes:\n14      rhyme = rhymes[n]\n15      <span class=\"hljs-built_in\">print</span>(rhyme)\n16 <strong><span class=\"hljs-keyword\">else</span></strong>:\n17      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Not found.\"</span>)\n\nType a number:</code></pre>\n<p>字典 <code>rhymes</code> 中有 6 个数字（键），分别映射至 6 个单词（值）。程序让用户输入数字，并保存在变量中。在从字典中查找单词之前，记得先用 <code>in</code> 关键字检查字典中是否存在对应的键。如果存在，则查找字典中对应的单词并打印出来。否则会打印消息告诉用户未查找到。</p>\n<h3 id=\"55\">5.5　容器嵌套容器</h3>\n<p>可以在容器中存储容器。例如，你可以在列表中保存列表：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gops9fz</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  lists = []\n<span class=\"hljs-number\">05</span>  rap = [<span class=\"hljs-string\">\"Kanye West\"</span>,\n<span class=\"hljs-number\">06</span>         <span class=\"hljs-string\">\"Jay Z\"</span>,\n<span class=\"hljs-number\">07</span>         <span class=\"hljs-string\">\"Eminem\"</span>,\n08         <span class=\"hljs-string\">\"Nas\"</span>]\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  rock = [<span class=\"hljs-string\">\"Bob Dylan\"</span>,\n<span class=\"hljs-number\">12</span>          <span class=\"hljs-string\">\"The Beatles\"</span>,\n<span class=\"hljs-number\">13</span>          <span class=\"hljs-string\">\"Led Zeppelin\"</span>]\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  djs = [<span class=\"hljs-string\">\"Zeds Dead\"</span>,\n<span class=\"hljs-number\">17</span>         <span class=\"hljs-string\">\"Tiesto\"</span>]\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>  lists.append(rap)\n<span class=\"hljs-number\">21</span>  lists.append(rock)\n<span class=\"hljs-number\">22</span>  lists.append(djs)\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">25</span>  print(lists)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [[<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>], [<span class=\"hljs-string\">'Bob Dylan'</span>, <span class=\"hljs-string\">'The Beatles'</span>, <span class=\"hljs-string\">'Led Zeppelin'</span>], [<span class=\"hljs-string\">'Zeds Dead'</span>, <span class=\"hljs-string\">'Tiesto'</span>]]\n</code></pre>\n<p>在上述例中，<code>lists</code> 有 3 个元素。每个元素都是一个列表：第一个元素是嘻哈歌手列表，第二个元素是摇滚歌手列表，第三个元素是 DJ 列表。可通过元素对应的索引访问这些列表：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gu4mudk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 接上例</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  rap = lists[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">8</span>  print(rap)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>]\n</code></pre>\n<p>如果向列表 <code>rap</code> 中添加一个新元素，该修改也会体现在 <code>lists</code> 列表中：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hdtosm2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 接上例</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n08  rap = lists[<span class=\"hljs-number\">0</span>]\n09  rap.append(<span class=\"hljs-string\">\"Kendrick Lamar\"</span>)\n<span class=\"hljs-number\">10</span>  print(rap)\n<span class=\"hljs-number\">11</span>  print(lists)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>, <span class=\"hljs-string\">'Kendrick Lamar'</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> [[<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>, <span class=\"hljs-string\">'Kendrick Lamar'</span>],\n[<span class=\"hljs-string\">'Bob Dylan'</span>, <span class=\"hljs-string\">'The Beatles'</span>, <span class=\"hljs-string\">'Led Zeppelin'</span>], [<span class=\"hljs-string\">'Zeds Dead'</span>, <span class=\"hljs-string\">'Tiesto'</span>]]\n</code></pre>\n<p>也可以在列表中存储元素，在元组中存储列表，还可以在列表或元组中存储字典：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z9dhema</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  locations = []\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  la = (<span class=\"hljs-number\">34.0522</span>, <span class=\"hljs-number\">188.2437</span>)\n08  chicago = (<span class=\"hljs-number\">41.8781</span>, <span class=\"hljs-number\">87.6298</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  locations.append(la)\n<span class=\"hljs-number\">12</span>  locations.append(chicago)\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  print(locations)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [(<span class=\"hljs-number\">34.0522</span>, <span class=\"hljs-number\">188.2437</span>), (<span class=\"hljs-number\">41.8781</span>, <span class=\"hljs-number\">87.6298</span>)]\n\n<span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ht7gpsd</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  eights = [<span class=\"hljs-string\">\"Edgar Allan Poe\"</span>,\n<span class=\"hljs-number\">05</span>            <span class=\"hljs-string\">\"Charles Dickens\"</span>]\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  nines = [<span class=\"hljs-string\">\"Hemingway\"</span>,\n09           <span class=\"hljs-string\">\"Fitzgerald\"</span>,\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-string\">\"Orwell\"</span>]\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  authors = (eights, nines)\n<span class=\"hljs-number\">14</span>  print(authors)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> ([<span class=\"hljs-string\">'Edgar Allan Poe'</span>, <span class=\"hljs-string\">'Charles Dickens'</span>], [<span class=\"hljs-string\">'Hemingway'</span>, <span class=\"hljs-string\">'Fitzgerald'</span>, <span class=\"hljs-string\">'Orwell'</span>])\n\n<span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h8ck5er</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  bday = {<span class=\"hljs-string\">\"Hemingway\"</span>:\n<span class=\"hljs-number\">05</span>          <span class=\"hljs-string\">\"7.21.1899\"</span>,\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-string\">\"Fitzgerald\"</span>:\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"9.24.1896\"</span>}\n08\n09\n<span class=\"hljs-number\">10</span>  my_list = [bday]\n<span class=\"hljs-number\">11</span>  print(my_list)\n<span class=\"hljs-number\">12</span>  my_tuple = (bday,)\n<span class=\"hljs-number\">13</span>  print(my_tuple)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [{<span class=\"hljs-string\">'Hemingway'</span>: <span class=\"hljs-string\">'7.21.1899'</span>, <span class=\"hljs-string\">'Fitzgerald'</span>: <span class=\"hljs-string\">'9.24.1896'</span>}]\n<span class=\"hljs-meta\">&gt;&gt;</span> ({<span class=\"hljs-string\">'Hemingway'</span>: <span class=\"hljs-string\">'7.21.1899'</span>, <span class=\"hljs-string\">'Fitzgerald'</span>: <span class=\"hljs-string\">'9.24.1896'</span>},)\n</code></pre>\n<p>列表、字典或元组都可以成为字典中的值：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zqupwx4</span></span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  ny = {<span class=\"hljs-string\">\"locations\"</span>:\n<span class=\"hljs-number\">05</span>        (<span class=\"hljs-number\">40.7128</span>,\n<span class=\"hljs-number\">06</span>         <span class=\"hljs-number\">74.0059</span>),\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>        <span class=\"hljs-string\">\"celebs\"</span>:\n<span class=\"hljs-number\">10</span>        [<span class=\"hljs-string\">\"W. Allen\"</span>,\n<span class=\"hljs-number\">11</span>         <span class=\"hljs-string\">\"Jay Z\"</span>,\n<span class=\"hljs-number\">12</span>         <span class=\"hljs-string\">\"K. Bacon\"</span>],\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>         <span class=\"hljs-string\">\"facts\"</span>:\n<span class=\"hljs-number\">15</span>         {<span class=\"hljs-string\">\"state\"</span>:\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-string\">\"NY\"</span>,\n<span class=\"hljs-number\">17</span>          <span class=\"hljs-string\">\"country\"</span>:\n<span class=\"hljs-number\">18</span>          <span class=\"hljs-string\">\"America\"</span>}\n<span class=\"hljs-number\">19</span>  }\n</code></pre>\n<p>本例中，字典 <code>ny</code> 有 3 个键：<code>\"locations\"</code>、<code>\"celebs\"</code> 和 <code>\"facts\"</code>。第一个键的值是一个元组，因为地理坐标永远不会变。第二个键的值是生活在纽约的名人列表，因为可能会变化所以使用列表。第三个键的值是一个字典，因为键值对是表示纽约有关联事实的最好方式。</p>\n<h3 id=\"56\">5.6　术语表</h3>\n<p><strong>方法</strong>：与指定数据类型紧密相关的函数。</p>\n<p><strong>列表</strong>：存储有序对象的一种容器。</p>\n<p><strong>可迭代的</strong>：如果可使用循环访问对象中的每一个元素，则该对象是可迭代的。</p>\n<p><strong>可迭代对象</strong>：可迭代的对象，如字符串、列表和元素。</p>\n<p><strong>索引</strong>：代表元素在可迭代对象中位置的数字。</p>\n<p><strong>可变的</strong>：容器中的内容可以发生变化。</p>\n<p><strong>不可变的</strong>：容器中的内容不能改变。</p>\n<p><strong>字典</strong>：存储对象的一种内置容器，将一个称为键的对象，映射至一个称为值的对象。</p>\n<p><strong>键</strong>：用来查找字典中对应的值。</p>\n<p><strong>值</strong>：字典中映射至键的值。</p>\n<p><strong>映射</strong>：将一个对象链接至另一个对象。</p>\n<p><strong>键值对</strong>：字典中键映射至值。</p>\n<h3 id=\"57\">5.7　挑战练习</h3>\n<p>1．创建一个你最喜欢歌手的列表。</p>\n<p>2．创建一个由元组构成的列表，每个元组包含居住过或旅游过的城市的经纬度。</p>\n<p>3．创建一个包含你的不同属性的字典：身高、最喜欢的颜色和最喜欢的作者等。</p>\n<p>4．编写一个程序，让用户询问你的身高、最喜欢的颜色或最喜欢的作者，并返回上一个挑战中创建的字典。</p>\n<p>5．创建一个字典，将最喜欢的歌手映射至你最喜欢的歌曲。</p>\n<p>6．列表、元组和容器只是 Python 中内置容器的一部分。自行研究 Python 中的集合（也是一种容器）在什么情况下可以使用集合？</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>容器</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#51\">5.1　方法</a></li>\n<li><a href=\"#52\">5.2　列表</a></li>\n<li><a href=\"#53\">5.3　元组</a></li>\n<li><a href=\"#54\">5.4　字典</a></li>\n<li><a href=\"#55\">5.5　容器嵌套容器</a></li>\n<li><a href=\"#56\">5.6　术语表</a></li>\n<li><a href=\"#57\">5.7　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“愚者困惑，智者提问。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——本杰明 · 迪斯雷利（Benjamin Disraeli）</span></p>\n</blockquote>\n<p>在第 3 章中，我们学习了如何用变量保存对象。本章将讨论如何用容器保存对象。容器就像是文件柜，可有效整理数据。这里将学习 3 个常用的容器：列表、元组和字典。</p>\n<h3 id=\"51\">5.1　方法</h3>\n<p>第 4 章介绍了函数。Python 中有一个类似的概念，叫<strong>方法</strong>（method）。方法是与指定数据类型紧密相关的函数。方法与函数一样，可执行代码并返回结果。不同的是，只有在对象上才能调用方法。同样也可以传递参数给方法。调用字符串的 <code>upper</code> 和 <code>replace</code> 方法的示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zdllght</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Hello\"</span>.upper()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'HELLO'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hfgpst5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Hello\"</span>.replace(<span class=\"hljs-string\">\"o\"</span>, <span class=\"hljs-string\">\"@\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Hell@'</span>\n</code></pre>\n<p>本书第二部分将详细介绍方法。</p>\n<h3 id=\"52\">5.2　列表</h3>\n<p><strong>列表</strong>（list）是以固定顺序保存对象的容器（如图 5-1 所示）。</p>\n<p><img src=\"https://images.gitbook.cn/aab3b280-6fc3-11e9-9e1b-5b6158413fa5\" alt=\"enter image description here\"></p>\n<p>图 5-1　列表</p>\n<p>列表用方括号表示。我们可使用两种语法创建列表，一种是使用 <code>list</code> 函数创建空列表，示例如下：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/h4go6kg</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = <span class=\"hljs-built_in\">list</span>()\n<span class=\"hljs-number\">5</span>  fruit\n\n&gt;&gt; []\n</code></pre>\n<p>或者直接使用方括号：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jft8p7x</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = []\n<span class=\"hljs-number\">5</span>  fruit\n\n<span class=\"hljs-meta\">&gt;&gt;</span> []\n</code></pre>\n<p>使用第二种语法，并将你希望放在列表中的所有对象填入方括号中，用逗号分隔，即可创建一个包含所有对象的列表。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2y8nos</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n<span class=\"hljs-number\">5</span>  fruit\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Apple'</span>, <span class=\"hljs-string\">'Orange'</span>, <span class=\"hljs-string\">'Pear'</span>]\n</code></pre>\n<p>上述示例中的列表有 3 个元素：<code>\"Apple\"</code>、<code>\"Orange\"</code> 和 <code>\"Pear\"</code>。列表中的元素是有序的。除非你重新调整列表中元素的顺序，否则 <code>\"Apple\"</code> 永远是第一个元素，<code>\"Orange\"</code> 是第二个元素，<code>\"Pear\"</code> 则是第三个元素。<code>\"Apple\"</code> 位于列表的开头，末尾则是 <code>\"Pear\"</code>。这里可使用 <code>append</code> 方法向列表中添加一个新元素。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h9w3z2m</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n<span class=\"hljs-number\">5</span>  fruit.append(<span class=\"hljs-string\">\"Banana\"</span>)\n<span class=\"hljs-number\">6</span>  fruit.append(<span class=\"hljs-string\">\"Peach\"</span>)\n<span class=\"hljs-number\">7</span>  fruit\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Apple'</span>, <span class=\"hljs-string\">'Orange'</span>, <span class=\"hljs-string\">'Pear'</span>, <span class=\"hljs-string\">'Banana'</span>, <span class=\"hljs-string\">'Peach'</span>]\n</code></pre>\n<p>传递给 <code>append</code> 方法的两个对象现在都加入了列表。但 <code>append</code> 方法永远是将新元素添加至列表的末尾。</p>\n<p>列表不仅可以保存字符串，它还可以保存任意数据类型。示例如下：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhpntsr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  random = []\n<span class=\"hljs-number\">5</span>  random.append(<span class=\"hljs-keyword\">True</span>)\n<span class=\"hljs-number\">6</span>  random.append(<span class=\"hljs-number\">100</span>)\n<span class=\"hljs-number\">7</span>  random.append(<span class=\"hljs-number\">1.1</span>)\n<span class=\"hljs-number\">8</span>  random.append(<span class=\"hljs-string\">\"Hello\"</span>)\n<span class=\"hljs-number\">9</span>  random\n\n&gt;&gt; [<span class=\"hljs-keyword\">True</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1.1</span>, <span class=\"hljs-string\">'Hello'</span>]\n</code></pre>\n<p>字符串、列表和元组都是<strong>可迭代的</strong>（iterable）。如果可以使用循环访问对象中的每一个元素，那么该对象是可迭代的，被称为<strong>可迭代对象</strong>。可迭代对象中的每一个元素都有一个<strong>索引</strong>（index），即表示元素在可迭代对象中位置的数字。列表中第一个元素的索引是 0，而不是 1。</p>\n<p>在如下示例中，<code>\"Apple\"</code> 的索引是 0，<code>\"Orange\"</code> 的索引是 1，<code>\"Pear\"</code> 的索引是 2：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/z8zzk8d</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n</code></pre>\n<p>你可以使用语法[列表名][[索引]]获取一个元素：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jqtlwpf</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruit = [<span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Pear\"</span>]\n<span class=\"hljs-number\">5</span>  fruit[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">6</span>  fruit[<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-number\">7</span>  fruit[<span class=\"hljs-number\">2</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Apple'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Orange'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Pear'</span>\n</code></pre>\n<p>如果获取的是不存在的索引，Python 会报告异常：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/za3rv95</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors[<span class=\"hljs-number\">4</span>]\n\n&gt;&gt; IndexError: <span class=\"hljs-built_in\">list</span> index out of range\n</code></pre>\n<p>列表是<strong>可变的</strong>（mutable）。如果一个容器是可变的，则可以向该容器中增删对象。将列表中某个元素的索引赋给一个新的对象，即可改变该元素：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4ahvf9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors\n<span class=\"hljs-number\">6</span>  colors[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-string\">\"red\"</span>\n<span class=\"hljs-number\">7</span>  colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'yellow'</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'red'</span>]\n</code></pre>\n<p>也可使用 <code>pop</code> 方法移除列表中的最后一个元素：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j52uvmq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors\n<span class=\"hljs-number\">6</span>  item = colors.pop()\n<span class=\"hljs-number\">7</span>  item\n<span class=\"hljs-number\">8</span>  colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'yellow'</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'yellow'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>]\n</code></pre>\n<p>不能对空列表使用 <code>pop</code> 方法。否则，Python 则会报告异常。</p>\n<p>你可以使用加法操作符来合并两个列表：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jjxnk4z</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors1 = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  colors2 = [<span class=\"hljs-string\">\"orange\"</span>, <span class=\"hljs-string\">\"pink\"</span>, <span class=\"hljs-string\">\"black\"</span>]\n<span class=\"hljs-number\">6</span>  colors1 + colors2\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'yellow'</span>, <span class=\"hljs-string\">'orange'</span>, <span class=\"hljs-string\">'pink'</span>, <span class=\"hljs-string\">'black'</span>]\n</code></pre>\n<p>也可以使用关键字 <code>in</code> 检查某个元素是否在列表中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z4fnv39</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-string\">\"green\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>使用关键字 <code>not</code> 检查某个元素是否不在列表中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jqzk8pj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  colors = [<span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>]\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-string\">\"black\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> colors\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>使用函数 <code>len</code> 可获得列表的大小（包含元素的个数）：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hhx6rx4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  len(colors)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>下面是一个在实践中使用列表的例子：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/gq7yjr7</span>\n02\n03\n04  colors = [<span class=\"hljs-string\">\"purple\"</span>,\n05            <span class=\"hljs-string\">\"orange\"</span>,\n06            <span class=\"hljs-string\">\"green\"</span>]\n07\n08\n09  guess = input(<span class=\"hljs-string\">\"Guess a color:\"</span>)\n10\n11\n12<strong><span class=\"hljs-keyword\">if</span></strong> guess <strong><span class=\"hljs-keyword\">in</span></strong> colors:\n13      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"You guessed correctly!\"</span>)\n14<strong><span class=\"hljs-keyword\">else</span></strong>:\n15      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Wrong! Try again.\"</span>)\n\n&gt;&gt; Guess a color:</code></pre>\n<p>列表 <code>colors</code> 包含了代表颜色的不同字符串。程序使用内置函数 <code>input</code> 来让用户猜测是什么颜色，并将用户的答案保存至变量。如果答案在 <code>colors</code> 列表中，则告知用户猜测正确。反之，让用户再次尝试。</p>\n<h3 id=\"53\">5.3　元组</h3>\n<p><strong>元组</strong>（tuple）是存储有序对象的一种容器。与列表不同，元组是<strong>不可变的</strong>（immutable），这意味着其内容不会变化。创建元组后，无法修改其中任何元组的值，也无法添加或修改元素。用圆括号表示元组，且必须用逗号分隔元组中的元素。有两种语法可以创建元组，第一种如下所示：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zo88eal</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_tuple = tuple()\n<span class=\"hljs-number\">5</span>  my_tuple\n\n<span class=\"hljs-meta\">&gt;&gt;</span> ()\n</code></pre>\n<p>以及第二种语法：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zm3y26j</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_tuple = ()\n<span class=\"hljs-number\">5</span>  my_tuple\n\n<span class=\"hljs-meta\">&gt;&gt;</span> ()\n</code></pre>\n<p>如果要向元组中新增对象，可用第二种语法创建一个新的元组，并在其中加入你希望增加的每个元素，用逗号分隔：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zlwwfe3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  rndm = (<span class=\"hljs-string\">\"M. Jackson\"</span>, <span class=\"hljs-number\">1958</span>, <span class=\"hljs-keyword\">True</span>)\n<span class=\"hljs-number\">5</span>  rndm\n\n&gt;&gt; (<span class=\"hljs-string\">'M. Jackson'</span>, <span class=\"hljs-number\">1958</span>, <span class=\"hljs-keyword\">True</span>)\n</code></pre>\n<p>即使元组中只有一个元素，也需要在该元素的后面加上逗号。只有这样，Python 才能将其与其他为了表示运算顺序而放在圆括号中的数字标记进行区分。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8mca8o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 这是元组</span>\n<span class=\"hljs-number\">5</span>  (<span class=\"hljs-string\">\"self_taught\"</span>, )\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-comment\"># 这不是元组</span>\n<span class=\"hljs-number\">9</span>  (<span class=\"hljs-number\">9</span>) + <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> (<span class=\"hljs-string\">'self_taught'</span>, )\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n</code></pre>\n<p>创建元组之后，不能再新增元素或修改已有元素。如果在创建元组后这样做，Python 会报告异常：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z3x34nk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  dys[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"Handmaid's Tale\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">TypeError:</span> <span class=\"hljs-string\">'tuple'</span> object does not support item assignment\n</code></pre>\n<p>可使用与列表一样的方法来获取元组的元素，即引用其索引：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z9dc6lo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  dys[<span class=\"hljs-number\">2</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Fahrenheit 451'</span>\n</code></pre>\n<p>可使用关键字 <code>in</code> 来检查某个元素是否在元组中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j3bsel7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  <span class=\"hljs-string\">\"1984\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> dys\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>在 <code>in</code> 前加上关键字 <code>not</code> 即可检查元素是否不在元组中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jpdjjv9</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  dys = (<span class=\"hljs-string\">\"1984\"</span>,\n<span class=\"hljs-number\">5</span>         <span class=\"hljs-string\">\"Brave New World\"</span>,\n<span class=\"hljs-number\">6</span>         <span class=\"hljs-string\">\"Fahrenheit 451\"</span>)\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span>  <span class=\"hljs-string\">\"Handmaid's Tale\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> dys\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>你可能会疑惑为什么要使用一个看上去没有列表灵活的数据结构。因为在处理明确永远不会改变的，并且也不希望其他程序对其进行修改的值时，元组是非常有用的。地理坐标就是适合使用元组存储的一种数据。城市的经纬度应保存在元组中，因为这些值永远不会改变，保存为元组意味着程序不会意外对其进行修改。元组不像列表那样可以用作字典的键，这个知识点会在下一节介绍。</p>\n<h3 id=\"54\">5.4　字典</h3>\n<p><strong>字典</strong>（dictionary）是另一种用于存储对象的内置容器。它们被用来链接<strong>键</strong>（key）和<strong>值</strong>（value）这两个对象（如图 5-2 所示）。将一个对象链接至另一个对象，也被称为<strong>映射</strong>（mapping），结果为产生一个<strong>键值对</strong>（key-value pair）。可将键值对添加到字典，然后使用键在字典中查询，可获得其对应的值。但是无法使用值来查询键。</p>\n<p><img src=\"https://images.gitbook.cn/38d2e810-6fc4-11e9-9e1b-5b6158413fa5\" alt=\"enter image description here\"></p>\n<p>图 5-2　字典</p>\n<p>字典是可变的，因此可以向字典中新增键值对。与列表和元组不同，字典中存储的对象是无序的。字典的价值在于键与值之间的关联。需要成对存储数据的场景很多。例如，可以将关于某个人的信息存储在字典中，将名为 height 的键，映射至代表这个人身高的值；将名为 eyecolor 的键映射至代表这个人眼睛颜色的值；将名为 nationality 的键映射至代表这个人国籍的值。</p>\n<p>字典用花括号表示。有两种创建字典的语法，其一如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zfn6jmw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_dict = dict()\n<span class=\"hljs-number\">5</span>  my_dict\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {}\n</code></pre>\n<p>另一种方法如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jfgemf2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  my_dict = {}\n<span class=\"hljs-number\">5</span>  my_dict\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {}\n</code></pre>\n<p>可以在创建字典时直接添加键值对。上述两种语法都要求用冒号分隔键与值，每个键值对之间用逗号分隔。与元组不同的是，如果只有一个键值对，不需要在其后添加逗号。如下示例介绍了创建字典时如何添加键值对：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hplqc4u</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fruits = {<span class=\"hljs-string\">\"Apple\"</span>:\n<span class=\"hljs-number\">5</span>            <span class=\"hljs-string\">\"Red\"</span>,\n<span class=\"hljs-number\">6</span>            <span class=\"hljs-string\">\"Banana\"</span>:\n<span class=\"hljs-number\">7</span>            <span class=\"hljs-string\">\"Yellow\"</span>}\n<span class=\"hljs-number\">8</span>  fruits\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {<span class=\"hljs-string\">'Apple'</span>: <span class=\"hljs-string\">'Red'</span>, <span class=\"hljs-string\">'Banana'</span>: <span class=\"hljs-string\">'Yellow'</span>}\n</code></pre>\n<p>读者在 shell 中看到的字典元素顺序可能与上例中有所不同，因为字典的键是无序的，Python 会随机打印其元素（本节中所有示例均适用该情况）。</p>\n<p>字典是可变的。创建字典后，可通过语法“<code>[字典名][[键]] = [值]</code>”添加新的键值对，并通过语法“<code>[字典名][[键]]</code>”查找值。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/grc28lh</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  facts = dict()\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  <span class=\"hljs-comment\"># 添加键-值对</span>\n08  facts[<span class=\"hljs-string\">\"code\"</span>] = <span class=\"hljs-string\">\"fun\"</span>\n09  <span class=\"hljs-comment\"># 查找键对应的值</span>\n<span class=\"hljs-number\">10</span>  facts[<span class=\"hljs-string\">\"code\"</span>]\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  <span class=\"hljs-comment\"># 添加键-值对</span>\n<span class=\"hljs-number\">14</span>  facts[<span class=\"hljs-string\">\"Bill\"</span>] = <span class=\"hljs-string\">\"Gates\"</span>\n<span class=\"hljs-number\">15</span>  <span class=\"hljs-comment\"># 查找键对应的值</span>\n<span class=\"hljs-number\">16</span>  facts[<span class=\"hljs-string\">\"Bill\"</span>]\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>  <span class=\"hljs-comment\"># 添加键-值对</span>\n<span class=\"hljs-number\">20</span>  facts[<span class=\"hljs-string\">\"founded\"</span>] = <span class=\"hljs-number\">1776</span>\n<span class=\"hljs-number\">21</span>  <span class=\"hljs-comment\"># 查找键对应的值</span>\n<span class=\"hljs-number\">22</span>  facts[<span class=\"hljs-string\">\"founded\"</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'fun'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Gates\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1776</span>\n</code></pre>\n<p>字典的值可以是任意对象。在上例中，前两个值是字符串，最后一个值 1776 是整数。但是字典的键必须是不可变的。字符串或元组可以用作字典的键，但是列表或字典不可以。</p>\n<p>可以使用关键字 <code>in</code> 检查某个键是否在字典中，但不能用其检查某个值是否在字典中。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hgf9vmp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  bill = dict({<span class=\"hljs-string\">\"Bill Gates\"</span>:\n<span class=\"hljs-number\">5</span>               <span class=\"hljs-string\">\"charitable\"</span>})\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-string\">\"Bill Gates\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> bill\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>如果访问一个不在字典中的键，Python 将报告异常。</p>\n<p>在关键字 <code>in</code> 之前加上关键字 <code>not</code>，可检查键是否不在字典中。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/he3g993</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  bill = dict({<span class=\"hljs-string\">\"Bill Gates\"</span>:\n<span class=\"hljs-number\">5</span>                   <span class=\"hljs-string\">\"charitable\"</span>})\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-string\">\"Bill Doors\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> bill\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n<p>可使用关键字 <code>del</code> 删除字典中的键值对。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/htrd9lj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  books = {<span class=\"hljs-string\">\"Dracula\"</span>: <span class=\"hljs-string\">\"Stoker\"</span>,\n<span class=\"hljs-number\">5</span>           <span class=\"hljs-string\">\"1984\"</span>: <span class=\"hljs-string\">\"Orwell\"</span>,\n<span class=\"hljs-number\">6</span>           <span class=\"hljs-string\">\"The Trial\"</span>: <span class=\"hljs-string\">\"Kafka\"</span>}\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">9</span> <strong>del</strong> books[<span class=\"hljs-string\">\"The Trial\"</span>]\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  books\n\n<span class=\"hljs-meta\">&gt;&gt;</span> {<span class=\"hljs-string\">'Dracula'</span>: <span class=\"hljs-string\">'Stoker'</span>, <span class=\"hljs-string\">'1984'</span>: <span class=\"hljs-string\">'Orwell'</span>}</code></pre>\n<p>一个使用字典的程序示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># http://tinyurl.com/gnjvep7</span>\n02\n03\n04  rhymes = {<span class=\"hljs-string\">\"1\"</span>: <span class=\"hljs-string\">\"fun\"</span>,\n05            <span class=\"hljs-string\">\"2\"</span>: <span class=\"hljs-string\">\"blue\"</span>\n06            <span class=\"hljs-string\">\"3\"</span>: <span class=\"hljs-string\">\"me\"</span>,\n07            <span class=\"hljs-string\">\"4\"</span>: <span class=\"hljs-string\">\"floor\"</span>,\n08            <span class=\"hljs-string\">\"5\"</span>: <span class=\"hljs-string\">\"live\"</span>\n09            }\n10\n11\n12  n = input(<span class=\"hljs-string\">\"Type a number:\"</span>)\n13 <strong><span class=\"hljs-keyword\">if</span></strong> n <strong><span class=\"hljs-keyword\">in</span></strong> rhymes:\n14      rhyme = rhymes[n]\n15      <span class=\"hljs-built_in\">print</span>(rhyme)\n16 <strong><span class=\"hljs-keyword\">else</span></strong>:\n17      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Not found.\"</span>)\n\nType a number:</code></pre>\n<p>字典 <code>rhymes</code> 中有 6 个数字（键），分别映射至 6 个单词（值）。程序让用户输入数字，并保存在变量中。在从字典中查找单词之前，记得先用 <code>in</code> 关键字检查字典中是否存在对应的键。如果存在，则查找字典中对应的单词并打印出来。否则会打印消息告诉用户未查找到。</p>\n<h3 id=\"55\">5.5　容器嵌套容器</h3>\n<p>可以在容器中存储容器。例如，你可以在列表中保存列表：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gops9fz</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  lists = []\n<span class=\"hljs-number\">05</span>  rap = [<span class=\"hljs-string\">\"Kanye West\"</span>,\n<span class=\"hljs-number\">06</span>         <span class=\"hljs-string\">\"Jay Z\"</span>,\n<span class=\"hljs-number\">07</span>         <span class=\"hljs-string\">\"Eminem\"</span>,\n08         <span class=\"hljs-string\">\"Nas\"</span>]\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  rock = [<span class=\"hljs-string\">\"Bob Dylan\"</span>,\n<span class=\"hljs-number\">12</span>          <span class=\"hljs-string\">\"The Beatles\"</span>,\n<span class=\"hljs-number\">13</span>          <span class=\"hljs-string\">\"Led Zeppelin\"</span>]\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  djs = [<span class=\"hljs-string\">\"Zeds Dead\"</span>,\n<span class=\"hljs-number\">17</span>         <span class=\"hljs-string\">\"Tiesto\"</span>]\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>  lists.append(rap)\n<span class=\"hljs-number\">21</span>  lists.append(rock)\n<span class=\"hljs-number\">22</span>  lists.append(djs)\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">25</span>  print(lists)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [[<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>], [<span class=\"hljs-string\">'Bob Dylan'</span>, <span class=\"hljs-string\">'The Beatles'</span>, <span class=\"hljs-string\">'Led Zeppelin'</span>], [<span class=\"hljs-string\">'Zeds Dead'</span>, <span class=\"hljs-string\">'Tiesto'</span>]]\n</code></pre>\n<p>在上述例中，<code>lists</code> 有 3 个元素。每个元素都是一个列表：第一个元素是嘻哈歌手列表，第二个元素是摇滚歌手列表，第三个元素是 DJ 列表。可通过元素对应的索引访问这些列表：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gu4mudk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 接上例</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  rap = lists[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">8</span>  print(rap)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>]\n</code></pre>\n<p>如果向列表 <code>rap</code> 中添加一个新元素，该修改也会体现在 <code>lists</code> 列表中：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hdtosm2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 接上例</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n08  rap = lists[<span class=\"hljs-number\">0</span>]\n09  rap.append(<span class=\"hljs-string\">\"Kendrick Lamar\"</span>)\n<span class=\"hljs-number\">10</span>  print(rap)\n<span class=\"hljs-number\">11</span>  print(lists)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>, <span class=\"hljs-string\">'Kendrick Lamar'</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> [[<span class=\"hljs-string\">'Kanye West'</span>, <span class=\"hljs-string\">'Jay Z'</span>, <span class=\"hljs-string\">'Eminem'</span>, <span class=\"hljs-string\">'Nas'</span>, <span class=\"hljs-string\">'Kendrick Lamar'</span>],\n[<span class=\"hljs-string\">'Bob Dylan'</span>, <span class=\"hljs-string\">'The Beatles'</span>, <span class=\"hljs-string\">'Led Zeppelin'</span>], [<span class=\"hljs-string\">'Zeds Dead'</span>, <span class=\"hljs-string\">'Tiesto'</span>]]\n</code></pre>\n<p>也可以在列表中存储元素，在元组中存储列表，还可以在列表或元组中存储字典：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z9dhema</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  locations = []\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  la = (<span class=\"hljs-number\">34.0522</span>, <span class=\"hljs-number\">188.2437</span>)\n08  chicago = (<span class=\"hljs-number\">41.8781</span>, <span class=\"hljs-number\">87.6298</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  locations.append(la)\n<span class=\"hljs-number\">12</span>  locations.append(chicago)\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  print(locations)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [(<span class=\"hljs-number\">34.0522</span>, <span class=\"hljs-number\">188.2437</span>), (<span class=\"hljs-number\">41.8781</span>, <span class=\"hljs-number\">87.6298</span>)]\n\n<span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ht7gpsd</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  eights = [<span class=\"hljs-string\">\"Edgar Allan Poe\"</span>,\n<span class=\"hljs-number\">05</span>            <span class=\"hljs-string\">\"Charles Dickens\"</span>]\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  nines = [<span class=\"hljs-string\">\"Hemingway\"</span>,\n09           <span class=\"hljs-string\">\"Fitzgerald\"</span>,\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-string\">\"Orwell\"</span>]\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  authors = (eights, nines)\n<span class=\"hljs-number\">14</span>  print(authors)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> ([<span class=\"hljs-string\">'Edgar Allan Poe'</span>, <span class=\"hljs-string\">'Charles Dickens'</span>], [<span class=\"hljs-string\">'Hemingway'</span>, <span class=\"hljs-string\">'Fitzgerald'</span>, <span class=\"hljs-string\">'Orwell'</span>])\n\n<span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h8ck5er</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  bday = {<span class=\"hljs-string\">\"Hemingway\"</span>:\n<span class=\"hljs-number\">05</span>          <span class=\"hljs-string\">\"7.21.1899\"</span>,\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-string\">\"Fitzgerald\"</span>:\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"9.24.1896\"</span>}\n08\n09\n<span class=\"hljs-number\">10</span>  my_list = [bday]\n<span class=\"hljs-number\">11</span>  print(my_list)\n<span class=\"hljs-number\">12</span>  my_tuple = (bday,)\n<span class=\"hljs-number\">13</span>  print(my_tuple)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [{<span class=\"hljs-string\">'Hemingway'</span>: <span class=\"hljs-string\">'7.21.1899'</span>, <span class=\"hljs-string\">'Fitzgerald'</span>: <span class=\"hljs-string\">'9.24.1896'</span>}]\n<span class=\"hljs-meta\">&gt;&gt;</span> ({<span class=\"hljs-string\">'Hemingway'</span>: <span class=\"hljs-string\">'7.21.1899'</span>, <span class=\"hljs-string\">'Fitzgerald'</span>: <span class=\"hljs-string\">'9.24.1896'</span>},)\n</code></pre>\n<p>列表、字典或元组都可以成为字典中的值：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zqupwx4</span></span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  ny = {<span class=\"hljs-string\">\"locations\"</span>:\n<span class=\"hljs-number\">05</span>        (<span class=\"hljs-number\">40.7128</span>,\n<span class=\"hljs-number\">06</span>         <span class=\"hljs-number\">74.0059</span>),\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>        <span class=\"hljs-string\">\"celebs\"</span>:\n<span class=\"hljs-number\">10</span>        [<span class=\"hljs-string\">\"W. Allen\"</span>,\n<span class=\"hljs-number\">11</span>         <span class=\"hljs-string\">\"Jay Z\"</span>,\n<span class=\"hljs-number\">12</span>         <span class=\"hljs-string\">\"K. Bacon\"</span>],\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>         <span class=\"hljs-string\">\"facts\"</span>:\n<span class=\"hljs-number\">15</span>         {<span class=\"hljs-string\">\"state\"</span>:\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-string\">\"NY\"</span>,\n<span class=\"hljs-number\">17</span>          <span class=\"hljs-string\">\"country\"</span>:\n<span class=\"hljs-number\">18</span>          <span class=\"hljs-string\">\"America\"</span>}\n<span class=\"hljs-number\">19</span>  }\n</code></pre>\n<p>本例中，字典 <code>ny</code> 有 3 个键：<code>\"locations\"</code>、<code>\"celebs\"</code> 和 <code>\"facts\"</code>。第一个键的值是一个元组，因为地理坐标永远不会变。第二个键的值是生活在纽约的名人列表，因为可能会变化所以使用列表。第三个键的值是一个字典，因为键值对是表示纽约有关联事实的最好方式。</p>\n<h3 id=\"56\">5.6　术语表</h3>\n<p><strong>方法</strong>：与指定数据类型紧密相关的函数。</p>\n<p><strong>列表</strong>：存储有序对象的一种容器。</p>\n<p><strong>可迭代的</strong>：如果可使用循环访问对象中的每一个元素，则该对象是可迭代的。</p>\n<p><strong>可迭代对象</strong>：可迭代的对象，如字符串、列表和元素。</p>\n<p><strong>索引</strong>：代表元素在可迭代对象中位置的数字。</p>\n<p><strong>可变的</strong>：容器中的内容可以发生变化。</p>\n<p><strong>不可变的</strong>：容器中的内容不能改变。</p>\n<p><strong>字典</strong>：存储对象的一种内置容器，将一个称为键的对象，映射至一个称为值的对象。</p>\n<p><strong>键</strong>：用来查找字典中对应的值。</p>\n<p><strong>值</strong>：字典中映射至键的值。</p>\n<p><strong>映射</strong>：将一个对象链接至另一个对象。</p>\n<p><strong>键值对</strong>：字典中键映射至值。</p>\n<h3 id=\"57\">5.7　挑战练习</h3>\n<p>1．创建一个你最喜欢歌手的列表。</p>\n<p>2．创建一个由元组构成的列表，每个元组包含居住过或旅游过的城市的经纬度。</p>\n<p>3．创建一个包含你的不同属性的字典：身高、最喜欢的颜色和最喜欢的作者等。</p>\n<p>4．编写一个程序，让用户询问你的身高、最喜欢的颜色或最喜欢的作者，并返回上一个挑战中创建的字典。</p>\n<p>5．创建一个字典，将最喜欢的歌手映射至你最喜欢的歌曲。</p>\n<p>6．列表、元组和容器只是 Python 中内置容器的一部分。自行研究 Python 中的集合（也是一种容器）在什么情况下可以使用集合？</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>"},{"title":"work_0603","_content":"\n### done\n    \n    源数据管理\n    功能接口\n    测试\n\n### doing\n    \n    花点时间把错误酒店导出来\n    增加一票否决机制\n    携程国内校验 将 房型描述相似度的权 调高，\n    \n   \n","source":"_posts/work_coding/work0603.md","raw":"---\ntitle: work_0603\n---\n\n### done\n    \n    源数据管理\n    功能接口\n    测试\n\n### doing\n    \n    花点时间把错误酒店导出来\n    增加一票否决机制\n    携程国内校验 将 房型描述相似度的权 调高，\n    \n   \n","slug":"work_coding/work0603","published":1,"date":"2019-06-04T02:05:48.446Z","updated":"2019-06-04T02:05:48.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwhbvhoy00009zh7w7nhqyit","content":"<h3 id=\"done\"><a href=\"#done\" class=\"headerlink\" title=\"done\"></a>done</h3><pre><code>源数据管理\n功能接口\n测试\n</code></pre><h3 id=\"doing\"><a href=\"#doing\" class=\"headerlink\" title=\"doing\"></a>doing</h3><pre><code>花点时间把错误酒店导出来\n增加一票否决机制\n携程国内校验 将 房型描述相似度的权 调高，\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"done\"><a href=\"#done\" class=\"headerlink\" title=\"done\"></a>done</h3><pre><code>源数据管理\n功能接口\n测试\n</code></pre><h3 id=\"doing\"><a href=\"#doing\" class=\"headerlink\" title=\"doing\"></a>doing</h3><pre><code>花点时间把错误酒店导出来\n增加一票否决机制\n携程国内校验 将 房型描述相似度的权 调高，\n</code></pre>"},{"title":"Python面试","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Python面试120题</title>\n</head>\n<body>\n<div id=\"article_content\" class=\"mazi-article-content dont-break-out\"><h3 id=\"python\">基本 Python 面试问题</h3>\n    <h4 id=\"1python\">1. Python 中的列表和元组有什么区别？</h4>\n    <p>列表是可变的，即可以编辑它们；元组是不可变的（元组是无法编辑的列表）。</p>\n    <p>列表比元组慢；元组比列表更快。</p>\n    <p>列表语法：list<em>1 = [10，'Chelsea'，20]；\n        元组语法：tup</em>1 =（10，'Chelsea'，20）。</p>\n    <h4 id=\"2python\">2. Python 的主要功能是什么？</h4>\n    <ul>\n        <li><p>Python 是一种解释型语言。这意味着，与 C 语言及其衍生语言不同，Python 在运行之前不需要进行编译。其他解释性语言包括 PHP 和 Ruby。</p></li>\n        <li><p>Python 是动态类型的，当你声明变量时，你不需要声明变量的类型。你可以直接编写类似 x=111，或者 x=\"I'm a string\" 这样的代码，程序不会报错。</p></li>\n        <li><p>Python 非常适合面向对象的编程（OOP），因为它允许类的定义以及组合和继承。Python 没有访问说明（如 C ++ 的 public，private）。</p></li>\n        <li><p>在 Python 中，函数是第一类对象。这意味着它们可以分配给变量，从其他函数返回并传递给函数。类也是第一类对象。</p></li>\n        <li><p>编写 Python 代码很快，但运行速度通常比编译语言慢。不过，Python 允许加入基于 C 语言编写的扩展，因此我们可以优化代码。numpy\n            就是一个很好的例子，它的运行速度相当快的，因为很多算数运算并不通过 Python 实现。</p></li>\n        <li><p>Python 用途非常广泛—— Web 应用程序、自动化、科学建模、大数据应用程序等等。它也经常被称作“胶水语言”，以使其他语言和组件发挥得很好。</p></li>\n    </ul>\n    <h4 id=\"3python\">3. python 是编程语言还是脚本语言？</h4>\n    <p>Python 能够编写脚本，但从一般意义上讲，它被认为是一种通用的编程语言。</p>\n    <h4 id=\"4python\">4. Python 是一种解释性语言吗？</h4>\n    <p>Python 是一种解释型语言。它的源代码可以直接运行，python 解释器会把源代码转换成中间语言，之后翻译成机器码再执行。</p>\n    <h4 id=\"5pep8\">5. 什么是 pep 8？</h4>\n    <p>PEP 代表 Python Enhancement Proposal。它是一组规则，指定如何格式化 Python 代码以获得最大可读性。</p>\n    <h4 id=\"6python\">6. 如何在 Python 中管理内存？</h4>\n    <p>python 中的内存管理由 Python 私有堆空间管理。所有 Python 对象和数据结构都位于私有堆中。程序员无权访问此私有堆。python 解释器负责处理这个问题。</p>\n    <p>Python 对象的堆空间分配由 Python 的内存管理器完成。核心 API 提供了一些程序员编写代码的工具。</p>\n    <p>Python 还有一个内置的垃圾收集器，它可以回收所有未使用的内存，并使其可用于堆空间。</p>\n    <h4 id=\"7python\">7. Python 中的命名空间是什么？</h4>\n    <p>命名空间是一个命名系统，用于确保名称是唯一的，以避免命名冲突。</p>\n    <h4 id=\"8pythonpath\">8. 什么是 PYTHONPATH？</h4>\n    <p>它是导入模块时使用的环境变量。每当导入模块时，也会查找 PYTHONPATH 以检查各个目录中是否存在导入的模块。解释器使用它来确定要加载的模块。</p>\n    <h4 id=\"9pythonpython\">9. 什么是 python 模块？在 Python 中命名一些常用的内置模块？</h4>\n    <p>Python 模块是包含 Python 代码的文件。此代码可以是函数类或变量。Python 模块是包含可执行代码的 .py 文件。</p>\n    <p>一些常用的内置模块是：</p>\n    <ul>\n        <li>os</li>\n        <li>sys</li>\n        <li>math</li>\n        <li>random</li>\n        <li>data time</li>\n        <li>JSON</li>\n    </ul>\n    <h4 id=\"10python\">10. Python 中的局部变量和全局变量是什么？</h4>\n    <p>全局变量：</p>\n    <p>在函数外或全局空间中声明的变量称为全局变量。这些变量可以由程序中的任何函数访问。</p>\n    <p>局部变量：</p>\n    <p>在函数内声明的任何变量都知道局部变量。此变量存在于本地空间中，而不是全局空间中。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs makefile\">a=2                       <span class=\"hljs-comment\">#Global Variable</span>\ndef add():\nb=3                       <span class=\"hljs-comment\">#Local Variable</span>\nc=a+b\nprint(c)\nadd()\nOutput：  5\n</code></pre>\n    <p>当你尝试访问函数 add（）之外的局部变量时，它将引发错误。</p>\n    <h4 id=\"11python\">11. python 是否区分大小写？</h4>\n    <p>是的。Python 是一种区分大小写的语言。</p>\n    <h4 id=\"12python\">12. Python 中的类型转换是什么？</h4>\n    <p>类型转换是指将一种数据类型转换为另一种数据类型。</p>\n    <ul>\n        <li><p>int（） - 将任何数据类型转换为整数类型</p></li>\n        <li><p>float（） - 将任何数据类型转换为 float 类型</p></li>\n        <li><p>ord（） - 将字符转换为整数</p></li>\n        <li><p>hex（） - 将整数转换为十六进制</p></li>\n        <li><p>oct（） - 将整数转换为八进制</p></li>\n        <li><p>tuple（） -此函数用于转换为元组。</p></li>\n        <li><p>set（） -此函数在转换为 set 后返回类型。</p></li>\n        <li><p>list（） - 此函数用于将任何数据类型转换为列表类型。</p></li>\n        <li><p>dict（） - 此函数用于将顺序元组（键，值）转换为字典。</p></li>\n        <li><p>str（） - 用于将整数转换为字符串。</p></li>\n        <li><p>complex（real，imag） - 此函数将实数转换为复数（实数，图像）数。</p></li>\n    </ul>\n    <h4 id=\"13python\">13. Python 中有哪些内置类型？</h4>\n    <p>Python 的不可变内置数据类型</p>\n    <ul>\n        <li>数字</li>\n        <li>字符串</li>\n        <li>元组</li>\n    </ul>\n    <p>Python 的可变内置数据类型</p>\n    <ul>\n        <li>名单</li>\n        <li>字典</li>\n        <li>集</li>\n    </ul>\n    <h4 id=\"14python\">14. python 中是否需要缩进？</h4>\n    <p>Python 需要缩进。它指定了一个代码块。循环，类，函数等中的所有代码都在缩进块中指定。通常使用四个空格字符来完成。如果你的代码没有必要缩进，它将无法准确执行并且也会抛出错误。</p>\n    <h4 id=\"15pythonarray\">15. Python array和列表有什么区别？</h4>\n    <p>Python 中的array和列表具有相同的存储数据方式。但是，array只能包含单个数据类型元素，而列表可以包含任何数据类型元素。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs php\">import <span class=\"hljs-keyword\">array</span> <span class=\"hljs-keyword\">as</span> arr\nMy_Array=arr.<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'i'</span>,[<span\n                class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span\n                class=\"hljs-number\">4</span>])\nMy_list=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">'abc'</span>,<span class=\"hljs-number\">1.20</span>]\n<span class=\"hljs-keyword\">print</span>(My_Array)\n<span class=\"hljs-keyword\">print</span>(My_list)\n\nOutput：\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'i'</span>，[<span class=\"hljs-number\">1</span>,<span\n                class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span\n                class=\"hljs-number\">4</span>]）[<span class=\"hljs-number\">1</span>，<span class=\"hljs-string\">'abc'</span>，<span\n                class=\"hljs-number\">1.2</span>]\n</code></pre>\n    <h4 id=\"16python\">16. Python 中的函数是什么？</h4>\n    <p>函数是一个代码块，只有在被调用时才会执行。要在 Python 中定义函数，请使用 def 关键字。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">Newfunc</span><span class=\"hljs-params\">()</span>:</span>\nprint(<span class=\"hljs-string\">\"Hi, Welcome to Edureka\"</span>)\nNewfunc(); <span class=\"hljs-comment\">#calling the function</span>\nOutput：Hi, Welcome to Edureka\n</code></pre>\n    <h4 id=\"17__init__\">17. <strong>init</strong> 是什么？</h4>\n    <p>__ init__ 是 Python 中的方法或构造函数。在创建类的新对象/实例时，将自动调用此方法来分配内存。所有类都有 <strong>init</strong> 方法。</p>\n    <p>以下是如何使用它的示例。</p>\n    <pre><code class=\"hljs objectivec\"><span class=\"hljs-keyword\">class</span> Employee:\ndef __init__(<span class=\"hljs-keyword\">self</span>, name, age,salary):\n<span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-keyword\">self</span>.age = age\n<span class=\"hljs-keyword\">self</span>.salary = <span class=\"hljs-number\">20000</span>\nE1 = Employee(<span class=\"hljs-string\">\"XYZ\"</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">20000</span>)\n <span class=\"hljs-comment\">/*E1 is the instance of class Employee.*/</span>\n<span class=\"hljs-comment\">/*__init__ allocates memory for E1. */</span>\nprint(E1.name)\nprint(E1.age)\nprint(E1.salary)\nOutput：\n\nXYZ\n\n<span class=\"hljs-number\">23</span>\n\n<span class=\"hljs-number\">20000</span>\n</code></pre>\n    <h4 id=\"18lambda\">18. 什么是 lambda 函数？</h4>\n    <p>匿名函数称为 lambda 函数。此函数可以包含任意数量的参数，但只能有一个语句。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs makefile\">a = lambda x,y : x+y\nprint(a(5, 6))\nOutput：  11\n</code></pre>\n    <h4 id=\"19pythonself\">19. Python 中的 self 是什么？</h4>\n    <p>self 是类的实例或对象。在 Python 中，这显然包含在第一个参数中。但是，Java 中的情况并非如此，它是可选的。它有助于区分具有局部变量的类的方法和属性。</p>\n    <p>init 方法中的 self 变量引用新创建的对象，而在其他方法中，它引用其方法被调用的对象。</p>\n    <h4 id=\"20\">20. 如何中断，继续并通过工作？</h4>\n    <ul>\n        <li>中断：当满足某些条件并且控制转移到下一个语句时允许循环终止。</li>\n        <li>继续：允许在满足某些特定条件时跳过循环的某些部分，并将控件转移到循环的开头。</li>\n        <li>通过：在语法上需要一些代码块时使用，但是你想跳过它的执行。这基本上是一个空操作。执行此操作时没有任何反应。</li>\n    </ul>\n    <h4 id=\"211\">21. [:: - 1} 的作用是什么？</h4>\n    <p>[:: - 1] 用于反转array或序列的顺序。</p>\n    <p>例如：</p>\n    <pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-built_in\">array</span> as arr\nMy_Array=arr.<span class=\"hljs-built_in\">array</span>(<span class=\"hljs-string\">'i'</span>,[<span\n                class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span\n                class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>])\nMy_Array[::<span class=\"hljs-number\">-1</span>]\nOutput：<span class=\"hljs-built_in\">array</span>（<span class=\"hljs-string\">'i'</span>，[<span class=\"hljs-number\">5</span>,<span\n                class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span\n                class=\"hljs-number\">1</span>]）\n</code></pre>\n    <p>[:: - 1] 重新打印有序数据结构的反转副本，例如array或列表。原始array或列表保持不变。</p>\n    <h4 id=\"22python\">22. 如何在 Python 中随机化列表中的项目？</h4>\n    <p>考虑以下示例：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">from</span> random <span\n            class=\"hljs-keyword\">import</span> shuffle\nx = [<span class=\"hljs-string\">'Keep'</span>, <span class=\"hljs-string\">'The'</span>, <span\n                class=\"hljs-string\">'Blue'</span>, <span class=\"hljs-string\">'Flag'</span>, <span class=\"hljs-string\">'Flying'</span>, <span\n                class=\"hljs-string\">'High'</span>]\nshuffle(x)\n<span class=\"hljs-built_in\">print</span>(x)\n\nOutput：\n[<span class=\"hljs-string\">'Flying'</span>，<span class=\"hljs-string\">'Keep'</span>，<span\n                class=\"hljs-string\">'Blue'</span>，<span class=\"hljs-string\">'High'</span>，<span class=\"hljs-string\">'The'</span>，<span\n                class=\"hljs-string\">'Flag'</span>]\n</code></pre>\n    <h4 id=\"23python\">23. 什么是 python 迭代器？</h4>\n    <p>迭代器是可以遍历或迭代的对象。</p>\n    <h4 id=\"24python\">24. 如何在 Python 中生成随机数？</h4>\n    <p>随机模块是用于生成随机数的标准模块。该方法定义为：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> random\nrandom.random\n</code></pre>\n    <p>语句 random.random（）方法返回 [0,1] 范围内的浮点数。该函数生成随机浮点数。随机类使用的方法是隐藏实例的绑定方法。可以使用 Random\n        的实例来显示创建不同线程实例的多线程程序。其中使用的其他随机生成器是：</p>\n    <ul>\n        <li>randrange（a，b）：它选择一个整数并定义[a，b]之间的范围。它通过从指定范围中随机选择元素来返回元素。它不构建范围对象。</li>\n        <li>uniform（a，b）：它选择一个在[a，b）范围内定义的浮点数 .Itt 返回浮点数</li>\n        <li>normalvariate（mean，sdev）：它用于正态分布，其中 mu 是平均值，sdev 是用于标准偏差的 sigma。</li>\n        <li>使用和实例化的 Random 类创建一个独立的多个随机数生成器。</li>\n    </ul>\n    <h4 id=\"25rangexrange\">25. range＆xrange 有什么区别？</h4>\n    <p>在大多数情况下，xrange 和 range 在功能方面完全相同。它们都提供了一种生成整数列表供你使用的方法，但是请你随意使用。唯一的区别是 range 返回一个 Python 列表对象，x range 返回一个 xrange\n        对象。</p>\n    <p>这意味着 xrange 实际上并不像运行时那样在运行时生成静态列表。它使用称为 yielding 的特殊技术根据需要创建值。该技术与一种称为生成器的对象一起使用。这意味着，如果你有一个非常巨大的范围，你想生成一个列表，比如\n        10 亿，xrange 就是要使用的功能。</p>\n    <p>如果你有一个真正的内存敏感系统，如你正在使用的手机，尤其如此，因为范围将使用尽可能多的内存来创建整数array，这可能会导致内存错误并导致崩溃程序。这是一个记忆饥饿的野兽。</p>\n    <h4 id=\"26python\">26. 你如何在 python 中写注释？</h4>\n    <p>Python 中的注释以＃字符开头。但是，有时候，使用 docstrings（三重引号中包含的字符串）进行注释。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-comment\">#Comments in python start like this</span>\n<span class=\"hljs-keyword\">print</span>（“comment <span class=\"hljs-keyword\">in</span> python start <span\n                class=\"hljs-keyword\">with</span> a <span class=\"hljs-comment\">#”）</span>\nOutput：comment <span class=\"hljs-keyword\">in</span> python start <span class=\"hljs-keyword\">with</span> a <span\n                class=\"hljs-comment\">#</span>\n</code></pre>\n    <h4 id=\"27picklingunpickling\">27. 什么是 pickling 和 unpickling？</h4>\n    <p>Pickle 模块接受任何 Python 对象并将其转换为字符串表示形式，并使用 dump 函数将其转储到文件中，此过程称为 pickling。从存储的字符串表示中检索原始 Python 对象的过程称为\n        unpickling。</p>\n    <h4 id=\"28python\">28. python 中的生成器是什么？</h4>\n    <p>返回一组可迭代项的函数称为生成器。</p>\n    <h4 id=\"29\">29. 你如何把字符串的第一个字母大写？</h4>\n    <p>在 Python 中，capitalize（）方法将字符串的第一个字母大写。如果字符串在开头已经包含大写字母，那么它将返回原始字符串。</p>\n    <h4 id=\"30\">30. 如何将字符串转换为全小写？</h4>\n    <p>要将字符串转换为小写，可以使用 lower（）函数。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs bash\">stg=<span class=\"hljs-string\">'ABCD'</span>\n<span class=\"hljs-built_in\">print</span>(stg.lower())\nOutput： abcd\n</code></pre>\n    <h4 id=\"31python\">31. 如何在 python 中注释多行？</h4>\n    <p>多行注释出现在多行中。所有要评论的行都要以＃为前缀。你还可以使用非常好的 快捷方式来注释多行。你需要做的就是按住 Ctrl 键并在每个想要包含＃字符的地方左键单击并键入一次＃。这将注释你引入光标的所有行。</p>\n    <h4 id=\"32pythondocstrings\">32. Python 中的 Docstrings 是什么？</h4>\n    <p>Docstrings 实际上不是评论，它们是文档字符串。这些文档字符串在三引号内。它们没有分配给任何变量，因此有时也用于评论的目的。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-string\">\"\"\"\nUsing docstring as a comment.\nThis code divides 2 numbers\n\"\"\"</span>\nx=<span class=\"hljs-number\">8</span>\ny=<span class=\"hljs-number\">4</span>\nz=x/y\nprint(z)\nOutput： <span class=\"hljs-number\">2.0</span>\n</code></pre>\n    <h4 id=\"33isnotin\">33. 操作符 is、not 和 in 的目的是什么？</h4>\n    <p>操作符是特殊功能。它们采用一个或多个值并产生相应的结果。</p>\n    <ul>\n        <li><p>is：当 2 个操作数为 true 时返回 true（例如：“a”是'a'）</p></li>\n        <li><p>not：返回布尔值的倒数</p></li>\n        <li><p>in：检查某个元素是否存在于某个序列中</p></li>\n    </ul>\n    <h4 id=\"34pythonhelpdir\">34. Python 中 help（）和 dir（）函数的用法是什么？</h4>\n    <p>Help（）和dir（）这两个函数都可以从 Python 解释器访问，并用于查看内置函数的合并转储。 </p>\n    <ul>\n        <li>Help（）函数：help（）函数用于显示文档字符串，还可以帮助你查看与模块，关键字，属性等相关的帮助。</li>\n        <li>Dir（）函数：dir（）函数用于显示定义的符号。</li>\n    </ul>\n    <h4 id=\"35python\">35. 每当 Python 退出时，为什么不是所有的内存都被解除分配？</h4>\n    <ul>\n        <li>每当 Python 退出时，尤其是那些对其他对象具有循环引用的 Python 模块或者从全局名称空间引用的对象并不总是被解除分配或释放。</li>\n        <li>无法解除分配C库保留的那些内存部分。</li>\n        <li>退出时，由于拥有自己的高效清理机制，Python 会尝试取消分配/销毁其他所有对象。</li>\n    </ul>\n    <h4 id=\"36pythondictionary\">36. Python 中的字典（dictionary）是什么？</h4>\n    <p>Python 中的内置数据类型称为字典（dictionary）。它定义了键和值之间的一对一关系。字典包含一对键及其对应的值。字典由键索引。</p>\n    <p>我们来举个例子：</p>\n    <p>以下示例包含一些键，Country, Capital 和 PM。它们的相应值分别是 India, Delhi 和 Modi respectively。</p>\n    <pre><code class=\"hljs bash\">dict={<span class=\"hljs-string\">'Country'</span>:<span\n            class=\"hljs-string\">'India'</span>,<span class=\"hljs-string\">'Capital'</span>:<span class=\"hljs-string\">'Delhi'</span>,<span\n            class=\"hljs-string\">'PM'</span>:<span class=\"hljs-string\">'Modi'</span>}\n<span class=\"hljs-built_in\">print</span> dict[Country]\nIndia\n\n<span class=\"hljs-built_in\">print</span> dict[Capital]\nDelhi\n\n<span class=\"hljs-built_in\">print</span> dict[PM]\nModi\n</code></pre>\n    <h4 id=\"37python\">37. 如何在 python 中使用三元运算符？</h4>\n    <p>Ternary 运算符是用于显示条件语句的运算符。这包含 true 或 false 值，并且必须为其评估语句。</p>\n    <p>语法：</p>\n    <p>三元运算符将被给出为：</p>\n    <pre><code class=\"hljs cs\">[<span class=\"hljs-meta\">on_true</span>] <span class=\"hljs-keyword\">if</span> [expression] <span\n            class=\"hljs-keyword\">else</span> [on_false] x，y = <span class=\"hljs-number\">25</span>,<span\n            class=\"hljs-number\">50</span>big = x <span class=\"hljs-keyword\">if</span> x &lt;y <span\n            class=\"hljs-keyword\">else</span> y\n</code></pre>\n    <p>例：</p>\n    <p>表达式的计算方式与 x &lt;y else y 一样，在这种情况下，如果 x &lt;y 为真，则返回值为 big = x，如果不正确则返回 big = y 作为结果。</p>\n    <h4 id=\"38argskwargs\">38. 这是什么意思：* args，** kwargs？我们为什么要用呢？</h4>\n    <p>当我们不确定将多少个参数传递给函数，或者我们想要将存储的列表或参数元组传递给函数时，我们使用* args。*<em>当我们不知道将多少关键字参数传递给函数时使用 kwargs，或者它可以用于将字典的值作为关键字参数传递。标识符\n        args 和 kwargs 是一个约定，你也可以使用</em> bob 和 ** billy，但这不是明智之举。</p>\n    <h4 id=\"39len\">39. len（）的作用是什么？</h4>\n    <p>用于确定字符串，列表，array等的长度。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs makefile\">stg='ABCD'\nlen(stg)\n</code></pre>\n    <h4 id=\"40pythonresplitsubsubn\">40. Python 中“re”模块的 split（），sub（），subn（）这三个方法的作用是什么？</h4>\n    <p>要修改字符串，Python 的“re”模块提供了 3 种方法。他们是：</p>\n    <ul>\n        <li>split（） - 使用正则表达式模式将给定字符串“拆分”到列表中。</li>\n        <li>sub（） - 查找正则表达式模式匹配的所有子字符串，然后用不同的字符串替换它们</li>\n        <li>subn（） - 它类似于sub（），并且还返回新字符串和替换的次数\u0010。</li>\n    </ul>\n    <h4 id=\"41\">41. 什么是负指数，为什么使用它们？</h4>\n    <p>Python 中的序列被编入索引，它由正数和负array成。积极的数字使用'0'作为第一个索引，'1'作为第二个索引，进程继续使用。</p>\n    <p>负数的索引从'-1'开始，表示序列中的最后一个索引，' - 2'作为倒数第二个索引，序列像正数一样前进。</p>\n    <p>负索引用于从字符串中删除任何换行符，并允许该字符串除了作为S [： - 1]给出的最后一个字符。负索引还用于显示索引以正确的顺序表示字符串。</p>\n    <h4 id=\"42python\">42. 什么是 Python 包？</h4>\n    <p>Python 包是包含多个模块的命名空间。</p>\n    <h4 id=\"43python\">43. 如何在 Python 中删除文件？</h4>\n    <p>要在 Python 中删除文件，你需要导入操作系统模块。之后，你需要使用os.remove（）函数。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> os\nos.remove(<span class=\"hljs-string\">\"xyz.txt\"</span>)\n</code></pre>\n    <h4 id=\"44python\">44. 什么是 python 的内置类型？</h4>\n    <p>Python 中的内置类型如下：</p>\n    <ul>\n        <li>整型</li>\n        <li>浮点</li>\n        <li>复数</li>\n        <li>字符串</li>\n        <li>布尔</li>\n        <li>内置功能</li>\n    </ul>\n    <h4 id=\"45numpypython\">45. NumPy 阵列在（嵌套）Python 列表中提供了哪些优势？</h4>\n    <ul>\n        <li>Python 的列表是高效的通用容器。它们支持（相当）有效的插入，删除，追加和连接，Python 的列表推导使它们易于构造和操作。</li>\n        <li>它们有一定的局限性：它们不支持元素化加法和乘法等“向量化”操作，并且它们可以包含不同类型的对象这一事实意味着 Python 必须存储每个元素的类型信息，并且必须在操作时执行类型调度代码在每个元素上。</li>\n        <li>NumPy 不仅效率更高; 它也更方便。你可以免费获得大量的向量和矩阵运算，这有时可以避免不必要的工作。它们也得到有效实施。</li>\n        <li>NumPy array更快，你可以使用 NumPy、FFT、卷积、快速搜索、基本统计、线性代数、直方图等内置。</li>\n    </ul>\n    <h4 id=\"46pythonarray\">46. 如何将值添加到 python array？</h4>\n    <p>可以使用 append（）， extend（） 和 insert（i，x） 函数将元素添加到array中 。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs php\">a=arr.<span class=\"hljs-keyword\">array</span>(<span\n            class=\"hljs-string\">'d'</span>, [<span class=\"hljs-number\">1.1</span> , <span class=\"hljs-number\">2.1</span> ,<span\n            class=\"hljs-number\">3.1</span>] )\na.append(<span class=\"hljs-number\">3.4</span>)\n<span class=\"hljs-keyword\">print</span>(a)\na.extend([<span class=\"hljs-number\">4.5</span>,<span class=\"hljs-number\">6.3</span>,<span class=\"hljs-number\">6.8</span>])\n<span class=\"hljs-keyword\">print</span>(a)\na.insert(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3.8</span>)\n<span class=\"hljs-keyword\">print</span>(a)\nOutput：\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">1.1</span>,<span\n                class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.1</span>,<span class=\"hljs-number\">3.4</span>]）\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">1.1</span>,<span\n                class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.1</span>,<span class=\"hljs-number\">3.4</span>,<span\n                class=\"hljs-number\">4.5</span>,<span class=\"hljs-number\">6.3</span>,<span class=\"hljs-number\">6.8</span>]）\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">1.1</span>,<span\n                class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.8</span>,<span class=\"hljs-number\">3.1</span>,<span\n                class=\"hljs-number\">3.4</span>,<span class=\"hljs-number\">4.5</span>,<span class=\"hljs-number\">6.3</span>,<span\n                class=\"hljs-number\">6.8</span>]）\n</code></pre>\n    <h4 id=\"47pythonarray\">47. 如何删除 python array的值？</h4>\n    <p>可以使用 pop（） 或 remove（） 方法删除array元素 。这两个函数之间的区别在于前者返回已删除的值，而后者则不返回。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs php\">a=arr.<span class=\"hljs-keyword\">array</span>(<span\n            class=\"hljs-string\">'d'</span>, [<span class=\"hljs-number\">1.1</span>, <span class=\"hljs-number\">2.2</span>, <span\n            class=\"hljs-number\">3.8</span>, <span class=\"hljs-number\">3.1</span>, <span class=\"hljs-number\">3.7</span>, <span\n            class=\"hljs-number\">1.2</span>, <span class=\"hljs-number\">4.6</span>])\n<span class=\"hljs-keyword\">print</span>(a.pop())\n<span class=\"hljs-keyword\">print</span>(a.pop(<span class=\"hljs-number\">3</span>))\na.remove(<span class=\"hljs-number\">1.1</span>)\n<span class=\"hljs-keyword\">print</span>(a)\nOutput：\n\n<span class=\"hljs-number\">4.6</span>\n\n<span class=\"hljs-number\">3.1</span>\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">2.2</span>,<span\n                class=\"hljs-number\">3.8</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">1.2</span>]）\n</code></pre>\n    <h4 id=\"48pythonoops\">48. Python 有 OOps 概念吗？</h4>\n    <p>Python 是一种面向对象的编程语言。这意味着可以通过创建对象模型在 python 中解决任何程序。但是，Python 可以被视为程序语言和结构语言。</p>\n    <h4 id=\"49\">49. 深拷贝和浅拷贝有什么区别？</h4>\n    <p>\n        创建新实例类型时使用浅拷贝，并保留在新实例中复制的值。浅拷贝用于复制引用指针，就像复制值一样。这些引用指向原始对象，并且在类的任何成员中所做的更改也将影响它的原始副本。浅拷贝允许更快地执行程序，它取决于所使用的数据的大小。</p>\n    <p>\n        深层复制用于存储已复制的值。深层复制不会将引用指针复制到对象。它引用一个对象，并存储一些其他对象指向的新对象。原始副本中所做的更改不会影响使用该对象的任何其他副本。由于为每个被调用的对象创建了某些副本，因此深层复制会使程序的执行速度变慢。</p>\n    <h4 id=\"50python\">50. 如何在 Python 中实现多线程？</h4>\n    <ul>\n        <li>Python 有一个多线程包，但是如果你想要多线程来加速你的代码，那么使用它通常不是一个好主意。</li>\n        <li>Python 有一个名为 Global Interpreter Lock（GIL）的结构。GIL 确保每次只能执行一个“线程”。一个线程获取 GIL，做一点工作，然后将 GIL 传递到下一个线程。</li>\n        <li>这种情况很快发生，因此对于人眼看来，你的线程似乎并行执行，但它们实际上只是轮流使用相同的 CPU 核心。</li>\n        <li>所有这些 GIL 传递都增加了执行的开销。这意味着如果你想让代码运行得更快，那么使用线程包通常不是一个好主意。</li>\n    </ul>\n    <h4 id=\"51python\">51. 在 python 中编译和链接的过程是什么？</h4>\n    <p>编译和链接允许正确编译新扩展而不会出现任何错误，并且只有在通过编译过程时才能进行链接。如果使用动态加载，则它取决于系统提供的样式。python 解释器可用于提供配置设置文件的动态加载，并将重建解释器。</p>\n    <p>这需要的步骤如下：</p>\n    <ol>\n        <li>使用任何名称以及系统编译器支持的任何语言创建文件。例如 file.c或 file.cpp</li>\n        <li>将此文件放在正在使用的发行版的 Modules /目录中。</li>\n        <li>在 Modules /目录中存在的 Setup.local 文件中添加一行。</li>\n        <li>使用 spam file.o 运行该文件</li>\n        <li>通过在顶级目录上使用 make 命令成功运行此重建解释器之后。</li>\n        <li>如果文件已更改，则使用命令“make Makefile”运行rebuildMakefile。</li>\n    </ol>\n    <h4 id=\"52python\">52. 什么是 Python 库？举几个例子。</h4>\n    <p>Python 库是 Python 包的集合。一些主要使用的 python 库是 - Numpy，Pandas，Matplotlib，Scikit-learn 等等。</p>\n    <h4 id=\"53\">53. 什么是拆分用于？</h4>\n    <p>split（）方法用于在 Python 中分隔给定的字符串。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs perl\">a=<span class=\"hljs-string\">\"edureka python\"</span>\n<span class=\"hljs-keyword\">print</span>(a.<span class=\"hljs-keyword\">split</span>())\nOutput：  [<span class=\"hljs-string\">'edureka'</span>，<span class=\"hljs-string\">'python'</span>]\n</code></pre>\n    <h4 id=\"54python\">54. 如何在 python 中导入模块？</h4>\n    <p>可以使用 import 关键字导入模块。你可以通过三种方式导入模块 -</p>\n    <p>例：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> array           <span\n            class=\"hljs-comment\">#importing using the original module name</span>\n<span class=\"hljs-keyword\">import</span> array <span class=\"hljs-keyword\">as</span> arr    <span class=\"hljs-comment\"># importing using an alias name</span>\n<span class=\"hljs-keyword\">from</span> array <span class=\"hljs-keyword\">import</span> *    <span class=\"hljs-comment\">#imports everything present in the array module</span>\n</code></pre>\n    <h3 id=\"oops\">OOPS 面试问题</h3>\n    <h4 id=\"55python\">55. 用一个例子解释 Python 中的继承。</h4>\n    <p>继承允许一个类获得另一个类的所有成员（比如属性和方法）。继承提供代码可重用性，使创建和维护应用程序更容易。我们继承的类称为超类，继承的类称为派生/子类。</p>\n    <p>它们是 Python 支持的不同类型的继承：</p>\n    <ul>\n        <li>单一继承 - 派生类获取单个超类的成员。</li>\n        <li>多级继承 - 从基类base1继承的派生类d1，d2继承自base2。</li>\n        <li>分层继承 - 从一个基类可以继承任意数量的子类</li>\n        <li>多重继承 - 派生类从多个基类继承。</li>\n    </ul>\n    <h4 id=\"56python\">56. 如何在 Python 中创建类？</h4>\n    <p>Python 中的类是使用 class 关键字创建的。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Employee</span>:</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n        class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-keyword\">self</span>.name = name\nE1=Employee(<span class=\"hljs-string\">\"abc\"</span>)\nprint(E1.name)\nOutput： abc\n</code></pre>\n    <h4 id=\"57\">57. 什么是猴子补丁？</h4>\n    <p>在 Python 中，术语猴子补丁仅指在运行时对类或模块的动态修改。\n        考虑以下示例：</p>\n    <pre><code class=\"m.py language-m.py\">class MyClass:\ndef f(self):\nprint \"f()\"\n</code></pre>\n    <p>然后我们可以像这样运行猴子补丁测试：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> m\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">monkey_f</span><span\n        class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"monkey_f()\"</span>\n\nm.MyClass.f = monkey_f\nobj = m.MyClass()\nobj.f()\nOutput如下：\n\nmonkey_f（）\n</code></pre>\n    <h4 id=\"58python\">58. python 是否支持多重继承？</h4>\n    <p>多重继承意味着可以从多个父类派生一个类。与 Java 不同，Python 确实支持多重继承。</p>\n    <h4 id=\"59python\">59. Python 中的多态是什么？</h4>\n    <p>多态意味着能够采取多种形式。因此，例如，如果父类具有名为 ABC 的方法，则子类也可以具有具有相同名称 ABC 的方法，该方法具有其自己的参数和变量。Python 允许多态。</p>\n    <h4 id=\"60python\">60. 在 Python 中怎样定义封装？</h4>\n    <p>封装意味着将代码和数据绑定在一起。就是使用私有化的方法，把一些属性或者是方法私有化，外部无法调用。在 Python 中，私有化属性或者方法，可以在属性、方法名字前加上双下划线。</p>\n    <h4 id=\"61python\">61. 你如何在 Python 中进行数据抽象？</h4>\n    <p>数据抽象仅提供所需的详细信息并将实现隐藏起来。它可以通过使用接口和抽象类在 Python 中实现。</p>\n    <h4 id=\"62python\">62. python 是否使用了访问说明符？</h4>\n    <p>Python 不会剥夺对实例变量或函数的访问权限。Python 规定了使用单个或双下划线为变量，函数或方法的名称添加前缀的概念，以模仿受保护和私有访问说明符的行为。 </p>\n    <h4 id=\"63python\">63. 如何在 Python 中创建一个空类？</h4>\n    <p>空类是一个没有在其块中定义的代码的类。它可以使用 pass 关键字创建 。但是，你可以在类本身之外创建此类的对象。IN PYTHON PASS 命令在执行时不执行任何操作。这是一个空语句。 </p>\n    <p>例如</p>\n    <pre><code class=\"hljs makefile\">class a:\n    pass\nobj=a()\nobj.name=<span class=\"hljs-string\">\"xyz\"</span>\nprint(<span class=\"hljs-string\">\"Name = \"</span>,obj.name)\nOutput：\n\nName = xyz\n</code></pre>\n    <h4 id=\"64object\">64. object（）有什么作用？</h4>\n    <p>它返回一个无特征的对象，它是所有类的基础。此外，它不采取任何参数。</p>\n    <h3 id=\"python-1\">基本 Python 编码</h3>\n    <h4 id=\"65python\">65. 用 Python 编写程序来执行冒泡排序算法。</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">bs</span><span class=\"hljs-params\">(a)</span>:</span>             <span\n            class=\"hljs-comment\"># a = name of list</span>\n    b=len(a)<span class=\"hljs-number\">-1</span>         <span class=\"hljs-comment\"># minus 1 because we always compare 2 adjacent values</span>\n\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(b):\n        <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> range(b-x):\n            <span class=\"hljs-keyword\">if</span> a[y]&gt;a[y+<span class=\"hljs-number\">1</span>]:\n                a[y],a[y+<span class=\"hljs-number\">1</span>]=a[y+<span class=\"hljs-number\">1</span>],a[y]\n    <span class=\"hljs-keyword\">return</span> a\na=[<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>,<span\n                class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span\n                class=\"hljs-number\">54</span>,<span class=\"hljs-number\">87</span>]\nbs(a)\n产出：  [<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span\n                class=\"hljs-number\">7</span>,<span class=\"hljs-number\">32</span>,<span\n                class=\"hljs-number\">54</span>,<span class=\"hljs-number\">87</span>]\n</code></pre>\n    <h4 id=\"66pythonstar\">66. 用 Python 编写程序来生成 Star 三角形。</h4>\n    <pre><code class=\"hljs markdown\">def pyfunc(r):\n<span class=\"hljs-code\">    for x in range(r):</span>\n<span class=\"hljs-code\">        print(' '*(r-x-1)+'*'*(2*x+1))    </span>\npyfunc(9)\nOutput：\n\n<span class=\"hljs-code\">        *</span>\n<span class=\"hljs-code\">       ***</span>\n<span class=\"hljs-code\">      *****</span>\n<span class=\"hljs-code\">     *******</span>\n<span class=\"hljs-code\">    *********</span>\n   <span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>*\n  <span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-emphasis\">***</span>\n <span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>\n<span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>**\n</code></pre>\n    <h4 id=\"67pythonfibonacci\">67. 编写一个程序，用Python生成Fibonacci系列。</h4>\n    <pre><code class=\"hljs perl\"><span class=\"hljs-comment\"># Enter number of terms needed                   #0,1,1,2,3,5....</span>\na=<span class=\"hljs-keyword\">int</span>(input(<span class=\"hljs-string\">\"Enter the terms\"</span>))\nf=<span class=\"hljs-number\">0</span>                                         <span class=\"hljs-comment\">#first element of series</span>\n<span class=\"hljs-keyword\">s</span>=<span class=\"hljs-number\">1</span>                                         <span\n                class=\"hljs-comment\">#second element of series</span>\n<span class=\"hljs-keyword\">if</span> a&lt;=<span class=\"hljs-number\">0</span>:\n    <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"The requested series is\n\"</span>,f)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">print</span>(f,<span class=\"hljs-keyword\">s</span>,end=<span\n                class=\"hljs-string\">\" \"</span>)\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">x</span> in range(<span\n                class=\"hljs-number\">2</span>,a):\n        <span class=\"hljs-keyword\">next</span>=f+<span class=\"hljs-keyword\">s</span>\n        <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-keyword\">next</span>,end=<span\n                class=\"hljs-string\">\" \"</span>)\n        f=<span class=\"hljs-keyword\">s</span>\n        <span class=\"hljs-keyword\">s</span>=<span class=\"hljs-keyword\">next</span>&lt;<span class=\"hljs-regexp\">/pre&gt;\n\nOutput：input 5 0 1 1 2 3\n</span></code></pre>\n    <h4 id=\"68python\">68. 用 Python 编写程序来检查数字是否为素数。</h4>\n    <pre><code class=\"hljs perl\">a=<span class=\"hljs-keyword\">int</span>(input(<span\n            class=\"hljs-string\">\"enter number\"</span>))\n<span class=\"hljs-keyword\">if</span> a&gt;<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">x</span> in range(<span\n                class=\"hljs-number\">2</span>,a):\n        <span class=\"hljs-keyword\">if</span>(a%x)==<span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"not prime\"</span>)\n            <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"Prime\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"not prime\"</span>)\nOutput：\n\ninput <span class=\"hljs-number\">3</span>\n\nPrime\n</code></pre>\n    <h4 id=\"69python\">69. 用 Python 编写程序来检查序列是否是回文序列。</h4>\n    <pre><code class=\"hljs makefile\">a=input(<span class=\"hljs-string\">\"enter sequence\"</span>)\nb=a[::-1]\nif a==b:\n    print(<span class=\"hljs-string\">\"palindrome\"</span>)\n<span class=\"hljs-section\">else:</span>\n    print(<span class=\"hljs-string\">\"Not a Palindrome\"</span>)\nOutput：\n\nenter sequence 323 palindrome\n</code></pre>\n    <h4 id=\"70\">70. 写一个单行，用于计算文件中大写字母的数量。即使文件太大而无法放入内存，你的代码也应该可以正常工作。</h4>\n    <p>让我们先写一个多行解决方案，然后将其转换为单行代码。</p>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">with <span class=\"hljs-title\">open</span>(<span\n            class=\"hljs-params\">SOME_LARGE_FILE</span>) <span class=\"hljs-keyword\">as</span> fh:\ncount </span>= <span class=\"hljs-number\">0</span>\ntext = fh.read()\n<span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> text:\n    <span class=\"hljs-keyword\">if</span> character.isupper():\ncount += <span class=\"hljs-number\">1</span>\n我们现在尝试将其转换为单行。\n\n<span class=\"hljs-function\">count <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"><span\n        class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> fh <span\n        class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> line <span class=\"hljs-keyword\">if</span> character.isupper(</span>))\n</span></code></pre>\n    <h4 id=\"71python\">71. 在 Python 中为数值数据集编写排序算法。</h4>\n    <p>以下代码可用于在 Python 中对列表进行排序：</p>\n    <pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">list</span> = [<span class=\"hljs-string\">\"1\"</span>, <span\n            class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"0\"</span>, <span class=\"hljs-string\">\"6\"</span>, <span\n            class=\"hljs-string\">\"9\"</span>]\n<span class=\"hljs-built_in\">list</span> = [<span class=\"hljs-keyword\">int</span>(i) <span\n                class=\"hljs-keyword\">for</span> i in <span class=\"hljs-built_in\">list</span>]\n<span class=\"hljs-built_in\">list</span>.sort()\nprint (<span class=\"hljs-built_in\">list</span>)\n</code></pre>\n    <h4 id=\"72a0a1an\">72. 查看下面的代码，记下 A0，A1，... An 的最终值。</h4>\n    <pre><code class=\"hljs makefile\">A0 = dict(zip(('a','b','c','d','e'),(1,2,3,4,5)))\nA1 = range(10)A2 = sorted([i for i in A1 if i in A0])\nA3 = sorted([A0[s] for s in A0])\nA4 = [i for i in A1 if i in A3]\nA5 = {i:i*i for i in A1}\nA6 = [[i,i*i] for i in A1]\nprint(A0,A1,A2,A3,A4,A5,A6)\n\n以下是 A0，A1，... A6 的最终 Output\n\nA0 = {'a'：1，'c'：3，'b'：2，'e'：5，'d'：4}\nA1 =range（0,10）\nA2 = []\nA3 = [1,2,3,4,5]\nA4 = [1,2,3,4,5]\nA5 = {0：0,1：1,2：4,3：9,4：16,5：25,6：36,7：49,8：64,9：81}\nA6 = [[0,0]，[1,1]，[2,4]，[3,9]，[4,16]，[5,25]，[6,36]，[7,49] ，[8,64]，[9,81]]\n</code></pre>\n    <h3 id=\"python-2\">Python 库面试问题</h3>\n    <h4 id=\"73flask\">73. 解释 Flask 是什么及其好处？</h4>\n    <p>Flask 是基于“Werkzeug，Jinja2 和良好意图”BSD 许可证的 Python 网络微框架。Werkzeug 和 Jinja2\n        是它的两个依赖项。这意味着它对外部库几乎没有依赖性。它使框架轻松，同时有一点依赖更新和更少的安全漏洞。</p>\n    <p>会话基本上允许你记住从一个请求到另一个请求的信息。在一个瓶子中，会话使用签名的 cookie，以便用户可以查看会话内容并进行修改。如果只有密钥 Flask.secret_key，则用户可以修改会话。</p>\n    <h4 id=\"74djangoflask\">74. Django 比 Flask 好吗？</h4>\n    <p>Django 和 Flask 将 Web 浏览器中输入的 URL 或地址映射到 Python 中的函数。 </p>\n    <p>与 Django 相比，Flask 要简单得多，但 Flask 并没有为你做很多事情意味着你需要指定细节，而 Django 为你做了很多事情，你不需要做太多工作。Django 由预编写的代码组成，用户需要分析这些代码，而\n        Flask 则允许用户创建自己的代码，因此，使代码更容易理解。从技术上讲，两者都同样好，都有自己的优点和缺点。</p>\n    <h4 id=\"75djangopyramidflask\">75. 提到 Django，Pyramid 和 Flask 之间的差异。</h4>\n    <ul>\n        <li>Flask 是一个“微框架”，主要用于具有更简单要求的小型应用程序。在烧瓶中，你必须使用外部库。Flask 已准备好使用。</li>\n        <li>Pyramid 适用于大型应用程序。它提供了灵活性，并允许开发人员为他们的项目使用正确的工具。开发人员可以选择数据库，URL 结构，模板样式等。金字塔是可配置的。</li>\n        <li>Django 也可以像 Pyramid 一样用于更大的应用程序。它包括一个ORM。</li>\n    </ul>\n    <h4 id=\"76django\">76. 讨论 Django 架构。</h4>\n    <p>Django MVT 模式：</p>\n    <p><img src=\"https://images.gitbook.cn/6ec77050-85c0-11e9-9a8d-f9d4f0d85b82\" alt=\"enter image description here\"></p>\n    <p>开发人员提供模型，视图和模板，然后将其映射到URL，Django 可以为用户提供服务。</p>\n    <h4 id=\"77django\">77. 解释如何在 Django 中设置数据库。</h4>\n    <p>你可以使用命令 edit mysite / setting.py，它是一个普通的 python 模块，模块级别代表 Django 设置。</p>\n    <p>Django 默认使用 SQLite; 对于 Django 用户来说这很容易，因此不需要任何其他类型的安装。如果你的数据库选择不同，则必须使用 DATABASE'default' 项中的以下键来匹配你的数据库连接设置。</p>\n    <ul>\n        <li>引擎：你可以使用\n            'django.db.backends.sqlite3'，'django.db.backeneds.mysql'，'django.db.backends.postgresql_psycopg2'，'django.db.backends.oracle'等来更改数据库。\n        </li>\n        <li>名称：数据库的名称。如果你使用 SQLite 作为数据库，那么在这种情况下，数据库将是你计算机上的文件，Name 应该是完整的绝对路径，包括该文件的文件名。</li>\n        <li>如果你不选择 SQLite 作为数据库，则必须添加密码，主机，用户等设置。</li>\n    </ul>\n    <p>Django 使用 SQLite 作为默认数据库，它将数据作为单个文件存储在文件系统中。如果你有数据库服务器-PostgreSQL，MySQL，Oracle，MSSQL-并且想要使用它而不是\n        SQLite，那么使用数据库的管理工具为你的 Django 项目创建一个新的数据库。无论哪种方式，在你的（空）数据库到位的情况下，剩下的就是告诉 Django 如何使用它。这是项目的 settings.py\n        文件的来源。</p>\n    <p>我们将以下代码行添加到 setting.py 文件中：</p>\n    <pre><code class=\"hljs cs\">DATABASES = {\n     <span class=\"hljs-string\">'default'</span>: {\n          <span class=\"hljs-string\">'ENGINE'</span> : <span class=\"hljs-string\">'django.db.backends.sqlite3'</span>,\n          <span class=\"hljs-string\">'NAME'</span> : os.path.<span class=\"hljs-keyword\">join</span>(BASE_DIR, <span\n                class=\"hljs-string\">'db.sqlite3'</span>),\n     }\n}\n</code></pre>\n    <h4 id=\"78djangoview\">78. 举例说明如何在 Django 中编写 VIEW？</h4>\n    <p>这是我们在 Django 中使用 write 一个视图的方法：</p>\n    <pre><code class=\"hljs xml\">from django.http import HttpResponse\nimport datetime\n\ndef Current_datetime(request):\n     now = datetime.datetime.now()\n     html = \"<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><span class=\"hljs-tag\">&lt;<span\n                class=\"hljs-name\">body</span>&gt;</span>It is now %s<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><span\n                class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span> % now\n     return HttpResponse(html)\n</code></pre>\n    <h4 id=\"79django\">79. 提及 Django 模板的组成部分。</h4>\n    <p>模板是一个简单的文本文件。它可以创建任何基于文本的格式，如 XML、CSV、HTML 等。模板包含在评估模板时替换为值的变量和控制模板逻辑的标记（％tag％）。</p>\n    <p><img src=\"https://images.gitbook.cn/984aba40-85c0-11e9-9344-293841b71658\" alt=\"enter image description here\"></p>\n    <h4 id=\"80django\">80. 在 Django 框架中解释会话的使用？</h4>\n    <p>Django 提供了一个会话，允许你基于每个站点访问者存储和检索数据。Django 通过在客户端放置会话 ID cookie 并在服务器端存储所有相关数据来抽象发送和接收 cookie 的过程。</p>\n    <p><img src=\"https://images.gitbook.cn/a31e0760-85c0-11e9-9a4b-7f98565be244\" alt=\"enter image description here\"></p>\n    <p>所以数据本身并不存储在客户端。从安全角度来看，这很好。</p>\n    <h4 id=\"81django\">81. 列出 Django 中的继承样式。</h4>\n    <p>在 Django 中，有三种可能的继承样式：</p>\n    <ul>\n        <li>抽象基类：当你只希望父类包含你不想为每个子模型键入的信息时，使用此样式。</li>\n        <li>多表继承：使用此样式如果要对现有模型进行子类化，并且需要每个模型都有自己的数据库表。</li>\n        <li>代理模型：你可以使用此模型，如果你只想修改模型的Python级别行为，而无需更改模型的字段。</li>\n    </ul>\n    <h3 id=\"webscrapingpython\">Web Scraping - Python 面试问题</h3>\n    <h4 id=\"82url\">82. 如何使用我已经知道的 URL 地址本地保存图像？</h4>\n    <p>我们将使用以下代码从 URL 地址本地保存图像</p>\n    <pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">import</span> <span\n            class=\"hljs-selector-tag\">urllib</span><span class=\"hljs-selector-class\">.request</span>\n<span class=\"hljs-selector-tag\">urllib</span><span class=\"hljs-selector-class\">.request</span><span\n                class=\"hljs-selector-class\">.urlretrieve</span>(\"<span class=\"hljs-selector-tag\">URL</span>\", \"<span\n                class=\"hljs-selector-tag\">local-filename</span><span class=\"hljs-selector-class\">.jpg</span>\")\n</code></pre>\n    <h4 id=\"83google\">83. 如何获取任何网址或网页的 Google 缓存时限？</h4>\n    <p>使用以下 URL 格式：</p>\n    <p>http://webcache.googleusercontent.com/search?q=cache:URLGOESHERE</p>\n    <p>请务必将“URLGOESHERE”替换为你要检索其缓存的页面或网站的正确网址，并查看时间。例如，要查看 edureka.co 的 Google Webcache 时代，你需要使用以下网址：</p>\n    <p>http://webcache.googleusercontent.com/search?q=cache:edureka.co</p>\n    <h4 id=\"84imdb250\">84. 你需要从 IMDb 前 250 电影页面中删除数据。它应该只有字段电影名称，年份和评级。</h4>\n    <p>我们将使用以下代码行：</p>\n    <pre><code class=\"hljs perl\">from bs4 import BeautifulSoup\n\nimport requests\nimport sys\n\nurl = <span class=\"hljs-string\">'http://www.imdb.com/chart/top'</span>\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text)\n<span class=\"hljs-keyword\">tr</span> = soup.findChildren(<span class=\"hljs-string\">\"tr\"</span>)\n<span class=\"hljs-keyword\">tr</span> = iter(<span class=\"hljs-keyword\">tr</span>)\n<span class=\"hljs-keyword\">next</span>(<span class=\"hljs-keyword\">tr</span>)\n\n<span class=\"hljs-keyword\">for</span> movie in <span class=\"hljs-keyword\">tr</span>:\ntitle = movie.find(<span class=\"hljs-string\">'td'</span>, {<span class=\"hljs-string\">'class'</span>: <span\n                class=\"hljs-string\">'titleColumn'</span>} ).find(<span class=\"hljs-string\">'a'</span>).contents[<span\n                class=\"hljs-number\">0</span>]\nyear = movie.find(<span class=\"hljs-string\">'td'</span>, {<span class=\"hljs-string\">'class'</span>: <span\n                class=\"hljs-string\">'titleColumn'</span>} ).find(<span class=\"hljs-string\">'span'</span>, {<span\n                class=\"hljs-string\">'class'</span>: <span class=\"hljs-string\">'secondaryInfo'</span>}).contents[<span\n                class=\"hljs-number\">0</span>]\nrating = movie.find(<span class=\"hljs-string\">'td'</span>, {<span class=\"hljs-string\">'class'</span>: <span\n                class=\"hljs-string\">'ratingColumn imdbRating'</span>} ).find(<span class=\"hljs-string\">'strong'</span>).contents[<span\n                class=\"hljs-number\">0</span>]\nrow = title + <span class=\"hljs-string\">' - '</span> + year + <span class=\"hljs-string\">' '</span> + <span\n                class=\"hljs-string\">' '</span> + rating\n\n<span class=\"hljs-keyword\">print</span>(row)\n</code></pre>\n    <p>上述代码将有助于从 IMDb 的前 250 名列表中删除数据</p>\n    <h3 id=\"python-3\">数据分析 - Python 面试问题</h3>\n    <h4 id=\"85pythonmap\">85. 什么是 Python 中的 map 函数？</h4>\n    <p>map 函数执行作为第一个参数给出的函数，该函数作为第二个参数给出的 iterable 的所有元素。如果给定的函数接受多于 1 个参数，则给出了许多迭代。</p>\n    <h4 id=\"86pythonnumpy\">86. python numpy 比列表更好吗？</h4>\n    <p>我们使用 python numpy array而不是列表，原因如下：</p>\n    <ul>\n        <li>减少记忆</li>\n        <li>快速</li>\n        <li>方便</li>\n    </ul>\n    <h4 id=\"87numpyarrayn\">87. 如何在 NumPy array中获得 N 个最大值的索引？</h4>\n    <p>我们可以使用下面的代码在 NumPy array中获得 N 个最大值的索引：</p>\n    <pre><code class=\"hljs markdown\">import numpy as np\narr = np.array([1, 3, 2, 4, 5])\nprint(arr.argsort()[<span class=\"hljs-string\">-3:</span>][<span class=\"hljs-symbol\">::-1</span>])\noutput：\n\n[4 3 1]\n</code></pre>\n    <h4 id=\"88pythonnumpy\">88. 你如何用 Python / NumPy 计算百分位数？</h4>\n    <p>我们可以使用以下代码计算百分位数</p>\n    <pre><code class=\"hljs makefile\">import numpy as np\na = np.array([1,2,3,4,5])\np = np.percentile(a, 50) <span class=\"hljs-comment\">#Returns 50th percentile, e.g. median</span>\nprint(p)\noutput：\n\n3\n</code></pre>\n    <h4 id=\"89numpyscipy\">89. NumPy 和 SciPy 有什么区别？</h4>\n    <ul>\n        <li>在理想的世界中，NumPy 只包含array数据类型和最基本的操作：索引，排序，重新整形，基本元素函数等等。</li>\n        <li>所有数字代码都将驻留在 SciPy 中。然而，NumPy 的一个重要目标是兼容性，因此 NumPy 试图保留其前任任何一个支持的所有功能。</li>\n        <li>因此，NumPy 包含一些线性代数函数，即使它们更恰当地属于 SciPy。无论如何，SciPy 包含更多全功能的线性代数模块版本，以及许多其他数值算法。</li>\n        <li>如果你使用 python 进行科学计算，你应该安装 NumPy 和 SciPy。大多数新功能属于 SciPy 而非 NumPy。</li>\n    </ul>\n    <h4 id=\"90numpyscipy3d\">90. 如何使用 NumPy / SciPy 制作 3D 绘图/可视化？</h4>\n    <p>与 2D 绘图一样，3D 图形超出了 NumPy 和 SciPy 的范围，但就像 2D 情况一样，存在与 NumPy 集成的包。Matplotlib 在 mplot3d 子包中提供基本的 3D 绘图，而 Mayavi\n        使用功能强大的 VTK 引擎提供各种高质量的 3D 可视化功能。</p>\n    <h4 id=\"91n20\">91. 检查给定数字n是否为2或0的幂</h4>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">check_pow_2</span>(<span\n            class=\"hljs-params\">num</span>):\n    <span class=\"hljs-keyword\">if</span> num </span>== <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">if</span> num &amp; (num - <span class=\"hljs-number\">1</span>) == <span\n                class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n\n\n<span class=\"hljs-keyword\">switch</span> = {\n    <span class=\"hljs-number\">0</span>: <span class=\"hljs-string\">\"Number is 0\"</span>,\n    <span class=\"hljs-number\">1</span>: <span class=\"hljs-string\">\"Number is a power of 2\"</span>,\n    <span class=\"hljs-number\">-1</span>: <span class=\"hljs-string\">\"Number is neither a power of 2 nor 0\"</span>\n}\n<span class=\"hljs-keyword\">case</span> = check_pow_2(<span class=\"hljs-number\">16</span>)\n\nprint(<span class=\"hljs-keyword\">switch</span>[<span class=\"hljs-keyword\">case</span>])\n</code></pre>\n    <h4 id=\"92ab\">92. 计算将A转换为B所需的位数</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">count_bits_flip</span><span class=\"hljs-params\">(a, b)</span>:</span>\n    <span class=\"hljs-comment\"># XOR a and b to get 1 on opposite value bit position</span>\n    c = a ^ b\n\n    <span class=\"hljs-comment\"># initialise the counter for 1</span>\n    count = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># count the number of 1s while there is 1 in a ^ b</span>\n    <span class=\"hljs-keyword\">while</span> c != <span class=\"hljs-number\">0</span>:\n        count += <span class=\"hljs-number\">1</span>\n        c &amp;= (c<span class=\"hljs-number\">-1</span>)\n\n    <span class=\"hljs-comment\"># return the count of 1s</span>\n    <span class=\"hljs-keyword\">return</span> count\n<span class=\"hljs-comment\"># 2 = 0010</span>\n<span class=\"hljs-comment\"># 8 = 1000</span>\nprint(count_bits_flip(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>))\n</code></pre>\n    <h4 id=\"93array\">93. 在重复元素array中查找两个非重复元素</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">find_non_repeating_numbers</span><span class=\"hljs-params\">(arr)</span>:</span>\n    xor = arr[<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, len(arr)):\n        xor ^= arr[i]\n\n    right_set_bit = xor &amp; ~(xor<span class=\"hljs-number\">-1</span>)\n    first = <span class=\"hljs-number\">0</span>\n    second = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> arr:\n        <span class=\"hljs-keyword\">if</span> i &amp; right_set_bit:\n            first ^= i\n        <span class=\"hljs-keyword\">else</span>:\n            second ^= i\n\n    <span class=\"hljs-keyword\">return</span> first, second\n\n\narr = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span\n                class=\"hljs-number\">9</span>, <span class=\"hljs-number\">11</span>, <span\n                class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>]\nprint(find_non_repeating_numbers(arr))\n</code></pre>\n    <h4 id=\"94\">94. 找到具有相同设置位数的下一个较大和下一个较小的数字</h4>\n    <p>例子：</p>\n    <pre><code class=\"hljs python\">num = <span class=\"hljs-number\">6</span> bin = <span class=\"hljs-number\">110</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">next_greater</span><span\n        class=\"hljs-params\">(num)</span>:</span>\n    res = num\n    <span class=\"hljs-keyword\">if</span> num != <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-comment\"># Find the right most 1 position</span>\n        <span class=\"hljs-comment\"># Ex. right_one = 2 bin = 10</span>\n        right_one = num &amp; -num\n\n        <span class=\"hljs-comment\"># get the left pattern to merge</span>\n        <span class=\"hljs-comment\"># Ex. left_pattern = 8 bin = 1000</span>\n        left_pattern = num + right_one\n\n        <span class=\"hljs-comment\"># get the right patten to merge</span>\n        <span class=\"hljs-comment\"># Ex. right_pattern = 1 bin = 0001</span>\n        right_pattern = (num ^ left_pattern) &gt;&gt; (right_one + <span class=\"hljs-number\">1</span>)\n\n        <span class=\"hljs-comment\"># OR both the patterns</span>\n        <span class=\"hljs-comment\"># Ex. res = 9 bin = 1001</span>\n        res = left_pattern | right_pattern\n\n    <span class=\"hljs-keyword\">return</span> res\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">next_smaller</span><span\n        class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> ~next_greater(~num)\n\n\nprint(next_greater(<span class=\"hljs-number\">6</span>))\nprint(next_smaller(<span class=\"hljs-number\">6</span>))\n</code></pre>\n    <h4 id=\"95nw\">95. 给定 n 个项目的重量和值，将这些物品放入容量为 W 的背包中背包中的最大总价值。</h4>\n    <p>换句话说，给定两个整数array val [0..n-1] 和 wt [0..n-1]分别代表与 n 项相关的值和权重。也给定一个表示背包容量的整数 W，找出 val [] 的最大值子集\n        这样，这个子集的权重之和小于或等于 W. 你不能破坏一个项目，要么选择完整的项目，要么不选择它（0-1 属性）。</p>\n    <pre><code class=\"hljs shell\">def knapSack(W, wt, val, size):\n    k = [[0 for i in range(W+1)] for i in range(size+1)]\n    for i in range(size+1):\n        for w in range(W+1):\n            if i == 0 or w == 0:\n                k[i][w] = 0\n            elif wt[i-1] &lt;= w:\n                k[i][w] = max(val[i-1] + k[i-1][w-wt[i-1]], k[i-1][w])\n            else:\n                k[i][w] = k[i-1][w]\n\n    for w in k:\n        print(w)\n\n    return k\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> def findElementsInSack(W, matrix, wt, val, size):</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     i = size</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     row = W</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     arr = []</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     <span class=\"hljs-keyword\">while</span> i &gt; 0:</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-built_in\">print</span>(matrix[i][row] - matrix[i-1][row - wt[i-1]] )</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-built_in\">print</span>(val[i-1])</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-keyword\">if</span> matrix[i][row] - matrix[i-1][row - wt[i-1]] == val[i-1]:</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             arr.append(val[i-1])</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             i -= 1</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             row -= wt[i-1]</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-keyword\">else</span>:</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             i -= 1</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"></span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     <span class=\"hljs-built_in\">return</span> arr</span>\n\nprice = [60, 100, 120]\nwt = [1, 2, 3]\nW = 5\nn = len(price)\nk = knapSack(W, wt, price, n)\nprint(k[n][W])\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> <span class=\"hljs-built_in\">print</span>(findElementsInSack(W, k, wt, price, n))</span>\n</code></pre>\n    <h4 id=\"96nn\">96. 给定一根长度为 n 英寸的杆和一系列价格，其中包含所有尺寸小于 n 的尺寸的价格。确定通过切割杆和销售件可获得的最大值。</h4>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">cutting_rod</span>(<span\n            class=\"hljs-params\">prices, n</span>):\n    dp </span>= [<span class=\"hljs-number\">0</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span\n            class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">n+<span\n            class=\"hljs-number\">1</span></span>)]\n    dp[0] </span>= <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n            class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, n+<span\n            class=\"hljs-number\">1</span></span>):\n        max_val </span>= -<span class=\"hljs-keyword\">float</span>(<span class=\"hljs-string\">'inf'</span>)\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-title\">range</span>(<span class=\"hljs-params\">i</span>):\n            max_val </span>= max(max_val, prices[j] + dp[i-j<span class=\"hljs-number\">-1</span>])\n        dp[i] = max_val\n\n    <span class=\"hljs-keyword\">return</span> dp[n]\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span\n                class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span\n                class=\"hljs-number\">10</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">17</span>, <span\n                class=\"hljs-number\">20</span>]\n    size = len(arr)\n    print(<span class=\"hljs-string\">\"Maximum Obtainable Value is \"</span> + str(cutting_rod(arr, size)))\n</code></pre>\n    <h4 id=\"97str1str2str1str1str2\">97. 给定两个字符串 str1 和 str2 以及可以在 str1 上执行的操作。查找所需的最小编辑数（操作）将'str1'转换为'str2'</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">edit_distance</span><span class=\"hljs-params\">(str1, str2, m, n)</span>:</span>\n    matrix = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> range(m+<span class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(m+<span\n                class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(n+<span\n                class=\"hljs-number\">1</span>):\n\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span>:\n                matrix[i][j] = j\n\n            <span class=\"hljs-keyword\">elif</span> j == <span class=\"hljs-number\">0</span>:\n                matrix[i][j] = i\n\n            <span class=\"hljs-keyword\">elif</span> str1[i<span class=\"hljs-number\">-1</span>] == str2[j<span\n                class=\"hljs-number\">-1</span>]:\n                matrix[i][j] = matrix[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]\n\n            <span class=\"hljs-keyword\">else</span>:\n                matrix[i][j] = <span class=\"hljs-number\">1</span> + min(matrix[i][j<span class=\"hljs-number\">-1</span>],      <span\n                class=\"hljs-comment\"># insert</span>\n                                       matrix[i<span class=\"hljs-number\">-1</span>][j],      <span class=\"hljs-comment\"># remove</span>\n                                       matrix[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>])    <span\n                class=\"hljs-comment\"># replace</span>\n\n    <span class=\"hljs-keyword\">return</span> matrix[m][n]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    str1 = <span class=\"hljs-string\">'sunday'</span>\n    str2 = <span class=\"hljs-string\">'saturday'</span>\n\n    print(edit_distance(str1, str2, len(str1), len(str2)))\n</code></pre>\n    <pre><code class=\"hljs\">\n</code></pre>\n    <h4 id=\"98011\">98. 给定 0 和 1 的二维矩阵，找到最大的广场，其中包含全部 1。</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">find_largest_square</span><span class=\"hljs-params\">(matrix)</span>:</span>\n    n = len(matrix)\n\n    <span class=\"hljs-comment\"># make a matrix for storing the solutions</span>\n    cache = [[<span class=\"hljs-number\">0</span>] * n <span class=\"hljs-keyword\">for</span> _ <span\n                class=\"hljs-keyword\">in</span> range(n)]\n    <span class=\"hljs-comment\"># size of square and its bottom-right indexes</span>\n    size = <span class=\"hljs-number\">0</span>\n    right_indx = <span class=\"hljs-number\">-1</span>\n    bottom_indx = <span class=\"hljs-number\">-1</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(n):\n\n            <span class=\"hljs-comment\"># if the value is 0 simply move forward as it cannot form a square of 1s</span>\n            <span class=\"hljs-keyword\">if</span> matrix[i][j] == <span class=\"hljs-number\">0</span>:\n                <span class=\"hljs-keyword\">continue</span>\n\n            <span class=\"hljs-comment\"># if it is first row or column, copy the matrix values as it is</span>\n            <span class=\"hljs-keyword\">elif</span> i == <span class=\"hljs-number\">0</span> <span\n                class=\"hljs-keyword\">or</span> j == <span class=\"hljs-number\">0</span>:\n                cache[i][j] = matrix[i][j]\n\n            <span class=\"hljs-comment\"># Otherwise, check in the up, left, and diagonally top-left direction for minimum size of square</span>\n            <span class=\"hljs-comment\"># if all are 1s at these positions in matrix, only then min value will be greater than 1</span>\n            <span class=\"hljs-comment\"># hence add the previous square size to the cache + 1</span>\n            <span class=\"hljs-keyword\">else</span>:\n                cache[i][j] = <span class=\"hljs-number\">1</span> + min(cache[i - <span class=\"hljs-number\">1</span>][j], cache[i][j - <span\n                class=\"hljs-number\">1</span>], cache[i - <span class=\"hljs-number\">1</span>][j - <span\n                class=\"hljs-number\">1</span>])\n\n            <span class=\"hljs-comment\"># check if the current square size found is larger than the previously found size, if so, update it</span>\n            <span class=\"hljs-keyword\">if</span> cache[i][j] &gt; size:\n                size = cache[i][j]\n                bottom_indx, right_indx = i, j\n\n    <span class=\"hljs-keyword\">return</span> size, bottom_indx, right_indx\n\n\nmat = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n       [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n       [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n       [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]]\nsize, bottom, right = find_largest_square(mat)\n\n<span class=\"hljs-keyword\">if</span> size &gt; <span class=\"hljs-number\">0</span>:\n    print(<span class=\"hljs-string\">\"Size of the square:\"</span>, size)\n    print(<span class=\"hljs-string\">\"Top-left Co-ordinates:\"</span>, bottom-size+<span\n                class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\",\"</span>, right-size+<span\n                class=\"hljs-number\">1</span>)\n    print(<span class=\"hljs-string\">\"Bottom-right Co-ordinates:\"</span>, bottom, <span class=\"hljs-string\">\",\"</span>, right)\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">\"No square of 1s found\"</span>)\n</code></pre>\n    <h4 id=\"99\">99. 找到两者中存在的最长子序列的长度。子序列是以相同的相对顺序出现的序列，但不一定是连续的。</h4>\n    <p>例子：</p>\n    <pre><code class=\"hljs python\">用于输入的LCS序列“ABCDGH”和“AEDFHR”是长度为<span class=\"hljs-number\">3</span>的“ADH”。\n用于输入序列的LCS“AGGTAB”和“GXTXAYB”是长度为<span class=\"hljs-number\">4</span>的“ GTAB”。\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">lcs</span><span\n        class=\"hljs-params\">(str1, str2)</span>:</span>\n    m = len(str1)\n    n = len(str2)\n\n    matrix = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> range(m+<span class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, m+<span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, n+<span class=\"hljs-number\">1</span>):\n\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> <span\n                class=\"hljs-keyword\">or</span> j == <span class=\"hljs-number\">0</span>:\n                matrix[i][j] = <span class=\"hljs-number\">0</span>\n\n            <span class=\"hljs-keyword\">elif</span> str1[i<span class=\"hljs-number\">-1</span>] == str2[j<span\n                class=\"hljs-number\">-1</span>]:\n                matrix[i][j] = <span class=\"hljs-number\">1</span> + matrix[i<span class=\"hljs-number\">-1</span>][j<span\n                class=\"hljs-number\">-1</span>]\n\n            <span class=\"hljs-keyword\">else</span>:\n                matrix[i][j] = max(matrix[i<span class=\"hljs-number\">-1</span>][j], matrix[i][j<span\n                class=\"hljs-number\">-1</span>])\n\n    index = matrix[m][n]\n\n    res = [<span class=\"hljs-string\">\"\"</span>] * index\n    i = m\n    j = n\n\n    <span class=\"hljs-keyword\">while</span> i &gt; <span class=\"hljs-number\">0</span> <span\n                class=\"hljs-keyword\">and</span> j &gt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">if</span> str1[i<span class=\"hljs-number\">-1</span>] == str2[j<span\n                class=\"hljs-number\">-1</span>]:\n            res[index<span class=\"hljs-number\">-1</span>] = str1[i<span class=\"hljs-number\">-1</span>]\n            i -= <span class=\"hljs-number\">1</span>\n            j -= <span class=\"hljs-number\">1</span>\n            index -= <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">elif</span> matrix[i<span class=\"hljs-number\">-1</span>][j] &gt; matrix[i][j<span\n                class=\"hljs-number\">-1</span>]:\n            i -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            j -= <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> res\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    X = <span class=\"hljs-string\">\"AGGTAB\"</span>\n    Y = <span class=\"hljs-string\">\"GXTXAYB\"</span>\n\n    str = <span class=\"hljs-string\">''</span>.join(lcs(X, Y))\n\n    print(<span class=\"hljs-string\">\"Length of longest common subsequence is:\"</span>, len(str),<span\n                class=\"hljs-string\">\"\\nAnd the subsequence is:\"</span>, str)\n</code></pre>\n    <h4 id=\"100\">100. 找到给定序列的最长子序列的长度，以便对子序列的所有元素进行排序，按顺序递增。</h4>\n    <p>例如，{10,22,9,33,21,50,41,60,80}的LIS长度为6，LIS为{10,22,33,50,60,80}。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">lis</span><span class=\"hljs-params\">(arr)</span>:</span>\n    n = len(arr)\n    dp = [<span class=\"hljs-number\">1</span>] * n\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(i):\n            <span class=\"hljs-keyword\">if</span> arr[j] &lt; arr[i] <span class=\"hljs-keyword\">and</span> dp[j] + <span\n                class=\"hljs-number\">1</span> &gt; dp[i]:\n                dp[i] = <span class=\"hljs-number\">1</span> + dp[j]\n\n    <span class=\"hljs-keyword\">return</span> max(dp)\n\narr = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">22</span>, <span\n                class=\"hljs-number\">9</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">21</span>, <span\n                class=\"hljs-number\">50</span>, <span class=\"hljs-number\">41</span>, <span class=\"hljs-number\">60</span>, <span\n                class=\"hljs-number\">80</span>]\nprint(lis(arr))\n</code></pre>\n    <h4 id=\"101mn\">101. 给定成本矩阵成本[] []和成本[] []中的位置（m，n），</h4>\n    <p>编写一个函数，返回从（0,0）到达（m，n）的最小成本路径的成本。\n        到达路径的总成本（m，n）是该路径上所有成本的总和（包括源和目的地）。\n        你只能从给定的单元格中向下，向右和对角线降低单元格。</p>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">min_cost</span>(<span\n            class=\"hljs-params\">cost, m, n</span>):\n    dp </span>= [[<span class=\"hljs-number\">0</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span\n            class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">n+<span\n            class=\"hljs-number\">1</span></span>)] <span class=\"hljs-keyword\">for</span> i <span\n            class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">m+<span\n            class=\"hljs-number\">1</span></span>)]\n\n    dp[0][0] </span>= cost[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n            class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, m+<span\n            class=\"hljs-number\">1</span></span>):\n        dp[i][0] </span>= dp[i<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>] + cost[i][<span\n                class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span\n            class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, n+<span\n            class=\"hljs-number\">1</span></span>):\n        dp[0][j] </span>= dp[<span class=\"hljs-number\">0</span>][j<span class=\"hljs-number\">-1</span>] + cost[<span\n                class=\"hljs-number\">0</span>][j]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n            class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, m+<span\n            class=\"hljs-number\">1</span></span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, n+<span\n                class=\"hljs-number\">1</span></span>):\n            dp[i][j] </span>= cost[i][j] + min(dp[i<span class=\"hljs-number\">-1</span>][j], dp[i][j<span\n                class=\"hljs-number\">-1</span>], dp[i<span class=\"hljs-number\">-1</span>][j<span\n                class=\"hljs-number\">-1</span>])\n\n    <span class=\"hljs-keyword\">return</span> dp[m][n]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    cost = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>],\n            [<span class=\"hljs-meta\">4, 8, 2</span>],\n            [<span class=\"hljs-meta\">1, 5, 3</span>]]\n    m = <span class=\"hljs-number\">2</span>\n    n = <span class=\"hljs-number\">2</span>\n    print(<span class=\"hljs-string\">\"Minimum cost from (0, 0) to ({}, {}) is:\"</span>.format(m, n), min_cost(cost, m, n))\n</code></pre>\n    <h4 id=\"102\">102. 将一个集合划分为两个子集，使得子集和的差异最小</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">find_min</span><span class=\"hljs-params\">(arr)</span>:</span>\n    sum_of_arr = sum(arr)\n    n = len(arr)\n    dp = [[<span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> range(sum_of_arr+<span class=\"hljs-number\">1</span>)] <span\n                class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span\n                class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span\n                class=\"hljs-number\">1</span>):\n        dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">True</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, sum_of_arr+<span class=\"hljs-number\">1</span>):\n        dp[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-keyword\">False</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, n+<span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, sum_of_arr+<span class=\"hljs-number\">1</span>):\n            dp[i][j] = dp[i<span class=\"hljs-number\">-1</span>][j]\n\n            <span class=\"hljs-keyword\">if</span> arr[i<span class=\"hljs-number\">-1</span>] &lt;= j:\n                dp[i][j] |= dp[i<span class=\"hljs-number\">-1</span>][j - arr[i<span class=\"hljs-number\">-1</span>]]\n\n    diff = float(<span class=\"hljs-string\">'inf'</span>)\n\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(int(sum_of_arr/<span\n                class=\"hljs-number\">2</span>), <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>):\n        <span class=\"hljs-keyword\">if</span> dp[n][j] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">True</span>:\n            diff = sum_of_arr - <span class=\"hljs-number\">2</span> * j\n            <span class=\"hljs-keyword\">break</span>\n\n    <span class=\"hljs-keyword\">return</span> diff\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    arr = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span\n                class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\n    print(<span class=\"hljs-string\">\"Minimum difference is:\"</span>, find_min(arr))\n</code></pre>\n    <h4 id=\"103\">103. 给定一组非负整数和一个值和，确定是否存在给定集合的子集，其总和等于给定总和。</h4>\n    <pre><code class=\"hljs python\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">isSubsetSum</span><span class=\"hljs-params\">(arr, check_sum)</span>:</span>\n    n = len(arr)\n    possible_sum = [[<span class=\"hljs-keyword\">False</span>] * (n + <span class=\"hljs-number\">1</span>) <span\n                class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> range(check_sum + <span\n                class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span\n                class=\"hljs-number\">1</span>):\n        possible_sum[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-keyword\">True</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, check_sum + <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, n + <span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-keyword\">if</span> i &lt; arr[j - <span class=\"hljs-number\">1</span>]:\n                possible_sum[i][j] = possible_sum[i][j<span class=\"hljs-number\">-1</span>]\n            <span class=\"hljs-keyword\">elif</span> i &gt;= arr[j - <span class=\"hljs-number\">1</span>]:\n                possible_sum[i][j] = possible_sum[i][j<span class=\"hljs-number\">-1</span>] <span\n                class=\"hljs-keyword\">or</span> possible_sum[i - arr[j - <span class=\"hljs-number\">1</span>]][j<span\n                class=\"hljs-number\">-1</span>]\n\n    <span class=\"hljs-keyword\">return</span> possible_sum[check_sum][n]\n\narr = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">34</span>, <span\n                class=\"hljs-number\">4</span>, <span class=\"hljs-number\">12</span>, <span\n                class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>]\ncheck_sum = <span class=\"hljs-number\">9</span>\n\n<span class=\"hljs-keyword\">if</span> isSubsetSum(arr, check_sum):\n    print(<span class=\"hljs-string\">\"Found a subset with sum =\"</span>, check_sum)\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">\"Subset with sum =\"</span>, check_sum, <span class=\"hljs-string\">\"Not Found\"</span>)\n</code></pre>\n    <h4 id=\"104hackerrankdp\">104. HackerRank 问题算法 DP</h4>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">maxSubArray</span>(<span\n            class=\"hljs-params\">a, size</span>):\n    currMax </span>= a[<span class=\"hljs-number\">0</span>]\n    maxSoFar = a[<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n            class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, size</span>):\n        currMax </span>= max(a[i], currMax + a[i])\n        maxSoFar = max(currMax, maxSoFar)\n\n    <span class=\"hljs-keyword\">return</span> maxSoFar\n\ntestcases = <span class=\"hljs-keyword\">int</span>(input())\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> t <span class=\"hljs-keyword\">in</span> <span\n        class=\"hljs-title\">range</span>(<span class=\"hljs-params\">testcases</span>):\n    n </span>= <span class=\"hljs-keyword\">int</span>(input())\n    arr = list(map(<span class=\"hljs-keyword\">int</span>, input().split()))\n    tempList = list(filter(lambda x: x &gt; <span class=\"hljs-number\">0</span>, arr))\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">if</span> <span class=\"hljs-title\">len</span>(<span\n            class=\"hljs-params\">tempList</span>) !</span>= <span class=\"hljs-number\">0</span>:\n        maximumSum = sum(tempList)\n    <span class=\"hljs-keyword\">else</span>:\n        maximumSum = max(arr)\n    print(maxSubArray(arr, n), maximumSum)\n</code></pre>\n    <h4 id=\"105dist123\">105. 给定距离 dist，计算用 1,2 和 3 步覆盖距离的总方式</h4>\n    <pre><code class=\"hljs makefile\"><span class=\"hljs-section\">Input:  n = 3</span>\n<span class=\"hljs-section\">Output: 4</span>\nBelow are the four ways\n 1 step + 1 step + 1 step\n 1 step + 2 step\n 2 step + 1 step\n 3 step<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n\ndef count_ways(n):\n    count = [0] * (n+1)\n    count[0] = 1\n    count[1] = 1\n    count[2] = 2\n\n    for i in range(3, n+1):\n        count[i] = count[i-1] + count[i-2] + count[i-3]\n\n    return count[n]\n\n\nif __name__ == '__main__':\n    print(count_ways(4))\n</span></code></pre>\n    <h4 id=\"106\">106. 在字符板中查找所有可能的单词</h4>\n    <pre><code class=\"hljs python\">Input: dictionary[] = {<span class=\"hljs-string\">\"GEEKS\"</span>, <span\n            class=\"hljs-string\">\"FOR\"</span>, <span class=\"hljs-string\">\"QUIZ\"</span>, <span\n            class=\"hljs-string\">\"GO\"</span>};\n       boggle[][]   = {{<span class=\"hljs-string\">'G'</span>,<span class=\"hljs-string\">'I'</span>,<span\n                class=\"hljs-string\">'Z'</span>},\n                       {<span class=\"hljs-string\">'U'</span>,<span class=\"hljs-string\">'E'</span>,<span\n                class=\"hljs-string\">'K'</span>},\n                       {<span class=\"hljs-string\">'Q'</span>,<span class=\"hljs-string\">'S'</span>,<span\n                class=\"hljs-string\">'E'</span>}};\nOutput:  Following words of dictionary are present\n         GEEKS\n         QUIZ\n\n         <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">findWordsUtil</span><span\n                 class=\"hljs-params\">(words, boggle, visited, found, r, c, str)</span>:</span>\n    rows = len(boggle)\n    cols = len(boggle[<span class=\"hljs-number\">0</span>])\n\n    <span class=\"hljs-comment\"># set the position of character as traversed</span>\n    visited[r][c] = <span class=\"hljs-keyword\">True</span>\n\n    <span class=\"hljs-comment\"># add the character to string</span>\n    str += boggle[r][c]\n\n    <span class=\"hljs-comment\"># if the string is in dictionary add it to the set of found words</span>\n    <span class=\"hljs-keyword\">if</span> str <span class=\"hljs-keyword\">in</span> words:\n        found.add(str)\n\n    <span class=\"hljs-comment\"># traverse all the nearby 8 adjacent cells</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(r<span\n                class=\"hljs-number\">-1</span>, r+<span class=\"hljs-number\">2</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(c<span\n                class=\"hljs-number\">-1</span>, c+<span class=\"hljs-number\">2</span>):\n            <span class=\"hljs-keyword\">if</span> i &gt;= rows <span class=\"hljs-keyword\">or</span> i &lt; <span\n                class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> j &gt;= cols <span\n                class=\"hljs-keyword\">or</span> j &lt; <span class=\"hljs-number\">0</span> <span\n                class=\"hljs-keyword\">or</span> visited[i][j]:\n                <span class=\"hljs-keyword\">continue</span>\n            findWordsUtil(words, boggle, visited, found, i, j, str)\n\n    <span class=\"hljs-comment\"># backtrack and set the status of current character as not traversed</span>\n    visited[r][c] = <span class=\"hljs-keyword\">False</span>\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">findWords</span><span\n        class=\"hljs-params\">(words, boggle)</span>:</span>\n    rows = len(boggle)\n    cols = len(boggle[<span class=\"hljs-number\">0</span>])\n\n    <span class=\"hljs-comment\"># initialize a matrix for DFS Traversal</span>\n    visited = [[<span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> range(cols)] <span class=\"hljs-keyword\">for</span> j <span\n                class=\"hljs-keyword\">in</span> range(rows)]\n\n    <span class=\"hljs-comment\"># set to store the unique found words</span>\n    found = set({})\n    str = <span class=\"hljs-string\">\"\"</span>\n\n    <span class=\"hljs-comment\"># traverse each character in the boggle and do DFS from there</span>\n    <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> range(rows):\n        <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> range(cols):\n            findWordsUtil(words, boggle, visited, found, r, c, str)\n\n    <span class=\"hljs-comment\"># return the set of found words</span>\n    <span class=\"hljs-keyword\">return</span> found\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    words = {<span class=\"hljs-string\">\"GEEKS\"</span>, <span class=\"hljs-string\">\"FOR\"</span>, <span\n                class=\"hljs-string\">\"QUIZ\"</span>, <span class=\"hljs-string\">\"GO\"</span>, <span class=\"hljs-string\">\"SEEK\"</span>}\n    boggle = [[<span class=\"hljs-string\">'G'</span>, <span class=\"hljs-string\">'I'</span>, <span\n                class=\"hljs-string\">'Z'</span>],\n              [<span class=\"hljs-string\">'U'</span>, <span class=\"hljs-string\">'E'</span>, <span\n                class=\"hljs-string\">'K'</span>],\n              [<span class=\"hljs-string\">'Q'</span>, <span class=\"hljs-string\">'S'</span>, <span\n                class=\"hljs-string\">'E'</span>]]\n\n    found = findWords(words, boggle)\n\n    print(<span class=\"hljs-string\">\"Words found in the boggle from the dictionary are:\"</span>)\n    <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> found:\n        print(word)\n</code></pre>\n    <h4 id=\"107\">107. 广度优先搜索遍历</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span\n                class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append(frm)\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bfsUtil</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s, visited)</span></span>:\n        queue = deque([])\n        queue.append(s)\n        visited[s] = True\n\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-symbol\">queue:</span>\n            vertex = queue.popleft()\n            print(vertex, <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n\n            <span class=\"hljs-comment\"># traverse vertices adjacent to vertex</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph[vertex]:\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\n                    visited[i] = True\n                    queue.append(i)\n        print()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bfs</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s=None)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-comment\"># do bfs from the node specified</span>\n        <span class=\"hljs-keyword\">if</span> s is <span class=\"hljs-keyword\">not</span> <span\n                class=\"hljs-symbol\">None:</span>\n            <span class=\"hljs-keyword\">self</span>.bfsUtil(s, visited)\n        <span class=\"hljs-comment\"># traverse for all the vertices in other components of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[v]:\n                <span class=\"hljs-keyword\">self</span>.bfsUtil(v, visited)\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span\n                class=\"hljs-string\">'__main__'</span>:\n    graph = Graph()\n\n    <span class=\"hljs-comment\"># component 1 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)\n\n    <span class=\"hljs-comment\"># component 2 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>)\n\n    <span class=\"hljs-comment\"># call bfs from 2 vertex</span>\n    print(<span class=\"hljs-string\">\"Breadth First Traversal:\"</span>)\n    graph.bfs(<span class=\"hljs-number\">2</span>)\n</code></pre>\n    <h4 id=\"108\">108. 深度优先搜索遍历</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span\n                class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append(frm)\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dfsUtil</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s, visited)</span></span>:\n        stack = []\n        stack.append(s)\n        visited[s] = True\n\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-symbol\">stack:</span>\n            vertex = stack.pop()\n            print(vertex, <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n\n            <span class=\"hljs-comment\"># traverse vertices adjacent to vertex</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph[vertex]:\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n        print()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dfs</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s=None)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-comment\"># traverse specified vertex</span>\n        <span class=\"hljs-keyword\">if</span> s is <span class=\"hljs-keyword\">not</span> <span\n                class=\"hljs-symbol\">None:</span>\n            <span class=\"hljs-keyword\">self</span>.dfsUtil(s, visited)\n\n        <span class=\"hljs-comment\"># traverse for all the vertices in other components of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[v]:\n                <span class=\"hljs-keyword\">self</span>.dfsUtil(v, visited)\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span\n                class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make an undirected graph</span>\n    graph = Graph()\n\n    <span class=\"hljs-comment\"># component 1 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)\n\n    <span class=\"hljs-comment\"># component 2 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>)\n\n    <span class=\"hljs-comment\"># call dfs from 2 vertex</span>\n    print(<span class=\"hljs-string\">\"Depth First Traversal:\"</span>)\n    graph.dfs(<span class=\"hljs-number\">2</span>)\n</code></pre>\n    <h4 id=\"109\">109. 在有向图中检测周期</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(self, directed=False)</span>:</span>\n        self.graph = defaultdict(list)\n        self.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span\n            class=\"hljs-params\">(self, frm, to)</span>:</span>\n        self.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> self.directed <span class=\"hljs-keyword\">is</span> <span\n                class=\"hljs-keyword\">False</span>:\n            self.graph[to].append(frm)\n        <span class=\"hljs-keyword\">else</span>:\n            self.graph[to] = self.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isCyclicUtil</span><span\n            class=\"hljs-params\">(self, s, visited, recurStack)</span>:</span>\n\n        <span class=\"hljs-keyword\">if</span> visited[s] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">False</span>:\n            recurStack[s] = <span class=\"hljs-keyword\">True</span>\n            visited[s] = <span class=\"hljs-keyword\">True</span>\n\n            <span class=\"hljs-comment\"># traverse vertices adjacent to vertex</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.graph[s]:\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">not</span> visited[i]) <span\n                class=\"hljs-keyword\">and</span> self.isCyclicUtil(i, visited, recurStack):\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">True</span>\n                <span class=\"hljs-keyword\">elif</span> recurStack[i]:\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">True</span>\n        recurStack[s] = <span class=\"hljs-keyword\">False</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">False</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isCyclic</span><span\n            class=\"hljs-params\">(self)</span>:</span>\n        visited = {i: <span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> self.graph}\n        recurStack = {i: <span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> self.graph}\n\n        <span class=\"hljs-comment\"># traverse for all the vertices of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> self.graph:\n            <span class=\"hljs-keyword\">if</span> self.isCyclicUtil(v, visited, recurStack):\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">True</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">False</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make a directed graph</span>\n    graph = Graph(<span class=\"hljs-keyword\">True</span>)\n\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\n\n    <span class=\"hljs-keyword\">if</span> graph.isCyclic():\n        print(<span class=\"hljs-string\">\"Cycle exists\"</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        print(<span class=\"hljs-string\">\"No cycle in the graph\"</span>)\n\n© <span class=\"hljs-number\">2019</span> GitHub, Inc.\nTerms\nPrivacy\n</code></pre>\n    <h4 id=\"110\">110. 检测无向图中的循环</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-comment\"># True if edge has been traversed or seen once</span>\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append([to, False])\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span\n                class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append([frm, False])\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">findParent</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, sets, v)</span></span>:\n        <span class=\"hljs-keyword\">if</span> sets[v] == -<span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> v\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.findParent(sets, sets[v])\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">union</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, sets, x, y)</span></span>:\n        x_set = <span class=\"hljs-keyword\">self</span>.findParent(sets, x)\n        y_set = <span class=\"hljs-keyword\">self</span>.findParent(sets, y)\n        sets[x_set] = y_set\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isCyclic</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-comment\"># sets that show combined vertices or not</span>\n        sets = {<span class=\"hljs-symbol\">i:</span> -<span class=\"hljs-number\">1</span> <span\n                class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">for</span> e <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph[v]:\n                <span class=\"hljs-comment\"># if an edge is traversed once skip it</span>\n                <span class=\"hljs-keyword\">if</span> e[<span class=\"hljs-number\">1</span>] is <span class=\"hljs-symbol\">True:</span>\n                    continue\n\n                <span class=\"hljs-comment\"># set True for traversing the edge and making union in both adjacency lists</span>\n                e[<span class=\"hljs-number\">1</span>] = True\n\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[e[<span\n                class=\"hljs-number\">0</span>]]:\n                    <span class=\"hljs-keyword\">if</span> i[<span class=\"hljs-number\">0</span>] == <span\n                class=\"hljs-symbol\">v:</span>\n                        i[<span class=\"hljs-number\">1</span>] = True\n                        <span class=\"hljs-keyword\">break</span>\n\n                <span class=\"hljs-comment\"># find parents of both vertices of the edge</span>\n                x = <span class=\"hljs-keyword\">self</span>.findParent(sets, v)\n                y = <span class=\"hljs-keyword\">self</span>.findParent(sets, e[<span class=\"hljs-number\">0</span>])\n\n                <span class=\"hljs-comment\"># if they share a common parent loop found</span>\n                <span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-symbol\">y:</span>\n                    <span class=\"hljs-keyword\">return</span> True\n                <span class=\"hljs-comment\"># union the two vertices in the same set</span>\n                <span class=\"hljs-keyword\">self</span>.union(sets, x, y)\n\n        <span class=\"hljs-comment\"># if no loop or cycle found return false</span>\n        <span class=\"hljs-keyword\">return</span> False\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span\n                class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make a graph</span>\n    graph = Graph()\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)\n\n    <span class=\"hljs-keyword\">if</span> graph.isCyclic():\n        print(<span class=\"hljs-string\">\"Cycle exists in the graph\"</span>)\n    <span class=\"hljs-symbol\">else:</span>\n        print(<span class=\"hljs-string\">\"No cycle in the graph\"</span>)\n</code></pre>\n    <h4 id=\"111dijkstra\">111. Dijkstra的最短路径算法</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to, weight)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append([to, weight])\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span\n                class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append([frm, weight])\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find_min</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, dist, visited)</span></span>:\n        minimum = float(<span class=\"hljs-string\">'inf'</span>)\n        index = -<span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph.keys():\n            <span class=\"hljs-keyword\">if</span> visited[v] is False <span class=\"hljs-keyword\">and</span> dist[v] &lt; <span\n                class=\"hljs-symbol\">minimum:</span>\n                minimum = dist[v]\n                index = v\n\n        <span class=\"hljs-keyword\">return</span> index\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dijkstra</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, src)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n        dist = {<span class=\"hljs-symbol\">i:</span> float(<span class=\"hljs-string\">'inf'</span>) <span\n                class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph}\n        parent = {<span class=\"hljs-symbol\">i:</span> None <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-comment\"># set distance of src vertex from itself 0</span>\n        dist[src] = <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-comment\"># find shortest path for all vertices</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(len(<span\n                class=\"hljs-keyword\">self</span>.graph)-<span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-comment\"># find minimum distance vertex from source</span>\n            <span class=\"hljs-comment\"># initially src itself as dist[src] = 0</span>\n            u = <span class=\"hljs-keyword\">self</span>.find_min(dist, visited)\n\n            <span class=\"hljs-comment\"># mark the node as visited</span>\n            visited[u] = True\n            <span class=\"hljs-comment\"># check if the distance through current edge is less than previously known distance to v</span>\n            <span class=\"hljs-keyword\">for</span> v, w <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[u]:\n\n                <span class=\"hljs-keyword\">if</span> visited[v] is False <span class=\"hljs-keyword\">and</span> dist[u] + w &lt; dist[v]:\n                    dist[v] = dist[u] + w\n                    parent[v] = u\n        <span class=\"hljs-comment\"># return parent list and distance to each node from source</span>\n        <span class=\"hljs-keyword\">return</span> parent, dist\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">printPath</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, parent, v)</span></span>:\n        <span class=\"hljs-keyword\">if</span> parent[v] is <span class=\"hljs-symbol\">None:</span>\n            <span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">self</span>.printPath(parent, parent[v])\n        print(v, <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">printSolution</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, dist, parent, src)</span></span>:\n        print(<span class=\"hljs-string\">'{}\\t{}\\t{}'</span>.format(<span class=\"hljs-string\">'Vertex'</span>, <span\n                class=\"hljs-string\">'Distance'</span>, <span class=\"hljs-string\">'Path'</span>))\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph.keys():\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-symbol\">src:</span>\n                continue\n            print(<span class=\"hljs-string\">'{} -&gt; {}\\t\\t{}\\t\\t{}'</span>.format(src, i, dist[i], src), <span\n                class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n            <span class=\"hljs-keyword\">self</span>.printPath(parent, i)\n            print()\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span\n                class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make an undirected graph</span>\n    graph = Graph()\n\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, <span\n                class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span\n                class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span\n                class=\"hljs-number\">11</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span\n                class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span\n                class=\"hljs-number\">7</span>)\n    graph.addEdge(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span\n                class=\"hljs-number\">6</span>)\n    graph.addEdge(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span\n                class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span\n                class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span\n                class=\"hljs-number\">7</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span\n                class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span\n                class=\"hljs-number\">9</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span\n                class=\"hljs-number\">14</span>)\n    graph.addEdge(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span\n                class=\"hljs-number\">10</span>)\n\n    parent, dist = graph.dijkstra(<span class=\"hljs-number\">0</span>)\n\n    graph.printSolution(dist, parent, <span class=\"hljs-number\">0</span>)\n</code></pre>\n    <h4 id=\"112\">112. 在给定的边缘加权有向图中找出每对顶点之间的最短距离</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">floyd_warshall</span><span class=\"hljs-params\">(graph)</span>:</span>\n    shortest_dist = []\n\n    <span class=\"hljs-comment\"># copy matrix for storing resultant shortest distances</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> graph:\n        shortest_dist.append(i)\n\n    <span class=\"hljs-comment\"># Number of vertices in graph</span>\n    V = len(graph) - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># k is intermediate vertex</span>\n    <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> range(V+<span\n                class=\"hljs-number\">1</span>):\n        <span class=\"hljs-comment\"># i is source</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(V+<span\n                class=\"hljs-number\">1</span>):\n            <span class=\"hljs-comment\"># j is destination</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(V+<span\n                class=\"hljs-number\">1</span>):\n                <span class=\"hljs-comment\"># store the path which is shorter i.e. min(i-&gt;j, i-&gt;k-&gt;j)</span>\n                shortest_dist[i][j] = min(shortest_dist[i][j], shortest_dist[i][k] + shortest_dist[k][j])\n    <span class=\"hljs-comment\"># return the resultant matrix</span>\n    <span class=\"hljs-keyword\">return</span> shortest_dist\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    INF = float(<span class=\"hljs-string\">'inf'</span>)\n    graph = [[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, INF, <span\n                class=\"hljs-number\">10</span>],\n             [INF, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, INF],\n             [INF, INF, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>],\n             [INF, INF, INF, <span class=\"hljs-number\">0</span>]]\n\n    shortest_dist_matrix = floyd_warshall(graph)\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> shortest_dist_matrix:\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> i:\n            <span class=\"hljs-keyword\">if</span> j != float(<span class=\"hljs-string\">'inf'</span>):\n                print(j, <span class=\"hljs-string\">'\\t'</span>, end=<span class=\"hljs-string\">''</span>)\n            <span class=\"hljs-keyword\">else</span>:\n                print(j, end=<span class=\"hljs-string\">' '</span>)\n        print()\n</code></pre>\n    <h4 id=\"113\">113. 图形实现</h4>\n    <pre><code class=\"hljs ruby\"> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Vertex</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.key = key\n        <span class=\"hljs-keyword\">self</span>.adjacent = {}\n        <span class=\"hljs-keyword\">self</span>.visited = False\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">setKey</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.key = key\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getKey</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.key\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getVisited</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.visited\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">setVisited</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, val=True)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.visited = val\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addNeighbour</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, neighbour, weight=<span\n            class=\"hljs-number\">0</span>)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.adjacent[neighbour] = weight\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getNeighbours</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.adjacent.keys()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getWeight</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, neighbour)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.adjacent[neighbour]\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n\n    <span class=\"hljs-comment\"># Graph is undirected by default</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.vertices = {}\n        <span class=\"hljs-keyword\">self</span>.numberOfVertices = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addVertex</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        node = Vertex(key)\n        <span class=\"hljs-keyword\">self</span>.vertices[key] = node\n        <span class=\"hljs-keyword\">self</span>.numberOfVertices += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> node\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to, weight=<span\n            class=\"hljs-number\">0</span>)</span></span>:\n        <span class=\"hljs-keyword\">if</span> frm <span class=\"hljs-keyword\">not</span> <span\n                class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            <span class=\"hljs-keyword\">self</span>.addVertex(frm)\n\n        <span class=\"hljs-keyword\">if</span> to <span class=\"hljs-keyword\">not</span> <span\n                class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            <span class=\"hljs-keyword\">self</span>.addVertex(to)\n\n        <span class=\"hljs-keyword\">self</span>.vertices[frm].addNeighbour(<span class=\"hljs-keyword\">self</span>.vertices[to], weight)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span\n                class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">directed:</span>\n            <span class=\"hljs-keyword\">self</span>.vertices[to].addNeighbour(<span class=\"hljs-keyword\">self</span>.vertices[frm], weight)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getVertex</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        <span class=\"hljs-keyword\">if</span> key <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.vertices[key]\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">return</span> None\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getVertices</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.vertices.keys()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getEdges</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        edges = []\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            edgesFromVertex = []\n\n            <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.vertices[v].getNeighbours():\n                frm = <span class=\"hljs-keyword\">self</span>.vertices[v].getKey()\n                to = w.getKey()\n                weight = <span class=\"hljs-keyword\">self</span>.vertices[v].getWeight(w)\n                edgesFromVertex.append((frm, to, weight))\n\n            <span class=\"hljs-keyword\">if</span> len(edgesFromVertex) != <span class=\"hljs-number\">0</span>:\n                edges.append(edgesFromVertex)\n\n        <span class=\"hljs-keyword\">return</span> edges\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span\n                class=\"hljs-string\">'__main__'</span>:\n    g = Graph(directed=False)\n    g.addVertex(<span class=\"hljs-string\">'a'</span>)\n    g.addVertex(<span class=\"hljs-string\">'b'</span>)\n    g.addVertex(<span class=\"hljs-string\">'c'</span>)\n    g.addVertex(<span class=\"hljs-string\">'d'</span>)\n    g.addVertex(<span class=\"hljs-string\">'e'</span>)\n    g.addVertex(<span class=\"hljs-string\">'f'</span>)\n    g.addEdge(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span\n                class=\"hljs-number\">3</span>)\n    g.addEdge(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span\n                class=\"hljs-number\">2</span>)\n    g.addEdge(<span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span\n                class=\"hljs-number\">1</span>)\n    g.addEdge(<span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>, <span\n                class=\"hljs-number\">5</span>)\n    g.addEdge(<span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>, <span\n                class=\"hljs-number\">5</span>)\n    g.addEdge(<span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>, <span\n                class=\"hljs-number\">2</span>)\n    g.addEdge(<span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>, <span\n                class=\"hljs-number\">3</span>)\n    g.addEdge(<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'a'</span>, <span\n                class=\"hljs-number\">6</span>)\n    g.addEdge(<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'b'</span>, <span\n                class=\"hljs-number\">6</span>)\n    g.addEdge(<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'c'</span>, <span\n                class=\"hljs-number\">6</span>)\n\n    <span class=\"hljs-keyword\">for</span> edgeSet <span class=\"hljs-keyword\">in</span> g.getEdges():\n        print(<span class=\"hljs-string\">'edges from'</span>, edgeSet[<span class=\"hljs-number\">0</span>][<span\n                class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">': '</span>, <span\n                class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">''</span>)\n        print(edgeSet)\n</code></pre>\n    <h4 id=\"114kruskal\">114. Kruskal的最小生成树算法</h4>\n    <pre><code class=\"hljs sql\">class Graph:\n    def __init__(self, directed=False):\n        self.edges = []\n        self.vertices = <span class=\"hljs-keyword\">set</span>({})\n        self.directed = directed\n\n    <span class=\"hljs-keyword\">def</span> addEdge(<span class=\"hljs-keyword\">self</span>, frm, <span\n                class=\"hljs-keyword\">to</span>, weight):\n        self.edges.append([frm, <span class=\"hljs-keyword\">to</span>, weight])\n        self.vertices.add(frm)\n        self.vertices.add(<span class=\"hljs-keyword\">to</span>)\n\n    <span class=\"hljs-keyword\">def</span> removeEdge(<span class=\"hljs-keyword\">self</span>, frm, <span\n                class=\"hljs-keyword\">to</span>, weight):\n        self.edges.remove([frm, <span class=\"hljs-keyword\">to</span>, weight])\n        flag1 = <span class=\"hljs-number\">0</span>\n        flag2 = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> f, t, w <span class=\"hljs-keyword\">in</span> self.edges:\n            <span class=\"hljs-keyword\">if</span> frm == f <span class=\"hljs-keyword\">or</span> frm == t:\n                flag1 = <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">to</span> == f <span\n                class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">to</span> == t:\n                flag2 = <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> flag1 == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> flag2 == <span\n                class=\"hljs-number\">1</span>:\n                break\n\n        <span class=\"hljs-keyword\">if</span> flag1 != <span class=\"hljs-number\">1</span>:\n            self.vertices.remove(frm)\n\n        <span class=\"hljs-keyword\">if</span> flag2 != <span class=\"hljs-number\">1</span>:\n            self.vertices.remove(<span class=\"hljs-keyword\">to</span>)\n\n    <span class=\"hljs-keyword\">def</span> findParent(<span class=\"hljs-keyword\">self</span>, <span class=\"hljs-keyword\">sets</span>, v):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">sets</span>[v] == <span\n                class=\"hljs-number\">-1</span>:\n            <span class=\"hljs-keyword\">return</span> v\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> self.findParent(<span class=\"hljs-keyword\">sets</span>, <span\n                class=\"hljs-keyword\">sets</span>[v])\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-keyword\">union</span>(<span class=\"hljs-keyword\">self</span>, <span\n                class=\"hljs-keyword\">sets</span>, x, y):\n        x_set = self.findParent(<span class=\"hljs-keyword\">sets</span>, x)\n        y_set = self.findParent(<span class=\"hljs-keyword\">sets</span>, y)\n        <span class=\"hljs-keyword\">sets</span>[x_set] = y_set\n\n    <span class=\"hljs-keyword\">def</span> isCyclic(<span class=\"hljs-keyword\">self</span>):\n        # <span class=\"hljs-keyword\">sets</span> that <span class=\"hljs-keyword\">show</span> combined vertices <span\n                class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span>\n        <span class=\"hljs-keyword\">sets</span> = {i: <span class=\"hljs-number\">-1</span> <span\n                class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.vertices}\n        <span class=\"hljs-keyword\">for</span> v1, v2, w <span class=\"hljs-keyword\">in</span> self.edges:\n            # find parents <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">both</span> vertices <span\n                class=\"hljs-keyword\">of</span> the edge\n            x = self.findParent(<span class=\"hljs-keyword\">sets</span>, v1)\n            y = self.findParent(<span class=\"hljs-keyword\">sets</span>, v2)\n\n            # <span class=\"hljs-keyword\">if</span> they <span class=\"hljs-keyword\">share</span> a common <span\n                class=\"hljs-keyword\">parent</span> <span class=\"hljs-keyword\">loop</span> <span class=\"hljs-keyword\">found</span>\n            <span class=\"hljs-keyword\">if</span> x == y:\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n            # <span class=\"hljs-keyword\">union</span> the two vertices <span\n                class=\"hljs-keyword\">in</span> the same <span class=\"hljs-keyword\">set</span>\n            self.union(<span class=\"hljs-keyword\">sets</span>, x, y)\n\n        # <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">no</span> <span\n                class=\"hljs-keyword\">loop</span> <span class=\"hljs-keyword\">or</span> <span\n                class=\"hljs-keyword\">cycle</span> <span class=\"hljs-keyword\">found</span> <span class=\"hljs-keyword\">return</span> <span\n                class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">def</span> kruskalMST(<span class=\"hljs-keyword\">self</span>):\n        g = Graph()\n\n        self.edges = sorted(self.edges, <span class=\"hljs-keyword\">key</span>=lambda x: x[<span\n                class=\"hljs-number\">2</span>])\n\n        <span class=\"hljs-keyword\">for</span> frm, <span class=\"hljs-keyword\">to</span>, w <span\n                class=\"hljs-keyword\">in</span> self.edges:\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">len</span>(g.edges) == <span\n                class=\"hljs-keyword\">len</span>(graph.vertices)<span class=\"hljs-number\">-1</span>:\n                break\n            g.addEdge(frm, <span class=\"hljs-keyword\">to</span>, w)\n            <span class=\"hljs-keyword\">if</span> g.isCyclic():\n                g.removeEdge(frm, <span class=\"hljs-keyword\">to</span>, w)\n        <span class=\"hljs-keyword\">return</span> g\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    # make an undirected graph\n    graph = Graph()\n\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-number\">10</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span\n                class=\"hljs-number\">6</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span\n                class=\"hljs-number\">5</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span\n                class=\"hljs-number\">15</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span\n                class=\"hljs-number\">4</span>)\n\n    new_graph = graph.kruskalMST()\n\n    <span class=\"hljs-keyword\">for</span> f, t, w <span class=\"hljs-keyword\">in</span> new_graph.edges:\n        print(f, <span class=\"hljs-string\">\"--\"</span>, t, <span class=\"hljs-string\">\"=\"</span>, w)\n</code></pre>\n    <h4 id=\"115\">115. 拓扑排序</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span\n                class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append(frm)\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">topoSortUtil</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s, visited, sortList)</span></span>:\n        visited[s] = True\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph[s]:\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\n                <span class=\"hljs-keyword\">self</span>.topoSortUtil(i, visited, sortList)\n\n        sortList.insert(<span class=\"hljs-number\">0</span>, s)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">topologicalSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        sortList = []\n        <span class=\"hljs-comment\"># traverse for all the vertices in other components of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[v]:\n                <span class=\"hljs-keyword\">self</span>.topoSortUtil(v, visited, sortList)\n\n        print(sortList)\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span\n                class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make an directed graph</span>\n    g = Graph(directed=True)\n\n    g.addEdge(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>)\n    g.addEdge(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>)\n    g.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>)\n    g.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>)\n    g.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    g.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-comment\"># call topologicalSort()</span>\n    print(<span class=\"hljs-string\">\"Topological Sort:\"</span>)\n    g.topologicalSort()\n</code></pre>\n    <h4 id=\"116\">116. 以下哪个语句创建字典？（多选题）</h4>\n    <p>a）d = {}\n        b）d = {“john”：40，“peter”：45}\n        c）d = {40：“john”，45：“peter”}\n        d）d =（40：“john” ，45：“50”）</p>\n    <p>答案： b，c＆d。 </p>\n    <h4 id=\"117\">117. 其中哪一个是分区？</h4>\n    <p>a）/\n        b）//\n        c）％\n        d）没有提到的</p>\n    <p>答案： b</p>\n    <p>当两个操作数都是整数时，python 会删除小数部分并给出舍入值，以获得准确的答案使用分层。例如，5/2 = 2.5，但两个操作数都是整数，因此在 python 中对此表达式的回答是2.要获得2.5作为答案，请使用//使用\n        floor division。所以，5 // 2 = 2.5</p>\n    <h4 id=\"118\">118. 标识符的最大可能长度是多少？</h4>\n    <p>a）31个字符\n        b）63个字符\n        c）79个字符\n        d）以上都不是</p>\n    <p>答案： d）以上都不是</p>\n    <p>标识符可以是任意长度。</p>\n    <h4 id=\"119\">119. 为什么不鼓励以下划线开头的局部变量名？</h4>\n    <p>a）它们用于表示类的私有变量\n        b）它们使解释器混淆\n        c）它们用于指示全局变量\n        d）它们减慢执行速度</p>\n    <p>答案： a）它们用于表示类的私有变量</p>\n    <p>由于 Python 没有私有变量的概念，因此前导下划线用于表示不能从类外部访问的变量。</p>\n    <h4 id=\"120\">120. 以下哪项是无效声明？</h4>\n    <p>a）abc = 1,000,000\n        b）abc = 1000 2000 3000\n        c）a，b，c =\n        1000,2000,3000 d）a<em>b</em>c = 1,000,000</p>\n    <p>答案： b）abc = 1000 2000 3000</p>\n    <p>变量名中不允许使用空格。</p>\n    <h4 id=\"121output\">121. 以下是什么Output？</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">try</span>:\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">'1'</span> != <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">raise</span> <span class=\"hljs-string\">\"someError\"</span>\n    <span class=\"hljs-keyword\">else</span>:\n        print(<span class=\"hljs-string\">\"someError has not occured\"</span>)\n<span class=\"hljs-keyword\">except</span> <span class=\"hljs-string\">\"someError\"</span>:\n    <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-string\">\"someError has occured\"</span>)\n</code></pre>\n    <p>a）发生了 someError\n        b）没有发生 someError\n        c）无效代码\n        d）以上都没有</p>\n    <p>答案： c）代码无效</p>\n    <p>新的异常类必须从 BaseException 继承。这里没有这样的遗产。</p>\n    <h4 id=\"122list12332221425list11\">122. 假设 list1 是[2,33,222,14,25]，什么是 list1 [-1]？</h4>\n    <p>a）错误\n        b）无\n        c）25\n        d）2</p>\n    <p>答案： c）25</p>\n    <p>索引 - 1 对应于列表中的最后一个索引。</p>\n    <h4 id=\"123cscorestxt\">123. 要打开文件 c：scores.txt 进行写作，我们使用</h4>\n    <p>a）outfile = open（“c：scores.txt”，“r”）\n        b）outfile = open（“c：scores.txt”，“w”）\n        c）outfile = open（file =“c：scores.txt “，”r“）\n        d）outfile = open（file =”c：scores.txt“，”o“）</p>\n    <p>答案： b）该位置包含双斜杠（），w用于表示正在写入文件。</p>\n    <h4 id=\"124output\">124. 以下是什么 Output？</h4>\n    <pre><code class=\"hljs python\">f = <span class=\"hljs-keyword\">None</span>\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range (<span class=\"hljs-number\">5</span>):\n    <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"data.txt\"</span>, <span class=\"hljs-string\">\"w\"</span>) <span\n                class=\"hljs-keyword\">as</span> f:\n        <span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">2</span>:\n            <span class=\"hljs-keyword\">break</span>\n\n<span class=\"hljs-keyword\">print</span> f.closed\n</code></pre>\n    <p>a）真\n        b）假\n        c）没有\n        d）错误</p>\n    <p>答案： a）是的 </p>\n    <p>与 open 文件一起使用时，WITH 语句可确保在 with 块退出时关闭文件对象。</p>\n    <h4 id=\"125tryexceptelseelse\">125. try-except-else 的 else 部分什么时候执行？</h4>\n    <p>a）总是\n        b）当发生异常时\n        c）当没有异常发生时\n        d）当除了块之外发生异常时</p>\n    <p>答案： c）没有异常发生时</p>\n    <p>当没有异常发生时，执行 else 部分。</p></div>\n</body>\n</html>","source":"_posts/gitchat/python_Interview_120.html","raw":"---\ntitle: Python面试\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Python面试120题</title>\n</head>\n<body>\n<div id=\"article_content\" class=\"mazi-article-content dont-break-out\"><h3 id=\"python\">基本 Python 面试问题</h3>\n    <h4 id=\"1python\">1. Python 中的列表和元组有什么区别？</h4>\n    <p>列表是可变的，即可以编辑它们；元组是不可变的（元组是无法编辑的列表）。</p>\n    <p>列表比元组慢；元组比列表更快。</p>\n    <p>列表语法：list<em>1 = [10，'Chelsea'，20]；\n        元组语法：tup</em>1 =（10，'Chelsea'，20）。</p>\n    <h4 id=\"2python\">2. Python 的主要功能是什么？</h4>\n    <ul>\n        <li><p>Python 是一种解释型语言。这意味着，与 C 语言及其衍生语言不同，Python 在运行之前不需要进行编译。其他解释性语言包括 PHP 和 Ruby。</p></li>\n        <li><p>Python 是动态类型的，当你声明变量时，你不需要声明变量的类型。你可以直接编写类似 x=111，或者 x=\"I'm a string\" 这样的代码，程序不会报错。</p></li>\n        <li><p>Python 非常适合面向对象的编程（OOP），因为它允许类的定义以及组合和继承。Python 没有访问说明（如 C ++ 的 public，private）。</p></li>\n        <li><p>在 Python 中，函数是第一类对象。这意味着它们可以分配给变量，从其他函数返回并传递给函数。类也是第一类对象。</p></li>\n        <li><p>编写 Python 代码很快，但运行速度通常比编译语言慢。不过，Python 允许加入基于 C 语言编写的扩展，因此我们可以优化代码。numpy\n            就是一个很好的例子，它的运行速度相当快的，因为很多算数运算并不通过 Python 实现。</p></li>\n        <li><p>Python 用途非常广泛—— Web 应用程序、自动化、科学建模、大数据应用程序等等。它也经常被称作“胶水语言”，以使其他语言和组件发挥得很好。</p></li>\n    </ul>\n    <h4 id=\"3python\">3. python 是编程语言还是脚本语言？</h4>\n    <p>Python 能够编写脚本，但从一般意义上讲，它被认为是一种通用的编程语言。</p>\n    <h4 id=\"4python\">4. Python 是一种解释性语言吗？</h4>\n    <p>Python 是一种解释型语言。它的源代码可以直接运行，python 解释器会把源代码转换成中间语言，之后翻译成机器码再执行。</p>\n    <h4 id=\"5pep8\">5. 什么是 pep 8？</h4>\n    <p>PEP 代表 Python Enhancement Proposal。它是一组规则，指定如何格式化 Python 代码以获得最大可读性。</p>\n    <h4 id=\"6python\">6. 如何在 Python 中管理内存？</h4>\n    <p>python 中的内存管理由 Python 私有堆空间管理。所有 Python 对象和数据结构都位于私有堆中。程序员无权访问此私有堆。python 解释器负责处理这个问题。</p>\n    <p>Python 对象的堆空间分配由 Python 的内存管理器完成。核心 API 提供了一些程序员编写代码的工具。</p>\n    <p>Python 还有一个内置的垃圾收集器，它可以回收所有未使用的内存，并使其可用于堆空间。</p>\n    <h4 id=\"7python\">7. Python 中的命名空间是什么？</h4>\n    <p>命名空间是一个命名系统，用于确保名称是唯一的，以避免命名冲突。</p>\n    <h4 id=\"8pythonpath\">8. 什么是 PYTHONPATH？</h4>\n    <p>它是导入模块时使用的环境变量。每当导入模块时，也会查找 PYTHONPATH 以检查各个目录中是否存在导入的模块。解释器使用它来确定要加载的模块。</p>\n    <h4 id=\"9pythonpython\">9. 什么是 python 模块？在 Python 中命名一些常用的内置模块？</h4>\n    <p>Python 模块是包含 Python 代码的文件。此代码可以是函数类或变量。Python 模块是包含可执行代码的 .py 文件。</p>\n    <p>一些常用的内置模块是：</p>\n    <ul>\n        <li>os</li>\n        <li>sys</li>\n        <li>math</li>\n        <li>random</li>\n        <li>data time</li>\n        <li>JSON</li>\n    </ul>\n    <h4 id=\"10python\">10. Python 中的局部变量和全局变量是什么？</h4>\n    <p>全局变量：</p>\n    <p>在函数外或全局空间中声明的变量称为全局变量。这些变量可以由程序中的任何函数访问。</p>\n    <p>局部变量：</p>\n    <p>在函数内声明的任何变量都知道局部变量。此变量存在于本地空间中，而不是全局空间中。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs makefile\">a=2                       <span class=\"hljs-comment\">#Global Variable</span>\ndef add():\nb=3                       <span class=\"hljs-comment\">#Local Variable</span>\nc=a+b\nprint(c)\nadd()\nOutput：  5\n</code></pre>\n    <p>当你尝试访问函数 add（）之外的局部变量时，它将引发错误。</p>\n    <h4 id=\"11python\">11. python 是否区分大小写？</h4>\n    <p>是的。Python 是一种区分大小写的语言。</p>\n    <h4 id=\"12python\">12. Python 中的类型转换是什么？</h4>\n    <p>类型转换是指将一种数据类型转换为另一种数据类型。</p>\n    <ul>\n        <li><p>int（） - 将任何数据类型转换为整数类型</p></li>\n        <li><p>float（） - 将任何数据类型转换为 float 类型</p></li>\n        <li><p>ord（） - 将字符转换为整数</p></li>\n        <li><p>hex（） - 将整数转换为十六进制</p></li>\n        <li><p>oct（） - 将整数转换为八进制</p></li>\n        <li><p>tuple（） -此函数用于转换为元组。</p></li>\n        <li><p>set（） -此函数在转换为 set 后返回类型。</p></li>\n        <li><p>list（） - 此函数用于将任何数据类型转换为列表类型。</p></li>\n        <li><p>dict（） - 此函数用于将顺序元组（键，值）转换为字典。</p></li>\n        <li><p>str（） - 用于将整数转换为字符串。</p></li>\n        <li><p>complex（real，imag） - 此函数将实数转换为复数（实数，图像）数。</p></li>\n    </ul>\n    <h4 id=\"13python\">13. Python 中有哪些内置类型？</h4>\n    <p>Python 的不可变内置数据类型</p>\n    <ul>\n        <li>数字</li>\n        <li>字符串</li>\n        <li>元组</li>\n    </ul>\n    <p>Python 的可变内置数据类型</p>\n    <ul>\n        <li>名单</li>\n        <li>字典</li>\n        <li>集</li>\n    </ul>\n    <h4 id=\"14python\">14. python 中是否需要缩进？</h4>\n    <p>Python 需要缩进。它指定了一个代码块。循环，类，函数等中的所有代码都在缩进块中指定。通常使用四个空格字符来完成。如果你的代码没有必要缩进，它将无法准确执行并且也会抛出错误。</p>\n    <h4 id=\"15pythonarray\">15. Python array和列表有什么区别？</h4>\n    <p>Python 中的array和列表具有相同的存储数据方式。但是，array只能包含单个数据类型元素，而列表可以包含任何数据类型元素。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs php\">import <span class=\"hljs-keyword\">array</span> <span class=\"hljs-keyword\">as</span> arr\nMy_Array=arr.<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'i'</span>,[<span\n                class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span\n                class=\"hljs-number\">4</span>])\nMy_list=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">'abc'</span>,<span class=\"hljs-number\">1.20</span>]\n<span class=\"hljs-keyword\">print</span>(My_Array)\n<span class=\"hljs-keyword\">print</span>(My_list)\n\nOutput：\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'i'</span>，[<span class=\"hljs-number\">1</span>,<span\n                class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span\n                class=\"hljs-number\">4</span>]）[<span class=\"hljs-number\">1</span>，<span class=\"hljs-string\">'abc'</span>，<span\n                class=\"hljs-number\">1.2</span>]\n</code></pre>\n    <h4 id=\"16python\">16. Python 中的函数是什么？</h4>\n    <p>函数是一个代码块，只有在被调用时才会执行。要在 Python 中定义函数，请使用 def 关键字。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">Newfunc</span><span class=\"hljs-params\">()</span>:</span>\nprint(<span class=\"hljs-string\">\"Hi, Welcome to Edureka\"</span>)\nNewfunc(); <span class=\"hljs-comment\">#calling the function</span>\nOutput：Hi, Welcome to Edureka\n</code></pre>\n    <h4 id=\"17__init__\">17. <strong>init</strong> 是什么？</h4>\n    <p>__ init__ 是 Python 中的方法或构造函数。在创建类的新对象/实例时，将自动调用此方法来分配内存。所有类都有 <strong>init</strong> 方法。</p>\n    <p>以下是如何使用它的示例。</p>\n    <pre><code class=\"hljs objectivec\"><span class=\"hljs-keyword\">class</span> Employee:\ndef __init__(<span class=\"hljs-keyword\">self</span>, name, age,salary):\n<span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-keyword\">self</span>.age = age\n<span class=\"hljs-keyword\">self</span>.salary = <span class=\"hljs-number\">20000</span>\nE1 = Employee(<span class=\"hljs-string\">\"XYZ\"</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">20000</span>)\n <span class=\"hljs-comment\">/*E1 is the instance of class Employee.*/</span>\n<span class=\"hljs-comment\">/*__init__ allocates memory for E1. */</span>\nprint(E1.name)\nprint(E1.age)\nprint(E1.salary)\nOutput：\n\nXYZ\n\n<span class=\"hljs-number\">23</span>\n\n<span class=\"hljs-number\">20000</span>\n</code></pre>\n    <h4 id=\"18lambda\">18. 什么是 lambda 函数？</h4>\n    <p>匿名函数称为 lambda 函数。此函数可以包含任意数量的参数，但只能有一个语句。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs makefile\">a = lambda x,y : x+y\nprint(a(5, 6))\nOutput：  11\n</code></pre>\n    <h4 id=\"19pythonself\">19. Python 中的 self 是什么？</h4>\n    <p>self 是类的实例或对象。在 Python 中，这显然包含在第一个参数中。但是，Java 中的情况并非如此，它是可选的。它有助于区分具有局部变量的类的方法和属性。</p>\n    <p>init 方法中的 self 变量引用新创建的对象，而在其他方法中，它引用其方法被调用的对象。</p>\n    <h4 id=\"20\">20. 如何中断，继续并通过工作？</h4>\n    <ul>\n        <li>中断：当满足某些条件并且控制转移到下一个语句时允许循环终止。</li>\n        <li>继续：允许在满足某些特定条件时跳过循环的某些部分，并将控件转移到循环的开头。</li>\n        <li>通过：在语法上需要一些代码块时使用，但是你想跳过它的执行。这基本上是一个空操作。执行此操作时没有任何反应。</li>\n    </ul>\n    <h4 id=\"211\">21. [:: - 1} 的作用是什么？</h4>\n    <p>[:: - 1] 用于反转array或序列的顺序。</p>\n    <p>例如：</p>\n    <pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-built_in\">array</span> as arr\nMy_Array=arr.<span class=\"hljs-built_in\">array</span>(<span class=\"hljs-string\">'i'</span>,[<span\n                class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span\n                class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>])\nMy_Array[::<span class=\"hljs-number\">-1</span>]\nOutput：<span class=\"hljs-built_in\">array</span>（<span class=\"hljs-string\">'i'</span>，[<span class=\"hljs-number\">5</span>,<span\n                class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span\n                class=\"hljs-number\">1</span>]）\n</code></pre>\n    <p>[:: - 1] 重新打印有序数据结构的反转副本，例如array或列表。原始array或列表保持不变。</p>\n    <h4 id=\"22python\">22. 如何在 Python 中随机化列表中的项目？</h4>\n    <p>考虑以下示例：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">from</span> random <span\n            class=\"hljs-keyword\">import</span> shuffle\nx = [<span class=\"hljs-string\">'Keep'</span>, <span class=\"hljs-string\">'The'</span>, <span\n                class=\"hljs-string\">'Blue'</span>, <span class=\"hljs-string\">'Flag'</span>, <span class=\"hljs-string\">'Flying'</span>, <span\n                class=\"hljs-string\">'High'</span>]\nshuffle(x)\n<span class=\"hljs-built_in\">print</span>(x)\n\nOutput：\n[<span class=\"hljs-string\">'Flying'</span>，<span class=\"hljs-string\">'Keep'</span>，<span\n                class=\"hljs-string\">'Blue'</span>，<span class=\"hljs-string\">'High'</span>，<span class=\"hljs-string\">'The'</span>，<span\n                class=\"hljs-string\">'Flag'</span>]\n</code></pre>\n    <h4 id=\"23python\">23. 什么是 python 迭代器？</h4>\n    <p>迭代器是可以遍历或迭代的对象。</p>\n    <h4 id=\"24python\">24. 如何在 Python 中生成随机数？</h4>\n    <p>随机模块是用于生成随机数的标准模块。该方法定义为：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> random\nrandom.random\n</code></pre>\n    <p>语句 random.random（）方法返回 [0,1] 范围内的浮点数。该函数生成随机浮点数。随机类使用的方法是隐藏实例的绑定方法。可以使用 Random\n        的实例来显示创建不同线程实例的多线程程序。其中使用的其他随机生成器是：</p>\n    <ul>\n        <li>randrange（a，b）：它选择一个整数并定义[a，b]之间的范围。它通过从指定范围中随机选择元素来返回元素。它不构建范围对象。</li>\n        <li>uniform（a，b）：它选择一个在[a，b）范围内定义的浮点数 .Itt 返回浮点数</li>\n        <li>normalvariate（mean，sdev）：它用于正态分布，其中 mu 是平均值，sdev 是用于标准偏差的 sigma。</li>\n        <li>使用和实例化的 Random 类创建一个独立的多个随机数生成器。</li>\n    </ul>\n    <h4 id=\"25rangexrange\">25. range＆xrange 有什么区别？</h4>\n    <p>在大多数情况下，xrange 和 range 在功能方面完全相同。它们都提供了一种生成整数列表供你使用的方法，但是请你随意使用。唯一的区别是 range 返回一个 Python 列表对象，x range 返回一个 xrange\n        对象。</p>\n    <p>这意味着 xrange 实际上并不像运行时那样在运行时生成静态列表。它使用称为 yielding 的特殊技术根据需要创建值。该技术与一种称为生成器的对象一起使用。这意味着，如果你有一个非常巨大的范围，你想生成一个列表，比如\n        10 亿，xrange 就是要使用的功能。</p>\n    <p>如果你有一个真正的内存敏感系统，如你正在使用的手机，尤其如此，因为范围将使用尽可能多的内存来创建整数array，这可能会导致内存错误并导致崩溃程序。这是一个记忆饥饿的野兽。</p>\n    <h4 id=\"26python\">26. 你如何在 python 中写注释？</h4>\n    <p>Python 中的注释以＃字符开头。但是，有时候，使用 docstrings（三重引号中包含的字符串）进行注释。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-comment\">#Comments in python start like this</span>\n<span class=\"hljs-keyword\">print</span>（“comment <span class=\"hljs-keyword\">in</span> python start <span\n                class=\"hljs-keyword\">with</span> a <span class=\"hljs-comment\">#”）</span>\nOutput：comment <span class=\"hljs-keyword\">in</span> python start <span class=\"hljs-keyword\">with</span> a <span\n                class=\"hljs-comment\">#</span>\n</code></pre>\n    <h4 id=\"27picklingunpickling\">27. 什么是 pickling 和 unpickling？</h4>\n    <p>Pickle 模块接受任何 Python 对象并将其转换为字符串表示形式，并使用 dump 函数将其转储到文件中，此过程称为 pickling。从存储的字符串表示中检索原始 Python 对象的过程称为\n        unpickling。</p>\n    <h4 id=\"28python\">28. python 中的生成器是什么？</h4>\n    <p>返回一组可迭代项的函数称为生成器。</p>\n    <h4 id=\"29\">29. 你如何把字符串的第一个字母大写？</h4>\n    <p>在 Python 中，capitalize（）方法将字符串的第一个字母大写。如果字符串在开头已经包含大写字母，那么它将返回原始字符串。</p>\n    <h4 id=\"30\">30. 如何将字符串转换为全小写？</h4>\n    <p>要将字符串转换为小写，可以使用 lower（）函数。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs bash\">stg=<span class=\"hljs-string\">'ABCD'</span>\n<span class=\"hljs-built_in\">print</span>(stg.lower())\nOutput： abcd\n</code></pre>\n    <h4 id=\"31python\">31. 如何在 python 中注释多行？</h4>\n    <p>多行注释出现在多行中。所有要评论的行都要以＃为前缀。你还可以使用非常好的 快捷方式来注释多行。你需要做的就是按住 Ctrl 键并在每个想要包含＃字符的地方左键单击并键入一次＃。这将注释你引入光标的所有行。</p>\n    <h4 id=\"32pythondocstrings\">32. Python 中的 Docstrings 是什么？</h4>\n    <p>Docstrings 实际上不是评论，它们是文档字符串。这些文档字符串在三引号内。它们没有分配给任何变量，因此有时也用于评论的目的。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-string\">\"\"\"\nUsing docstring as a comment.\nThis code divides 2 numbers\n\"\"\"</span>\nx=<span class=\"hljs-number\">8</span>\ny=<span class=\"hljs-number\">4</span>\nz=x/y\nprint(z)\nOutput： <span class=\"hljs-number\">2.0</span>\n</code></pre>\n    <h4 id=\"33isnotin\">33. 操作符 is、not 和 in 的目的是什么？</h4>\n    <p>操作符是特殊功能。它们采用一个或多个值并产生相应的结果。</p>\n    <ul>\n        <li><p>is：当 2 个操作数为 true 时返回 true（例如：“a”是'a'）</p></li>\n        <li><p>not：返回布尔值的倒数</p></li>\n        <li><p>in：检查某个元素是否存在于某个序列中</p></li>\n    </ul>\n    <h4 id=\"34pythonhelpdir\">34. Python 中 help（）和 dir（）函数的用法是什么？</h4>\n    <p>Help（）和dir（）这两个函数都可以从 Python 解释器访问，并用于查看内置函数的合并转储。 </p>\n    <ul>\n        <li>Help（）函数：help（）函数用于显示文档字符串，还可以帮助你查看与模块，关键字，属性等相关的帮助。</li>\n        <li>Dir（）函数：dir（）函数用于显示定义的符号。</li>\n    </ul>\n    <h4 id=\"35python\">35. 每当 Python 退出时，为什么不是所有的内存都被解除分配？</h4>\n    <ul>\n        <li>每当 Python 退出时，尤其是那些对其他对象具有循环引用的 Python 模块或者从全局名称空间引用的对象并不总是被解除分配或释放。</li>\n        <li>无法解除分配C库保留的那些内存部分。</li>\n        <li>退出时，由于拥有自己的高效清理机制，Python 会尝试取消分配/销毁其他所有对象。</li>\n    </ul>\n    <h4 id=\"36pythondictionary\">36. Python 中的字典（dictionary）是什么？</h4>\n    <p>Python 中的内置数据类型称为字典（dictionary）。它定义了键和值之间的一对一关系。字典包含一对键及其对应的值。字典由键索引。</p>\n    <p>我们来举个例子：</p>\n    <p>以下示例包含一些键，Country, Capital 和 PM。它们的相应值分别是 India, Delhi 和 Modi respectively。</p>\n    <pre><code class=\"hljs bash\">dict={<span class=\"hljs-string\">'Country'</span>:<span\n            class=\"hljs-string\">'India'</span>,<span class=\"hljs-string\">'Capital'</span>:<span class=\"hljs-string\">'Delhi'</span>,<span\n            class=\"hljs-string\">'PM'</span>:<span class=\"hljs-string\">'Modi'</span>}\n<span class=\"hljs-built_in\">print</span> dict[Country]\nIndia\n\n<span class=\"hljs-built_in\">print</span> dict[Capital]\nDelhi\n\n<span class=\"hljs-built_in\">print</span> dict[PM]\nModi\n</code></pre>\n    <h4 id=\"37python\">37. 如何在 python 中使用三元运算符？</h4>\n    <p>Ternary 运算符是用于显示条件语句的运算符。这包含 true 或 false 值，并且必须为其评估语句。</p>\n    <p>语法：</p>\n    <p>三元运算符将被给出为：</p>\n    <pre><code class=\"hljs cs\">[<span class=\"hljs-meta\">on_true</span>] <span class=\"hljs-keyword\">if</span> [expression] <span\n            class=\"hljs-keyword\">else</span> [on_false] x，y = <span class=\"hljs-number\">25</span>,<span\n            class=\"hljs-number\">50</span>big = x <span class=\"hljs-keyword\">if</span> x &lt;y <span\n            class=\"hljs-keyword\">else</span> y\n</code></pre>\n    <p>例：</p>\n    <p>表达式的计算方式与 x &lt;y else y 一样，在这种情况下，如果 x &lt;y 为真，则返回值为 big = x，如果不正确则返回 big = y 作为结果。</p>\n    <h4 id=\"38argskwargs\">38. 这是什么意思：* args，** kwargs？我们为什么要用呢？</h4>\n    <p>当我们不确定将多少个参数传递给函数，或者我们想要将存储的列表或参数元组传递给函数时，我们使用* args。*<em>当我们不知道将多少关键字参数传递给函数时使用 kwargs，或者它可以用于将字典的值作为关键字参数传递。标识符\n        args 和 kwargs 是一个约定，你也可以使用</em> bob 和 ** billy，但这不是明智之举。</p>\n    <h4 id=\"39len\">39. len（）的作用是什么？</h4>\n    <p>用于确定字符串，列表，array等的长度。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs makefile\">stg='ABCD'\nlen(stg)\n</code></pre>\n    <h4 id=\"40pythonresplitsubsubn\">40. Python 中“re”模块的 split（），sub（），subn（）这三个方法的作用是什么？</h4>\n    <p>要修改字符串，Python 的“re”模块提供了 3 种方法。他们是：</p>\n    <ul>\n        <li>split（） - 使用正则表达式模式将给定字符串“拆分”到列表中。</li>\n        <li>sub（） - 查找正则表达式模式匹配的所有子字符串，然后用不同的字符串替换它们</li>\n        <li>subn（） - 它类似于sub（），并且还返回新字符串和替换的次数\u0010。</li>\n    </ul>\n    <h4 id=\"41\">41. 什么是负指数，为什么使用它们？</h4>\n    <p>Python 中的序列被编入索引，它由正数和负array成。积极的数字使用'0'作为第一个索引，'1'作为第二个索引，进程继续使用。</p>\n    <p>负数的索引从'-1'开始，表示序列中的最后一个索引，' - 2'作为倒数第二个索引，序列像正数一样前进。</p>\n    <p>负索引用于从字符串中删除任何换行符，并允许该字符串除了作为S [： - 1]给出的最后一个字符。负索引还用于显示索引以正确的顺序表示字符串。</p>\n    <h4 id=\"42python\">42. 什么是 Python 包？</h4>\n    <p>Python 包是包含多个模块的命名空间。</p>\n    <h4 id=\"43python\">43. 如何在 Python 中删除文件？</h4>\n    <p>要在 Python 中删除文件，你需要导入操作系统模块。之后，你需要使用os.remove（）函数。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> os\nos.remove(<span class=\"hljs-string\">\"xyz.txt\"</span>)\n</code></pre>\n    <h4 id=\"44python\">44. 什么是 python 的内置类型？</h4>\n    <p>Python 中的内置类型如下：</p>\n    <ul>\n        <li>整型</li>\n        <li>浮点</li>\n        <li>复数</li>\n        <li>字符串</li>\n        <li>布尔</li>\n        <li>内置功能</li>\n    </ul>\n    <h4 id=\"45numpypython\">45. NumPy 阵列在（嵌套）Python 列表中提供了哪些优势？</h4>\n    <ul>\n        <li>Python 的列表是高效的通用容器。它们支持（相当）有效的插入，删除，追加和连接，Python 的列表推导使它们易于构造和操作。</li>\n        <li>它们有一定的局限性：它们不支持元素化加法和乘法等“向量化”操作，并且它们可以包含不同类型的对象这一事实意味着 Python 必须存储每个元素的类型信息，并且必须在操作时执行类型调度代码在每个元素上。</li>\n        <li>NumPy 不仅效率更高; 它也更方便。你可以免费获得大量的向量和矩阵运算，这有时可以避免不必要的工作。它们也得到有效实施。</li>\n        <li>NumPy array更快，你可以使用 NumPy、FFT、卷积、快速搜索、基本统计、线性代数、直方图等内置。</li>\n    </ul>\n    <h4 id=\"46pythonarray\">46. 如何将值添加到 python array？</h4>\n    <p>可以使用 append（）， extend（） 和 insert（i，x） 函数将元素添加到array中 。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs php\">a=arr.<span class=\"hljs-keyword\">array</span>(<span\n            class=\"hljs-string\">'d'</span>, [<span class=\"hljs-number\">1.1</span> , <span class=\"hljs-number\">2.1</span> ,<span\n            class=\"hljs-number\">3.1</span>] )\na.append(<span class=\"hljs-number\">3.4</span>)\n<span class=\"hljs-keyword\">print</span>(a)\na.extend([<span class=\"hljs-number\">4.5</span>,<span class=\"hljs-number\">6.3</span>,<span class=\"hljs-number\">6.8</span>])\n<span class=\"hljs-keyword\">print</span>(a)\na.insert(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3.8</span>)\n<span class=\"hljs-keyword\">print</span>(a)\nOutput：\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">1.1</span>,<span\n                class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.1</span>,<span class=\"hljs-number\">3.4</span>]）\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">1.1</span>,<span\n                class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.1</span>,<span class=\"hljs-number\">3.4</span>,<span\n                class=\"hljs-number\">4.5</span>,<span class=\"hljs-number\">6.3</span>,<span class=\"hljs-number\">6.8</span>]）\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">1.1</span>,<span\n                class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.8</span>,<span class=\"hljs-number\">3.1</span>,<span\n                class=\"hljs-number\">3.4</span>,<span class=\"hljs-number\">4.5</span>,<span class=\"hljs-number\">6.3</span>,<span\n                class=\"hljs-number\">6.8</span>]）\n</code></pre>\n    <h4 id=\"47pythonarray\">47. 如何删除 python array的值？</h4>\n    <p>可以使用 pop（） 或 remove（） 方法删除array元素 。这两个函数之间的区别在于前者返回已删除的值，而后者则不返回。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs php\">a=arr.<span class=\"hljs-keyword\">array</span>(<span\n            class=\"hljs-string\">'d'</span>, [<span class=\"hljs-number\">1.1</span>, <span class=\"hljs-number\">2.2</span>, <span\n            class=\"hljs-number\">3.8</span>, <span class=\"hljs-number\">3.1</span>, <span class=\"hljs-number\">3.7</span>, <span\n            class=\"hljs-number\">1.2</span>, <span class=\"hljs-number\">4.6</span>])\n<span class=\"hljs-keyword\">print</span>(a.pop())\n<span class=\"hljs-keyword\">print</span>(a.pop(<span class=\"hljs-number\">3</span>))\na.remove(<span class=\"hljs-number\">1.1</span>)\n<span class=\"hljs-keyword\">print</span>(a)\nOutput：\n\n<span class=\"hljs-number\">4.6</span>\n\n<span class=\"hljs-number\">3.1</span>\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">2.2</span>,<span\n                class=\"hljs-number\">3.8</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">1.2</span>]）\n</code></pre>\n    <h4 id=\"48pythonoops\">48. Python 有 OOps 概念吗？</h4>\n    <p>Python 是一种面向对象的编程语言。这意味着可以通过创建对象模型在 python 中解决任何程序。但是，Python 可以被视为程序语言和结构语言。</p>\n    <h4 id=\"49\">49. 深拷贝和浅拷贝有什么区别？</h4>\n    <p>\n        创建新实例类型时使用浅拷贝，并保留在新实例中复制的值。浅拷贝用于复制引用指针，就像复制值一样。这些引用指向原始对象，并且在类的任何成员中所做的更改也将影响它的原始副本。浅拷贝允许更快地执行程序，它取决于所使用的数据的大小。</p>\n    <p>\n        深层复制用于存储已复制的值。深层复制不会将引用指针复制到对象。它引用一个对象，并存储一些其他对象指向的新对象。原始副本中所做的更改不会影响使用该对象的任何其他副本。由于为每个被调用的对象创建了某些副本，因此深层复制会使程序的执行速度变慢。</p>\n    <h4 id=\"50python\">50. 如何在 Python 中实现多线程？</h4>\n    <ul>\n        <li>Python 有一个多线程包，但是如果你想要多线程来加速你的代码，那么使用它通常不是一个好主意。</li>\n        <li>Python 有一个名为 Global Interpreter Lock（GIL）的结构。GIL 确保每次只能执行一个“线程”。一个线程获取 GIL，做一点工作，然后将 GIL 传递到下一个线程。</li>\n        <li>这种情况很快发生，因此对于人眼看来，你的线程似乎并行执行，但它们实际上只是轮流使用相同的 CPU 核心。</li>\n        <li>所有这些 GIL 传递都增加了执行的开销。这意味着如果你想让代码运行得更快，那么使用线程包通常不是一个好主意。</li>\n    </ul>\n    <h4 id=\"51python\">51. 在 python 中编译和链接的过程是什么？</h4>\n    <p>编译和链接允许正确编译新扩展而不会出现任何错误，并且只有在通过编译过程时才能进行链接。如果使用动态加载，则它取决于系统提供的样式。python 解释器可用于提供配置设置文件的动态加载，并将重建解释器。</p>\n    <p>这需要的步骤如下：</p>\n    <ol>\n        <li>使用任何名称以及系统编译器支持的任何语言创建文件。例如 file.c或 file.cpp</li>\n        <li>将此文件放在正在使用的发行版的 Modules /目录中。</li>\n        <li>在 Modules /目录中存在的 Setup.local 文件中添加一行。</li>\n        <li>使用 spam file.o 运行该文件</li>\n        <li>通过在顶级目录上使用 make 命令成功运行此重建解释器之后。</li>\n        <li>如果文件已更改，则使用命令“make Makefile”运行rebuildMakefile。</li>\n    </ol>\n    <h4 id=\"52python\">52. 什么是 Python 库？举几个例子。</h4>\n    <p>Python 库是 Python 包的集合。一些主要使用的 python 库是 - Numpy，Pandas，Matplotlib，Scikit-learn 等等。</p>\n    <h4 id=\"53\">53. 什么是拆分用于？</h4>\n    <p>split（）方法用于在 Python 中分隔给定的字符串。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs perl\">a=<span class=\"hljs-string\">\"edureka python\"</span>\n<span class=\"hljs-keyword\">print</span>(a.<span class=\"hljs-keyword\">split</span>())\nOutput：  [<span class=\"hljs-string\">'edureka'</span>，<span class=\"hljs-string\">'python'</span>]\n</code></pre>\n    <h4 id=\"54python\">54. 如何在 python 中导入模块？</h4>\n    <p>可以使用 import 关键字导入模块。你可以通过三种方式导入模块 -</p>\n    <p>例：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> array           <span\n            class=\"hljs-comment\">#importing using the original module name</span>\n<span class=\"hljs-keyword\">import</span> array <span class=\"hljs-keyword\">as</span> arr    <span class=\"hljs-comment\"># importing using an alias name</span>\n<span class=\"hljs-keyword\">from</span> array <span class=\"hljs-keyword\">import</span> *    <span class=\"hljs-comment\">#imports everything present in the array module</span>\n</code></pre>\n    <h3 id=\"oops\">OOPS 面试问题</h3>\n    <h4 id=\"55python\">55. 用一个例子解释 Python 中的继承。</h4>\n    <p>继承允许一个类获得另一个类的所有成员（比如属性和方法）。继承提供代码可重用性，使创建和维护应用程序更容易。我们继承的类称为超类，继承的类称为派生/子类。</p>\n    <p>它们是 Python 支持的不同类型的继承：</p>\n    <ul>\n        <li>单一继承 - 派生类获取单个超类的成员。</li>\n        <li>多级继承 - 从基类base1继承的派生类d1，d2继承自base2。</li>\n        <li>分层继承 - 从一个基类可以继承任意数量的子类</li>\n        <li>多重继承 - 派生类从多个基类继承。</li>\n    </ul>\n    <h4 id=\"56python\">56. 如何在 Python 中创建类？</h4>\n    <p>Python 中的类是使用 class 关键字创建的。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Employee</span>:</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n        class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-keyword\">self</span>.name = name\nE1=Employee(<span class=\"hljs-string\">\"abc\"</span>)\nprint(E1.name)\nOutput： abc\n</code></pre>\n    <h4 id=\"57\">57. 什么是猴子补丁？</h4>\n    <p>在 Python 中，术语猴子补丁仅指在运行时对类或模块的动态修改。\n        考虑以下示例：</p>\n    <pre><code class=\"m.py language-m.py\">class MyClass:\ndef f(self):\nprint \"f()\"\n</code></pre>\n    <p>然后我们可以像这样运行猴子补丁测试：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> m\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">monkey_f</span><span\n        class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"monkey_f()\"</span>\n\nm.MyClass.f = monkey_f\nobj = m.MyClass()\nobj.f()\nOutput如下：\n\nmonkey_f（）\n</code></pre>\n    <h4 id=\"58python\">58. python 是否支持多重继承？</h4>\n    <p>多重继承意味着可以从多个父类派生一个类。与 Java 不同，Python 确实支持多重继承。</p>\n    <h4 id=\"59python\">59. Python 中的多态是什么？</h4>\n    <p>多态意味着能够采取多种形式。因此，例如，如果父类具有名为 ABC 的方法，则子类也可以具有具有相同名称 ABC 的方法，该方法具有其自己的参数和变量。Python 允许多态。</p>\n    <h4 id=\"60python\">60. 在 Python 中怎样定义封装？</h4>\n    <p>封装意味着将代码和数据绑定在一起。就是使用私有化的方法，把一些属性或者是方法私有化，外部无法调用。在 Python 中，私有化属性或者方法，可以在属性、方法名字前加上双下划线。</p>\n    <h4 id=\"61python\">61. 你如何在 Python 中进行数据抽象？</h4>\n    <p>数据抽象仅提供所需的详细信息并将实现隐藏起来。它可以通过使用接口和抽象类在 Python 中实现。</p>\n    <h4 id=\"62python\">62. python 是否使用了访问说明符？</h4>\n    <p>Python 不会剥夺对实例变量或函数的访问权限。Python 规定了使用单个或双下划线为变量，函数或方法的名称添加前缀的概念，以模仿受保护和私有访问说明符的行为。 </p>\n    <h4 id=\"63python\">63. 如何在 Python 中创建一个空类？</h4>\n    <p>空类是一个没有在其块中定义的代码的类。它可以使用 pass 关键字创建 。但是，你可以在类本身之外创建此类的对象。IN PYTHON PASS 命令在执行时不执行任何操作。这是一个空语句。 </p>\n    <p>例如</p>\n    <pre><code class=\"hljs makefile\">class a:\n    pass\nobj=a()\nobj.name=<span class=\"hljs-string\">\"xyz\"</span>\nprint(<span class=\"hljs-string\">\"Name = \"</span>,obj.name)\nOutput：\n\nName = xyz\n</code></pre>\n    <h4 id=\"64object\">64. object（）有什么作用？</h4>\n    <p>它返回一个无特征的对象，它是所有类的基础。此外，它不采取任何参数。</p>\n    <h3 id=\"python-1\">基本 Python 编码</h3>\n    <h4 id=\"65python\">65. 用 Python 编写程序来执行冒泡排序算法。</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">bs</span><span class=\"hljs-params\">(a)</span>:</span>             <span\n            class=\"hljs-comment\"># a = name of list</span>\n    b=len(a)<span class=\"hljs-number\">-1</span>         <span class=\"hljs-comment\"># minus 1 because we always compare 2 adjacent values</span>\n\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(b):\n        <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> range(b-x):\n            <span class=\"hljs-keyword\">if</span> a[y]&gt;a[y+<span class=\"hljs-number\">1</span>]:\n                a[y],a[y+<span class=\"hljs-number\">1</span>]=a[y+<span class=\"hljs-number\">1</span>],a[y]\n    <span class=\"hljs-keyword\">return</span> a\na=[<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>,<span\n                class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span\n                class=\"hljs-number\">54</span>,<span class=\"hljs-number\">87</span>]\nbs(a)\n产出：  [<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span\n                class=\"hljs-number\">7</span>,<span class=\"hljs-number\">32</span>,<span\n                class=\"hljs-number\">54</span>,<span class=\"hljs-number\">87</span>]\n</code></pre>\n    <h4 id=\"66pythonstar\">66. 用 Python 编写程序来生成 Star 三角形。</h4>\n    <pre><code class=\"hljs markdown\">def pyfunc(r):\n<span class=\"hljs-code\">    for x in range(r):</span>\n<span class=\"hljs-code\">        print(' '*(r-x-1)+'*'*(2*x+1))    </span>\npyfunc(9)\nOutput：\n\n<span class=\"hljs-code\">        *</span>\n<span class=\"hljs-code\">       ***</span>\n<span class=\"hljs-code\">      *****</span>\n<span class=\"hljs-code\">     *******</span>\n<span class=\"hljs-code\">    *********</span>\n   <span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>*\n  <span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-emphasis\">***</span>\n <span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>\n<span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>**\n</code></pre>\n    <h4 id=\"67pythonfibonacci\">67. 编写一个程序，用Python生成Fibonacci系列。</h4>\n    <pre><code class=\"hljs perl\"><span class=\"hljs-comment\"># Enter number of terms needed                   #0,1,1,2,3,5....</span>\na=<span class=\"hljs-keyword\">int</span>(input(<span class=\"hljs-string\">\"Enter the terms\"</span>))\nf=<span class=\"hljs-number\">0</span>                                         <span class=\"hljs-comment\">#first element of series</span>\n<span class=\"hljs-keyword\">s</span>=<span class=\"hljs-number\">1</span>                                         <span\n                class=\"hljs-comment\">#second element of series</span>\n<span class=\"hljs-keyword\">if</span> a&lt;=<span class=\"hljs-number\">0</span>:\n    <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"The requested series is\n\"</span>,f)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">print</span>(f,<span class=\"hljs-keyword\">s</span>,end=<span\n                class=\"hljs-string\">\" \"</span>)\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">x</span> in range(<span\n                class=\"hljs-number\">2</span>,a):\n        <span class=\"hljs-keyword\">next</span>=f+<span class=\"hljs-keyword\">s</span>\n        <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-keyword\">next</span>,end=<span\n                class=\"hljs-string\">\" \"</span>)\n        f=<span class=\"hljs-keyword\">s</span>\n        <span class=\"hljs-keyword\">s</span>=<span class=\"hljs-keyword\">next</span>&lt;<span class=\"hljs-regexp\">/pre&gt;\n\nOutput：input 5 0 1 1 2 3\n</span></code></pre>\n    <h4 id=\"68python\">68. 用 Python 编写程序来检查数字是否为素数。</h4>\n    <pre><code class=\"hljs perl\">a=<span class=\"hljs-keyword\">int</span>(input(<span\n            class=\"hljs-string\">\"enter number\"</span>))\n<span class=\"hljs-keyword\">if</span> a&gt;<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">x</span> in range(<span\n                class=\"hljs-number\">2</span>,a):\n        <span class=\"hljs-keyword\">if</span>(a%x)==<span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"not prime\"</span>)\n            <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"Prime\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"not prime\"</span>)\nOutput：\n\ninput <span class=\"hljs-number\">3</span>\n\nPrime\n</code></pre>\n    <h4 id=\"69python\">69. 用 Python 编写程序来检查序列是否是回文序列。</h4>\n    <pre><code class=\"hljs makefile\">a=input(<span class=\"hljs-string\">\"enter sequence\"</span>)\nb=a[::-1]\nif a==b:\n    print(<span class=\"hljs-string\">\"palindrome\"</span>)\n<span class=\"hljs-section\">else:</span>\n    print(<span class=\"hljs-string\">\"Not a Palindrome\"</span>)\nOutput：\n\nenter sequence 323 palindrome\n</code></pre>\n    <h4 id=\"70\">70. 写一个单行，用于计算文件中大写字母的数量。即使文件太大而无法放入内存，你的代码也应该可以正常工作。</h4>\n    <p>让我们先写一个多行解决方案，然后将其转换为单行代码。</p>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">with <span class=\"hljs-title\">open</span>(<span\n            class=\"hljs-params\">SOME_LARGE_FILE</span>) <span class=\"hljs-keyword\">as</span> fh:\ncount </span>= <span class=\"hljs-number\">0</span>\ntext = fh.read()\n<span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> text:\n    <span class=\"hljs-keyword\">if</span> character.isupper():\ncount += <span class=\"hljs-number\">1</span>\n我们现在尝试将其转换为单行。\n\n<span class=\"hljs-function\">count <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"><span\n        class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> fh <span\n        class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> line <span class=\"hljs-keyword\">if</span> character.isupper(</span>))\n</span></code></pre>\n    <h4 id=\"71python\">71. 在 Python 中为数值数据集编写排序算法。</h4>\n    <p>以下代码可用于在 Python 中对列表进行排序：</p>\n    <pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">list</span> = [<span class=\"hljs-string\">\"1\"</span>, <span\n            class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"0\"</span>, <span class=\"hljs-string\">\"6\"</span>, <span\n            class=\"hljs-string\">\"9\"</span>]\n<span class=\"hljs-built_in\">list</span> = [<span class=\"hljs-keyword\">int</span>(i) <span\n                class=\"hljs-keyword\">for</span> i in <span class=\"hljs-built_in\">list</span>]\n<span class=\"hljs-built_in\">list</span>.sort()\nprint (<span class=\"hljs-built_in\">list</span>)\n</code></pre>\n    <h4 id=\"72a0a1an\">72. 查看下面的代码，记下 A0，A1，... An 的最终值。</h4>\n    <pre><code class=\"hljs makefile\">A0 = dict(zip(('a','b','c','d','e'),(1,2,3,4,5)))\nA1 = range(10)A2 = sorted([i for i in A1 if i in A0])\nA3 = sorted([A0[s] for s in A0])\nA4 = [i for i in A1 if i in A3]\nA5 = {i:i*i for i in A1}\nA6 = [[i,i*i] for i in A1]\nprint(A0,A1,A2,A3,A4,A5,A6)\n\n以下是 A0，A1，... A6 的最终 Output\n\nA0 = {'a'：1，'c'：3，'b'：2，'e'：5，'d'：4}\nA1 =range（0,10）\nA2 = []\nA3 = [1,2,3,4,5]\nA4 = [1,2,3,4,5]\nA5 = {0：0,1：1,2：4,3：9,4：16,5：25,6：36,7：49,8：64,9：81}\nA6 = [[0,0]，[1,1]，[2,4]，[3,9]，[4,16]，[5,25]，[6,36]，[7,49] ，[8,64]，[9,81]]\n</code></pre>\n    <h3 id=\"python-2\">Python 库面试问题</h3>\n    <h4 id=\"73flask\">73. 解释 Flask 是什么及其好处？</h4>\n    <p>Flask 是基于“Werkzeug，Jinja2 和良好意图”BSD 许可证的 Python 网络微框架。Werkzeug 和 Jinja2\n        是它的两个依赖项。这意味着它对外部库几乎没有依赖性。它使框架轻松，同时有一点依赖更新和更少的安全漏洞。</p>\n    <p>会话基本上允许你记住从一个请求到另一个请求的信息。在一个瓶子中，会话使用签名的 cookie，以便用户可以查看会话内容并进行修改。如果只有密钥 Flask.secret_key，则用户可以修改会话。</p>\n    <h4 id=\"74djangoflask\">74. Django 比 Flask 好吗？</h4>\n    <p>Django 和 Flask 将 Web 浏览器中输入的 URL 或地址映射到 Python 中的函数。 </p>\n    <p>与 Django 相比，Flask 要简单得多，但 Flask 并没有为你做很多事情意味着你需要指定细节，而 Django 为你做了很多事情，你不需要做太多工作。Django 由预编写的代码组成，用户需要分析这些代码，而\n        Flask 则允许用户创建自己的代码，因此，使代码更容易理解。从技术上讲，两者都同样好，都有自己的优点和缺点。</p>\n    <h4 id=\"75djangopyramidflask\">75. 提到 Django，Pyramid 和 Flask 之间的差异。</h4>\n    <ul>\n        <li>Flask 是一个“微框架”，主要用于具有更简单要求的小型应用程序。在烧瓶中，你必须使用外部库。Flask 已准备好使用。</li>\n        <li>Pyramid 适用于大型应用程序。它提供了灵活性，并允许开发人员为他们的项目使用正确的工具。开发人员可以选择数据库，URL 结构，模板样式等。金字塔是可配置的。</li>\n        <li>Django 也可以像 Pyramid 一样用于更大的应用程序。它包括一个ORM。</li>\n    </ul>\n    <h4 id=\"76django\">76. 讨论 Django 架构。</h4>\n    <p>Django MVT 模式：</p>\n    <p><img src=\"https://images.gitbook.cn/6ec77050-85c0-11e9-9a8d-f9d4f0d85b82\" alt=\"enter image description here\"></p>\n    <p>开发人员提供模型，视图和模板，然后将其映射到URL，Django 可以为用户提供服务。</p>\n    <h4 id=\"77django\">77. 解释如何在 Django 中设置数据库。</h4>\n    <p>你可以使用命令 edit mysite / setting.py，它是一个普通的 python 模块，模块级别代表 Django 设置。</p>\n    <p>Django 默认使用 SQLite; 对于 Django 用户来说这很容易，因此不需要任何其他类型的安装。如果你的数据库选择不同，则必须使用 DATABASE'default' 项中的以下键来匹配你的数据库连接设置。</p>\n    <ul>\n        <li>引擎：你可以使用\n            'django.db.backends.sqlite3'，'django.db.backeneds.mysql'，'django.db.backends.postgresql_psycopg2'，'django.db.backends.oracle'等来更改数据库。\n        </li>\n        <li>名称：数据库的名称。如果你使用 SQLite 作为数据库，那么在这种情况下，数据库将是你计算机上的文件，Name 应该是完整的绝对路径，包括该文件的文件名。</li>\n        <li>如果你不选择 SQLite 作为数据库，则必须添加密码，主机，用户等设置。</li>\n    </ul>\n    <p>Django 使用 SQLite 作为默认数据库，它将数据作为单个文件存储在文件系统中。如果你有数据库服务器-PostgreSQL，MySQL，Oracle，MSSQL-并且想要使用它而不是\n        SQLite，那么使用数据库的管理工具为你的 Django 项目创建一个新的数据库。无论哪种方式，在你的（空）数据库到位的情况下，剩下的就是告诉 Django 如何使用它。这是项目的 settings.py\n        文件的来源。</p>\n    <p>我们将以下代码行添加到 setting.py 文件中：</p>\n    <pre><code class=\"hljs cs\">DATABASES = {\n     <span class=\"hljs-string\">'default'</span>: {\n          <span class=\"hljs-string\">'ENGINE'</span> : <span class=\"hljs-string\">'django.db.backends.sqlite3'</span>,\n          <span class=\"hljs-string\">'NAME'</span> : os.path.<span class=\"hljs-keyword\">join</span>(BASE_DIR, <span\n                class=\"hljs-string\">'db.sqlite3'</span>),\n     }\n}\n</code></pre>\n    <h4 id=\"78djangoview\">78. 举例说明如何在 Django 中编写 VIEW？</h4>\n    <p>这是我们在 Django 中使用 write 一个视图的方法：</p>\n    <pre><code class=\"hljs xml\">from django.http import HttpResponse\nimport datetime\n\ndef Current_datetime(request):\n     now = datetime.datetime.now()\n     html = \"<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><span class=\"hljs-tag\">&lt;<span\n                class=\"hljs-name\">body</span>&gt;</span>It is now %s<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><span\n                class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span> % now\n     return HttpResponse(html)\n</code></pre>\n    <h4 id=\"79django\">79. 提及 Django 模板的组成部分。</h4>\n    <p>模板是一个简单的文本文件。它可以创建任何基于文本的格式，如 XML、CSV、HTML 等。模板包含在评估模板时替换为值的变量和控制模板逻辑的标记（％tag％）。</p>\n    <p><img src=\"https://images.gitbook.cn/984aba40-85c0-11e9-9344-293841b71658\" alt=\"enter image description here\"></p>\n    <h4 id=\"80django\">80. 在 Django 框架中解释会话的使用？</h4>\n    <p>Django 提供了一个会话，允许你基于每个站点访问者存储和检索数据。Django 通过在客户端放置会话 ID cookie 并在服务器端存储所有相关数据来抽象发送和接收 cookie 的过程。</p>\n    <p><img src=\"https://images.gitbook.cn/a31e0760-85c0-11e9-9a4b-7f98565be244\" alt=\"enter image description here\"></p>\n    <p>所以数据本身并不存储在客户端。从安全角度来看，这很好。</p>\n    <h4 id=\"81django\">81. 列出 Django 中的继承样式。</h4>\n    <p>在 Django 中，有三种可能的继承样式：</p>\n    <ul>\n        <li>抽象基类：当你只希望父类包含你不想为每个子模型键入的信息时，使用此样式。</li>\n        <li>多表继承：使用此样式如果要对现有模型进行子类化，并且需要每个模型都有自己的数据库表。</li>\n        <li>代理模型：你可以使用此模型，如果你只想修改模型的Python级别行为，而无需更改模型的字段。</li>\n    </ul>\n    <h3 id=\"webscrapingpython\">Web Scraping - Python 面试问题</h3>\n    <h4 id=\"82url\">82. 如何使用我已经知道的 URL 地址本地保存图像？</h4>\n    <p>我们将使用以下代码从 URL 地址本地保存图像</p>\n    <pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">import</span> <span\n            class=\"hljs-selector-tag\">urllib</span><span class=\"hljs-selector-class\">.request</span>\n<span class=\"hljs-selector-tag\">urllib</span><span class=\"hljs-selector-class\">.request</span><span\n                class=\"hljs-selector-class\">.urlretrieve</span>(\"<span class=\"hljs-selector-tag\">URL</span>\", \"<span\n                class=\"hljs-selector-tag\">local-filename</span><span class=\"hljs-selector-class\">.jpg</span>\")\n</code></pre>\n    <h4 id=\"83google\">83. 如何获取任何网址或网页的 Google 缓存时限？</h4>\n    <p>使用以下 URL 格式：</p>\n    <p>http://webcache.googleusercontent.com/search?q=cache:URLGOESHERE</p>\n    <p>请务必将“URLGOESHERE”替换为你要检索其缓存的页面或网站的正确网址，并查看时间。例如，要查看 edureka.co 的 Google Webcache 时代，你需要使用以下网址：</p>\n    <p>http://webcache.googleusercontent.com/search?q=cache:edureka.co</p>\n    <h4 id=\"84imdb250\">84. 你需要从 IMDb 前 250 电影页面中删除数据。它应该只有字段电影名称，年份和评级。</h4>\n    <p>我们将使用以下代码行：</p>\n    <pre><code class=\"hljs perl\">from bs4 import BeautifulSoup\n\nimport requests\nimport sys\n\nurl = <span class=\"hljs-string\">'http://www.imdb.com/chart/top'</span>\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text)\n<span class=\"hljs-keyword\">tr</span> = soup.findChildren(<span class=\"hljs-string\">\"tr\"</span>)\n<span class=\"hljs-keyword\">tr</span> = iter(<span class=\"hljs-keyword\">tr</span>)\n<span class=\"hljs-keyword\">next</span>(<span class=\"hljs-keyword\">tr</span>)\n\n<span class=\"hljs-keyword\">for</span> movie in <span class=\"hljs-keyword\">tr</span>:\ntitle = movie.find(<span class=\"hljs-string\">'td'</span>, {<span class=\"hljs-string\">'class'</span>: <span\n                class=\"hljs-string\">'titleColumn'</span>} ).find(<span class=\"hljs-string\">'a'</span>).contents[<span\n                class=\"hljs-number\">0</span>]\nyear = movie.find(<span class=\"hljs-string\">'td'</span>, {<span class=\"hljs-string\">'class'</span>: <span\n                class=\"hljs-string\">'titleColumn'</span>} ).find(<span class=\"hljs-string\">'span'</span>, {<span\n                class=\"hljs-string\">'class'</span>: <span class=\"hljs-string\">'secondaryInfo'</span>}).contents[<span\n                class=\"hljs-number\">0</span>]\nrating = movie.find(<span class=\"hljs-string\">'td'</span>, {<span class=\"hljs-string\">'class'</span>: <span\n                class=\"hljs-string\">'ratingColumn imdbRating'</span>} ).find(<span class=\"hljs-string\">'strong'</span>).contents[<span\n                class=\"hljs-number\">0</span>]\nrow = title + <span class=\"hljs-string\">' - '</span> + year + <span class=\"hljs-string\">' '</span> + <span\n                class=\"hljs-string\">' '</span> + rating\n\n<span class=\"hljs-keyword\">print</span>(row)\n</code></pre>\n    <p>上述代码将有助于从 IMDb 的前 250 名列表中删除数据</p>\n    <h3 id=\"python-3\">数据分析 - Python 面试问题</h3>\n    <h4 id=\"85pythonmap\">85. 什么是 Python 中的 map 函数？</h4>\n    <p>map 函数执行作为第一个参数给出的函数，该函数作为第二个参数给出的 iterable 的所有元素。如果给定的函数接受多于 1 个参数，则给出了许多迭代。</p>\n    <h4 id=\"86pythonnumpy\">86. python numpy 比列表更好吗？</h4>\n    <p>我们使用 python numpy array而不是列表，原因如下：</p>\n    <ul>\n        <li>减少记忆</li>\n        <li>快速</li>\n        <li>方便</li>\n    </ul>\n    <h4 id=\"87numpyarrayn\">87. 如何在 NumPy array中获得 N 个最大值的索引？</h4>\n    <p>我们可以使用下面的代码在 NumPy array中获得 N 个最大值的索引：</p>\n    <pre><code class=\"hljs markdown\">import numpy as np\narr = np.array([1, 3, 2, 4, 5])\nprint(arr.argsort()[<span class=\"hljs-string\">-3:</span>][<span class=\"hljs-symbol\">::-1</span>])\noutput：\n\n[4 3 1]\n</code></pre>\n    <h4 id=\"88pythonnumpy\">88. 你如何用 Python / NumPy 计算百分位数？</h4>\n    <p>我们可以使用以下代码计算百分位数</p>\n    <pre><code class=\"hljs makefile\">import numpy as np\na = np.array([1,2,3,4,5])\np = np.percentile(a, 50) <span class=\"hljs-comment\">#Returns 50th percentile, e.g. median</span>\nprint(p)\noutput：\n\n3\n</code></pre>\n    <h4 id=\"89numpyscipy\">89. NumPy 和 SciPy 有什么区别？</h4>\n    <ul>\n        <li>在理想的世界中，NumPy 只包含array数据类型和最基本的操作：索引，排序，重新整形，基本元素函数等等。</li>\n        <li>所有数字代码都将驻留在 SciPy 中。然而，NumPy 的一个重要目标是兼容性，因此 NumPy 试图保留其前任任何一个支持的所有功能。</li>\n        <li>因此，NumPy 包含一些线性代数函数，即使它们更恰当地属于 SciPy。无论如何，SciPy 包含更多全功能的线性代数模块版本，以及许多其他数值算法。</li>\n        <li>如果你使用 python 进行科学计算，你应该安装 NumPy 和 SciPy。大多数新功能属于 SciPy 而非 NumPy。</li>\n    </ul>\n    <h4 id=\"90numpyscipy3d\">90. 如何使用 NumPy / SciPy 制作 3D 绘图/可视化？</h4>\n    <p>与 2D 绘图一样，3D 图形超出了 NumPy 和 SciPy 的范围，但就像 2D 情况一样，存在与 NumPy 集成的包。Matplotlib 在 mplot3d 子包中提供基本的 3D 绘图，而 Mayavi\n        使用功能强大的 VTK 引擎提供各种高质量的 3D 可视化功能。</p>\n    <h4 id=\"91n20\">91. 检查给定数字n是否为2或0的幂</h4>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">check_pow_2</span>(<span\n            class=\"hljs-params\">num</span>):\n    <span class=\"hljs-keyword\">if</span> num </span>== <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">if</span> num &amp; (num - <span class=\"hljs-number\">1</span>) == <span\n                class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n\n\n<span class=\"hljs-keyword\">switch</span> = {\n    <span class=\"hljs-number\">0</span>: <span class=\"hljs-string\">\"Number is 0\"</span>,\n    <span class=\"hljs-number\">1</span>: <span class=\"hljs-string\">\"Number is a power of 2\"</span>,\n    <span class=\"hljs-number\">-1</span>: <span class=\"hljs-string\">\"Number is neither a power of 2 nor 0\"</span>\n}\n<span class=\"hljs-keyword\">case</span> = check_pow_2(<span class=\"hljs-number\">16</span>)\n\nprint(<span class=\"hljs-keyword\">switch</span>[<span class=\"hljs-keyword\">case</span>])\n</code></pre>\n    <h4 id=\"92ab\">92. 计算将A转换为B所需的位数</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">count_bits_flip</span><span class=\"hljs-params\">(a, b)</span>:</span>\n    <span class=\"hljs-comment\"># XOR a and b to get 1 on opposite value bit position</span>\n    c = a ^ b\n\n    <span class=\"hljs-comment\"># initialise the counter for 1</span>\n    count = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># count the number of 1s while there is 1 in a ^ b</span>\n    <span class=\"hljs-keyword\">while</span> c != <span class=\"hljs-number\">0</span>:\n        count += <span class=\"hljs-number\">1</span>\n        c &amp;= (c<span class=\"hljs-number\">-1</span>)\n\n    <span class=\"hljs-comment\"># return the count of 1s</span>\n    <span class=\"hljs-keyword\">return</span> count\n<span class=\"hljs-comment\"># 2 = 0010</span>\n<span class=\"hljs-comment\"># 8 = 1000</span>\nprint(count_bits_flip(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>))\n</code></pre>\n    <h4 id=\"93array\">93. 在重复元素array中查找两个非重复元素</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">find_non_repeating_numbers</span><span class=\"hljs-params\">(arr)</span>:</span>\n    xor = arr[<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, len(arr)):\n        xor ^= arr[i]\n\n    right_set_bit = xor &amp; ~(xor<span class=\"hljs-number\">-1</span>)\n    first = <span class=\"hljs-number\">0</span>\n    second = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> arr:\n        <span class=\"hljs-keyword\">if</span> i &amp; right_set_bit:\n            first ^= i\n        <span class=\"hljs-keyword\">else</span>:\n            second ^= i\n\n    <span class=\"hljs-keyword\">return</span> first, second\n\n\narr = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span\n                class=\"hljs-number\">9</span>, <span class=\"hljs-number\">11</span>, <span\n                class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>]\nprint(find_non_repeating_numbers(arr))\n</code></pre>\n    <h4 id=\"94\">94. 找到具有相同设置位数的下一个较大和下一个较小的数字</h4>\n    <p>例子：</p>\n    <pre><code class=\"hljs python\">num = <span class=\"hljs-number\">6</span> bin = <span class=\"hljs-number\">110</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">next_greater</span><span\n        class=\"hljs-params\">(num)</span>:</span>\n    res = num\n    <span class=\"hljs-keyword\">if</span> num != <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-comment\"># Find the right most 1 position</span>\n        <span class=\"hljs-comment\"># Ex. right_one = 2 bin = 10</span>\n        right_one = num &amp; -num\n\n        <span class=\"hljs-comment\"># get the left pattern to merge</span>\n        <span class=\"hljs-comment\"># Ex. left_pattern = 8 bin = 1000</span>\n        left_pattern = num + right_one\n\n        <span class=\"hljs-comment\"># get the right patten to merge</span>\n        <span class=\"hljs-comment\"># Ex. right_pattern = 1 bin = 0001</span>\n        right_pattern = (num ^ left_pattern) &gt;&gt; (right_one + <span class=\"hljs-number\">1</span>)\n\n        <span class=\"hljs-comment\"># OR both the patterns</span>\n        <span class=\"hljs-comment\"># Ex. res = 9 bin = 1001</span>\n        res = left_pattern | right_pattern\n\n    <span class=\"hljs-keyword\">return</span> res\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">next_smaller</span><span\n        class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> ~next_greater(~num)\n\n\nprint(next_greater(<span class=\"hljs-number\">6</span>))\nprint(next_smaller(<span class=\"hljs-number\">6</span>))\n</code></pre>\n    <h4 id=\"95nw\">95. 给定 n 个项目的重量和值，将这些物品放入容量为 W 的背包中背包中的最大总价值。</h4>\n    <p>换句话说，给定两个整数array val [0..n-1] 和 wt [0..n-1]分别代表与 n 项相关的值和权重。也给定一个表示背包容量的整数 W，找出 val [] 的最大值子集\n        这样，这个子集的权重之和小于或等于 W. 你不能破坏一个项目，要么选择完整的项目，要么不选择它（0-1 属性）。</p>\n    <pre><code class=\"hljs shell\">def knapSack(W, wt, val, size):\n    k = [[0 for i in range(W+1)] for i in range(size+1)]\n    for i in range(size+1):\n        for w in range(W+1):\n            if i == 0 or w == 0:\n                k[i][w] = 0\n            elif wt[i-1] &lt;= w:\n                k[i][w] = max(val[i-1] + k[i-1][w-wt[i-1]], k[i-1][w])\n            else:\n                k[i][w] = k[i-1][w]\n\n    for w in k:\n        print(w)\n\n    return k\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> def findElementsInSack(W, matrix, wt, val, size):</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     i = size</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     row = W</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     arr = []</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     <span class=\"hljs-keyword\">while</span> i &gt; 0:</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-built_in\">print</span>(matrix[i][row] - matrix[i-1][row - wt[i-1]] )</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-built_in\">print</span>(val[i-1])</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-keyword\">if</span> matrix[i][row] - matrix[i-1][row - wt[i-1]] == val[i-1]:</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             arr.append(val[i-1])</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             i -= 1</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             row -= wt[i-1]</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-keyword\">else</span>:</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             i -= 1</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"></span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     <span class=\"hljs-built_in\">return</span> arr</span>\n\nprice = [60, 100, 120]\nwt = [1, 2, 3]\nW = 5\nn = len(price)\nk = knapSack(W, wt, price, n)\nprint(k[n][W])\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> <span class=\"hljs-built_in\">print</span>(findElementsInSack(W, k, wt, price, n))</span>\n</code></pre>\n    <h4 id=\"96nn\">96. 给定一根长度为 n 英寸的杆和一系列价格，其中包含所有尺寸小于 n 的尺寸的价格。确定通过切割杆和销售件可获得的最大值。</h4>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">cutting_rod</span>(<span\n            class=\"hljs-params\">prices, n</span>):\n    dp </span>= [<span class=\"hljs-number\">0</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span\n            class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">n+<span\n            class=\"hljs-number\">1</span></span>)]\n    dp[0] </span>= <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n            class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, n+<span\n            class=\"hljs-number\">1</span></span>):\n        max_val </span>= -<span class=\"hljs-keyword\">float</span>(<span class=\"hljs-string\">'inf'</span>)\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-title\">range</span>(<span class=\"hljs-params\">i</span>):\n            max_val </span>= max(max_val, prices[j] + dp[i-j<span class=\"hljs-number\">-1</span>])\n        dp[i] = max_val\n\n    <span class=\"hljs-keyword\">return</span> dp[n]\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span\n                class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span\n                class=\"hljs-number\">10</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">17</span>, <span\n                class=\"hljs-number\">20</span>]\n    size = len(arr)\n    print(<span class=\"hljs-string\">\"Maximum Obtainable Value is \"</span> + str(cutting_rod(arr, size)))\n</code></pre>\n    <h4 id=\"97str1str2str1str1str2\">97. 给定两个字符串 str1 和 str2 以及可以在 str1 上执行的操作。查找所需的最小编辑数（操作）将'str1'转换为'str2'</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">edit_distance</span><span class=\"hljs-params\">(str1, str2, m, n)</span>:</span>\n    matrix = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> range(m+<span class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(m+<span\n                class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(n+<span\n                class=\"hljs-number\">1</span>):\n\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span>:\n                matrix[i][j] = j\n\n            <span class=\"hljs-keyword\">elif</span> j == <span class=\"hljs-number\">0</span>:\n                matrix[i][j] = i\n\n            <span class=\"hljs-keyword\">elif</span> str1[i<span class=\"hljs-number\">-1</span>] == str2[j<span\n                class=\"hljs-number\">-1</span>]:\n                matrix[i][j] = matrix[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]\n\n            <span class=\"hljs-keyword\">else</span>:\n                matrix[i][j] = <span class=\"hljs-number\">1</span> + min(matrix[i][j<span class=\"hljs-number\">-1</span>],      <span\n                class=\"hljs-comment\"># insert</span>\n                                       matrix[i<span class=\"hljs-number\">-1</span>][j],      <span class=\"hljs-comment\"># remove</span>\n                                       matrix[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>])    <span\n                class=\"hljs-comment\"># replace</span>\n\n    <span class=\"hljs-keyword\">return</span> matrix[m][n]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    str1 = <span class=\"hljs-string\">'sunday'</span>\n    str2 = <span class=\"hljs-string\">'saturday'</span>\n\n    print(edit_distance(str1, str2, len(str1), len(str2)))\n</code></pre>\n    <pre><code class=\"hljs\">\n</code></pre>\n    <h4 id=\"98011\">98. 给定 0 和 1 的二维矩阵，找到最大的广场，其中包含全部 1。</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">find_largest_square</span><span class=\"hljs-params\">(matrix)</span>:</span>\n    n = len(matrix)\n\n    <span class=\"hljs-comment\"># make a matrix for storing the solutions</span>\n    cache = [[<span class=\"hljs-number\">0</span>] * n <span class=\"hljs-keyword\">for</span> _ <span\n                class=\"hljs-keyword\">in</span> range(n)]\n    <span class=\"hljs-comment\"># size of square and its bottom-right indexes</span>\n    size = <span class=\"hljs-number\">0</span>\n    right_indx = <span class=\"hljs-number\">-1</span>\n    bottom_indx = <span class=\"hljs-number\">-1</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(n):\n\n            <span class=\"hljs-comment\"># if the value is 0 simply move forward as it cannot form a square of 1s</span>\n            <span class=\"hljs-keyword\">if</span> matrix[i][j] == <span class=\"hljs-number\">0</span>:\n                <span class=\"hljs-keyword\">continue</span>\n\n            <span class=\"hljs-comment\"># if it is first row or column, copy the matrix values as it is</span>\n            <span class=\"hljs-keyword\">elif</span> i == <span class=\"hljs-number\">0</span> <span\n                class=\"hljs-keyword\">or</span> j == <span class=\"hljs-number\">0</span>:\n                cache[i][j] = matrix[i][j]\n\n            <span class=\"hljs-comment\"># Otherwise, check in the up, left, and diagonally top-left direction for minimum size of square</span>\n            <span class=\"hljs-comment\"># if all are 1s at these positions in matrix, only then min value will be greater than 1</span>\n            <span class=\"hljs-comment\"># hence add the previous square size to the cache + 1</span>\n            <span class=\"hljs-keyword\">else</span>:\n                cache[i][j] = <span class=\"hljs-number\">1</span> + min(cache[i - <span class=\"hljs-number\">1</span>][j], cache[i][j - <span\n                class=\"hljs-number\">1</span>], cache[i - <span class=\"hljs-number\">1</span>][j - <span\n                class=\"hljs-number\">1</span>])\n\n            <span class=\"hljs-comment\"># check if the current square size found is larger than the previously found size, if so, update it</span>\n            <span class=\"hljs-keyword\">if</span> cache[i][j] &gt; size:\n                size = cache[i][j]\n                bottom_indx, right_indx = i, j\n\n    <span class=\"hljs-keyword\">return</span> size, bottom_indx, right_indx\n\n\nmat = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n       [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n       [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n       [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]]\nsize, bottom, right = find_largest_square(mat)\n\n<span class=\"hljs-keyword\">if</span> size &gt; <span class=\"hljs-number\">0</span>:\n    print(<span class=\"hljs-string\">\"Size of the square:\"</span>, size)\n    print(<span class=\"hljs-string\">\"Top-left Co-ordinates:\"</span>, bottom-size+<span\n                class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\",\"</span>, right-size+<span\n                class=\"hljs-number\">1</span>)\n    print(<span class=\"hljs-string\">\"Bottom-right Co-ordinates:\"</span>, bottom, <span class=\"hljs-string\">\",\"</span>, right)\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">\"No square of 1s found\"</span>)\n</code></pre>\n    <h4 id=\"99\">99. 找到两者中存在的最长子序列的长度。子序列是以相同的相对顺序出现的序列，但不一定是连续的。</h4>\n    <p>例子：</p>\n    <pre><code class=\"hljs python\">用于输入的LCS序列“ABCDGH”和“AEDFHR”是长度为<span class=\"hljs-number\">3</span>的“ADH”。\n用于输入序列的LCS“AGGTAB”和“GXTXAYB”是长度为<span class=\"hljs-number\">4</span>的“ GTAB”。\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">lcs</span><span\n        class=\"hljs-params\">(str1, str2)</span>:</span>\n    m = len(str1)\n    n = len(str2)\n\n    matrix = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> range(m+<span class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, m+<span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, n+<span class=\"hljs-number\">1</span>):\n\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> <span\n                class=\"hljs-keyword\">or</span> j == <span class=\"hljs-number\">0</span>:\n                matrix[i][j] = <span class=\"hljs-number\">0</span>\n\n            <span class=\"hljs-keyword\">elif</span> str1[i<span class=\"hljs-number\">-1</span>] == str2[j<span\n                class=\"hljs-number\">-1</span>]:\n                matrix[i][j] = <span class=\"hljs-number\">1</span> + matrix[i<span class=\"hljs-number\">-1</span>][j<span\n                class=\"hljs-number\">-1</span>]\n\n            <span class=\"hljs-keyword\">else</span>:\n                matrix[i][j] = max(matrix[i<span class=\"hljs-number\">-1</span>][j], matrix[i][j<span\n                class=\"hljs-number\">-1</span>])\n\n    index = matrix[m][n]\n\n    res = [<span class=\"hljs-string\">\"\"</span>] * index\n    i = m\n    j = n\n\n    <span class=\"hljs-keyword\">while</span> i &gt; <span class=\"hljs-number\">0</span> <span\n                class=\"hljs-keyword\">and</span> j &gt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">if</span> str1[i<span class=\"hljs-number\">-1</span>] == str2[j<span\n                class=\"hljs-number\">-1</span>]:\n            res[index<span class=\"hljs-number\">-1</span>] = str1[i<span class=\"hljs-number\">-1</span>]\n            i -= <span class=\"hljs-number\">1</span>\n            j -= <span class=\"hljs-number\">1</span>\n            index -= <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">elif</span> matrix[i<span class=\"hljs-number\">-1</span>][j] &gt; matrix[i][j<span\n                class=\"hljs-number\">-1</span>]:\n            i -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            j -= <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> res\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    X = <span class=\"hljs-string\">\"AGGTAB\"</span>\n    Y = <span class=\"hljs-string\">\"GXTXAYB\"</span>\n\n    str = <span class=\"hljs-string\">''</span>.join(lcs(X, Y))\n\n    print(<span class=\"hljs-string\">\"Length of longest common subsequence is:\"</span>, len(str),<span\n                class=\"hljs-string\">\"\\nAnd the subsequence is:\"</span>, str)\n</code></pre>\n    <h4 id=\"100\">100. 找到给定序列的最长子序列的长度，以便对子序列的所有元素进行排序，按顺序递增。</h4>\n    <p>例如，{10,22,9,33,21,50,41,60,80}的LIS长度为6，LIS为{10,22,33,50,60,80}。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">lis</span><span class=\"hljs-params\">(arr)</span>:</span>\n    n = len(arr)\n    dp = [<span class=\"hljs-number\">1</span>] * n\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(i):\n            <span class=\"hljs-keyword\">if</span> arr[j] &lt; arr[i] <span class=\"hljs-keyword\">and</span> dp[j] + <span\n                class=\"hljs-number\">1</span> &gt; dp[i]:\n                dp[i] = <span class=\"hljs-number\">1</span> + dp[j]\n\n    <span class=\"hljs-keyword\">return</span> max(dp)\n\narr = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">22</span>, <span\n                class=\"hljs-number\">9</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">21</span>, <span\n                class=\"hljs-number\">50</span>, <span class=\"hljs-number\">41</span>, <span class=\"hljs-number\">60</span>, <span\n                class=\"hljs-number\">80</span>]\nprint(lis(arr))\n</code></pre>\n    <h4 id=\"101mn\">101. 给定成本矩阵成本[] []和成本[] []中的位置（m，n），</h4>\n    <p>编写一个函数，返回从（0,0）到达（m，n）的最小成本路径的成本。\n        到达路径的总成本（m，n）是该路径上所有成本的总和（包括源和目的地）。\n        你只能从给定的单元格中向下，向右和对角线降低单元格。</p>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">min_cost</span>(<span\n            class=\"hljs-params\">cost, m, n</span>):\n    dp </span>= [[<span class=\"hljs-number\">0</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span\n            class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">n+<span\n            class=\"hljs-number\">1</span></span>)] <span class=\"hljs-keyword\">for</span> i <span\n            class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">m+<span\n            class=\"hljs-number\">1</span></span>)]\n\n    dp[0][0] </span>= cost[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n            class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, m+<span\n            class=\"hljs-number\">1</span></span>):\n        dp[i][0] </span>= dp[i<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>] + cost[i][<span\n                class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span\n            class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, n+<span\n            class=\"hljs-number\">1</span></span>):\n        dp[0][j] </span>= dp[<span class=\"hljs-number\">0</span>][j<span class=\"hljs-number\">-1</span>] + cost[<span\n                class=\"hljs-number\">0</span>][j]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n            class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, m+<span\n            class=\"hljs-number\">1</span></span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, n+<span\n                class=\"hljs-number\">1</span></span>):\n            dp[i][j] </span>= cost[i][j] + min(dp[i<span class=\"hljs-number\">-1</span>][j], dp[i][j<span\n                class=\"hljs-number\">-1</span>], dp[i<span class=\"hljs-number\">-1</span>][j<span\n                class=\"hljs-number\">-1</span>])\n\n    <span class=\"hljs-keyword\">return</span> dp[m][n]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    cost = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>],\n            [<span class=\"hljs-meta\">4, 8, 2</span>],\n            [<span class=\"hljs-meta\">1, 5, 3</span>]]\n    m = <span class=\"hljs-number\">2</span>\n    n = <span class=\"hljs-number\">2</span>\n    print(<span class=\"hljs-string\">\"Minimum cost from (0, 0) to ({}, {}) is:\"</span>.format(m, n), min_cost(cost, m, n))\n</code></pre>\n    <h4 id=\"102\">102. 将一个集合划分为两个子集，使得子集和的差异最小</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">find_min</span><span class=\"hljs-params\">(arr)</span>:</span>\n    sum_of_arr = sum(arr)\n    n = len(arr)\n    dp = [[<span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> range(sum_of_arr+<span class=\"hljs-number\">1</span>)] <span\n                class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span\n                class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span\n                class=\"hljs-number\">1</span>):\n        dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">True</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, sum_of_arr+<span class=\"hljs-number\">1</span>):\n        dp[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-keyword\">False</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, n+<span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, sum_of_arr+<span class=\"hljs-number\">1</span>):\n            dp[i][j] = dp[i<span class=\"hljs-number\">-1</span>][j]\n\n            <span class=\"hljs-keyword\">if</span> arr[i<span class=\"hljs-number\">-1</span>] &lt;= j:\n                dp[i][j] |= dp[i<span class=\"hljs-number\">-1</span>][j - arr[i<span class=\"hljs-number\">-1</span>]]\n\n    diff = float(<span class=\"hljs-string\">'inf'</span>)\n\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(int(sum_of_arr/<span\n                class=\"hljs-number\">2</span>), <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>):\n        <span class=\"hljs-keyword\">if</span> dp[n][j] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">True</span>:\n            diff = sum_of_arr - <span class=\"hljs-number\">2</span> * j\n            <span class=\"hljs-keyword\">break</span>\n\n    <span class=\"hljs-keyword\">return</span> diff\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    arr = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span\n                class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\n    print(<span class=\"hljs-string\">\"Minimum difference is:\"</span>, find_min(arr))\n</code></pre>\n    <h4 id=\"103\">103. 给定一组非负整数和一个值和，确定是否存在给定集合的子集，其总和等于给定总和。</h4>\n    <pre><code class=\"hljs python\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">isSubsetSum</span><span class=\"hljs-params\">(arr, check_sum)</span>:</span>\n    n = len(arr)\n    possible_sum = [[<span class=\"hljs-keyword\">False</span>] * (n + <span class=\"hljs-number\">1</span>) <span\n                class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> range(check_sum + <span\n                class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span\n                class=\"hljs-number\">1</span>):\n        possible_sum[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-keyword\">True</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, check_sum + <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span\n                class=\"hljs-number\">1</span>, n + <span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-keyword\">if</span> i &lt; arr[j - <span class=\"hljs-number\">1</span>]:\n                possible_sum[i][j] = possible_sum[i][j<span class=\"hljs-number\">-1</span>]\n            <span class=\"hljs-keyword\">elif</span> i &gt;= arr[j - <span class=\"hljs-number\">1</span>]:\n                possible_sum[i][j] = possible_sum[i][j<span class=\"hljs-number\">-1</span>] <span\n                class=\"hljs-keyword\">or</span> possible_sum[i - arr[j - <span class=\"hljs-number\">1</span>]][j<span\n                class=\"hljs-number\">-1</span>]\n\n    <span class=\"hljs-keyword\">return</span> possible_sum[check_sum][n]\n\narr = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">34</span>, <span\n                class=\"hljs-number\">4</span>, <span class=\"hljs-number\">12</span>, <span\n                class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>]\ncheck_sum = <span class=\"hljs-number\">9</span>\n\n<span class=\"hljs-keyword\">if</span> isSubsetSum(arr, check_sum):\n    print(<span class=\"hljs-string\">\"Found a subset with sum =\"</span>, check_sum)\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">\"Subset with sum =\"</span>, check_sum, <span class=\"hljs-string\">\"Not Found\"</span>)\n</code></pre>\n    <h4 id=\"104hackerrankdp\">104. HackerRank 问题算法 DP</h4>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">maxSubArray</span>(<span\n            class=\"hljs-params\">a, size</span>):\n    currMax </span>= a[<span class=\"hljs-number\">0</span>]\n    maxSoFar = a[<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n            class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, size</span>):\n        currMax </span>= max(a[i], currMax + a[i])\n        maxSoFar = max(currMax, maxSoFar)\n\n    <span class=\"hljs-keyword\">return</span> maxSoFar\n\ntestcases = <span class=\"hljs-keyword\">int</span>(input())\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> t <span class=\"hljs-keyword\">in</span> <span\n        class=\"hljs-title\">range</span>(<span class=\"hljs-params\">testcases</span>):\n    n </span>= <span class=\"hljs-keyword\">int</span>(input())\n    arr = list(map(<span class=\"hljs-keyword\">int</span>, input().split()))\n    tempList = list(filter(lambda x: x &gt; <span class=\"hljs-number\">0</span>, arr))\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">if</span> <span class=\"hljs-title\">len</span>(<span\n            class=\"hljs-params\">tempList</span>) !</span>= <span class=\"hljs-number\">0</span>:\n        maximumSum = sum(tempList)\n    <span class=\"hljs-keyword\">else</span>:\n        maximumSum = max(arr)\n    print(maxSubArray(arr, n), maximumSum)\n</code></pre>\n    <h4 id=\"105dist123\">105. 给定距离 dist，计算用 1,2 和 3 步覆盖距离的总方式</h4>\n    <pre><code class=\"hljs makefile\"><span class=\"hljs-section\">Input:  n = 3</span>\n<span class=\"hljs-section\">Output: 4</span>\nBelow are the four ways\n 1 step + 1 step + 1 step\n 1 step + 2 step\n 2 step + 1 step\n 3 step<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n\ndef count_ways(n):\n    count = [0] * (n+1)\n    count[0] = 1\n    count[1] = 1\n    count[2] = 2\n\n    for i in range(3, n+1):\n        count[i] = count[i-1] + count[i-2] + count[i-3]\n\n    return count[n]\n\n\nif __name__ == '__main__':\n    print(count_ways(4))\n</span></code></pre>\n    <h4 id=\"106\">106. 在字符板中查找所有可能的单词</h4>\n    <pre><code class=\"hljs python\">Input: dictionary[] = {<span class=\"hljs-string\">\"GEEKS\"</span>, <span\n            class=\"hljs-string\">\"FOR\"</span>, <span class=\"hljs-string\">\"QUIZ\"</span>, <span\n            class=\"hljs-string\">\"GO\"</span>};\n       boggle[][]   = {{<span class=\"hljs-string\">'G'</span>,<span class=\"hljs-string\">'I'</span>,<span\n                class=\"hljs-string\">'Z'</span>},\n                       {<span class=\"hljs-string\">'U'</span>,<span class=\"hljs-string\">'E'</span>,<span\n                class=\"hljs-string\">'K'</span>},\n                       {<span class=\"hljs-string\">'Q'</span>,<span class=\"hljs-string\">'S'</span>,<span\n                class=\"hljs-string\">'E'</span>}};\nOutput:  Following words of dictionary are present\n         GEEKS\n         QUIZ\n\n         <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">findWordsUtil</span><span\n                 class=\"hljs-params\">(words, boggle, visited, found, r, c, str)</span>:</span>\n    rows = len(boggle)\n    cols = len(boggle[<span class=\"hljs-number\">0</span>])\n\n    <span class=\"hljs-comment\"># set the position of character as traversed</span>\n    visited[r][c] = <span class=\"hljs-keyword\">True</span>\n\n    <span class=\"hljs-comment\"># add the character to string</span>\n    str += boggle[r][c]\n\n    <span class=\"hljs-comment\"># if the string is in dictionary add it to the set of found words</span>\n    <span class=\"hljs-keyword\">if</span> str <span class=\"hljs-keyword\">in</span> words:\n        found.add(str)\n\n    <span class=\"hljs-comment\"># traverse all the nearby 8 adjacent cells</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(r<span\n                class=\"hljs-number\">-1</span>, r+<span class=\"hljs-number\">2</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(c<span\n                class=\"hljs-number\">-1</span>, c+<span class=\"hljs-number\">2</span>):\n            <span class=\"hljs-keyword\">if</span> i &gt;= rows <span class=\"hljs-keyword\">or</span> i &lt; <span\n                class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> j &gt;= cols <span\n                class=\"hljs-keyword\">or</span> j &lt; <span class=\"hljs-number\">0</span> <span\n                class=\"hljs-keyword\">or</span> visited[i][j]:\n                <span class=\"hljs-keyword\">continue</span>\n            findWordsUtil(words, boggle, visited, found, i, j, str)\n\n    <span class=\"hljs-comment\"># backtrack and set the status of current character as not traversed</span>\n    visited[r][c] = <span class=\"hljs-keyword\">False</span>\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">findWords</span><span\n        class=\"hljs-params\">(words, boggle)</span>:</span>\n    rows = len(boggle)\n    cols = len(boggle[<span class=\"hljs-number\">0</span>])\n\n    <span class=\"hljs-comment\"># initialize a matrix for DFS Traversal</span>\n    visited = [[<span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> range(cols)] <span class=\"hljs-keyword\">for</span> j <span\n                class=\"hljs-keyword\">in</span> range(rows)]\n\n    <span class=\"hljs-comment\"># set to store the unique found words</span>\n    found = set({})\n    str = <span class=\"hljs-string\">\"\"</span>\n\n    <span class=\"hljs-comment\"># traverse each character in the boggle and do DFS from there</span>\n    <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> range(rows):\n        <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> range(cols):\n            findWordsUtil(words, boggle, visited, found, r, c, str)\n\n    <span class=\"hljs-comment\"># return the set of found words</span>\n    <span class=\"hljs-keyword\">return</span> found\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    words = {<span class=\"hljs-string\">\"GEEKS\"</span>, <span class=\"hljs-string\">\"FOR\"</span>, <span\n                class=\"hljs-string\">\"QUIZ\"</span>, <span class=\"hljs-string\">\"GO\"</span>, <span class=\"hljs-string\">\"SEEK\"</span>}\n    boggle = [[<span class=\"hljs-string\">'G'</span>, <span class=\"hljs-string\">'I'</span>, <span\n                class=\"hljs-string\">'Z'</span>],\n              [<span class=\"hljs-string\">'U'</span>, <span class=\"hljs-string\">'E'</span>, <span\n                class=\"hljs-string\">'K'</span>],\n              [<span class=\"hljs-string\">'Q'</span>, <span class=\"hljs-string\">'S'</span>, <span\n                class=\"hljs-string\">'E'</span>]]\n\n    found = findWords(words, boggle)\n\n    print(<span class=\"hljs-string\">\"Words found in the boggle from the dictionary are:\"</span>)\n    <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> found:\n        print(word)\n</code></pre>\n    <h4 id=\"107\">107. 广度优先搜索遍历</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span\n                class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append(frm)\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bfsUtil</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s, visited)</span></span>:\n        queue = deque([])\n        queue.append(s)\n        visited[s] = True\n\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-symbol\">queue:</span>\n            vertex = queue.popleft()\n            print(vertex, <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n\n            <span class=\"hljs-comment\"># traverse vertices adjacent to vertex</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph[vertex]:\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\n                    visited[i] = True\n                    queue.append(i)\n        print()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bfs</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s=None)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-comment\"># do bfs from the node specified</span>\n        <span class=\"hljs-keyword\">if</span> s is <span class=\"hljs-keyword\">not</span> <span\n                class=\"hljs-symbol\">None:</span>\n            <span class=\"hljs-keyword\">self</span>.bfsUtil(s, visited)\n        <span class=\"hljs-comment\"># traverse for all the vertices in other components of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[v]:\n                <span class=\"hljs-keyword\">self</span>.bfsUtil(v, visited)\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span\n                class=\"hljs-string\">'__main__'</span>:\n    graph = Graph()\n\n    <span class=\"hljs-comment\"># component 1 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)\n\n    <span class=\"hljs-comment\"># component 2 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>)\n\n    <span class=\"hljs-comment\"># call bfs from 2 vertex</span>\n    print(<span class=\"hljs-string\">\"Breadth First Traversal:\"</span>)\n    graph.bfs(<span class=\"hljs-number\">2</span>)\n</code></pre>\n    <h4 id=\"108\">108. 深度优先搜索遍历</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span\n                class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append(frm)\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dfsUtil</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s, visited)</span></span>:\n        stack = []\n        stack.append(s)\n        visited[s] = True\n\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-symbol\">stack:</span>\n            vertex = stack.pop()\n            print(vertex, <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n\n            <span class=\"hljs-comment\"># traverse vertices adjacent to vertex</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph[vertex]:\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n        print()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dfs</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s=None)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-comment\"># traverse specified vertex</span>\n        <span class=\"hljs-keyword\">if</span> s is <span class=\"hljs-keyword\">not</span> <span\n                class=\"hljs-symbol\">None:</span>\n            <span class=\"hljs-keyword\">self</span>.dfsUtil(s, visited)\n\n        <span class=\"hljs-comment\"># traverse for all the vertices in other components of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[v]:\n                <span class=\"hljs-keyword\">self</span>.dfsUtil(v, visited)\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span\n                class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make an undirected graph</span>\n    graph = Graph()\n\n    <span class=\"hljs-comment\"># component 1 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)\n\n    <span class=\"hljs-comment\"># component 2 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>)\n\n    <span class=\"hljs-comment\"># call dfs from 2 vertex</span>\n    print(<span class=\"hljs-string\">\"Depth First Traversal:\"</span>)\n    graph.dfs(<span class=\"hljs-number\">2</span>)\n</code></pre>\n    <h4 id=\"109\">109. 在有向图中检测周期</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(self, directed=False)</span>:</span>\n        self.graph = defaultdict(list)\n        self.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span\n            class=\"hljs-params\">(self, frm, to)</span>:</span>\n        self.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> self.directed <span class=\"hljs-keyword\">is</span> <span\n                class=\"hljs-keyword\">False</span>:\n            self.graph[to].append(frm)\n        <span class=\"hljs-keyword\">else</span>:\n            self.graph[to] = self.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isCyclicUtil</span><span\n            class=\"hljs-params\">(self, s, visited, recurStack)</span>:</span>\n\n        <span class=\"hljs-keyword\">if</span> visited[s] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">False</span>:\n            recurStack[s] = <span class=\"hljs-keyword\">True</span>\n            visited[s] = <span class=\"hljs-keyword\">True</span>\n\n            <span class=\"hljs-comment\"># traverse vertices adjacent to vertex</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.graph[s]:\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">not</span> visited[i]) <span\n                class=\"hljs-keyword\">and</span> self.isCyclicUtil(i, visited, recurStack):\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">True</span>\n                <span class=\"hljs-keyword\">elif</span> recurStack[i]:\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">True</span>\n        recurStack[s] = <span class=\"hljs-keyword\">False</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">False</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isCyclic</span><span\n            class=\"hljs-params\">(self)</span>:</span>\n        visited = {i: <span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> self.graph}\n        recurStack = {i: <span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> self.graph}\n\n        <span class=\"hljs-comment\"># traverse for all the vertices of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> self.graph:\n            <span class=\"hljs-keyword\">if</span> self.isCyclicUtil(v, visited, recurStack):\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">True</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">False</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make a directed graph</span>\n    graph = Graph(<span class=\"hljs-keyword\">True</span>)\n\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\n\n    <span class=\"hljs-keyword\">if</span> graph.isCyclic():\n        print(<span class=\"hljs-string\">\"Cycle exists\"</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        print(<span class=\"hljs-string\">\"No cycle in the graph\"</span>)\n\n© <span class=\"hljs-number\">2019</span> GitHub, Inc.\nTerms\nPrivacy\n</code></pre>\n    <h4 id=\"110\">110. 检测无向图中的循环</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-comment\"># True if edge has been traversed or seen once</span>\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append([to, False])\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span\n                class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append([frm, False])\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">findParent</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, sets, v)</span></span>:\n        <span class=\"hljs-keyword\">if</span> sets[v] == -<span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> v\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.findParent(sets, sets[v])\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">union</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, sets, x, y)</span></span>:\n        x_set = <span class=\"hljs-keyword\">self</span>.findParent(sets, x)\n        y_set = <span class=\"hljs-keyword\">self</span>.findParent(sets, y)\n        sets[x_set] = y_set\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isCyclic</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-comment\"># sets that show combined vertices or not</span>\n        sets = {<span class=\"hljs-symbol\">i:</span> -<span class=\"hljs-number\">1</span> <span\n                class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">for</span> e <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph[v]:\n                <span class=\"hljs-comment\"># if an edge is traversed once skip it</span>\n                <span class=\"hljs-keyword\">if</span> e[<span class=\"hljs-number\">1</span>] is <span class=\"hljs-symbol\">True:</span>\n                    continue\n\n                <span class=\"hljs-comment\"># set True for traversing the edge and making union in both adjacency lists</span>\n                e[<span class=\"hljs-number\">1</span>] = True\n\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[e[<span\n                class=\"hljs-number\">0</span>]]:\n                    <span class=\"hljs-keyword\">if</span> i[<span class=\"hljs-number\">0</span>] == <span\n                class=\"hljs-symbol\">v:</span>\n                        i[<span class=\"hljs-number\">1</span>] = True\n                        <span class=\"hljs-keyword\">break</span>\n\n                <span class=\"hljs-comment\"># find parents of both vertices of the edge</span>\n                x = <span class=\"hljs-keyword\">self</span>.findParent(sets, v)\n                y = <span class=\"hljs-keyword\">self</span>.findParent(sets, e[<span class=\"hljs-number\">0</span>])\n\n                <span class=\"hljs-comment\"># if they share a common parent loop found</span>\n                <span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-symbol\">y:</span>\n                    <span class=\"hljs-keyword\">return</span> True\n                <span class=\"hljs-comment\"># union the two vertices in the same set</span>\n                <span class=\"hljs-keyword\">self</span>.union(sets, x, y)\n\n        <span class=\"hljs-comment\"># if no loop or cycle found return false</span>\n        <span class=\"hljs-keyword\">return</span> False\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span\n                class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make a graph</span>\n    graph = Graph()\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)\n\n    <span class=\"hljs-keyword\">if</span> graph.isCyclic():\n        print(<span class=\"hljs-string\">\"Cycle exists in the graph\"</span>)\n    <span class=\"hljs-symbol\">else:</span>\n        print(<span class=\"hljs-string\">\"No cycle in the graph\"</span>)\n</code></pre>\n    <h4 id=\"111dijkstra\">111. Dijkstra的最短路径算法</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to, weight)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append([to, weight])\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span\n                class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append([frm, weight])\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find_min</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, dist, visited)</span></span>:\n        minimum = float(<span class=\"hljs-string\">'inf'</span>)\n        index = -<span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph.keys():\n            <span class=\"hljs-keyword\">if</span> visited[v] is False <span class=\"hljs-keyword\">and</span> dist[v] &lt; <span\n                class=\"hljs-symbol\">minimum:</span>\n                minimum = dist[v]\n                index = v\n\n        <span class=\"hljs-keyword\">return</span> index\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dijkstra</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, src)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n        dist = {<span class=\"hljs-symbol\">i:</span> float(<span class=\"hljs-string\">'inf'</span>) <span\n                class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph}\n        parent = {<span class=\"hljs-symbol\">i:</span> None <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-comment\"># set distance of src vertex from itself 0</span>\n        dist[src] = <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-comment\"># find shortest path for all vertices</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(len(<span\n                class=\"hljs-keyword\">self</span>.graph)-<span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-comment\"># find minimum distance vertex from source</span>\n            <span class=\"hljs-comment\"># initially src itself as dist[src] = 0</span>\n            u = <span class=\"hljs-keyword\">self</span>.find_min(dist, visited)\n\n            <span class=\"hljs-comment\"># mark the node as visited</span>\n            visited[u] = True\n            <span class=\"hljs-comment\"># check if the distance through current edge is less than previously known distance to v</span>\n            <span class=\"hljs-keyword\">for</span> v, w <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[u]:\n\n                <span class=\"hljs-keyword\">if</span> visited[v] is False <span class=\"hljs-keyword\">and</span> dist[u] + w &lt; dist[v]:\n                    dist[v] = dist[u] + w\n                    parent[v] = u\n        <span class=\"hljs-comment\"># return parent list and distance to each node from source</span>\n        <span class=\"hljs-keyword\">return</span> parent, dist\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">printPath</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, parent, v)</span></span>:\n        <span class=\"hljs-keyword\">if</span> parent[v] is <span class=\"hljs-symbol\">None:</span>\n            <span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">self</span>.printPath(parent, parent[v])\n        print(v, <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">printSolution</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, dist, parent, src)</span></span>:\n        print(<span class=\"hljs-string\">'{}\\t{}\\t{}'</span>.format(<span class=\"hljs-string\">'Vertex'</span>, <span\n                class=\"hljs-string\">'Distance'</span>, <span class=\"hljs-string\">'Path'</span>))\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph.keys():\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-symbol\">src:</span>\n                continue\n            print(<span class=\"hljs-string\">'{} -&gt; {}\\t\\t{}\\t\\t{}'</span>.format(src, i, dist[i], src), <span\n                class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n            <span class=\"hljs-keyword\">self</span>.printPath(parent, i)\n            print()\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span\n                class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make an undirected graph</span>\n    graph = Graph()\n\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, <span\n                class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span\n                class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span\n                class=\"hljs-number\">11</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span\n                class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span\n                class=\"hljs-number\">7</span>)\n    graph.addEdge(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span\n                class=\"hljs-number\">6</span>)\n    graph.addEdge(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span\n                class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span\n                class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span\n                class=\"hljs-number\">7</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span\n                class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span\n                class=\"hljs-number\">9</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span\n                class=\"hljs-number\">14</span>)\n    graph.addEdge(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span\n                class=\"hljs-number\">10</span>)\n\n    parent, dist = graph.dijkstra(<span class=\"hljs-number\">0</span>)\n\n    graph.printSolution(dist, parent, <span class=\"hljs-number\">0</span>)\n</code></pre>\n    <h4 id=\"112\">112. 在给定的边缘加权有向图中找出每对顶点之间的最短距离</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">floyd_warshall</span><span class=\"hljs-params\">(graph)</span>:</span>\n    shortest_dist = []\n\n    <span class=\"hljs-comment\"># copy matrix for storing resultant shortest distances</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> graph:\n        shortest_dist.append(i)\n\n    <span class=\"hljs-comment\"># Number of vertices in graph</span>\n    V = len(graph) - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># k is intermediate vertex</span>\n    <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> range(V+<span\n                class=\"hljs-number\">1</span>):\n        <span class=\"hljs-comment\"># i is source</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(V+<span\n                class=\"hljs-number\">1</span>):\n            <span class=\"hljs-comment\"># j is destination</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(V+<span\n                class=\"hljs-number\">1</span>):\n                <span class=\"hljs-comment\"># store the path which is shorter i.e. min(i-&gt;j, i-&gt;k-&gt;j)</span>\n                shortest_dist[i][j] = min(shortest_dist[i][j], shortest_dist[i][k] + shortest_dist[k][j])\n    <span class=\"hljs-comment\"># return the resultant matrix</span>\n    <span class=\"hljs-keyword\">return</span> shortest_dist\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    INF = float(<span class=\"hljs-string\">'inf'</span>)\n    graph = [[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, INF, <span\n                class=\"hljs-number\">10</span>],\n             [INF, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, INF],\n             [INF, INF, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>],\n             [INF, INF, INF, <span class=\"hljs-number\">0</span>]]\n\n    shortest_dist_matrix = floyd_warshall(graph)\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> shortest_dist_matrix:\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> i:\n            <span class=\"hljs-keyword\">if</span> j != float(<span class=\"hljs-string\">'inf'</span>):\n                print(j, <span class=\"hljs-string\">'\\t'</span>, end=<span class=\"hljs-string\">''</span>)\n            <span class=\"hljs-keyword\">else</span>:\n                print(j, end=<span class=\"hljs-string\">' '</span>)\n        print()\n</code></pre>\n    <h4 id=\"113\">113. 图形实现</h4>\n    <pre><code class=\"hljs ruby\"> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Vertex</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.key = key\n        <span class=\"hljs-keyword\">self</span>.adjacent = {}\n        <span class=\"hljs-keyword\">self</span>.visited = False\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">setKey</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.key = key\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getKey</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.key\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getVisited</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.visited\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">setVisited</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, val=True)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.visited = val\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addNeighbour</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, neighbour, weight=<span\n            class=\"hljs-number\">0</span>)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.adjacent[neighbour] = weight\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getNeighbours</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.adjacent.keys()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getWeight</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, neighbour)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.adjacent[neighbour]\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n\n    <span class=\"hljs-comment\"># Graph is undirected by default</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.vertices = {}\n        <span class=\"hljs-keyword\">self</span>.numberOfVertices = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addVertex</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        node = Vertex(key)\n        <span class=\"hljs-keyword\">self</span>.vertices[key] = node\n        <span class=\"hljs-keyword\">self</span>.numberOfVertices += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> node\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to, weight=<span\n            class=\"hljs-number\">0</span>)</span></span>:\n        <span class=\"hljs-keyword\">if</span> frm <span class=\"hljs-keyword\">not</span> <span\n                class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            <span class=\"hljs-keyword\">self</span>.addVertex(frm)\n\n        <span class=\"hljs-keyword\">if</span> to <span class=\"hljs-keyword\">not</span> <span\n                class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            <span class=\"hljs-keyword\">self</span>.addVertex(to)\n\n        <span class=\"hljs-keyword\">self</span>.vertices[frm].addNeighbour(<span class=\"hljs-keyword\">self</span>.vertices[to], weight)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span\n                class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">directed:</span>\n            <span class=\"hljs-keyword\">self</span>.vertices[to].addNeighbour(<span class=\"hljs-keyword\">self</span>.vertices[frm], weight)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getVertex</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        <span class=\"hljs-keyword\">if</span> key <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.vertices[key]\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">return</span> None\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getVertices</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.vertices.keys()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getEdges</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        edges = []\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            edgesFromVertex = []\n\n            <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.vertices[v].getNeighbours():\n                frm = <span class=\"hljs-keyword\">self</span>.vertices[v].getKey()\n                to = w.getKey()\n                weight = <span class=\"hljs-keyword\">self</span>.vertices[v].getWeight(w)\n                edgesFromVertex.append((frm, to, weight))\n\n            <span class=\"hljs-keyword\">if</span> len(edgesFromVertex) != <span class=\"hljs-number\">0</span>:\n                edges.append(edgesFromVertex)\n\n        <span class=\"hljs-keyword\">return</span> edges\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span\n                class=\"hljs-string\">'__main__'</span>:\n    g = Graph(directed=False)\n    g.addVertex(<span class=\"hljs-string\">'a'</span>)\n    g.addVertex(<span class=\"hljs-string\">'b'</span>)\n    g.addVertex(<span class=\"hljs-string\">'c'</span>)\n    g.addVertex(<span class=\"hljs-string\">'d'</span>)\n    g.addVertex(<span class=\"hljs-string\">'e'</span>)\n    g.addVertex(<span class=\"hljs-string\">'f'</span>)\n    g.addEdge(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span\n                class=\"hljs-number\">3</span>)\n    g.addEdge(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span\n                class=\"hljs-number\">2</span>)\n    g.addEdge(<span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span\n                class=\"hljs-number\">1</span>)\n    g.addEdge(<span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>, <span\n                class=\"hljs-number\">5</span>)\n    g.addEdge(<span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>, <span\n                class=\"hljs-number\">5</span>)\n    g.addEdge(<span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>, <span\n                class=\"hljs-number\">2</span>)\n    g.addEdge(<span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>, <span\n                class=\"hljs-number\">3</span>)\n    g.addEdge(<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'a'</span>, <span\n                class=\"hljs-number\">6</span>)\n    g.addEdge(<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'b'</span>, <span\n                class=\"hljs-number\">6</span>)\n    g.addEdge(<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'c'</span>, <span\n                class=\"hljs-number\">6</span>)\n\n    <span class=\"hljs-keyword\">for</span> edgeSet <span class=\"hljs-keyword\">in</span> g.getEdges():\n        print(<span class=\"hljs-string\">'edges from'</span>, edgeSet[<span class=\"hljs-number\">0</span>][<span\n                class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">': '</span>, <span\n                class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">''</span>)\n        print(edgeSet)\n</code></pre>\n    <h4 id=\"114kruskal\">114. Kruskal的最小生成树算法</h4>\n    <pre><code class=\"hljs sql\">class Graph:\n    def __init__(self, directed=False):\n        self.edges = []\n        self.vertices = <span class=\"hljs-keyword\">set</span>({})\n        self.directed = directed\n\n    <span class=\"hljs-keyword\">def</span> addEdge(<span class=\"hljs-keyword\">self</span>, frm, <span\n                class=\"hljs-keyword\">to</span>, weight):\n        self.edges.append([frm, <span class=\"hljs-keyword\">to</span>, weight])\n        self.vertices.add(frm)\n        self.vertices.add(<span class=\"hljs-keyword\">to</span>)\n\n    <span class=\"hljs-keyword\">def</span> removeEdge(<span class=\"hljs-keyword\">self</span>, frm, <span\n                class=\"hljs-keyword\">to</span>, weight):\n        self.edges.remove([frm, <span class=\"hljs-keyword\">to</span>, weight])\n        flag1 = <span class=\"hljs-number\">0</span>\n        flag2 = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> f, t, w <span class=\"hljs-keyword\">in</span> self.edges:\n            <span class=\"hljs-keyword\">if</span> frm == f <span class=\"hljs-keyword\">or</span> frm == t:\n                flag1 = <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">to</span> == f <span\n                class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">to</span> == t:\n                flag2 = <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> flag1 == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> flag2 == <span\n                class=\"hljs-number\">1</span>:\n                break\n\n        <span class=\"hljs-keyword\">if</span> flag1 != <span class=\"hljs-number\">1</span>:\n            self.vertices.remove(frm)\n\n        <span class=\"hljs-keyword\">if</span> flag2 != <span class=\"hljs-number\">1</span>:\n            self.vertices.remove(<span class=\"hljs-keyword\">to</span>)\n\n    <span class=\"hljs-keyword\">def</span> findParent(<span class=\"hljs-keyword\">self</span>, <span class=\"hljs-keyword\">sets</span>, v):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">sets</span>[v] == <span\n                class=\"hljs-number\">-1</span>:\n            <span class=\"hljs-keyword\">return</span> v\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> self.findParent(<span class=\"hljs-keyword\">sets</span>, <span\n                class=\"hljs-keyword\">sets</span>[v])\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-keyword\">union</span>(<span class=\"hljs-keyword\">self</span>, <span\n                class=\"hljs-keyword\">sets</span>, x, y):\n        x_set = self.findParent(<span class=\"hljs-keyword\">sets</span>, x)\n        y_set = self.findParent(<span class=\"hljs-keyword\">sets</span>, y)\n        <span class=\"hljs-keyword\">sets</span>[x_set] = y_set\n\n    <span class=\"hljs-keyword\">def</span> isCyclic(<span class=\"hljs-keyword\">self</span>):\n        # <span class=\"hljs-keyword\">sets</span> that <span class=\"hljs-keyword\">show</span> combined vertices <span\n                class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span>\n        <span class=\"hljs-keyword\">sets</span> = {i: <span class=\"hljs-number\">-1</span> <span\n                class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.vertices}\n        <span class=\"hljs-keyword\">for</span> v1, v2, w <span class=\"hljs-keyword\">in</span> self.edges:\n            # find parents <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">both</span> vertices <span\n                class=\"hljs-keyword\">of</span> the edge\n            x = self.findParent(<span class=\"hljs-keyword\">sets</span>, v1)\n            y = self.findParent(<span class=\"hljs-keyword\">sets</span>, v2)\n\n            # <span class=\"hljs-keyword\">if</span> they <span class=\"hljs-keyword\">share</span> a common <span\n                class=\"hljs-keyword\">parent</span> <span class=\"hljs-keyword\">loop</span> <span class=\"hljs-keyword\">found</span>\n            <span class=\"hljs-keyword\">if</span> x == y:\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n            # <span class=\"hljs-keyword\">union</span> the two vertices <span\n                class=\"hljs-keyword\">in</span> the same <span class=\"hljs-keyword\">set</span>\n            self.union(<span class=\"hljs-keyword\">sets</span>, x, y)\n\n        # <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">no</span> <span\n                class=\"hljs-keyword\">loop</span> <span class=\"hljs-keyword\">or</span> <span\n                class=\"hljs-keyword\">cycle</span> <span class=\"hljs-keyword\">found</span> <span class=\"hljs-keyword\">return</span> <span\n                class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">def</span> kruskalMST(<span class=\"hljs-keyword\">self</span>):\n        g = Graph()\n\n        self.edges = sorted(self.edges, <span class=\"hljs-keyword\">key</span>=lambda x: x[<span\n                class=\"hljs-number\">2</span>])\n\n        <span class=\"hljs-keyword\">for</span> frm, <span class=\"hljs-keyword\">to</span>, w <span\n                class=\"hljs-keyword\">in</span> self.edges:\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">len</span>(g.edges) == <span\n                class=\"hljs-keyword\">len</span>(graph.vertices)<span class=\"hljs-number\">-1</span>:\n                break\n            g.addEdge(frm, <span class=\"hljs-keyword\">to</span>, w)\n            <span class=\"hljs-keyword\">if</span> g.isCyclic():\n                g.removeEdge(frm, <span class=\"hljs-keyword\">to</span>, w)\n        <span class=\"hljs-keyword\">return</span> g\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    # make an undirected graph\n    graph = Graph()\n\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span\n                class=\"hljs-number\">10</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span\n                class=\"hljs-number\">6</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span\n                class=\"hljs-number\">5</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span\n                class=\"hljs-number\">15</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span\n                class=\"hljs-number\">4</span>)\n\n    new_graph = graph.kruskalMST()\n\n    <span class=\"hljs-keyword\">for</span> f, t, w <span class=\"hljs-keyword\">in</span> new_graph.edges:\n        print(f, <span class=\"hljs-string\">\"--\"</span>, t, <span class=\"hljs-string\">\"=\"</span>, w)\n</code></pre>\n    <h4 id=\"115\">115. 拓扑排序</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span\n            class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span\n                class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append(frm)\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">topoSortUtil</span><span\n            class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s, visited, sortList)</span></span>:\n        visited[s] = True\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.graph[s]:\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\n                <span class=\"hljs-keyword\">self</span>.topoSortUtil(i, visited, sortList)\n\n        sortList.insert(<span class=\"hljs-number\">0</span>, s)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span\n            class=\"hljs-title\">topologicalSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span\n                class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        sortList = []\n        <span class=\"hljs-comment\"># traverse for all the vertices in other components of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span\n                class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[v]:\n                <span class=\"hljs-keyword\">self</span>.topoSortUtil(v, visited, sortList)\n\n        print(sortList)\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span\n                class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make an directed graph</span>\n    g = Graph(directed=True)\n\n    g.addEdge(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>)\n    g.addEdge(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>)\n    g.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>)\n    g.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>)\n    g.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    g.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-comment\"># call topologicalSort()</span>\n    print(<span class=\"hljs-string\">\"Topological Sort:\"</span>)\n    g.topologicalSort()\n</code></pre>\n    <h4 id=\"116\">116. 以下哪个语句创建字典？（多选题）</h4>\n    <p>a）d = {}\n        b）d = {“john”：40，“peter”：45}\n        c）d = {40：“john”，45：“peter”}\n        d）d =（40：“john” ，45：“50”）</p>\n    <p>答案： b，c＆d。 </p>\n    <h4 id=\"117\">117. 其中哪一个是分区？</h4>\n    <p>a）/\n        b）//\n        c）％\n        d）没有提到的</p>\n    <p>答案： b</p>\n    <p>当两个操作数都是整数时，python 会删除小数部分并给出舍入值，以获得准确的答案使用分层。例如，5/2 = 2.5，但两个操作数都是整数，因此在 python 中对此表达式的回答是2.要获得2.5作为答案，请使用//使用\n        floor division。所以，5 // 2 = 2.5</p>\n    <h4 id=\"118\">118. 标识符的最大可能长度是多少？</h4>\n    <p>a）31个字符\n        b）63个字符\n        c）79个字符\n        d）以上都不是</p>\n    <p>答案： d）以上都不是</p>\n    <p>标识符可以是任意长度。</p>\n    <h4 id=\"119\">119. 为什么不鼓励以下划线开头的局部变量名？</h4>\n    <p>a）它们用于表示类的私有变量\n        b）它们使解释器混淆\n        c）它们用于指示全局变量\n        d）它们减慢执行速度</p>\n    <p>答案： a）它们用于表示类的私有变量</p>\n    <p>由于 Python 没有私有变量的概念，因此前导下划线用于表示不能从类外部访问的变量。</p>\n    <h4 id=\"120\">120. 以下哪项是无效声明？</h4>\n    <p>a）abc = 1,000,000\n        b）abc = 1000 2000 3000\n        c）a，b，c =\n        1000,2000,3000 d）a<em>b</em>c = 1,000,000</p>\n    <p>答案： b）abc = 1000 2000 3000</p>\n    <p>变量名中不允许使用空格。</p>\n    <h4 id=\"121output\">121. 以下是什么Output？</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">try</span>:\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">'1'</span> != <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">raise</span> <span class=\"hljs-string\">\"someError\"</span>\n    <span class=\"hljs-keyword\">else</span>:\n        print(<span class=\"hljs-string\">\"someError has not occured\"</span>)\n<span class=\"hljs-keyword\">except</span> <span class=\"hljs-string\">\"someError\"</span>:\n    <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-string\">\"someError has occured\"</span>)\n</code></pre>\n    <p>a）发生了 someError\n        b）没有发生 someError\n        c）无效代码\n        d）以上都没有</p>\n    <p>答案： c）代码无效</p>\n    <p>新的异常类必须从 BaseException 继承。这里没有这样的遗产。</p>\n    <h4 id=\"122list12332221425list11\">122. 假设 list1 是[2,33,222,14,25]，什么是 list1 [-1]？</h4>\n    <p>a）错误\n        b）无\n        c）25\n        d）2</p>\n    <p>答案： c）25</p>\n    <p>索引 - 1 对应于列表中的最后一个索引。</p>\n    <h4 id=\"123cscorestxt\">123. 要打开文件 c：scores.txt 进行写作，我们使用</h4>\n    <p>a）outfile = open（“c：scores.txt”，“r”）\n        b）outfile = open（“c：scores.txt”，“w”）\n        c）outfile = open（file =“c：scores.txt “，”r“）\n        d）outfile = open（file =”c：scores.txt“，”o“）</p>\n    <p>答案： b）该位置包含双斜杠（），w用于表示正在写入文件。</p>\n    <h4 id=\"124output\">124. 以下是什么 Output？</h4>\n    <pre><code class=\"hljs python\">f = <span class=\"hljs-keyword\">None</span>\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range (<span class=\"hljs-number\">5</span>):\n    <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"data.txt\"</span>, <span class=\"hljs-string\">\"w\"</span>) <span\n                class=\"hljs-keyword\">as</span> f:\n        <span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">2</span>:\n            <span class=\"hljs-keyword\">break</span>\n\n<span class=\"hljs-keyword\">print</span> f.closed\n</code></pre>\n    <p>a）真\n        b）假\n        c）没有\n        d）错误</p>\n    <p>答案： a）是的 </p>\n    <p>与 open 文件一起使用时，WITH 语句可确保在 with 块退出时关闭文件对象。</p>\n    <h4 id=\"125tryexceptelseelse\">125. try-except-else 的 else 部分什么时候执行？</h4>\n    <p>a）总是\n        b）当发生异常时\n        c）当没有异常发生时\n        d）当除了块之外发生异常时</p>\n    <p>答案： c）没有异常发生时</p>\n    <p>当没有异常发生时，执行 else 部分。</p></div>\n</body>\n</html>","slug":"gitchat/python_Interview_120","published":1,"date":"2019-06-04T10:06:44.455Z","updated":"2019-06-04T10:06:44.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwhn24rr0000egh73snxg7bp","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>Python面试120题</title>\n</head>\n<body>\n<div id=\"article_content\" class=\"mazi-article-content dont-break-out\"><h3 id=\"python\">基本 Python 面试问题</h3>\n    <h4 id=\"1python\">1. Python 中的列表和元组有什么区别？</h4>\n    <p>列表是可变的，即可以编辑它们；元组是不可变的（元组是无法编辑的列表）。</p>\n    <p>列表比元组慢；元组比列表更快。</p>\n    <p>列表语法：list<em>1 = [10，'Chelsea'，20]；\n        元组语法：tup</em>1 =（10，'Chelsea'，20）。</p>\n    <h4 id=\"2python\">2. Python 的主要功能是什么？</h4>\n    <ul>\n        <li><p>Python 是一种解释型语言。这意味着，与 C 语言及其衍生语言不同，Python 在运行之前不需要进行编译。其他解释性语言包括 PHP 和 Ruby。</p></li>\n        <li><p>Python 是动态类型的，当你声明变量时，你不需要声明变量的类型。你可以直接编写类似 x=111，或者 x=\"I'm a string\" 这样的代码，程序不会报错。</p></li>\n        <li><p>Python 非常适合面向对象的编程（OOP），因为它允许类的定义以及组合和继承。Python 没有访问说明（如 C ++ 的 public，private）。</p></li>\n        <li><p>在 Python 中，函数是第一类对象。这意味着它们可以分配给变量，从其他函数返回并传递给函数。类也是第一类对象。</p></li>\n        <li><p>编写 Python 代码很快，但运行速度通常比编译语言慢。不过，Python 允许加入基于 C 语言编写的扩展，因此我们可以优化代码。numpy\n            就是一个很好的例子，它的运行速度相当快的，因为很多算数运算并不通过 Python 实现。</p></li>\n        <li><p>Python 用途非常广泛—— Web 应用程序、自动化、科学建模、大数据应用程序等等。它也经常被称作“胶水语言”，以使其他语言和组件发挥得很好。</p></li>\n    </ul>\n    <h4 id=\"3python\">3. python 是编程语言还是脚本语言？</h4>\n    <p>Python 能够编写脚本，但从一般意义上讲，它被认为是一种通用的编程语言。</p>\n    <h4 id=\"4python\">4. Python 是一种解释性语言吗？</h4>\n    <p>Python 是一种解释型语言。它的源代码可以直接运行，python 解释器会把源代码转换成中间语言，之后翻译成机器码再执行。</p>\n    <h4 id=\"5pep8\">5. 什么是 pep 8？</h4>\n    <p>PEP 代表 Python Enhancement Proposal。它是一组规则，指定如何格式化 Python 代码以获得最大可读性。</p>\n    <h4 id=\"6python\">6. 如何在 Python 中管理内存？</h4>\n    <p>python 中的内存管理由 Python 私有堆空间管理。所有 Python 对象和数据结构都位于私有堆中。程序员无权访问此私有堆。python 解释器负责处理这个问题。</p>\n    <p>Python 对象的堆空间分配由 Python 的内存管理器完成。核心 API 提供了一些程序员编写代码的工具。</p>\n    <p>Python 还有一个内置的垃圾收集器，它可以回收所有未使用的内存，并使其可用于堆空间。</p>\n    <h4 id=\"7python\">7. Python 中的命名空间是什么？</h4>\n    <p>命名空间是一个命名系统，用于确保名称是唯一的，以避免命名冲突。</p>\n    <h4 id=\"8pythonpath\">8. 什么是 PYTHONPATH？</h4>\n    <p>它是导入模块时使用的环境变量。每当导入模块时，也会查找 PYTHONPATH 以检查各个目录中是否存在导入的模块。解释器使用它来确定要加载的模块。</p>\n    <h4 id=\"9pythonpython\">9. 什么是 python 模块？在 Python 中命名一些常用的内置模块？</h4>\n    <p>Python 模块是包含 Python 代码的文件。此代码可以是函数类或变量。Python 模块是包含可执行代码的 .py 文件。</p>\n    <p>一些常用的内置模块是：</p>\n    <ul>\n        <li>os</li>\n        <li>sys</li>\n        <li>math</li>\n        <li>random</li>\n        <li>data time</li>\n        <li>JSON</li>\n    </ul>\n    <h4 id=\"10python\">10. Python 中的局部变量和全局变量是什么？</h4>\n    <p>全局变量：</p>\n    <p>在函数外或全局空间中声明的变量称为全局变量。这些变量可以由程序中的任何函数访问。</p>\n    <p>局部变量：</p>\n    <p>在函数内声明的任何变量都知道局部变量。此变量存在于本地空间中，而不是全局空间中。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs makefile\">a=2                       <span class=\"hljs-comment\">#Global Variable</span>\ndef add():\nb=3                       <span class=\"hljs-comment\">#Local Variable</span>\nc=a+b\nprint(c)\nadd()\nOutput：  5\n</code></pre>\n    <p>当你尝试访问函数 add（）之外的局部变量时，它将引发错误。</p>\n    <h4 id=\"11python\">11. python 是否区分大小写？</h4>\n    <p>是的。Python 是一种区分大小写的语言。</p>\n    <h4 id=\"12python\">12. Python 中的类型转换是什么？</h4>\n    <p>类型转换是指将一种数据类型转换为另一种数据类型。</p>\n    <ul>\n        <li><p>int（） - 将任何数据类型转换为整数类型</p></li>\n        <li><p>float（） - 将任何数据类型转换为 float 类型</p></li>\n        <li><p>ord（） - 将字符转换为整数</p></li>\n        <li><p>hex（） - 将整数转换为十六进制</p></li>\n        <li><p>oct（） - 将整数转换为八进制</p></li>\n        <li><p>tuple（） -此函数用于转换为元组。</p></li>\n        <li><p>set（） -此函数在转换为 set 后返回类型。</p></li>\n        <li><p>list（） - 此函数用于将任何数据类型转换为列表类型。</p></li>\n        <li><p>dict（） - 此函数用于将顺序元组（键，值）转换为字典。</p></li>\n        <li><p>str（） - 用于将整数转换为字符串。</p></li>\n        <li><p>complex（real，imag） - 此函数将实数转换为复数（实数，图像）数。</p></li>\n    </ul>\n    <h4 id=\"13python\">13. Python 中有哪些内置类型？</h4>\n    <p>Python 的不可变内置数据类型</p>\n    <ul>\n        <li>数字</li>\n        <li>字符串</li>\n        <li>元组</li>\n    </ul>\n    <p>Python 的可变内置数据类型</p>\n    <ul>\n        <li>名单</li>\n        <li>字典</li>\n        <li>集</li>\n    </ul>\n    <h4 id=\"14python\">14. python 中是否需要缩进？</h4>\n    <p>Python 需要缩进。它指定了一个代码块。循环，类，函数等中的所有代码都在缩进块中指定。通常使用四个空格字符来完成。如果你的代码没有必要缩进，它将无法准确执行并且也会抛出错误。</p>\n    <h4 id=\"15pythonarray\">15. Python array和列表有什么区别？</h4>\n    <p>Python 中的array和列表具有相同的存储数据方式。但是，array只能包含单个数据类型元素，而列表可以包含任何数据类型元素。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs php\">import <span class=\"hljs-keyword\">array</span> <span class=\"hljs-keyword\">as</span> arr\nMy_Array=arr.<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'i'</span>,[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>])\nMy_list=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">'abc'</span>,<span class=\"hljs-number\">1.20</span>]\n<span class=\"hljs-keyword\">print</span>(My_Array)\n<span class=\"hljs-keyword\">print</span>(My_list)\n\nOutput：\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'i'</span>，[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]）[<span class=\"hljs-number\">1</span>，<span class=\"hljs-string\">'abc'</span>，<span class=\"hljs-number\">1.2</span>]\n</code></pre>\n    <h4 id=\"16python\">16. Python 中的函数是什么？</h4>\n    <p>函数是一个代码块，只有在被调用时才会执行。要在 Python 中定义函数，请使用 def 关键字。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">Newfunc</span><span class=\"hljs-params\">()</span>:</span>\nprint(<span class=\"hljs-string\">\"Hi, Welcome to Edureka\"</span>)\nNewfunc(); <span class=\"hljs-comment\">#calling the function</span>\nOutput：Hi, Welcome to Edureka\n</code></pre>\n    <h4 id=\"17__init__\">17. <strong>init</strong> 是什么？</h4>\n    <p>__ init__ 是 Python 中的方法或构造函数。在创建类的新对象/实例时，将自动调用此方法来分配内存。所有类都有 <strong>init</strong> 方法。</p>\n    <p>以下是如何使用它的示例。</p>\n    <pre><code class=\"hljs objectivec\"><span class=\"hljs-keyword\">class</span> Employee:\ndef __init__(<span class=\"hljs-keyword\">self</span>, name, age,salary):\n<span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-keyword\">self</span>.age = age\n<span class=\"hljs-keyword\">self</span>.salary = <span class=\"hljs-number\">20000</span>\nE1 = Employee(<span class=\"hljs-string\">\"XYZ\"</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">20000</span>)\n <span class=\"hljs-comment\">/*E1 is the instance of class Employee.*/</span>\n<span class=\"hljs-comment\">/*__init__ allocates memory for E1. */</span>\nprint(E1.name)\nprint(E1.age)\nprint(E1.salary)\nOutput：\n\nXYZ\n\n<span class=\"hljs-number\">23</span>\n\n<span class=\"hljs-number\">20000</span>\n</code></pre>\n    <h4 id=\"18lambda\">18. 什么是 lambda 函数？</h4>\n    <p>匿名函数称为 lambda 函数。此函数可以包含任意数量的参数，但只能有一个语句。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs makefile\">a = lambda x,y : x+y\nprint(a(5, 6))\nOutput：  11\n</code></pre>\n    <h4 id=\"19pythonself\">19. Python 中的 self 是什么？</h4>\n    <p>self 是类的实例或对象。在 Python 中，这显然包含在第一个参数中。但是，Java 中的情况并非如此，它是可选的。它有助于区分具有局部变量的类的方法和属性。</p>\n    <p>init 方法中的 self 变量引用新创建的对象，而在其他方法中，它引用其方法被调用的对象。</p>\n    <h4 id=\"20\">20. 如何中断，继续并通过工作？</h4>\n    <ul>\n        <li>中断：当满足某些条件并且控制转移到下一个语句时允许循环终止。</li>\n        <li>继续：允许在满足某些特定条件时跳过循环的某些部分，并将控件转移到循环的开头。</li>\n        <li>通过：在语法上需要一些代码块时使用，但是你想跳过它的执行。这基本上是一个空操作。执行此操作时没有任何反应。</li>\n    </ul>\n    <h4 id=\"211\">21. [:: - 1} 的作用是什么？</h4>\n    <p>[:: - 1] 用于反转array或序列的顺序。</p>\n    <p>例如：</p>\n    <pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-built_in\">array</span> as arr\nMy_Array=arr.<span class=\"hljs-built_in\">array</span>(<span class=\"hljs-string\">'i'</span>,[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>])\nMy_Array[::<span class=\"hljs-number\">-1</span>]\nOutput：<span class=\"hljs-built_in\">array</span>（<span class=\"hljs-string\">'i'</span>，[<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>]）\n</code></pre>\n    <p>[:: - 1] 重新打印有序数据结构的反转副本，例如array或列表。原始array或列表保持不变。</p>\n    <h4 id=\"22python\">22. 如何在 Python 中随机化列表中的项目？</h4>\n    <p>考虑以下示例：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">from</span> random <span class=\"hljs-keyword\">import</span> shuffle\nx = [<span class=\"hljs-string\">'Keep'</span>, <span class=\"hljs-string\">'The'</span>, <span class=\"hljs-string\">'Blue'</span>, <span class=\"hljs-string\">'Flag'</span>, <span class=\"hljs-string\">'Flying'</span>, <span class=\"hljs-string\">'High'</span>]\nshuffle(x)\n<span class=\"hljs-built_in\">print</span>(x)\n\nOutput：\n[<span class=\"hljs-string\">'Flying'</span>，<span class=\"hljs-string\">'Keep'</span>，<span class=\"hljs-string\">'Blue'</span>，<span class=\"hljs-string\">'High'</span>，<span class=\"hljs-string\">'The'</span>，<span class=\"hljs-string\">'Flag'</span>]\n</code></pre>\n    <h4 id=\"23python\">23. 什么是 python 迭代器？</h4>\n    <p>迭代器是可以遍历或迭代的对象。</p>\n    <h4 id=\"24python\">24. 如何在 Python 中生成随机数？</h4>\n    <p>随机模块是用于生成随机数的标准模块。该方法定义为：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> random\nrandom.random\n</code></pre>\n    <p>语句 random.random（）方法返回 [0,1] 范围内的浮点数。该函数生成随机浮点数。随机类使用的方法是隐藏实例的绑定方法。可以使用 Random\n        的实例来显示创建不同线程实例的多线程程序。其中使用的其他随机生成器是：</p>\n    <ul>\n        <li>randrange（a，b）：它选择一个整数并定义[a，b]之间的范围。它通过从指定范围中随机选择元素来返回元素。它不构建范围对象。</li>\n        <li>uniform（a，b）：它选择一个在[a，b）范围内定义的浮点数 .Itt 返回浮点数</li>\n        <li>normalvariate（mean，sdev）：它用于正态分布，其中 mu 是平均值，sdev 是用于标准偏差的 sigma。</li>\n        <li>使用和实例化的 Random 类创建一个独立的多个随机数生成器。</li>\n    </ul>\n    <h4 id=\"25rangexrange\">25. range＆xrange 有什么区别？</h4>\n    <p>在大多数情况下，xrange 和 range 在功能方面完全相同。它们都提供了一种生成整数列表供你使用的方法，但是请你随意使用。唯一的区别是 range 返回一个 Python 列表对象，x range 返回一个 xrange\n        对象。</p>\n    <p>这意味着 xrange 实际上并不像运行时那样在运行时生成静态列表。它使用称为 yielding 的特殊技术根据需要创建值。该技术与一种称为生成器的对象一起使用。这意味着，如果你有一个非常巨大的范围，你想生成一个列表，比如\n        10 亿，xrange 就是要使用的功能。</p>\n    <p>如果你有一个真正的内存敏感系统，如你正在使用的手机，尤其如此，因为范围将使用尽可能多的内存来创建整数array，这可能会导致内存错误并导致崩溃程序。这是一个记忆饥饿的野兽。</p>\n    <h4 id=\"26python\">26. 你如何在 python 中写注释？</h4>\n    <p>Python 中的注释以＃字符开头。但是，有时候，使用 docstrings（三重引号中包含的字符串）进行注释。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-comment\">#Comments in python start like this</span>\n<span class=\"hljs-keyword\">print</span>（“comment <span class=\"hljs-keyword\">in</span> python start <span class=\"hljs-keyword\">with</span> a <span class=\"hljs-comment\">#”）</span>\nOutput：comment <span class=\"hljs-keyword\">in</span> python start <span class=\"hljs-keyword\">with</span> a <span class=\"hljs-comment\">#</span>\n</code></pre>\n    <h4 id=\"27picklingunpickling\">27. 什么是 pickling 和 unpickling？</h4>\n    <p>Pickle 模块接受任何 Python 对象并将其转换为字符串表示形式，并使用 dump 函数将其转储到文件中，此过程称为 pickling。从存储的字符串表示中检索原始 Python 对象的过程称为\n        unpickling。</p>\n    <h4 id=\"28python\">28. python 中的生成器是什么？</h4>\n    <p>返回一组可迭代项的函数称为生成器。</p>\n    <h4 id=\"29\">29. 你如何把字符串的第一个字母大写？</h4>\n    <p>在 Python 中，capitalize（）方法将字符串的第一个字母大写。如果字符串在开头已经包含大写字母，那么它将返回原始字符串。</p>\n    <h4 id=\"30\">30. 如何将字符串转换为全小写？</h4>\n    <p>要将字符串转换为小写，可以使用 lower（）函数。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs bash\">stg=<span class=\"hljs-string\">'ABCD'</span>\n<span class=\"hljs-built_in\">print</span>(stg.lower())\nOutput： abcd\n</code></pre>\n    <h4 id=\"31python\">31. 如何在 python 中注释多行？</h4>\n    <p>多行注释出现在多行中。所有要评论的行都要以＃为前缀。你还可以使用非常好的 快捷方式来注释多行。你需要做的就是按住 Ctrl 键并在每个想要包含＃字符的地方左键单击并键入一次＃。这将注释你引入光标的所有行。</p>\n    <h4 id=\"32pythondocstrings\">32. Python 中的 Docstrings 是什么？</h4>\n    <p>Docstrings 实际上不是评论，它们是文档字符串。这些文档字符串在三引号内。它们没有分配给任何变量，因此有时也用于评论的目的。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-string\">\"\"\"\nUsing docstring as a comment.\nThis code divides 2 numbers\n\"\"\"</span>\nx=<span class=\"hljs-number\">8</span>\ny=<span class=\"hljs-number\">4</span>\nz=x/y\nprint(z)\nOutput： <span class=\"hljs-number\">2.0</span>\n</code></pre>\n    <h4 id=\"33isnotin\">33. 操作符 is、not 和 in 的目的是什么？</h4>\n    <p>操作符是特殊功能。它们采用一个或多个值并产生相应的结果。</p>\n    <ul>\n        <li><p>is：当 2 个操作数为 true 时返回 true（例如：“a”是'a'）</p></li>\n        <li><p>not：返回布尔值的倒数</p></li>\n        <li><p>in：检查某个元素是否存在于某个序列中</p></li>\n    </ul>\n    <h4 id=\"34pythonhelpdir\">34. Python 中 help（）和 dir（）函数的用法是什么？</h4>\n    <p>Help（）和dir（）这两个函数都可以从 Python 解释器访问，并用于查看内置函数的合并转储。 </p>\n    <ul>\n        <li>Help（）函数：help（）函数用于显示文档字符串，还可以帮助你查看与模块，关键字，属性等相关的帮助。</li>\n        <li>Dir（）函数：dir（）函数用于显示定义的符号。</li>\n    </ul>\n    <h4 id=\"35python\">35. 每当 Python 退出时，为什么不是所有的内存都被解除分配？</h4>\n    <ul>\n        <li>每当 Python 退出时，尤其是那些对其他对象具有循环引用的 Python 模块或者从全局名称空间引用的对象并不总是被解除分配或释放。</li>\n        <li>无法解除分配C库保留的那些内存部分。</li>\n        <li>退出时，由于拥有自己的高效清理机制，Python 会尝试取消分配/销毁其他所有对象。</li>\n    </ul>\n    <h4 id=\"36pythondictionary\">36. Python 中的字典（dictionary）是什么？</h4>\n    <p>Python 中的内置数据类型称为字典（dictionary）。它定义了键和值之间的一对一关系。字典包含一对键及其对应的值。字典由键索引。</p>\n    <p>我们来举个例子：</p>\n    <p>以下示例包含一些键，Country, Capital 和 PM。它们的相应值分别是 India, Delhi 和 Modi respectively。</p>\n    <pre><code class=\"hljs bash\">dict={<span class=\"hljs-string\">'Country'</span>:<span class=\"hljs-string\">'India'</span>,<span class=\"hljs-string\">'Capital'</span>:<span class=\"hljs-string\">'Delhi'</span>,<span class=\"hljs-string\">'PM'</span>:<span class=\"hljs-string\">'Modi'</span>}\n<span class=\"hljs-built_in\">print</span> dict[Country]\nIndia\n\n<span class=\"hljs-built_in\">print</span> dict[Capital]\nDelhi\n\n<span class=\"hljs-built_in\">print</span> dict[PM]\nModi\n</code></pre>\n    <h4 id=\"37python\">37. 如何在 python 中使用三元运算符？</h4>\n    <p>Ternary 运算符是用于显示条件语句的运算符。这包含 true 或 false 值，并且必须为其评估语句。</p>\n    <p>语法：</p>\n    <p>三元运算符将被给出为：</p>\n    <pre><code class=\"hljs cs\">[<span class=\"hljs-meta\">on_true</span>] <span class=\"hljs-keyword\">if</span> [expression] <span class=\"hljs-keyword\">else</span> [on_false] x，y = <span class=\"hljs-number\">25</span>,<span class=\"hljs-number\">50</span>big = x <span class=\"hljs-keyword\">if</span> x &lt;y <span class=\"hljs-keyword\">else</span> y\n</code></pre>\n    <p>例：</p>\n    <p>表达式的计算方式与 x &lt;y else y 一样，在这种情况下，如果 x &lt;y 为真，则返回值为 big = x，如果不正确则返回 big = y 作为结果。</p>\n    <h4 id=\"38argskwargs\">38. 这是什么意思：* args，** kwargs？我们为什么要用呢？</h4>\n    <p>当我们不确定将多少个参数传递给函数，或者我们想要将存储的列表或参数元组传递给函数时，我们使用* args。*<em>当我们不知道将多少关键字参数传递给函数时使用 kwargs，或者它可以用于将字典的值作为关键字参数传递。标识符\n        args 和 kwargs 是一个约定，你也可以使用</em> bob 和 ** billy，但这不是明智之举。</p>\n    <h4 id=\"39len\">39. len（）的作用是什么？</h4>\n    <p>用于确定字符串，列表，array等的长度。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs makefile\">stg='ABCD'\nlen(stg)\n</code></pre>\n    <h4 id=\"40pythonresplitsubsubn\">40. Python 中“re”模块的 split（），sub（），subn（）这三个方法的作用是什么？</h4>\n    <p>要修改字符串，Python 的“re”模块提供了 3 种方法。他们是：</p>\n    <ul>\n        <li>split（） - 使用正则表达式模式将给定字符串“拆分”到列表中。</li>\n        <li>sub（） - 查找正则表达式模式匹配的所有子字符串，然后用不同的字符串替换它们</li>\n        <li>subn（） - 它类似于sub（），并且还返回新字符串和替换的次数\u0010。</li>\n    </ul>\n    <h4 id=\"41\">41. 什么是负指数，为什么使用它们？</h4>\n    <p>Python 中的序列被编入索引，它由正数和负array成。积极的数字使用'0'作为第一个索引，'1'作为第二个索引，进程继续使用。</p>\n    <p>负数的索引从'-1'开始，表示序列中的最后一个索引，' - 2'作为倒数第二个索引，序列像正数一样前进。</p>\n    <p>负索引用于从字符串中删除任何换行符，并允许该字符串除了作为S [： - 1]给出的最后一个字符。负索引还用于显示索引以正确的顺序表示字符串。</p>\n    <h4 id=\"42python\">42. 什么是 Python 包？</h4>\n    <p>Python 包是包含多个模块的命名空间。</p>\n    <h4 id=\"43python\">43. 如何在 Python 中删除文件？</h4>\n    <p>要在 Python 中删除文件，你需要导入操作系统模块。之后，你需要使用os.remove（）函数。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> os\nos.remove(<span class=\"hljs-string\">\"xyz.txt\"</span>)\n</code></pre>\n    <h4 id=\"44python\">44. 什么是 python 的内置类型？</h4>\n    <p>Python 中的内置类型如下：</p>\n    <ul>\n        <li>整型</li>\n        <li>浮点</li>\n        <li>复数</li>\n        <li>字符串</li>\n        <li>布尔</li>\n        <li>内置功能</li>\n    </ul>\n    <h4 id=\"45numpypython\">45. NumPy 阵列在（嵌套）Python 列表中提供了哪些优势？</h4>\n    <ul>\n        <li>Python 的列表是高效的通用容器。它们支持（相当）有效的插入，删除，追加和连接，Python 的列表推导使它们易于构造和操作。</li>\n        <li>它们有一定的局限性：它们不支持元素化加法和乘法等“向量化”操作，并且它们可以包含不同类型的对象这一事实意味着 Python 必须存储每个元素的类型信息，并且必须在操作时执行类型调度代码在每个元素上。</li>\n        <li>NumPy 不仅效率更高; 它也更方便。你可以免费获得大量的向量和矩阵运算，这有时可以避免不必要的工作。它们也得到有效实施。</li>\n        <li>NumPy array更快，你可以使用 NumPy、FFT、卷积、快速搜索、基本统计、线性代数、直方图等内置。</li>\n    </ul>\n    <h4 id=\"46pythonarray\">46. 如何将值添加到 python array？</h4>\n    <p>可以使用 append（）， extend（） 和 insert（i，x） 函数将元素添加到array中 。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs php\">a=arr.<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'d'</span>, [<span class=\"hljs-number\">1.1</span> , <span class=\"hljs-number\">2.1</span> ,<span class=\"hljs-number\">3.1</span>] )\na.append(<span class=\"hljs-number\">3.4</span>)\n<span class=\"hljs-keyword\">print</span>(a)\na.extend([<span class=\"hljs-number\">4.5</span>,<span class=\"hljs-number\">6.3</span>,<span class=\"hljs-number\">6.8</span>])\n<span class=\"hljs-keyword\">print</span>(a)\na.insert(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3.8</span>)\n<span class=\"hljs-keyword\">print</span>(a)\nOutput：\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.1</span>,<span class=\"hljs-number\">3.4</span>]）\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.1</span>,<span class=\"hljs-number\">3.4</span>,<span class=\"hljs-number\">4.5</span>,<span class=\"hljs-number\">6.3</span>,<span class=\"hljs-number\">6.8</span>]）\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.8</span>,<span class=\"hljs-number\">3.1</span>,<span class=\"hljs-number\">3.4</span>,<span class=\"hljs-number\">4.5</span>,<span class=\"hljs-number\">6.3</span>,<span class=\"hljs-number\">6.8</span>]）\n</code></pre>\n    <h4 id=\"47pythonarray\">47. 如何删除 python array的值？</h4>\n    <p>可以使用 pop（） 或 remove（） 方法删除array元素 。这两个函数之间的区别在于前者返回已删除的值，而后者则不返回。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs php\">a=arr.<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'d'</span>, [<span class=\"hljs-number\">1.1</span>, <span class=\"hljs-number\">2.2</span>, <span class=\"hljs-number\">3.8</span>, <span class=\"hljs-number\">3.1</span>, <span class=\"hljs-number\">3.7</span>, <span class=\"hljs-number\">1.2</span>, <span class=\"hljs-number\">4.6</span>])\n<span class=\"hljs-keyword\">print</span>(a.pop())\n<span class=\"hljs-keyword\">print</span>(a.pop(<span class=\"hljs-number\">3</span>))\na.remove(<span class=\"hljs-number\">1.1</span>)\n<span class=\"hljs-keyword\">print</span>(a)\nOutput：\n\n<span class=\"hljs-number\">4.6</span>\n\n<span class=\"hljs-number\">3.1</span>\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.8</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">1.2</span>]）\n</code></pre>\n    <h4 id=\"48pythonoops\">48. Python 有 OOps 概念吗？</h4>\n    <p>Python 是一种面向对象的编程语言。这意味着可以通过创建对象模型在 python 中解决任何程序。但是，Python 可以被视为程序语言和结构语言。</p>\n    <h4 id=\"49\">49. 深拷贝和浅拷贝有什么区别？</h4>\n    <p>\n        创建新实例类型时使用浅拷贝，并保留在新实例中复制的值。浅拷贝用于复制引用指针，就像复制值一样。这些引用指向原始对象，并且在类的任何成员中所做的更改也将影响它的原始副本。浅拷贝允许更快地执行程序，它取决于所使用的数据的大小。</p>\n    <p>\n        深层复制用于存储已复制的值。深层复制不会将引用指针复制到对象。它引用一个对象，并存储一些其他对象指向的新对象。原始副本中所做的更改不会影响使用该对象的任何其他副本。由于为每个被调用的对象创建了某些副本，因此深层复制会使程序的执行速度变慢。</p>\n    <h4 id=\"50python\">50. 如何在 Python 中实现多线程？</h4>\n    <ul>\n        <li>Python 有一个多线程包，但是如果你想要多线程来加速你的代码，那么使用它通常不是一个好主意。</li>\n        <li>Python 有一个名为 Global Interpreter Lock（GIL）的结构。GIL 确保每次只能执行一个“线程”。一个线程获取 GIL，做一点工作，然后将 GIL 传递到下一个线程。</li>\n        <li>这种情况很快发生，因此对于人眼看来，你的线程似乎并行执行，但它们实际上只是轮流使用相同的 CPU 核心。</li>\n        <li>所有这些 GIL 传递都增加了执行的开销。这意味着如果你想让代码运行得更快，那么使用线程包通常不是一个好主意。</li>\n    </ul>\n    <h4 id=\"51python\">51. 在 python 中编译和链接的过程是什么？</h4>\n    <p>编译和链接允许正确编译新扩展而不会出现任何错误，并且只有在通过编译过程时才能进行链接。如果使用动态加载，则它取决于系统提供的样式。python 解释器可用于提供配置设置文件的动态加载，并将重建解释器。</p>\n    <p>这需要的步骤如下：</p>\n    <ol>\n        <li>使用任何名称以及系统编译器支持的任何语言创建文件。例如 file.c或 file.cpp</li>\n        <li>将此文件放在正在使用的发行版的 Modules /目录中。</li>\n        <li>在 Modules /目录中存在的 Setup.local 文件中添加一行。</li>\n        <li>使用 spam file.o 运行该文件</li>\n        <li>通过在顶级目录上使用 make 命令成功运行此重建解释器之后。</li>\n        <li>如果文件已更改，则使用命令“make Makefile”运行rebuildMakefile。</li>\n    </ol>\n    <h4 id=\"52python\">52. 什么是 Python 库？举几个例子。</h4>\n    <p>Python 库是 Python 包的集合。一些主要使用的 python 库是 - Numpy，Pandas，Matplotlib，Scikit-learn 等等。</p>\n    <h4 id=\"53\">53. 什么是拆分用于？</h4>\n    <p>split（）方法用于在 Python 中分隔给定的字符串。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs perl\">a=<span class=\"hljs-string\">\"edureka python\"</span>\n<span class=\"hljs-keyword\">print</span>(a.<span class=\"hljs-keyword\">split</span>())\nOutput：  [<span class=\"hljs-string\">'edureka'</span>，<span class=\"hljs-string\">'python'</span>]\n</code></pre>\n    <h4 id=\"54python\">54. 如何在 python 中导入模块？</h4>\n    <p>可以使用 import 关键字导入模块。你可以通过三种方式导入模块 -</p>\n    <p>例：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> array           <span class=\"hljs-comment\">#importing using the original module name</span>\n<span class=\"hljs-keyword\">import</span> array <span class=\"hljs-keyword\">as</span> arr    <span class=\"hljs-comment\"># importing using an alias name</span>\n<span class=\"hljs-keyword\">from</span> array <span class=\"hljs-keyword\">import</span> *    <span class=\"hljs-comment\">#imports everything present in the array module</span>\n</code></pre>\n    <h3 id=\"oops\">OOPS 面试问题</h3>\n    <h4 id=\"55python\">55. 用一个例子解释 Python 中的继承。</h4>\n    <p>继承允许一个类获得另一个类的所有成员（比如属性和方法）。继承提供代码可重用性，使创建和维护应用程序更容易。我们继承的类称为超类，继承的类称为派生/子类。</p>\n    <p>它们是 Python 支持的不同类型的继承：</p>\n    <ul>\n        <li>单一继承 - 派生类获取单个超类的成员。</li>\n        <li>多级继承 - 从基类base1继承的派生类d1，d2继承自base2。</li>\n        <li>分层继承 - 从一个基类可以继承任意数量的子类</li>\n        <li>多重继承 - 派生类从多个基类继承。</li>\n    </ul>\n    <h4 id=\"56python\">56. 如何在 Python 中创建类？</h4>\n    <p>Python 中的类是使用 class 关键字创建的。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span>:</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-keyword\">self</span>.name = name\nE1=Employee(<span class=\"hljs-string\">\"abc\"</span>)\nprint(E1.name)\nOutput： abc\n</code></pre>\n    <h4 id=\"57\">57. 什么是猴子补丁？</h4>\n    <p>在 Python 中，术语猴子补丁仅指在运行时对类或模块的动态修改。\n        考虑以下示例：</p>\n    <pre><code class=\"m.py language-m.py\">class MyClass:\ndef f(self):\nprint \"f()\"\n</code></pre>\n    <p>然后我们可以像这样运行猴子补丁测试：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> m\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">monkey_f</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"monkey_f()\"</span>\n\nm.MyClass.f = monkey_f\nobj = m.MyClass()\nobj.f()\nOutput如下：\n\nmonkey_f（）\n</code></pre>\n    <h4 id=\"58python\">58. python 是否支持多重继承？</h4>\n    <p>多重继承意味着可以从多个父类派生一个类。与 Java 不同，Python 确实支持多重继承。</p>\n    <h4 id=\"59python\">59. Python 中的多态是什么？</h4>\n    <p>多态意味着能够采取多种形式。因此，例如，如果父类具有名为 ABC 的方法，则子类也可以具有具有相同名称 ABC 的方法，该方法具有其自己的参数和变量。Python 允许多态。</p>\n    <h4 id=\"60python\">60. 在 Python 中怎样定义封装？</h4>\n    <p>封装意味着将代码和数据绑定在一起。就是使用私有化的方法，把一些属性或者是方法私有化，外部无法调用。在 Python 中，私有化属性或者方法，可以在属性、方法名字前加上双下划线。</p>\n    <h4 id=\"61python\">61. 你如何在 Python 中进行数据抽象？</h4>\n    <p>数据抽象仅提供所需的详细信息并将实现隐藏起来。它可以通过使用接口和抽象类在 Python 中实现。</p>\n    <h4 id=\"62python\">62. python 是否使用了访问说明符？</h4>\n    <p>Python 不会剥夺对实例变量或函数的访问权限。Python 规定了使用单个或双下划线为变量，函数或方法的名称添加前缀的概念，以模仿受保护和私有访问说明符的行为。 </p>\n    <h4 id=\"63python\">63. 如何在 Python 中创建一个空类？</h4>\n    <p>空类是一个没有在其块中定义的代码的类。它可以使用 pass 关键字创建 。但是，你可以在类本身之外创建此类的对象。IN PYTHON PASS 命令在执行时不执行任何操作。这是一个空语句。 </p>\n    <p>例如</p>\n    <pre><code class=\"hljs makefile\">class a:\n    pass\nobj=a()\nobj.name=<span class=\"hljs-string\">\"xyz\"</span>\nprint(<span class=\"hljs-string\">\"Name = \"</span>,obj.name)\nOutput：\n\nName = xyz\n</code></pre>\n    <h4 id=\"64object\">64. object（）有什么作用？</h4>\n    <p>它返回一个无特征的对象，它是所有类的基础。此外，它不采取任何参数。</p>\n    <h3 id=\"python-1\">基本 Python 编码</h3>\n    <h4 id=\"65python\">65. 用 Python 编写程序来执行冒泡排序算法。</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bs</span><span class=\"hljs-params\">(a)</span>:</span>             <span class=\"hljs-comment\"># a = name of list</span>\n    b=len(a)<span class=\"hljs-number\">-1</span>         <span class=\"hljs-comment\"># minus 1 because we always compare 2 adjacent values</span>\n\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(b):\n        <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> range(b-x):\n            <span class=\"hljs-keyword\">if</span> a[y]&gt;a[y+<span class=\"hljs-number\">1</span>]:\n                a[y],a[y+<span class=\"hljs-number\">1</span>]=a[y+<span class=\"hljs-number\">1</span>],a[y]\n    <span class=\"hljs-keyword\">return</span> a\na=[<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">54</span>,<span class=\"hljs-number\">87</span>]\nbs(a)\n产出：  [<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">54</span>,<span class=\"hljs-number\">87</span>]\n</code></pre>\n    <h4 id=\"66pythonstar\">66. 用 Python 编写程序来生成 Star 三角形。</h4>\n    <pre><code class=\"hljs markdown\">def pyfunc(r):\n<span class=\"hljs-code\">    for x in range(r):</span>\n<span class=\"hljs-code\">        print(' '*(r-x-1)+'*'*(2*x+1))    </span>\npyfunc(9)\nOutput：\n\n<span class=\"hljs-code\">        *</span>\n<span class=\"hljs-code\">       ***</span>\n<span class=\"hljs-code\">      *****</span>\n<span class=\"hljs-code\">     *******</span>\n<span class=\"hljs-code\">    *********</span>\n   <span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>*\n  <span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-emphasis\">***</span>\n <span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>\n<span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>**\n</code></pre>\n    <h4 id=\"67pythonfibonacci\">67. 编写一个程序，用Python生成Fibonacci系列。</h4>\n    <pre><code class=\"hljs perl\"><span class=\"hljs-comment\"># Enter number of terms needed                   #0,1,1,2,3,5....</span>\na=<span class=\"hljs-keyword\">int</span>(input(<span class=\"hljs-string\">\"Enter the terms\"</span>))\nf=<span class=\"hljs-number\">0</span>                                         <span class=\"hljs-comment\">#first element of series</span>\n<span class=\"hljs-keyword\">s</span>=<span class=\"hljs-number\">1</span>                                         <span class=\"hljs-comment\">#second element of series</span>\n<span class=\"hljs-keyword\">if</span> a&lt;=<span class=\"hljs-number\">0</span>:\n    <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"The requested series is\n\"</span>,f)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">print</span>(f,<span class=\"hljs-keyword\">s</span>,end=<span class=\"hljs-string\">\" \"</span>)\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">x</span> in range(<span class=\"hljs-number\">2</span>,a):\n        <span class=\"hljs-keyword\">next</span>=f+<span class=\"hljs-keyword\">s</span>\n        <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-keyword\">next</span>,end=<span class=\"hljs-string\">\" \"</span>)\n        f=<span class=\"hljs-keyword\">s</span>\n        <span class=\"hljs-keyword\">s</span>=<span class=\"hljs-keyword\">next</span>&lt;<span class=\"hljs-regexp\">/pre&gt;\n\nOutput：input 5 0 1 1 2 3\n</span></code></pre>\n    <h4 id=\"68python\">68. 用 Python 编写程序来检查数字是否为素数。</h4>\n    <pre><code class=\"hljs perl\">a=<span class=\"hljs-keyword\">int</span>(input(<span class=\"hljs-string\">\"enter number\"</span>))\n<span class=\"hljs-keyword\">if</span> a&gt;<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">x</span> in range(<span class=\"hljs-number\">2</span>,a):\n        <span class=\"hljs-keyword\">if</span>(a%x)==<span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"not prime\"</span>)\n            <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"Prime\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"not prime\"</span>)\nOutput：\n\ninput <span class=\"hljs-number\">3</span>\n\nPrime\n</code></pre>\n    <h4 id=\"69python\">69. 用 Python 编写程序来检查序列是否是回文序列。</h4>\n    <pre><code class=\"hljs makefile\">a=input(<span class=\"hljs-string\">\"enter sequence\"</span>)\nb=a[::-1]\nif a==b:\n    print(<span class=\"hljs-string\">\"palindrome\"</span>)\n<span class=\"hljs-section\">else:</span>\n    print(<span class=\"hljs-string\">\"Not a Palindrome\"</span>)\nOutput：\n\nenter sequence 323 palindrome\n</code></pre>\n    <h4 id=\"70\">70. 写一个单行，用于计算文件中大写字母的数量。即使文件太大而无法放入内存，你的代码也应该可以正常工作。</h4>\n    <p>让我们先写一个多行解决方案，然后将其转换为单行代码。</p>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">with <span class=\"hljs-title\">open</span>(<span class=\"hljs-params\">SOME_LARGE_FILE</span>) <span class=\"hljs-keyword\">as</span> fh:\ncount </span>= <span class=\"hljs-number\">0</span>\ntext = fh.read()\n<span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> text:\n    <span class=\"hljs-keyword\">if</span> character.isupper():\ncount += <span class=\"hljs-number\">1</span>\n我们现在尝试将其转换为单行。\n\n<span class=\"hljs-function\">count <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> fh <span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> line <span class=\"hljs-keyword\">if</span> character.isupper(</span>))\n</span></code></pre>\n    <h4 id=\"71python\">71. 在 Python 中为数值数据集编写排序算法。</h4>\n    <p>以下代码可用于在 Python 中对列表进行排序：</p>\n    <pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">list</span> = [<span class=\"hljs-string\">\"1\"</span>, <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"0\"</span>, <span class=\"hljs-string\">\"6\"</span>, <span class=\"hljs-string\">\"9\"</span>]\n<span class=\"hljs-built_in\">list</span> = [<span class=\"hljs-keyword\">int</span>(i) <span class=\"hljs-keyword\">for</span> i in <span class=\"hljs-built_in\">list</span>]\n<span class=\"hljs-built_in\">list</span>.sort()\nprint (<span class=\"hljs-built_in\">list</span>)\n</code></pre>\n    <h4 id=\"72a0a1an\">72. 查看下面的代码，记下 A0，A1，... An 的最终值。</h4>\n    <pre><code class=\"hljs makefile\">A0 = dict(zip(('a','b','c','d','e'),(1,2,3,4,5)))\nA1 = range(10)A2 = sorted([i for i in A1 if i in A0])\nA3 = sorted([A0[s] for s in A0])\nA4 = [i for i in A1 if i in A3]\nA5 = {i:i*i for i in A1}\nA6 = [[i,i*i] for i in A1]\nprint(A0,A1,A2,A3,A4,A5,A6)\n\n以下是 A0，A1，... A6 的最终 Output\n\nA0 = {'a'：1，'c'：3，'b'：2，'e'：5，'d'：4}\nA1 =range（0,10）\nA2 = []\nA3 = [1,2,3,4,5]\nA4 = [1,2,3,4,5]\nA5 = {0：0,1：1,2：4,3：9,4：16,5：25,6：36,7：49,8：64,9：81}\nA6 = [[0,0]，[1,1]，[2,4]，[3,9]，[4,16]，[5,25]，[6,36]，[7,49] ，[8,64]，[9,81]]\n</code></pre>\n    <h3 id=\"python-2\">Python 库面试问题</h3>\n    <h4 id=\"73flask\">73. 解释 Flask 是什么及其好处？</h4>\n    <p>Flask 是基于“Werkzeug，Jinja2 和良好意图”BSD 许可证的 Python 网络微框架。Werkzeug 和 Jinja2\n        是它的两个依赖项。这意味着它对外部库几乎没有依赖性。它使框架轻松，同时有一点依赖更新和更少的安全漏洞。</p>\n    <p>会话基本上允许你记住从一个请求到另一个请求的信息。在一个瓶子中，会话使用签名的 cookie，以便用户可以查看会话内容并进行修改。如果只有密钥 Flask.secret_key，则用户可以修改会话。</p>\n    <h4 id=\"74djangoflask\">74. Django 比 Flask 好吗？</h4>\n    <p>Django 和 Flask 将 Web 浏览器中输入的 URL 或地址映射到 Python 中的函数。 </p>\n    <p>与 Django 相比，Flask 要简单得多，但 Flask 并没有为你做很多事情意味着你需要指定细节，而 Django 为你做了很多事情，你不需要做太多工作。Django 由预编写的代码组成，用户需要分析这些代码，而\n        Flask 则允许用户创建自己的代码，因此，使代码更容易理解。从技术上讲，两者都同样好，都有自己的优点和缺点。</p>\n    <h4 id=\"75djangopyramidflask\">75. 提到 Django，Pyramid 和 Flask 之间的差异。</h4>\n    <ul>\n        <li>Flask 是一个“微框架”，主要用于具有更简单要求的小型应用程序。在烧瓶中，你必须使用外部库。Flask 已准备好使用。</li>\n        <li>Pyramid 适用于大型应用程序。它提供了灵活性，并允许开发人员为他们的项目使用正确的工具。开发人员可以选择数据库，URL 结构，模板样式等。金字塔是可配置的。</li>\n        <li>Django 也可以像 Pyramid 一样用于更大的应用程序。它包括一个ORM。</li>\n    </ul>\n    <h4 id=\"76django\">76. 讨论 Django 架构。</h4>\n    <p>Django MVT 模式：</p>\n    <p><img src=\"https://images.gitbook.cn/6ec77050-85c0-11e9-9a8d-f9d4f0d85b82\" alt=\"enter image description here\"></p>\n    <p>开发人员提供模型，视图和模板，然后将其映射到URL，Django 可以为用户提供服务。</p>\n    <h4 id=\"77django\">77. 解释如何在 Django 中设置数据库。</h4>\n    <p>你可以使用命令 edit mysite / setting.py，它是一个普通的 python 模块，模块级别代表 Django 设置。</p>\n    <p>Django 默认使用 SQLite; 对于 Django 用户来说这很容易，因此不需要任何其他类型的安装。如果你的数据库选择不同，则必须使用 DATABASE'default' 项中的以下键来匹配你的数据库连接设置。</p>\n    <ul>\n        <li>引擎：你可以使用\n            'django.db.backends.sqlite3'，'django.db.backeneds.mysql'，'django.db.backends.postgresql_psycopg2'，'django.db.backends.oracle'等来更改数据库。\n        </li>\n        <li>名称：数据库的名称。如果你使用 SQLite 作为数据库，那么在这种情况下，数据库将是你计算机上的文件，Name 应该是完整的绝对路径，包括该文件的文件名。</li>\n        <li>如果你不选择 SQLite 作为数据库，则必须添加密码，主机，用户等设置。</li>\n    </ul>\n    <p>Django 使用 SQLite 作为默认数据库，它将数据作为单个文件存储在文件系统中。如果你有数据库服务器-PostgreSQL，MySQL，Oracle，MSSQL-并且想要使用它而不是\n        SQLite，那么使用数据库的管理工具为你的 Django 项目创建一个新的数据库。无论哪种方式，在你的（空）数据库到位的情况下，剩下的就是告诉 Django 如何使用它。这是项目的 settings.py\n        文件的来源。</p>\n    <p>我们将以下代码行添加到 setting.py 文件中：</p>\n    <pre><code class=\"hljs cs\">DATABASES = {\n     <span class=\"hljs-string\">'default'</span>: {\n          <span class=\"hljs-string\">'ENGINE'</span> : <span class=\"hljs-string\">'django.db.backends.sqlite3'</span>,\n          <span class=\"hljs-string\">'NAME'</span> : os.path.<span class=\"hljs-keyword\">join</span>(BASE_DIR, <span class=\"hljs-string\">'db.sqlite3'</span>),\n     }\n}\n</code></pre>\n    <h4 id=\"78djangoview\">78. 举例说明如何在 Django 中编写 VIEW？</h4>\n    <p>这是我们在 Django 中使用 write 一个视图的方法：</p>\n    <pre><code class=\"hljs xml\">from django.http import HttpResponse\nimport datetime\n\ndef Current_datetime(request):\n     now = datetime.datetime.now()\n     html = \"<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>It is now %s<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span> % now\n     return HttpResponse(html)\n</code></pre>\n    <h4 id=\"79django\">79. 提及 Django 模板的组成部分。</h4>\n    <p>模板是一个简单的文本文件。它可以创建任何基于文本的格式，如 XML、CSV、HTML 等。模板包含在评估模板时替换为值的变量和控制模板逻辑的标记（％tag％）。</p>\n    <p><img src=\"https://images.gitbook.cn/984aba40-85c0-11e9-9344-293841b71658\" alt=\"enter image description here\"></p>\n    <h4 id=\"80django\">80. 在 Django 框架中解释会话的使用？</h4>\n    <p>Django 提供了一个会话，允许你基于每个站点访问者存储和检索数据。Django 通过在客户端放置会话 ID cookie 并在服务器端存储所有相关数据来抽象发送和接收 cookie 的过程。</p>\n    <p><img src=\"https://images.gitbook.cn/a31e0760-85c0-11e9-9a4b-7f98565be244\" alt=\"enter image description here\"></p>\n    <p>所以数据本身并不存储在客户端。从安全角度来看，这很好。</p>\n    <h4 id=\"81django\">81. 列出 Django 中的继承样式。</h4>\n    <p>在 Django 中，有三种可能的继承样式：</p>\n    <ul>\n        <li>抽象基类：当你只希望父类包含你不想为每个子模型键入的信息时，使用此样式。</li>\n        <li>多表继承：使用此样式如果要对现有模型进行子类化，并且需要每个模型都有自己的数据库表。</li>\n        <li>代理模型：你可以使用此模型，如果你只想修改模型的Python级别行为，而无需更改模型的字段。</li>\n    </ul>\n    <h3 id=\"webscrapingpython\">Web Scraping - Python 面试问题</h3>\n    <h4 id=\"82url\">82. 如何使用我已经知道的 URL 地址本地保存图像？</h4>\n    <p>我们将使用以下代码从 URL 地址本地保存图像</p>\n    <pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">urllib</span><span class=\"hljs-selector-class\">.request</span>\n<span class=\"hljs-selector-tag\">urllib</span><span class=\"hljs-selector-class\">.request</span><span class=\"hljs-selector-class\">.urlretrieve</span>(\"<span class=\"hljs-selector-tag\">URL</span>\", \"<span class=\"hljs-selector-tag\">local-filename</span><span class=\"hljs-selector-class\">.jpg</span>\")\n</code></pre>\n    <h4 id=\"83google\">83. 如何获取任何网址或网页的 Google 缓存时限？</h4>\n    <p>使用以下 URL 格式：</p>\n    <p>http://webcache.googleusercontent.com/search?q=cache:URLGOESHERE</p>\n    <p>请务必将“URLGOESHERE”替换为你要检索其缓存的页面或网站的正确网址，并查看时间。例如，要查看 edureka.co 的 Google Webcache 时代，你需要使用以下网址：</p>\n    <p>http://webcache.googleusercontent.com/search?q=cache:edureka.co</p>\n    <h4 id=\"84imdb250\">84. 你需要从 IMDb 前 250 电影页面中删除数据。它应该只有字段电影名称，年份和评级。</h4>\n    <p>我们将使用以下代码行：</p>\n    <pre><code class=\"hljs perl\">from bs4 import BeautifulSoup\n\nimport requests\nimport sys\n\nurl = <span class=\"hljs-string\">'http://www.imdb.com/chart/top'</span>\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text)\n<span class=\"hljs-keyword\">tr</span> = soup.findChildren(<span class=\"hljs-string\">\"tr\"</span>)\n<span class=\"hljs-keyword\">tr</span> = iter(<span class=\"hljs-keyword\">tr</span>)\n<span class=\"hljs-keyword\">next</span>(<span class=\"hljs-keyword\">tr</span>)\n\n<span class=\"hljs-keyword\">for</span> movie in <span class=\"hljs-keyword\">tr</span>:\ntitle = movie.find(<span class=\"hljs-string\">'td'</span>, {<span class=\"hljs-string\">'class'</span>: <span class=\"hljs-string\">'titleColumn'</span>} ).find(<span class=\"hljs-string\">'a'</span>).contents[<span class=\"hljs-number\">0</span>]\nyear = movie.find(<span class=\"hljs-string\">'td'</span>, {<span class=\"hljs-string\">'class'</span>: <span class=\"hljs-string\">'titleColumn'</span>} ).find(<span class=\"hljs-string\">'span'</span>, {<span class=\"hljs-string\">'class'</span>: <span class=\"hljs-string\">'secondaryInfo'</span>}).contents[<span class=\"hljs-number\">0</span>]\nrating = movie.find(<span class=\"hljs-string\">'td'</span>, {<span class=\"hljs-string\">'class'</span>: <span class=\"hljs-string\">'ratingColumn imdbRating'</span>} ).find(<span class=\"hljs-string\">'strong'</span>).contents[<span class=\"hljs-number\">0</span>]\nrow = title + <span class=\"hljs-string\">' - '</span> + year + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-string\">' '</span> + rating\n\n<span class=\"hljs-keyword\">print</span>(row)\n</code></pre>\n    <p>上述代码将有助于从 IMDb 的前 250 名列表中删除数据</p>\n    <h3 id=\"python-3\">数据分析 - Python 面试问题</h3>\n    <h4 id=\"85pythonmap\">85. 什么是 Python 中的 map 函数？</h4>\n    <p>map 函数执行作为第一个参数给出的函数，该函数作为第二个参数给出的 iterable 的所有元素。如果给定的函数接受多于 1 个参数，则给出了许多迭代。</p>\n    <h4 id=\"86pythonnumpy\">86. python numpy 比列表更好吗？</h4>\n    <p>我们使用 python numpy array而不是列表，原因如下：</p>\n    <ul>\n        <li>减少记忆</li>\n        <li>快速</li>\n        <li>方便</li>\n    </ul>\n    <h4 id=\"87numpyarrayn\">87. 如何在 NumPy array中获得 N 个最大值的索引？</h4>\n    <p>我们可以使用下面的代码在 NumPy array中获得 N 个最大值的索引：</p>\n    <pre><code class=\"hljs markdown\">import numpy as np\narr = np.array([1, 3, 2, 4, 5])\nprint(arr.argsort()[<span class=\"hljs-string\">-3:</span>][<span class=\"hljs-symbol\">::-1</span>])\noutput：\n\n[4 3 1]\n</code></pre>\n    <h4 id=\"88pythonnumpy\">88. 你如何用 Python / NumPy 计算百分位数？</h4>\n    <p>我们可以使用以下代码计算百分位数</p>\n    <pre><code class=\"hljs makefile\">import numpy as np\na = np.array([1,2,3,4,5])\np = np.percentile(a, 50) <span class=\"hljs-comment\">#Returns 50th percentile, e.g. median</span>\nprint(p)\noutput：\n\n3\n</code></pre>\n    <h4 id=\"89numpyscipy\">89. NumPy 和 SciPy 有什么区别？</h4>\n    <ul>\n        <li>在理想的世界中，NumPy 只包含array数据类型和最基本的操作：索引，排序，重新整形，基本元素函数等等。</li>\n        <li>所有数字代码都将驻留在 SciPy 中。然而，NumPy 的一个重要目标是兼容性，因此 NumPy 试图保留其前任任何一个支持的所有功能。</li>\n        <li>因此，NumPy 包含一些线性代数函数，即使它们更恰当地属于 SciPy。无论如何，SciPy 包含更多全功能的线性代数模块版本，以及许多其他数值算法。</li>\n        <li>如果你使用 python 进行科学计算，你应该安装 NumPy 和 SciPy。大多数新功能属于 SciPy 而非 NumPy。</li>\n    </ul>\n    <h4 id=\"90numpyscipy3d\">90. 如何使用 NumPy / SciPy 制作 3D 绘图/可视化？</h4>\n    <p>与 2D 绘图一样，3D 图形超出了 NumPy 和 SciPy 的范围，但就像 2D 情况一样，存在与 NumPy 集成的包。Matplotlib 在 mplot3d 子包中提供基本的 3D 绘图，而 Mayavi\n        使用功能强大的 VTK 引擎提供各种高质量的 3D 可视化功能。</p>\n    <h4 id=\"91n20\">91. 检查给定数字n是否为2或0的幂</h4>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">check_pow_2</span>(<span class=\"hljs-params\">num</span>):\n    <span class=\"hljs-keyword\">if</span> num </span>== <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">if</span> num &amp; (num - <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n\n\n<span class=\"hljs-keyword\">switch</span> = {\n    <span class=\"hljs-number\">0</span>: <span class=\"hljs-string\">\"Number is 0\"</span>,\n    <span class=\"hljs-number\">1</span>: <span class=\"hljs-string\">\"Number is a power of 2\"</span>,\n    <span class=\"hljs-number\">-1</span>: <span class=\"hljs-string\">\"Number is neither a power of 2 nor 0\"</span>\n}\n<span class=\"hljs-keyword\">case</span> = check_pow_2(<span class=\"hljs-number\">16</span>)\n\nprint(<span class=\"hljs-keyword\">switch</span>[<span class=\"hljs-keyword\">case</span>])\n</code></pre>\n    <h4 id=\"92ab\">92. 计算将A转换为B所需的位数</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">count_bits_flip</span><span class=\"hljs-params\">(a, b)</span>:</span>\n    <span class=\"hljs-comment\"># XOR a and b to get 1 on opposite value bit position</span>\n    c = a ^ b\n\n    <span class=\"hljs-comment\"># initialise the counter for 1</span>\n    count = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># count the number of 1s while there is 1 in a ^ b</span>\n    <span class=\"hljs-keyword\">while</span> c != <span class=\"hljs-number\">0</span>:\n        count += <span class=\"hljs-number\">1</span>\n        c &amp;= (c<span class=\"hljs-number\">-1</span>)\n\n    <span class=\"hljs-comment\"># return the count of 1s</span>\n    <span class=\"hljs-keyword\">return</span> count\n<span class=\"hljs-comment\"># 2 = 0010</span>\n<span class=\"hljs-comment\"># 8 = 1000</span>\nprint(count_bits_flip(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>))\n</code></pre>\n    <h4 id=\"93array\">93. 在重复元素array中查找两个非重复元素</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find_non_repeating_numbers</span><span class=\"hljs-params\">(arr)</span>:</span>\n    xor = arr[<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, len(arr)):\n        xor ^= arr[i]\n\n    right_set_bit = xor &amp; ~(xor<span class=\"hljs-number\">-1</span>)\n    first = <span class=\"hljs-number\">0</span>\n    second = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> arr:\n        <span class=\"hljs-keyword\">if</span> i &amp; right_set_bit:\n            first ^= i\n        <span class=\"hljs-keyword\">else</span>:\n            second ^= i\n\n    <span class=\"hljs-keyword\">return</span> first, second\n\n\narr = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>]\nprint(find_non_repeating_numbers(arr))\n</code></pre>\n    <h4 id=\"94\">94. 找到具有相同设置位数的下一个较大和下一个较小的数字</h4>\n    <p>例子：</p>\n    <pre><code class=\"hljs python\">num = <span class=\"hljs-number\">6</span> bin = <span class=\"hljs-number\">110</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">next_greater</span><span class=\"hljs-params\">(num)</span>:</span>\n    res = num\n    <span class=\"hljs-keyword\">if</span> num != <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-comment\"># Find the right most 1 position</span>\n        <span class=\"hljs-comment\"># Ex. right_one = 2 bin = 10</span>\n        right_one = num &amp; -num\n\n        <span class=\"hljs-comment\"># get the left pattern to merge</span>\n        <span class=\"hljs-comment\"># Ex. left_pattern = 8 bin = 1000</span>\n        left_pattern = num + right_one\n\n        <span class=\"hljs-comment\"># get the right patten to merge</span>\n        <span class=\"hljs-comment\"># Ex. right_pattern = 1 bin = 0001</span>\n        right_pattern = (num ^ left_pattern) &gt;&gt; (right_one + <span class=\"hljs-number\">1</span>)\n\n        <span class=\"hljs-comment\"># OR both the patterns</span>\n        <span class=\"hljs-comment\"># Ex. res = 9 bin = 1001</span>\n        res = left_pattern | right_pattern\n\n    <span class=\"hljs-keyword\">return</span> res\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">next_smaller</span><span class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> ~next_greater(~num)\n\n\nprint(next_greater(<span class=\"hljs-number\">6</span>))\nprint(next_smaller(<span class=\"hljs-number\">6</span>))\n</code></pre>\n    <h4 id=\"95nw\">95. 给定 n 个项目的重量和值，将这些物品放入容量为 W 的背包中背包中的最大总价值。</h4>\n    <p>换句话说，给定两个整数array val [0..n-1] 和 wt [0..n-1]分别代表与 n 项相关的值和权重。也给定一个表示背包容量的整数 W，找出 val [] 的最大值子集\n        这样，这个子集的权重之和小于或等于 W. 你不能破坏一个项目，要么选择完整的项目，要么不选择它（0-1 属性）。</p>\n    <pre><code class=\"hljs shell\">def knapSack(W, wt, val, size):\n    k = [[0 for i in range(W+1)] for i in range(size+1)]\n    for i in range(size+1):\n        for w in range(W+1):\n            if i == 0 or w == 0:\n                k[i][w] = 0\n            elif wt[i-1] &lt;= w:\n                k[i][w] = max(val[i-1] + k[i-1][w-wt[i-1]], k[i-1][w])\n            else:\n                k[i][w] = k[i-1][w]\n\n    for w in k:\n        print(w)\n\n    return k\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> def findElementsInSack(W, matrix, wt, val, size):</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     i = size</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     row = W</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     arr = []</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     <span class=\"hljs-keyword\">while</span> i &gt; 0:</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-built_in\">print</span>(matrix[i][row] - matrix[i-1][row - wt[i-1]] )</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-built_in\">print</span>(val[i-1])</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-keyword\">if</span> matrix[i][row] - matrix[i-1][row - wt[i-1]] == val[i-1]:</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             arr.append(val[i-1])</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             i -= 1</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             row -= wt[i-1]</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-keyword\">else</span>:</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             i -= 1</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"></span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     <span class=\"hljs-built_in\">return</span> arr</span>\n\nprice = [60, 100, 120]\nwt = [1, 2, 3]\nW = 5\nn = len(price)\nk = knapSack(W, wt, price, n)\nprint(k[n][W])\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> <span class=\"hljs-built_in\">print</span>(findElementsInSack(W, k, wt, price, n))</span>\n</code></pre>\n    <h4 id=\"96nn\">96. 给定一根长度为 n 英寸的杆和一系列价格，其中包含所有尺寸小于 n 的尺寸的价格。确定通过切割杆和销售件可获得的最大值。</h4>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">cutting_rod</span>(<span class=\"hljs-params\">prices, n</span>):\n    dp </span>= [<span class=\"hljs-number\">0</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">n+<span class=\"hljs-number\">1</span></span>)]\n    dp[0] </span>= <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, n+<span class=\"hljs-number\">1</span></span>):\n        max_val </span>= -<span class=\"hljs-keyword\">float</span>(<span class=\"hljs-string\">'inf'</span>)\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">i</span>):\n            max_val </span>= max(max_val, prices[j] + dp[i-j<span class=\"hljs-number\">-1</span>])\n        dp[i] = max_val\n\n    <span class=\"hljs-keyword\">return</span> dp[n]\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">20</span>]\n    size = len(arr)\n    print(<span class=\"hljs-string\">\"Maximum Obtainable Value is \"</span> + str(cutting_rod(arr, size)))\n</code></pre>\n    <h4 id=\"97str1str2str1str1str2\">97. 给定两个字符串 str1 和 str2 以及可以在 str1 上执行的操作。查找所需的最小编辑数（操作）将'str1'转换为'str2'</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">edit_distance</span><span class=\"hljs-params\">(str1, str2, m, n)</span>:</span>\n    matrix = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(m+<span class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(m+<span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>):\n\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span>:\n                matrix[i][j] = j\n\n            <span class=\"hljs-keyword\">elif</span> j == <span class=\"hljs-number\">0</span>:\n                matrix[i][j] = i\n\n            <span class=\"hljs-keyword\">elif</span> str1[i<span class=\"hljs-number\">-1</span>] == str2[j<span class=\"hljs-number\">-1</span>]:\n                matrix[i][j] = matrix[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]\n\n            <span class=\"hljs-keyword\">else</span>:\n                matrix[i][j] = <span class=\"hljs-number\">1</span> + min(matrix[i][j<span class=\"hljs-number\">-1</span>],      <span class=\"hljs-comment\"># insert</span>\n                                       matrix[i<span class=\"hljs-number\">-1</span>][j],      <span class=\"hljs-comment\"># remove</span>\n                                       matrix[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>])    <span class=\"hljs-comment\"># replace</span>\n\n    <span class=\"hljs-keyword\">return</span> matrix[m][n]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    str1 = <span class=\"hljs-string\">'sunday'</span>\n    str2 = <span class=\"hljs-string\">'saturday'</span>\n\n    print(edit_distance(str1, str2, len(str1), len(str2)))\n</code></pre>\n    <pre><code class=\"hljs\">\n</code></pre>\n    <h4 id=\"98011\">98. 给定 0 和 1 的二维矩阵，找到最大的广场，其中包含全部 1。</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find_largest_square</span><span class=\"hljs-params\">(matrix)</span>:</span>\n    n = len(matrix)\n\n    <span class=\"hljs-comment\"># make a matrix for storing the solutions</span>\n    cache = [[<span class=\"hljs-number\">0</span>] * n <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> range(n)]\n    <span class=\"hljs-comment\"># size of square and its bottom-right indexes</span>\n    size = <span class=\"hljs-number\">0</span>\n    right_indx = <span class=\"hljs-number\">-1</span>\n    bottom_indx = <span class=\"hljs-number\">-1</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(n):\n\n            <span class=\"hljs-comment\"># if the value is 0 simply move forward as it cannot form a square of 1s</span>\n            <span class=\"hljs-keyword\">if</span> matrix[i][j] == <span class=\"hljs-number\">0</span>:\n                <span class=\"hljs-keyword\">continue</span>\n\n            <span class=\"hljs-comment\"># if it is first row or column, copy the matrix values as it is</span>\n            <span class=\"hljs-keyword\">elif</span> i == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> j == <span class=\"hljs-number\">0</span>:\n                cache[i][j] = matrix[i][j]\n\n            <span class=\"hljs-comment\"># Otherwise, check in the up, left, and diagonally top-left direction for minimum size of square</span>\n            <span class=\"hljs-comment\"># if all are 1s at these positions in matrix, only then min value will be greater than 1</span>\n            <span class=\"hljs-comment\"># hence add the previous square size to the cache + 1</span>\n            <span class=\"hljs-keyword\">else</span>:\n                cache[i][j] = <span class=\"hljs-number\">1</span> + min(cache[i - <span class=\"hljs-number\">1</span>][j], cache[i][j - <span class=\"hljs-number\">1</span>], cache[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>])\n\n            <span class=\"hljs-comment\"># check if the current square size found is larger than the previously found size, if so, update it</span>\n            <span class=\"hljs-keyword\">if</span> cache[i][j] &gt; size:\n                size = cache[i][j]\n                bottom_indx, right_indx = i, j\n\n    <span class=\"hljs-keyword\">return</span> size, bottom_indx, right_indx\n\n\nmat = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n       [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n       [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n       [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]]\nsize, bottom, right = find_largest_square(mat)\n\n<span class=\"hljs-keyword\">if</span> size &gt; <span class=\"hljs-number\">0</span>:\n    print(<span class=\"hljs-string\">\"Size of the square:\"</span>, size)\n    print(<span class=\"hljs-string\">\"Top-left Co-ordinates:\"</span>, bottom-size+<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\",\"</span>, right-size+<span class=\"hljs-number\">1</span>)\n    print(<span class=\"hljs-string\">\"Bottom-right Co-ordinates:\"</span>, bottom, <span class=\"hljs-string\">\",\"</span>, right)\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">\"No square of 1s found\"</span>)\n</code></pre>\n    <h4 id=\"99\">99. 找到两者中存在的最长子序列的长度。子序列是以相同的相对顺序出现的序列，但不一定是连续的。</h4>\n    <p>例子：</p>\n    <pre><code class=\"hljs python\">用于输入的LCS序列“ABCDGH”和“AEDFHR”是长度为<span class=\"hljs-number\">3</span>的“ADH”。\n用于输入序列的LCS“AGGTAB”和“GXTXAYB”是长度为<span class=\"hljs-number\">4</span>的“ GTAB”。\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">lcs</span><span class=\"hljs-params\">(str1, str2)</span>:</span>\n    m = len(str1)\n    n = len(str2)\n\n    matrix = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(m+<span class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, m+<span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, n+<span class=\"hljs-number\">1</span>):\n\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> j == <span class=\"hljs-number\">0</span>:\n                matrix[i][j] = <span class=\"hljs-number\">0</span>\n\n            <span class=\"hljs-keyword\">elif</span> str1[i<span class=\"hljs-number\">-1</span>] == str2[j<span class=\"hljs-number\">-1</span>]:\n                matrix[i][j] = <span class=\"hljs-number\">1</span> + matrix[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]\n\n            <span class=\"hljs-keyword\">else</span>:\n                matrix[i][j] = max(matrix[i<span class=\"hljs-number\">-1</span>][j], matrix[i][j<span class=\"hljs-number\">-1</span>])\n\n    index = matrix[m][n]\n\n    res = [<span class=\"hljs-string\">\"\"</span>] * index\n    i = m\n    j = n\n\n    <span class=\"hljs-keyword\">while</span> i &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> j &gt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">if</span> str1[i<span class=\"hljs-number\">-1</span>] == str2[j<span class=\"hljs-number\">-1</span>]:\n            res[index<span class=\"hljs-number\">-1</span>] = str1[i<span class=\"hljs-number\">-1</span>]\n            i -= <span class=\"hljs-number\">1</span>\n            j -= <span class=\"hljs-number\">1</span>\n            index -= <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">elif</span> matrix[i<span class=\"hljs-number\">-1</span>][j] &gt; matrix[i][j<span class=\"hljs-number\">-1</span>]:\n            i -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            j -= <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> res\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    X = <span class=\"hljs-string\">\"AGGTAB\"</span>\n    Y = <span class=\"hljs-string\">\"GXTXAYB\"</span>\n\n    str = <span class=\"hljs-string\">''</span>.join(lcs(X, Y))\n\n    print(<span class=\"hljs-string\">\"Length of longest common subsequence is:\"</span>, len(str),<span class=\"hljs-string\">\"\\nAnd the subsequence is:\"</span>, str)\n</code></pre>\n    <h4 id=\"100\">100. 找到给定序列的最长子序列的长度，以便对子序列的所有元素进行排序，按顺序递增。</h4>\n    <p>例如，{10,22,9,33,21,50,41,60,80}的LIS长度为6，LIS为{10,22,33,50,60,80}。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">lis</span><span class=\"hljs-params\">(arr)</span>:</span>\n    n = len(arr)\n    dp = [<span class=\"hljs-number\">1</span>] * n\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(i):\n            <span class=\"hljs-keyword\">if</span> arr[j] &lt; arr[i] <span class=\"hljs-keyword\">and</span> dp[j] + <span class=\"hljs-number\">1</span> &gt; dp[i]:\n                dp[i] = <span class=\"hljs-number\">1</span> + dp[j]\n\n    <span class=\"hljs-keyword\">return</span> max(dp)\n\narr = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">41</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">80</span>]\nprint(lis(arr))\n</code></pre>\n    <h4 id=\"101mn\">101. 给定成本矩阵成本[] []和成本[] []中的位置（m，n），</h4>\n    <p>编写一个函数，返回从（0,0）到达（m，n）的最小成本路径的成本。\n        到达路径的总成本（m，n）是该路径上所有成本的总和（包括源和目的地）。\n        你只能从给定的单元格中向下，向右和对角线降低单元格。</p>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">min_cost</span>(<span class=\"hljs-params\">cost, m, n</span>):\n    dp </span>= [[<span class=\"hljs-number\">0</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">n+<span class=\"hljs-number\">1</span></span>)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">m+<span class=\"hljs-number\">1</span></span>)]\n\n    dp[0][0] </span>= cost[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, m+<span class=\"hljs-number\">1</span></span>):\n        dp[i][0] </span>= dp[i<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>] + cost[i][<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, n+<span class=\"hljs-number\">1</span></span>):\n        dp[0][j] </span>= dp[<span class=\"hljs-number\">0</span>][j<span class=\"hljs-number\">-1</span>] + cost[<span class=\"hljs-number\">0</span>][j]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, m+<span class=\"hljs-number\">1</span></span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, n+<span class=\"hljs-number\">1</span></span>):\n            dp[i][j] </span>= cost[i][j] + min(dp[i<span class=\"hljs-number\">-1</span>][j], dp[i][j<span class=\"hljs-number\">-1</span>], dp[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>])\n\n    <span class=\"hljs-keyword\">return</span> dp[m][n]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    cost = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>],\n            [<span class=\"hljs-meta\">4, 8, 2</span>],\n            [<span class=\"hljs-meta\">1, 5, 3</span>]]\n    m = <span class=\"hljs-number\">2</span>\n    n = <span class=\"hljs-number\">2</span>\n    print(<span class=\"hljs-string\">\"Minimum cost from (0, 0) to ({}, {}) is:\"</span>.format(m, n), min_cost(cost, m, n))\n</code></pre>\n    <h4 id=\"102\">102. 将一个集合划分为两个子集，使得子集和的差异最小</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find_min</span><span class=\"hljs-params\">(arr)</span>:</span>\n    sum_of_arr = sum(arr)\n    n = len(arr)\n    dp = [[<span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(sum_of_arr+<span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>):\n        dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">True</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, sum_of_arr+<span class=\"hljs-number\">1</span>):\n        dp[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-keyword\">False</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, n+<span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, sum_of_arr+<span class=\"hljs-number\">1</span>):\n            dp[i][j] = dp[i<span class=\"hljs-number\">-1</span>][j]\n\n            <span class=\"hljs-keyword\">if</span> arr[i<span class=\"hljs-number\">-1</span>] &lt;= j:\n                dp[i][j] |= dp[i<span class=\"hljs-number\">-1</span>][j - arr[i<span class=\"hljs-number\">-1</span>]]\n\n    diff = float(<span class=\"hljs-string\">'inf'</span>)\n\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(int(sum_of_arr/<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>):\n        <span class=\"hljs-keyword\">if</span> dp[n][j] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">True</span>:\n            diff = sum_of_arr - <span class=\"hljs-number\">2</span> * j\n            <span class=\"hljs-keyword\">break</span>\n\n    <span class=\"hljs-keyword\">return</span> diff\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    arr = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\n    print(<span class=\"hljs-string\">\"Minimum difference is:\"</span>, find_min(arr))\n</code></pre>\n    <h4 id=\"103\">103. 给定一组非负整数和一个值和，确定是否存在给定集合的子集，其总和等于给定总和。</h4>\n    <pre><code class=\"hljs python\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isSubsetSum</span><span class=\"hljs-params\">(arr, check_sum)</span>:</span>\n    n = len(arr)\n    possible_sum = [[<span class=\"hljs-keyword\">False</span>] * (n + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> range(check_sum + <span class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>):\n        possible_sum[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-keyword\">True</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, check_sum + <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, n + <span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-keyword\">if</span> i &lt; arr[j - <span class=\"hljs-number\">1</span>]:\n                possible_sum[i][j] = possible_sum[i][j<span class=\"hljs-number\">-1</span>]\n            <span class=\"hljs-keyword\">elif</span> i &gt;= arr[j - <span class=\"hljs-number\">1</span>]:\n                possible_sum[i][j] = possible_sum[i][j<span class=\"hljs-number\">-1</span>] <span class=\"hljs-keyword\">or</span> possible_sum[i - arr[j - <span class=\"hljs-number\">1</span>]][j<span class=\"hljs-number\">-1</span>]\n\n    <span class=\"hljs-keyword\">return</span> possible_sum[check_sum][n]\n\narr = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>]\ncheck_sum = <span class=\"hljs-number\">9</span>\n\n<span class=\"hljs-keyword\">if</span> isSubsetSum(arr, check_sum):\n    print(<span class=\"hljs-string\">\"Found a subset with sum =\"</span>, check_sum)\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">\"Subset with sum =\"</span>, check_sum, <span class=\"hljs-string\">\"Not Found\"</span>)\n</code></pre>\n    <h4 id=\"104hackerrankdp\">104. HackerRank 问题算法 DP</h4>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">maxSubArray</span>(<span class=\"hljs-params\">a, size</span>):\n    currMax </span>= a[<span class=\"hljs-number\">0</span>]\n    maxSoFar = a[<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, size</span>):\n        currMax </span>= max(a[i], currMax + a[i])\n        maxSoFar = max(currMax, maxSoFar)\n\n    <span class=\"hljs-keyword\">return</span> maxSoFar\n\ntestcases = <span class=\"hljs-keyword\">int</span>(input())\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> t <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">testcases</span>):\n    n </span>= <span class=\"hljs-keyword\">int</span>(input())\n    arr = list(map(<span class=\"hljs-keyword\">int</span>, input().split()))\n    tempList = list(filter(lambda x: x &gt; <span class=\"hljs-number\">0</span>, arr))\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">if</span> <span class=\"hljs-title\">len</span>(<span class=\"hljs-params\">tempList</span>) !</span>= <span class=\"hljs-number\">0</span>:\n        maximumSum = sum(tempList)\n    <span class=\"hljs-keyword\">else</span>:\n        maximumSum = max(arr)\n    print(maxSubArray(arr, n), maximumSum)\n</code></pre>\n    <h4 id=\"105dist123\">105. 给定距离 dist，计算用 1,2 和 3 步覆盖距离的总方式</h4>\n    <pre><code class=\"hljs makefile\"><span class=\"hljs-section\">Input:  n = 3</span>\n<span class=\"hljs-section\">Output: 4</span>\nBelow are the four ways\n 1 step + 1 step + 1 step\n 1 step + 2 step\n 2 step + 1 step\n 3 step<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n\ndef count_ways(n):\n    count = [0] * (n+1)\n    count[0] = 1\n    count[1] = 1\n    count[2] = 2\n\n    for i in range(3, n+1):\n        count[i] = count[i-1] + count[i-2] + count[i-3]\n\n    return count[n]\n\n\nif __name__ == '__main__':\n    print(count_ways(4))\n</span></code></pre>\n    <h4 id=\"106\">106. 在字符板中查找所有可能的单词</h4>\n    <pre><code class=\"hljs python\">Input: dictionary[] = {<span class=\"hljs-string\">\"GEEKS\"</span>, <span class=\"hljs-string\">\"FOR\"</span>, <span class=\"hljs-string\">\"QUIZ\"</span>, <span class=\"hljs-string\">\"GO\"</span>};\n       boggle[][]   = {{<span class=\"hljs-string\">'G'</span>,<span class=\"hljs-string\">'I'</span>,<span class=\"hljs-string\">'Z'</span>},\n                       {<span class=\"hljs-string\">'U'</span>,<span class=\"hljs-string\">'E'</span>,<span class=\"hljs-string\">'K'</span>},\n                       {<span class=\"hljs-string\">'Q'</span>,<span class=\"hljs-string\">'S'</span>,<span class=\"hljs-string\">'E'</span>}};\nOutput:  Following words of dictionary are present\n         GEEKS\n         QUIZ\n\n         <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">findWordsUtil</span><span class=\"hljs-params\">(words, boggle, visited, found, r, c, str)</span>:</span>\n    rows = len(boggle)\n    cols = len(boggle[<span class=\"hljs-number\">0</span>])\n\n    <span class=\"hljs-comment\"># set the position of character as traversed</span>\n    visited[r][c] = <span class=\"hljs-keyword\">True</span>\n\n    <span class=\"hljs-comment\"># add the character to string</span>\n    str += boggle[r][c]\n\n    <span class=\"hljs-comment\"># if the string is in dictionary add it to the set of found words</span>\n    <span class=\"hljs-keyword\">if</span> str <span class=\"hljs-keyword\">in</span> words:\n        found.add(str)\n\n    <span class=\"hljs-comment\"># traverse all the nearby 8 adjacent cells</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(r<span class=\"hljs-number\">-1</span>, r+<span class=\"hljs-number\">2</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(c<span class=\"hljs-number\">-1</span>, c+<span class=\"hljs-number\">2</span>):\n            <span class=\"hljs-keyword\">if</span> i &gt;= rows <span class=\"hljs-keyword\">or</span> i &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> j &gt;= cols <span class=\"hljs-keyword\">or</span> j &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> visited[i][j]:\n                <span class=\"hljs-keyword\">continue</span>\n            findWordsUtil(words, boggle, visited, found, i, j, str)\n\n    <span class=\"hljs-comment\"># backtrack and set the status of current character as not traversed</span>\n    visited[r][c] = <span class=\"hljs-keyword\">False</span>\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">findWords</span><span class=\"hljs-params\">(words, boggle)</span>:</span>\n    rows = len(boggle)\n    cols = len(boggle[<span class=\"hljs-number\">0</span>])\n\n    <span class=\"hljs-comment\"># initialize a matrix for DFS Traversal</span>\n    visited = [[<span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(cols)] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(rows)]\n\n    <span class=\"hljs-comment\"># set to store the unique found words</span>\n    found = set({})\n    str = <span class=\"hljs-string\">\"\"</span>\n\n    <span class=\"hljs-comment\"># traverse each character in the boggle and do DFS from there</span>\n    <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> range(rows):\n        <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> range(cols):\n            findWordsUtil(words, boggle, visited, found, r, c, str)\n\n    <span class=\"hljs-comment\"># return the set of found words</span>\n    <span class=\"hljs-keyword\">return</span> found\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    words = {<span class=\"hljs-string\">\"GEEKS\"</span>, <span class=\"hljs-string\">\"FOR\"</span>, <span class=\"hljs-string\">\"QUIZ\"</span>, <span class=\"hljs-string\">\"GO\"</span>, <span class=\"hljs-string\">\"SEEK\"</span>}\n    boggle = [[<span class=\"hljs-string\">'G'</span>, <span class=\"hljs-string\">'I'</span>, <span class=\"hljs-string\">'Z'</span>],\n              [<span class=\"hljs-string\">'U'</span>, <span class=\"hljs-string\">'E'</span>, <span class=\"hljs-string\">'K'</span>],\n              [<span class=\"hljs-string\">'Q'</span>, <span class=\"hljs-string\">'S'</span>, <span class=\"hljs-string\">'E'</span>]]\n\n    found = findWords(words, boggle)\n\n    print(<span class=\"hljs-string\">\"Words found in the boggle from the dictionary are:\"</span>)\n    <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> found:\n        print(word)\n</code></pre>\n    <h4 id=\"107\">107. 广度优先搜索遍历</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append(frm)\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bfsUtil</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s, visited)</span></span>:\n        queue = deque([])\n        queue.append(s)\n        visited[s] = True\n\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-symbol\">queue:</span>\n            vertex = queue.popleft()\n            print(vertex, <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n\n            <span class=\"hljs-comment\"># traverse vertices adjacent to vertex</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[vertex]:\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\n                    visited[i] = True\n                    queue.append(i)\n        print()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s=None)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-comment\"># do bfs from the node specified</span>\n        <span class=\"hljs-keyword\">if</span> s is <span class=\"hljs-keyword\">not</span> <span class=\"hljs-symbol\">None:</span>\n            <span class=\"hljs-keyword\">self</span>.bfsUtil(s, visited)\n        <span class=\"hljs-comment\"># traverse for all the vertices in other components of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[v]:\n                <span class=\"hljs-keyword\">self</span>.bfsUtil(v, visited)\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:\n    graph = Graph()\n\n    <span class=\"hljs-comment\"># component 1 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)\n\n    <span class=\"hljs-comment\"># component 2 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>)\n\n    <span class=\"hljs-comment\"># call bfs from 2 vertex</span>\n    print(<span class=\"hljs-string\">\"Breadth First Traversal:\"</span>)\n    graph.bfs(<span class=\"hljs-number\">2</span>)\n</code></pre>\n    <h4 id=\"108\">108. 深度优先搜索遍历</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append(frm)\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dfsUtil</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s, visited)</span></span>:\n        stack = []\n        stack.append(s)\n        visited[s] = True\n\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-symbol\">stack:</span>\n            vertex = stack.pop()\n            print(vertex, <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n\n            <span class=\"hljs-comment\"># traverse vertices adjacent to vertex</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[vertex]:\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n        print()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s=None)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-comment\"># traverse specified vertex</span>\n        <span class=\"hljs-keyword\">if</span> s is <span class=\"hljs-keyword\">not</span> <span class=\"hljs-symbol\">None:</span>\n            <span class=\"hljs-keyword\">self</span>.dfsUtil(s, visited)\n\n        <span class=\"hljs-comment\"># traverse for all the vertices in other components of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[v]:\n                <span class=\"hljs-keyword\">self</span>.dfsUtil(v, visited)\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make an undirected graph</span>\n    graph = Graph()\n\n    <span class=\"hljs-comment\"># component 1 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)\n\n    <span class=\"hljs-comment\"># component 2 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>)\n\n    <span class=\"hljs-comment\"># call dfs from 2 vertex</span>\n    print(<span class=\"hljs-string\">\"Depth First Traversal:\"</span>)\n    graph.dfs(<span class=\"hljs-number\">2</span>)\n</code></pre>\n    <h4 id=\"109\">109. 在有向图中检测周期</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, directed=False)</span>:</span>\n        self.graph = defaultdict(list)\n        self.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(self, frm, to)</span>:</span>\n        self.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> self.directed <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">False</span>:\n            self.graph[to].append(frm)\n        <span class=\"hljs-keyword\">else</span>:\n            self.graph[to] = self.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isCyclicUtil</span><span class=\"hljs-params\">(self, s, visited, recurStack)</span>:</span>\n\n        <span class=\"hljs-keyword\">if</span> visited[s] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">False</span>:\n            recurStack[s] = <span class=\"hljs-keyword\">True</span>\n            visited[s] = <span class=\"hljs-keyword\">True</span>\n\n            <span class=\"hljs-comment\"># traverse vertices adjacent to vertex</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.graph[s]:\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">not</span> visited[i]) <span class=\"hljs-keyword\">and</span> self.isCyclicUtil(i, visited, recurStack):\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">True</span>\n                <span class=\"hljs-keyword\">elif</span> recurStack[i]:\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">True</span>\n        recurStack[s] = <span class=\"hljs-keyword\">False</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">False</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isCyclic</span><span class=\"hljs-params\">(self)</span>:</span>\n        visited = {i: <span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.graph}\n        recurStack = {i: <span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.graph}\n\n        <span class=\"hljs-comment\"># traverse for all the vertices of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> self.graph:\n            <span class=\"hljs-keyword\">if</span> self.isCyclicUtil(v, visited, recurStack):\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">True</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">False</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make a directed graph</span>\n    graph = Graph(<span class=\"hljs-keyword\">True</span>)\n\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\n\n    <span class=\"hljs-keyword\">if</span> graph.isCyclic():\n        print(<span class=\"hljs-string\">\"Cycle exists\"</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        print(<span class=\"hljs-string\">\"No cycle in the graph\"</span>)\n\n© <span class=\"hljs-number\">2019</span> GitHub, Inc.\nTerms\nPrivacy\n</code></pre>\n    <h4 id=\"110\">110. 检测无向图中的循环</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-comment\"># True if edge has been traversed or seen once</span>\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append([to, False])\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append([frm, False])\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">findParent</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, sets, v)</span></span>:\n        <span class=\"hljs-keyword\">if</span> sets[v] == -<span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> v\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.findParent(sets, sets[v])\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">union</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, sets, x, y)</span></span>:\n        x_set = <span class=\"hljs-keyword\">self</span>.findParent(sets, x)\n        y_set = <span class=\"hljs-keyword\">self</span>.findParent(sets, y)\n        sets[x_set] = y_set\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isCyclic</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-comment\"># sets that show combined vertices or not</span>\n        sets = {<span class=\"hljs-symbol\">i:</span> -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">for</span> e <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[v]:\n                <span class=\"hljs-comment\"># if an edge is traversed once skip it</span>\n                <span class=\"hljs-keyword\">if</span> e[<span class=\"hljs-number\">1</span>] is <span class=\"hljs-symbol\">True:</span>\n                    continue\n\n                <span class=\"hljs-comment\"># set True for traversing the edge and making union in both adjacency lists</span>\n                e[<span class=\"hljs-number\">1</span>] = True\n\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[e[<span class=\"hljs-number\">0</span>]]:\n                    <span class=\"hljs-keyword\">if</span> i[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-symbol\">v:</span>\n                        i[<span class=\"hljs-number\">1</span>] = True\n                        <span class=\"hljs-keyword\">break</span>\n\n                <span class=\"hljs-comment\"># find parents of both vertices of the edge</span>\n                x = <span class=\"hljs-keyword\">self</span>.findParent(sets, v)\n                y = <span class=\"hljs-keyword\">self</span>.findParent(sets, e[<span class=\"hljs-number\">0</span>])\n\n                <span class=\"hljs-comment\"># if they share a common parent loop found</span>\n                <span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-symbol\">y:</span>\n                    <span class=\"hljs-keyword\">return</span> True\n                <span class=\"hljs-comment\"># union the two vertices in the same set</span>\n                <span class=\"hljs-keyword\">self</span>.union(sets, x, y)\n\n        <span class=\"hljs-comment\"># if no loop or cycle found return false</span>\n        <span class=\"hljs-keyword\">return</span> False\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make a graph</span>\n    graph = Graph()\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)\n\n    <span class=\"hljs-keyword\">if</span> graph.isCyclic():\n        print(<span class=\"hljs-string\">\"Cycle exists in the graph\"</span>)\n    <span class=\"hljs-symbol\">else:</span>\n        print(<span class=\"hljs-string\">\"No cycle in the graph\"</span>)\n</code></pre>\n    <h4 id=\"111dijkstra\">111. Dijkstra的最短路径算法</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to, weight)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append([to, weight])\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append([frm, weight])\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find_min</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, dist, visited)</span></span>:\n        minimum = float(<span class=\"hljs-string\">'inf'</span>)\n        index = -<span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph.keys():\n            <span class=\"hljs-keyword\">if</span> visited[v] is False <span class=\"hljs-keyword\">and</span> dist[v] &lt; <span class=\"hljs-symbol\">minimum:</span>\n                minimum = dist[v]\n                index = v\n\n        <span class=\"hljs-keyword\">return</span> index\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, src)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n        dist = {<span class=\"hljs-symbol\">i:</span> float(<span class=\"hljs-string\">'inf'</span>) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n        parent = {<span class=\"hljs-symbol\">i:</span> None <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-comment\"># set distance of src vertex from itself 0</span>\n        dist[src] = <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-comment\"># find shortest path for all vertices</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(len(<span class=\"hljs-keyword\">self</span>.graph)-<span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-comment\"># find minimum distance vertex from source</span>\n            <span class=\"hljs-comment\"># initially src itself as dist[src] = 0</span>\n            u = <span class=\"hljs-keyword\">self</span>.find_min(dist, visited)\n\n            <span class=\"hljs-comment\"># mark the node as visited</span>\n            visited[u] = True\n            <span class=\"hljs-comment\"># check if the distance through current edge is less than previously known distance to v</span>\n            <span class=\"hljs-keyword\">for</span> v, w <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[u]:\n\n                <span class=\"hljs-keyword\">if</span> visited[v] is False <span class=\"hljs-keyword\">and</span> dist[u] + w &lt; dist[v]:\n                    dist[v] = dist[u] + w\n                    parent[v] = u\n        <span class=\"hljs-comment\"># return parent list and distance to each node from source</span>\n        <span class=\"hljs-keyword\">return</span> parent, dist\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">printPath</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, parent, v)</span></span>:\n        <span class=\"hljs-keyword\">if</span> parent[v] is <span class=\"hljs-symbol\">None:</span>\n            <span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">self</span>.printPath(parent, parent[v])\n        print(v, <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">printSolution</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, dist, parent, src)</span></span>:\n        print(<span class=\"hljs-string\">'{}\\t{}\\t{}'</span>.format(<span class=\"hljs-string\">'Vertex'</span>, <span class=\"hljs-string\">'Distance'</span>, <span class=\"hljs-string\">'Path'</span>))\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph.keys():\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-symbol\">src:</span>\n                continue\n            print(<span class=\"hljs-string\">'{} -&gt; {}\\t\\t{}\\t\\t{}'</span>.format(src, i, dist[i], src), <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n            <span class=\"hljs-keyword\">self</span>.printPath(parent, i)\n            print()\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make an undirected graph</span>\n    graph = Graph()\n\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>)\n    graph.addEdge(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>)\n    graph.addEdge(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">14</span>)\n    graph.addEdge(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>)\n\n    parent, dist = graph.dijkstra(<span class=\"hljs-number\">0</span>)\n\n    graph.printSolution(dist, parent, <span class=\"hljs-number\">0</span>)\n</code></pre>\n    <h4 id=\"112\">112. 在给定的边缘加权有向图中找出每对顶点之间的最短距离</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">floyd_warshall</span><span class=\"hljs-params\">(graph)</span>:</span>\n    shortest_dist = []\n\n    <span class=\"hljs-comment\"># copy matrix for storing resultant shortest distances</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> graph:\n        shortest_dist.append(i)\n\n    <span class=\"hljs-comment\"># Number of vertices in graph</span>\n    V = len(graph) - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># k is intermediate vertex</span>\n    <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> range(V+<span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-comment\"># i is source</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(V+<span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-comment\"># j is destination</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(V+<span class=\"hljs-number\">1</span>):\n                <span class=\"hljs-comment\"># store the path which is shorter i.e. min(i-&gt;j, i-&gt;k-&gt;j)</span>\n                shortest_dist[i][j] = min(shortest_dist[i][j], shortest_dist[i][k] + shortest_dist[k][j])\n    <span class=\"hljs-comment\"># return the resultant matrix</span>\n    <span class=\"hljs-keyword\">return</span> shortest_dist\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    INF = float(<span class=\"hljs-string\">'inf'</span>)\n    graph = [[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, INF, <span class=\"hljs-number\">10</span>],\n             [INF, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, INF],\n             [INF, INF, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>],\n             [INF, INF, INF, <span class=\"hljs-number\">0</span>]]\n\n    shortest_dist_matrix = floyd_warshall(graph)\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> shortest_dist_matrix:\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> i:\n            <span class=\"hljs-keyword\">if</span> j != float(<span class=\"hljs-string\">'inf'</span>):\n                print(j, <span class=\"hljs-string\">'\\t'</span>, end=<span class=\"hljs-string\">''</span>)\n            <span class=\"hljs-keyword\">else</span>:\n                print(j, end=<span class=\"hljs-string\">' '</span>)\n        print()\n</code></pre>\n    <h4 id=\"113\">113. 图形实现</h4>\n    <pre><code class=\"hljs ruby\"> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Vertex</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.key = key\n        <span class=\"hljs-keyword\">self</span>.adjacent = {}\n        <span class=\"hljs-keyword\">self</span>.visited = False\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">setKey</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.key = key\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getKey</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.key\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getVisited</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.visited\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">setVisited</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, val=True)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.visited = val\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addNeighbour</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, neighbour, weight=<span class=\"hljs-number\">0</span>)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.adjacent[neighbour] = weight\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getNeighbours</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.adjacent.keys()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getWeight</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, neighbour)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.adjacent[neighbour]\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n\n    <span class=\"hljs-comment\"># Graph is undirected by default</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.vertices = {}\n        <span class=\"hljs-keyword\">self</span>.numberOfVertices = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addVertex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        node = Vertex(key)\n        <span class=\"hljs-keyword\">self</span>.vertices[key] = node\n        <span class=\"hljs-keyword\">self</span>.numberOfVertices += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> node\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to, weight=<span class=\"hljs-number\">0</span>)</span></span>:\n        <span class=\"hljs-keyword\">if</span> frm <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            <span class=\"hljs-keyword\">self</span>.addVertex(frm)\n\n        <span class=\"hljs-keyword\">if</span> to <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            <span class=\"hljs-keyword\">self</span>.addVertex(to)\n\n        <span class=\"hljs-keyword\">self</span>.vertices[frm].addNeighbour(<span class=\"hljs-keyword\">self</span>.vertices[to], weight)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">directed:</span>\n            <span class=\"hljs-keyword\">self</span>.vertices[to].addNeighbour(<span class=\"hljs-keyword\">self</span>.vertices[frm], weight)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getVertex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        <span class=\"hljs-keyword\">if</span> key <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.vertices[key]\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">return</span> None\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getVertices</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.vertices.keys()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getEdges</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        edges = []\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            edgesFromVertex = []\n\n            <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.vertices[v].getNeighbours():\n                frm = <span class=\"hljs-keyword\">self</span>.vertices[v].getKey()\n                to = w.getKey()\n                weight = <span class=\"hljs-keyword\">self</span>.vertices[v].getWeight(w)\n                edgesFromVertex.append((frm, to, weight))\n\n            <span class=\"hljs-keyword\">if</span> len(edgesFromVertex) != <span class=\"hljs-number\">0</span>:\n                edges.append(edgesFromVertex)\n\n        <span class=\"hljs-keyword\">return</span> edges\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:\n    g = Graph(directed=False)\n    g.addVertex(<span class=\"hljs-string\">'a'</span>)\n    g.addVertex(<span class=\"hljs-string\">'b'</span>)\n    g.addVertex(<span class=\"hljs-string\">'c'</span>)\n    g.addVertex(<span class=\"hljs-string\">'d'</span>)\n    g.addVertex(<span class=\"hljs-string\">'e'</span>)\n    g.addVertex(<span class=\"hljs-string\">'f'</span>)\n    g.addEdge(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">3</span>)\n    g.addEdge(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-number\">2</span>)\n    g.addEdge(<span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-number\">1</span>)\n    g.addEdge(<span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-number\">5</span>)\n    g.addEdge(<span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">5</span>)\n    g.addEdge(<span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">2</span>)\n    g.addEdge(<span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>, <span class=\"hljs-number\">3</span>)\n    g.addEdge(<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">6</span>)\n    g.addEdge(<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">6</span>)\n    g.addEdge(<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-number\">6</span>)\n\n    <span class=\"hljs-keyword\">for</span> edgeSet <span class=\"hljs-keyword\">in</span> g.getEdges():\n        print(<span class=\"hljs-string\">'edges from'</span>, edgeSet[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">': '</span>, <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">''</span>)\n        print(edgeSet)\n</code></pre>\n    <h4 id=\"114kruskal\">114. Kruskal的最小生成树算法</h4>\n    <pre><code class=\"hljs sql\">class Graph:\n    def __init__(self, directed=False):\n        self.edges = []\n        self.vertices = <span class=\"hljs-keyword\">set</span>({})\n        self.directed = directed\n\n    <span class=\"hljs-keyword\">def</span> addEdge(<span class=\"hljs-keyword\">self</span>, frm, <span class=\"hljs-keyword\">to</span>, weight):\n        self.edges.append([frm, <span class=\"hljs-keyword\">to</span>, weight])\n        self.vertices.add(frm)\n        self.vertices.add(<span class=\"hljs-keyword\">to</span>)\n\n    <span class=\"hljs-keyword\">def</span> removeEdge(<span class=\"hljs-keyword\">self</span>, frm, <span class=\"hljs-keyword\">to</span>, weight):\n        self.edges.remove([frm, <span class=\"hljs-keyword\">to</span>, weight])\n        flag1 = <span class=\"hljs-number\">0</span>\n        flag2 = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> f, t, w <span class=\"hljs-keyword\">in</span> self.edges:\n            <span class=\"hljs-keyword\">if</span> frm == f <span class=\"hljs-keyword\">or</span> frm == t:\n                flag1 = <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">to</span> == f <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">to</span> == t:\n                flag2 = <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> flag1 == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> flag2 == <span class=\"hljs-number\">1</span>:\n                break\n\n        <span class=\"hljs-keyword\">if</span> flag1 != <span class=\"hljs-number\">1</span>:\n            self.vertices.remove(frm)\n\n        <span class=\"hljs-keyword\">if</span> flag2 != <span class=\"hljs-number\">1</span>:\n            self.vertices.remove(<span class=\"hljs-keyword\">to</span>)\n\n    <span class=\"hljs-keyword\">def</span> findParent(<span class=\"hljs-keyword\">self</span>, <span class=\"hljs-keyword\">sets</span>, v):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">sets</span>[v] == <span class=\"hljs-number\">-1</span>:\n            <span class=\"hljs-keyword\">return</span> v\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> self.findParent(<span class=\"hljs-keyword\">sets</span>, <span class=\"hljs-keyword\">sets</span>[v])\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-keyword\">union</span>(<span class=\"hljs-keyword\">self</span>, <span class=\"hljs-keyword\">sets</span>, x, y):\n        x_set = self.findParent(<span class=\"hljs-keyword\">sets</span>, x)\n        y_set = self.findParent(<span class=\"hljs-keyword\">sets</span>, y)\n        <span class=\"hljs-keyword\">sets</span>[x_set] = y_set\n\n    <span class=\"hljs-keyword\">def</span> isCyclic(<span class=\"hljs-keyword\">self</span>):\n        # <span class=\"hljs-keyword\">sets</span> that <span class=\"hljs-keyword\">show</span> combined vertices <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span>\n        <span class=\"hljs-keyword\">sets</span> = {i: <span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.vertices}\n        <span class=\"hljs-keyword\">for</span> v1, v2, w <span class=\"hljs-keyword\">in</span> self.edges:\n            # find parents <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">both</span> vertices <span class=\"hljs-keyword\">of</span> the edge\n            x = self.findParent(<span class=\"hljs-keyword\">sets</span>, v1)\n            y = self.findParent(<span class=\"hljs-keyword\">sets</span>, v2)\n\n            # <span class=\"hljs-keyword\">if</span> they <span class=\"hljs-keyword\">share</span> a common <span class=\"hljs-keyword\">parent</span> <span class=\"hljs-keyword\">loop</span> <span class=\"hljs-keyword\">found</span>\n            <span class=\"hljs-keyword\">if</span> x == y:\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n            # <span class=\"hljs-keyword\">union</span> the two vertices <span class=\"hljs-keyword\">in</span> the same <span class=\"hljs-keyword\">set</span>\n            self.union(<span class=\"hljs-keyword\">sets</span>, x, y)\n\n        # <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">no</span> <span class=\"hljs-keyword\">loop</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">cycle</span> <span class=\"hljs-keyword\">found</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">def</span> kruskalMST(<span class=\"hljs-keyword\">self</span>):\n        g = Graph()\n\n        self.edges = sorted(self.edges, <span class=\"hljs-keyword\">key</span>=lambda x: x[<span class=\"hljs-number\">2</span>])\n\n        <span class=\"hljs-keyword\">for</span> frm, <span class=\"hljs-keyword\">to</span>, w <span class=\"hljs-keyword\">in</span> self.edges:\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">len</span>(g.edges) == <span class=\"hljs-keyword\">len</span>(graph.vertices)<span class=\"hljs-number\">-1</span>:\n                break\n            g.addEdge(frm, <span class=\"hljs-keyword\">to</span>, w)\n            <span class=\"hljs-keyword\">if</span> g.isCyclic():\n                g.removeEdge(frm, <span class=\"hljs-keyword\">to</span>, w)\n        <span class=\"hljs-keyword\">return</span> g\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    # make an undirected graph\n    graph = Graph()\n\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">15</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)\n\n    new_graph = graph.kruskalMST()\n\n    <span class=\"hljs-keyword\">for</span> f, t, w <span class=\"hljs-keyword\">in</span> new_graph.edges:\n        print(f, <span class=\"hljs-string\">\"--\"</span>, t, <span class=\"hljs-string\">\"=\"</span>, w)\n</code></pre>\n    <h4 id=\"115\">115. 拓扑排序</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append(frm)\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">topoSortUtil</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s, visited, sortList)</span></span>:\n        visited[s] = True\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[s]:\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\n                <span class=\"hljs-keyword\">self</span>.topoSortUtil(i, visited, sortList)\n\n        sortList.insert(<span class=\"hljs-number\">0</span>, s)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">topologicalSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        sortList = []\n        <span class=\"hljs-comment\"># traverse for all the vertices in other components of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[v]:\n                <span class=\"hljs-keyword\">self</span>.topoSortUtil(v, visited, sortList)\n\n        print(sortList)\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make an directed graph</span>\n    g = Graph(directed=True)\n\n    g.addEdge(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>)\n    g.addEdge(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>)\n    g.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>)\n    g.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>)\n    g.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    g.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-comment\"># call topologicalSort()</span>\n    print(<span class=\"hljs-string\">\"Topological Sort:\"</span>)\n    g.topologicalSort()\n</code></pre>\n    <h4 id=\"116\">116. 以下哪个语句创建字典？（多选题）</h4>\n    <p>a）d = {}\n        b）d = {“john”：40，“peter”：45}\n        c）d = {40：“john”，45：“peter”}\n        d）d =（40：“john” ，45：“50”）</p>\n    <p>答案： b，c＆d。 </p>\n    <h4 id=\"117\">117. 其中哪一个是分区？</h4>\n    <p>a）/\n        b）//\n        c）％\n        d）没有提到的</p>\n    <p>答案： b</p>\n    <p>当两个操作数都是整数时，python 会删除小数部分并给出舍入值，以获得准确的答案使用分层。例如，5/2 = 2.5，但两个操作数都是整数，因此在 python 中对此表达式的回答是2.要获得2.5作为答案，请使用//使用\n        floor division。所以，5 // 2 = 2.5</p>\n    <h4 id=\"118\">118. 标识符的最大可能长度是多少？</h4>\n    <p>a）31个字符\n        b）63个字符\n        c）79个字符\n        d）以上都不是</p>\n    <p>答案： d）以上都不是</p>\n    <p>标识符可以是任意长度。</p>\n    <h4 id=\"119\">119. 为什么不鼓励以下划线开头的局部变量名？</h4>\n    <p>a）它们用于表示类的私有变量\n        b）它们使解释器混淆\n        c）它们用于指示全局变量\n        d）它们减慢执行速度</p>\n    <p>答案： a）它们用于表示类的私有变量</p>\n    <p>由于 Python 没有私有变量的概念，因此前导下划线用于表示不能从类外部访问的变量。</p>\n    <h4 id=\"120\">120. 以下哪项是无效声明？</h4>\n    <p>a）abc = 1,000,000\n        b）abc = 1000 2000 3000\n        c）a，b，c =\n        1000,2000,3000 d）a<em>b</em>c = 1,000,000</p>\n    <p>答案： b）abc = 1000 2000 3000</p>\n    <p>变量名中不允许使用空格。</p>\n    <h4 id=\"121output\">121. 以下是什么Output？</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">try</span>:\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">'1'</span> != <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">raise</span> <span class=\"hljs-string\">\"someError\"</span>\n    <span class=\"hljs-keyword\">else</span>:\n        print(<span class=\"hljs-string\">\"someError has not occured\"</span>)\n<span class=\"hljs-keyword\">except</span> <span class=\"hljs-string\">\"someError\"</span>:\n    <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-string\">\"someError has occured\"</span>)\n</code></pre>\n    <p>a）发生了 someError\n        b）没有发生 someError\n        c）无效代码\n        d）以上都没有</p>\n    <p>答案： c）代码无效</p>\n    <p>新的异常类必须从 BaseException 继承。这里没有这样的遗产。</p>\n    <h4 id=\"122list12332221425list11\">122. 假设 list1 是[2,33,222,14,25]，什么是 list1 [-1]？</h4>\n    <p>a）错误\n        b）无\n        c）25\n        d）2</p>\n    <p>答案： c）25</p>\n    <p>索引 - 1 对应于列表中的最后一个索引。</p>\n    <h4 id=\"123cscorestxt\">123. 要打开文件 c：scores.txt 进行写作，我们使用</h4>\n    <p>a）outfile = open（“c：scores.txt”，“r”）\n        b）outfile = open（“c：scores.txt”，“w”）\n        c）outfile = open（file =“c：scores.txt “，”r“）\n        d）outfile = open（file =”c：scores.txt“，”o“）</p>\n    <p>答案： b）该位置包含双斜杠（），w用于表示正在写入文件。</p>\n    <h4 id=\"124output\">124. 以下是什么 Output？</h4>\n    <pre><code class=\"hljs python\">f = <span class=\"hljs-keyword\">None</span>\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range (<span class=\"hljs-number\">5</span>):\n    <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"data.txt\"</span>, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:\n        <span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">2</span>:\n            <span class=\"hljs-keyword\">break</span>\n\n<span class=\"hljs-keyword\">print</span> f.closed\n</code></pre>\n    <p>a）真\n        b）假\n        c）没有\n        d）错误</p>\n    <p>答案： a）是的 </p>\n    <p>与 open 文件一起使用时，WITH 语句可确保在 with 块退出时关闭文件对象。</p>\n    <h4 id=\"125tryexceptelseelse\">125. try-except-else 的 else 部分什么时候执行？</h4>\n    <p>a）总是\n        b）当发生异常时\n        c）当没有异常发生时\n        d）当除了块之外发生异常时</p>\n    <p>答案： c）没有异常发生时</p>\n    <p>当没有异常发生时，执行 else 部分。</p></div>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>Python面试120题</title>\n</head>\n<body>\n<div id=\"article_content\" class=\"mazi-article-content dont-break-out\"><h3 id=\"python\">基本 Python 面试问题</h3>\n    <h4 id=\"1python\">1. Python 中的列表和元组有什么区别？</h4>\n    <p>列表是可变的，即可以编辑它们；元组是不可变的（元组是无法编辑的列表）。</p>\n    <p>列表比元组慢；元组比列表更快。</p>\n    <p>列表语法：list<em>1 = [10，'Chelsea'，20]；\n        元组语法：tup</em>1 =（10，'Chelsea'，20）。</p>\n    <h4 id=\"2python\">2. Python 的主要功能是什么？</h4>\n    <ul>\n        <li><p>Python 是一种解释型语言。这意味着，与 C 语言及其衍生语言不同，Python 在运行之前不需要进行编译。其他解释性语言包括 PHP 和 Ruby。</p></li>\n        <li><p>Python 是动态类型的，当你声明变量时，你不需要声明变量的类型。你可以直接编写类似 x=111，或者 x=\"I'm a string\" 这样的代码，程序不会报错。</p></li>\n        <li><p>Python 非常适合面向对象的编程（OOP），因为它允许类的定义以及组合和继承。Python 没有访问说明（如 C ++ 的 public，private）。</p></li>\n        <li><p>在 Python 中，函数是第一类对象。这意味着它们可以分配给变量，从其他函数返回并传递给函数。类也是第一类对象。</p></li>\n        <li><p>编写 Python 代码很快，但运行速度通常比编译语言慢。不过，Python 允许加入基于 C 语言编写的扩展，因此我们可以优化代码。numpy\n            就是一个很好的例子，它的运行速度相当快的，因为很多算数运算并不通过 Python 实现。</p></li>\n        <li><p>Python 用途非常广泛—— Web 应用程序、自动化、科学建模、大数据应用程序等等。它也经常被称作“胶水语言”，以使其他语言和组件发挥得很好。</p></li>\n    </ul>\n    <h4 id=\"3python\">3. python 是编程语言还是脚本语言？</h4>\n    <p>Python 能够编写脚本，但从一般意义上讲，它被认为是一种通用的编程语言。</p>\n    <h4 id=\"4python\">4. Python 是一种解释性语言吗？</h4>\n    <p>Python 是一种解释型语言。它的源代码可以直接运行，python 解释器会把源代码转换成中间语言，之后翻译成机器码再执行。</p>\n    <h4 id=\"5pep8\">5. 什么是 pep 8？</h4>\n    <p>PEP 代表 Python Enhancement Proposal。它是一组规则，指定如何格式化 Python 代码以获得最大可读性。</p>\n    <h4 id=\"6python\">6. 如何在 Python 中管理内存？</h4>\n    <p>python 中的内存管理由 Python 私有堆空间管理。所有 Python 对象和数据结构都位于私有堆中。程序员无权访问此私有堆。python 解释器负责处理这个问题。</p>\n    <p>Python 对象的堆空间分配由 Python 的内存管理器完成。核心 API 提供了一些程序员编写代码的工具。</p>\n    <p>Python 还有一个内置的垃圾收集器，它可以回收所有未使用的内存，并使其可用于堆空间。</p>\n    <h4 id=\"7python\">7. Python 中的命名空间是什么？</h4>\n    <p>命名空间是一个命名系统，用于确保名称是唯一的，以避免命名冲突。</p>\n    <h4 id=\"8pythonpath\">8. 什么是 PYTHONPATH？</h4>\n    <p>它是导入模块时使用的环境变量。每当导入模块时，也会查找 PYTHONPATH 以检查各个目录中是否存在导入的模块。解释器使用它来确定要加载的模块。</p>\n    <h4 id=\"9pythonpython\">9. 什么是 python 模块？在 Python 中命名一些常用的内置模块？</h4>\n    <p>Python 模块是包含 Python 代码的文件。此代码可以是函数类或变量。Python 模块是包含可执行代码的 .py 文件。</p>\n    <p>一些常用的内置模块是：</p>\n    <ul>\n        <li>os</li>\n        <li>sys</li>\n        <li>math</li>\n        <li>random</li>\n        <li>data time</li>\n        <li>JSON</li>\n    </ul>\n    <h4 id=\"10python\">10. Python 中的局部变量和全局变量是什么？</h4>\n    <p>全局变量：</p>\n    <p>在函数外或全局空间中声明的变量称为全局变量。这些变量可以由程序中的任何函数访问。</p>\n    <p>局部变量：</p>\n    <p>在函数内声明的任何变量都知道局部变量。此变量存在于本地空间中，而不是全局空间中。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs makefile\">a=2                       <span class=\"hljs-comment\">#Global Variable</span>\ndef add():\nb=3                       <span class=\"hljs-comment\">#Local Variable</span>\nc=a+b\nprint(c)\nadd()\nOutput：  5\n</code></pre>\n    <p>当你尝试访问函数 add（）之外的局部变量时，它将引发错误。</p>\n    <h4 id=\"11python\">11. python 是否区分大小写？</h4>\n    <p>是的。Python 是一种区分大小写的语言。</p>\n    <h4 id=\"12python\">12. Python 中的类型转换是什么？</h4>\n    <p>类型转换是指将一种数据类型转换为另一种数据类型。</p>\n    <ul>\n        <li><p>int（） - 将任何数据类型转换为整数类型</p></li>\n        <li><p>float（） - 将任何数据类型转换为 float 类型</p></li>\n        <li><p>ord（） - 将字符转换为整数</p></li>\n        <li><p>hex（） - 将整数转换为十六进制</p></li>\n        <li><p>oct（） - 将整数转换为八进制</p></li>\n        <li><p>tuple（） -此函数用于转换为元组。</p></li>\n        <li><p>set（） -此函数在转换为 set 后返回类型。</p></li>\n        <li><p>list（） - 此函数用于将任何数据类型转换为列表类型。</p></li>\n        <li><p>dict（） - 此函数用于将顺序元组（键，值）转换为字典。</p></li>\n        <li><p>str（） - 用于将整数转换为字符串。</p></li>\n        <li><p>complex（real，imag） - 此函数将实数转换为复数（实数，图像）数。</p></li>\n    </ul>\n    <h4 id=\"13python\">13. Python 中有哪些内置类型？</h4>\n    <p>Python 的不可变内置数据类型</p>\n    <ul>\n        <li>数字</li>\n        <li>字符串</li>\n        <li>元组</li>\n    </ul>\n    <p>Python 的可变内置数据类型</p>\n    <ul>\n        <li>名单</li>\n        <li>字典</li>\n        <li>集</li>\n    </ul>\n    <h4 id=\"14python\">14. python 中是否需要缩进？</h4>\n    <p>Python 需要缩进。它指定了一个代码块。循环，类，函数等中的所有代码都在缩进块中指定。通常使用四个空格字符来完成。如果你的代码没有必要缩进，它将无法准确执行并且也会抛出错误。</p>\n    <h4 id=\"15pythonarray\">15. Python array和列表有什么区别？</h4>\n    <p>Python 中的array和列表具有相同的存储数据方式。但是，array只能包含单个数据类型元素，而列表可以包含任何数据类型元素。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs php\">import <span class=\"hljs-keyword\">array</span> <span class=\"hljs-keyword\">as</span> arr\nMy_Array=arr.<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'i'</span>,[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>])\nMy_list=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">'abc'</span>,<span class=\"hljs-number\">1.20</span>]\n<span class=\"hljs-keyword\">print</span>(My_Array)\n<span class=\"hljs-keyword\">print</span>(My_list)\n\nOutput：\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'i'</span>，[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]）[<span class=\"hljs-number\">1</span>，<span class=\"hljs-string\">'abc'</span>，<span class=\"hljs-number\">1.2</span>]\n</code></pre>\n    <h4 id=\"16python\">16. Python 中的函数是什么？</h4>\n    <p>函数是一个代码块，只有在被调用时才会执行。要在 Python 中定义函数，请使用 def 关键字。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">Newfunc</span><span class=\"hljs-params\">()</span>:</span>\nprint(<span class=\"hljs-string\">\"Hi, Welcome to Edureka\"</span>)\nNewfunc(); <span class=\"hljs-comment\">#calling the function</span>\nOutput：Hi, Welcome to Edureka\n</code></pre>\n    <h4 id=\"17__init__\">17. <strong>init</strong> 是什么？</h4>\n    <p>__ init__ 是 Python 中的方法或构造函数。在创建类的新对象/实例时，将自动调用此方法来分配内存。所有类都有 <strong>init</strong> 方法。</p>\n    <p>以下是如何使用它的示例。</p>\n    <pre><code class=\"hljs objectivec\"><span class=\"hljs-keyword\">class</span> Employee:\ndef __init__(<span class=\"hljs-keyword\">self</span>, name, age,salary):\n<span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-keyword\">self</span>.age = age\n<span class=\"hljs-keyword\">self</span>.salary = <span class=\"hljs-number\">20000</span>\nE1 = Employee(<span class=\"hljs-string\">\"XYZ\"</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">20000</span>)\n <span class=\"hljs-comment\">/*E1 is the instance of class Employee.*/</span>\n<span class=\"hljs-comment\">/*__init__ allocates memory for E1. */</span>\nprint(E1.name)\nprint(E1.age)\nprint(E1.salary)\nOutput：\n\nXYZ\n\n<span class=\"hljs-number\">23</span>\n\n<span class=\"hljs-number\">20000</span>\n</code></pre>\n    <h4 id=\"18lambda\">18. 什么是 lambda 函数？</h4>\n    <p>匿名函数称为 lambda 函数。此函数可以包含任意数量的参数，但只能有一个语句。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs makefile\">a = lambda x,y : x+y\nprint(a(5, 6))\nOutput：  11\n</code></pre>\n    <h4 id=\"19pythonself\">19. Python 中的 self 是什么？</h4>\n    <p>self 是类的实例或对象。在 Python 中，这显然包含在第一个参数中。但是，Java 中的情况并非如此，它是可选的。它有助于区分具有局部变量的类的方法和属性。</p>\n    <p>init 方法中的 self 变量引用新创建的对象，而在其他方法中，它引用其方法被调用的对象。</p>\n    <h4 id=\"20\">20. 如何中断，继续并通过工作？</h4>\n    <ul>\n        <li>中断：当满足某些条件并且控制转移到下一个语句时允许循环终止。</li>\n        <li>继续：允许在满足某些特定条件时跳过循环的某些部分，并将控件转移到循环的开头。</li>\n        <li>通过：在语法上需要一些代码块时使用，但是你想跳过它的执行。这基本上是一个空操作。执行此操作时没有任何反应。</li>\n    </ul>\n    <h4 id=\"211\">21. [:: - 1} 的作用是什么？</h4>\n    <p>[:: - 1] 用于反转array或序列的顺序。</p>\n    <p>例如：</p>\n    <pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-built_in\">array</span> as arr\nMy_Array=arr.<span class=\"hljs-built_in\">array</span>(<span class=\"hljs-string\">'i'</span>,[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>])\nMy_Array[::<span class=\"hljs-number\">-1</span>]\nOutput：<span class=\"hljs-built_in\">array</span>（<span class=\"hljs-string\">'i'</span>，[<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>]）\n</code></pre>\n    <p>[:: - 1] 重新打印有序数据结构的反转副本，例如array或列表。原始array或列表保持不变。</p>\n    <h4 id=\"22python\">22. 如何在 Python 中随机化列表中的项目？</h4>\n    <p>考虑以下示例：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">from</span> random <span class=\"hljs-keyword\">import</span> shuffle\nx = [<span class=\"hljs-string\">'Keep'</span>, <span class=\"hljs-string\">'The'</span>, <span class=\"hljs-string\">'Blue'</span>, <span class=\"hljs-string\">'Flag'</span>, <span class=\"hljs-string\">'Flying'</span>, <span class=\"hljs-string\">'High'</span>]\nshuffle(x)\n<span class=\"hljs-built_in\">print</span>(x)\n\nOutput：\n[<span class=\"hljs-string\">'Flying'</span>，<span class=\"hljs-string\">'Keep'</span>，<span class=\"hljs-string\">'Blue'</span>，<span class=\"hljs-string\">'High'</span>，<span class=\"hljs-string\">'The'</span>，<span class=\"hljs-string\">'Flag'</span>]\n</code></pre>\n    <h4 id=\"23python\">23. 什么是 python 迭代器？</h4>\n    <p>迭代器是可以遍历或迭代的对象。</p>\n    <h4 id=\"24python\">24. 如何在 Python 中生成随机数？</h4>\n    <p>随机模块是用于生成随机数的标准模块。该方法定义为：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> random\nrandom.random\n</code></pre>\n    <p>语句 random.random（）方法返回 [0,1] 范围内的浮点数。该函数生成随机浮点数。随机类使用的方法是隐藏实例的绑定方法。可以使用 Random\n        的实例来显示创建不同线程实例的多线程程序。其中使用的其他随机生成器是：</p>\n    <ul>\n        <li>randrange（a，b）：它选择一个整数并定义[a，b]之间的范围。它通过从指定范围中随机选择元素来返回元素。它不构建范围对象。</li>\n        <li>uniform（a，b）：它选择一个在[a，b）范围内定义的浮点数 .Itt 返回浮点数</li>\n        <li>normalvariate（mean，sdev）：它用于正态分布，其中 mu 是平均值，sdev 是用于标准偏差的 sigma。</li>\n        <li>使用和实例化的 Random 类创建一个独立的多个随机数生成器。</li>\n    </ul>\n    <h4 id=\"25rangexrange\">25. range＆xrange 有什么区别？</h4>\n    <p>在大多数情况下，xrange 和 range 在功能方面完全相同。它们都提供了一种生成整数列表供你使用的方法，但是请你随意使用。唯一的区别是 range 返回一个 Python 列表对象，x range 返回一个 xrange\n        对象。</p>\n    <p>这意味着 xrange 实际上并不像运行时那样在运行时生成静态列表。它使用称为 yielding 的特殊技术根据需要创建值。该技术与一种称为生成器的对象一起使用。这意味着，如果你有一个非常巨大的范围，你想生成一个列表，比如\n        10 亿，xrange 就是要使用的功能。</p>\n    <p>如果你有一个真正的内存敏感系统，如你正在使用的手机，尤其如此，因为范围将使用尽可能多的内存来创建整数array，这可能会导致内存错误并导致崩溃程序。这是一个记忆饥饿的野兽。</p>\n    <h4 id=\"26python\">26. 你如何在 python 中写注释？</h4>\n    <p>Python 中的注释以＃字符开头。但是，有时候，使用 docstrings（三重引号中包含的字符串）进行注释。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-comment\">#Comments in python start like this</span>\n<span class=\"hljs-keyword\">print</span>（“comment <span class=\"hljs-keyword\">in</span> python start <span class=\"hljs-keyword\">with</span> a <span class=\"hljs-comment\">#”）</span>\nOutput：comment <span class=\"hljs-keyword\">in</span> python start <span class=\"hljs-keyword\">with</span> a <span class=\"hljs-comment\">#</span>\n</code></pre>\n    <h4 id=\"27picklingunpickling\">27. 什么是 pickling 和 unpickling？</h4>\n    <p>Pickle 模块接受任何 Python 对象并将其转换为字符串表示形式，并使用 dump 函数将其转储到文件中，此过程称为 pickling。从存储的字符串表示中检索原始 Python 对象的过程称为\n        unpickling。</p>\n    <h4 id=\"28python\">28. python 中的生成器是什么？</h4>\n    <p>返回一组可迭代项的函数称为生成器。</p>\n    <h4 id=\"29\">29. 你如何把字符串的第一个字母大写？</h4>\n    <p>在 Python 中，capitalize（）方法将字符串的第一个字母大写。如果字符串在开头已经包含大写字母，那么它将返回原始字符串。</p>\n    <h4 id=\"30\">30. 如何将字符串转换为全小写？</h4>\n    <p>要将字符串转换为小写，可以使用 lower（）函数。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs bash\">stg=<span class=\"hljs-string\">'ABCD'</span>\n<span class=\"hljs-built_in\">print</span>(stg.lower())\nOutput： abcd\n</code></pre>\n    <h4 id=\"31python\">31. 如何在 python 中注释多行？</h4>\n    <p>多行注释出现在多行中。所有要评论的行都要以＃为前缀。你还可以使用非常好的 快捷方式来注释多行。你需要做的就是按住 Ctrl 键并在每个想要包含＃字符的地方左键单击并键入一次＃。这将注释你引入光标的所有行。</p>\n    <h4 id=\"32pythondocstrings\">32. Python 中的 Docstrings 是什么？</h4>\n    <p>Docstrings 实际上不是评论，它们是文档字符串。这些文档字符串在三引号内。它们没有分配给任何变量，因此有时也用于评论的目的。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-string\">\"\"\"\nUsing docstring as a comment.\nThis code divides 2 numbers\n\"\"\"</span>\nx=<span class=\"hljs-number\">8</span>\ny=<span class=\"hljs-number\">4</span>\nz=x/y\nprint(z)\nOutput： <span class=\"hljs-number\">2.0</span>\n</code></pre>\n    <h4 id=\"33isnotin\">33. 操作符 is、not 和 in 的目的是什么？</h4>\n    <p>操作符是特殊功能。它们采用一个或多个值并产生相应的结果。</p>\n    <ul>\n        <li><p>is：当 2 个操作数为 true 时返回 true（例如：“a”是'a'）</p></li>\n        <li><p>not：返回布尔值的倒数</p></li>\n        <li><p>in：检查某个元素是否存在于某个序列中</p></li>\n    </ul>\n    <h4 id=\"34pythonhelpdir\">34. Python 中 help（）和 dir（）函数的用法是什么？</h4>\n    <p>Help（）和dir（）这两个函数都可以从 Python 解释器访问，并用于查看内置函数的合并转储。 </p>\n    <ul>\n        <li>Help（）函数：help（）函数用于显示文档字符串，还可以帮助你查看与模块，关键字，属性等相关的帮助。</li>\n        <li>Dir（）函数：dir（）函数用于显示定义的符号。</li>\n    </ul>\n    <h4 id=\"35python\">35. 每当 Python 退出时，为什么不是所有的内存都被解除分配？</h4>\n    <ul>\n        <li>每当 Python 退出时，尤其是那些对其他对象具有循环引用的 Python 模块或者从全局名称空间引用的对象并不总是被解除分配或释放。</li>\n        <li>无法解除分配C库保留的那些内存部分。</li>\n        <li>退出时，由于拥有自己的高效清理机制，Python 会尝试取消分配/销毁其他所有对象。</li>\n    </ul>\n    <h4 id=\"36pythondictionary\">36. Python 中的字典（dictionary）是什么？</h4>\n    <p>Python 中的内置数据类型称为字典（dictionary）。它定义了键和值之间的一对一关系。字典包含一对键及其对应的值。字典由键索引。</p>\n    <p>我们来举个例子：</p>\n    <p>以下示例包含一些键，Country, Capital 和 PM。它们的相应值分别是 India, Delhi 和 Modi respectively。</p>\n    <pre><code class=\"hljs bash\">dict={<span class=\"hljs-string\">'Country'</span>:<span class=\"hljs-string\">'India'</span>,<span class=\"hljs-string\">'Capital'</span>:<span class=\"hljs-string\">'Delhi'</span>,<span class=\"hljs-string\">'PM'</span>:<span class=\"hljs-string\">'Modi'</span>}\n<span class=\"hljs-built_in\">print</span> dict[Country]\nIndia\n\n<span class=\"hljs-built_in\">print</span> dict[Capital]\nDelhi\n\n<span class=\"hljs-built_in\">print</span> dict[PM]\nModi\n</code></pre>\n    <h4 id=\"37python\">37. 如何在 python 中使用三元运算符？</h4>\n    <p>Ternary 运算符是用于显示条件语句的运算符。这包含 true 或 false 值，并且必须为其评估语句。</p>\n    <p>语法：</p>\n    <p>三元运算符将被给出为：</p>\n    <pre><code class=\"hljs cs\">[<span class=\"hljs-meta\">on_true</span>] <span class=\"hljs-keyword\">if</span> [expression] <span class=\"hljs-keyword\">else</span> [on_false] x，y = <span class=\"hljs-number\">25</span>,<span class=\"hljs-number\">50</span>big = x <span class=\"hljs-keyword\">if</span> x &lt;y <span class=\"hljs-keyword\">else</span> y\n</code></pre>\n    <p>例：</p>\n    <p>表达式的计算方式与 x &lt;y else y 一样，在这种情况下，如果 x &lt;y 为真，则返回值为 big = x，如果不正确则返回 big = y 作为结果。</p>\n    <h4 id=\"38argskwargs\">38. 这是什么意思：* args，** kwargs？我们为什么要用呢？</h4>\n    <p>当我们不确定将多少个参数传递给函数，或者我们想要将存储的列表或参数元组传递给函数时，我们使用* args。*<em>当我们不知道将多少关键字参数传递给函数时使用 kwargs，或者它可以用于将字典的值作为关键字参数传递。标识符\n        args 和 kwargs 是一个约定，你也可以使用</em> bob 和 ** billy，但这不是明智之举。</p>\n    <h4 id=\"39len\">39. len（）的作用是什么？</h4>\n    <p>用于确定字符串，列表，array等的长度。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs makefile\">stg='ABCD'\nlen(stg)\n</code></pre>\n    <h4 id=\"40pythonresplitsubsubn\">40. Python 中“re”模块的 split（），sub（），subn（）这三个方法的作用是什么？</h4>\n    <p>要修改字符串，Python 的“re”模块提供了 3 种方法。他们是：</p>\n    <ul>\n        <li>split（） - 使用正则表达式模式将给定字符串“拆分”到列表中。</li>\n        <li>sub（） - 查找正则表达式模式匹配的所有子字符串，然后用不同的字符串替换它们</li>\n        <li>subn（） - 它类似于sub（），并且还返回新字符串和替换的次数\u0010。</li>\n    </ul>\n    <h4 id=\"41\">41. 什么是负指数，为什么使用它们？</h4>\n    <p>Python 中的序列被编入索引，它由正数和负array成。积极的数字使用'0'作为第一个索引，'1'作为第二个索引，进程继续使用。</p>\n    <p>负数的索引从'-1'开始，表示序列中的最后一个索引，' - 2'作为倒数第二个索引，序列像正数一样前进。</p>\n    <p>负索引用于从字符串中删除任何换行符，并允许该字符串除了作为S [： - 1]给出的最后一个字符。负索引还用于显示索引以正确的顺序表示字符串。</p>\n    <h4 id=\"42python\">42. 什么是 Python 包？</h4>\n    <p>Python 包是包含多个模块的命名空间。</p>\n    <h4 id=\"43python\">43. 如何在 Python 中删除文件？</h4>\n    <p>要在 Python 中删除文件，你需要导入操作系统模块。之后，你需要使用os.remove（）函数。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> os\nos.remove(<span class=\"hljs-string\">\"xyz.txt\"</span>)\n</code></pre>\n    <h4 id=\"44python\">44. 什么是 python 的内置类型？</h4>\n    <p>Python 中的内置类型如下：</p>\n    <ul>\n        <li>整型</li>\n        <li>浮点</li>\n        <li>复数</li>\n        <li>字符串</li>\n        <li>布尔</li>\n        <li>内置功能</li>\n    </ul>\n    <h4 id=\"45numpypython\">45. NumPy 阵列在（嵌套）Python 列表中提供了哪些优势？</h4>\n    <ul>\n        <li>Python 的列表是高效的通用容器。它们支持（相当）有效的插入，删除，追加和连接，Python 的列表推导使它们易于构造和操作。</li>\n        <li>它们有一定的局限性：它们不支持元素化加法和乘法等“向量化”操作，并且它们可以包含不同类型的对象这一事实意味着 Python 必须存储每个元素的类型信息，并且必须在操作时执行类型调度代码在每个元素上。</li>\n        <li>NumPy 不仅效率更高; 它也更方便。你可以免费获得大量的向量和矩阵运算，这有时可以避免不必要的工作。它们也得到有效实施。</li>\n        <li>NumPy array更快，你可以使用 NumPy、FFT、卷积、快速搜索、基本统计、线性代数、直方图等内置。</li>\n    </ul>\n    <h4 id=\"46pythonarray\">46. 如何将值添加到 python array？</h4>\n    <p>可以使用 append（）， extend（） 和 insert（i，x） 函数将元素添加到array中 。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs php\">a=arr.<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'d'</span>, [<span class=\"hljs-number\">1.1</span> , <span class=\"hljs-number\">2.1</span> ,<span class=\"hljs-number\">3.1</span>] )\na.append(<span class=\"hljs-number\">3.4</span>)\n<span class=\"hljs-keyword\">print</span>(a)\na.extend([<span class=\"hljs-number\">4.5</span>,<span class=\"hljs-number\">6.3</span>,<span class=\"hljs-number\">6.8</span>])\n<span class=\"hljs-keyword\">print</span>(a)\na.insert(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3.8</span>)\n<span class=\"hljs-keyword\">print</span>(a)\nOutput：\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.1</span>,<span class=\"hljs-number\">3.4</span>]）\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.1</span>,<span class=\"hljs-number\">3.4</span>,<span class=\"hljs-number\">4.5</span>,<span class=\"hljs-number\">6.3</span>,<span class=\"hljs-number\">6.8</span>]）\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">1.1</span>,<span class=\"hljs-number\">2.1</span>,<span class=\"hljs-number\">3.8</span>,<span class=\"hljs-number\">3.1</span>,<span class=\"hljs-number\">3.4</span>,<span class=\"hljs-number\">4.5</span>,<span class=\"hljs-number\">6.3</span>,<span class=\"hljs-number\">6.8</span>]）\n</code></pre>\n    <h4 id=\"47pythonarray\">47. 如何删除 python array的值？</h4>\n    <p>可以使用 pop（） 或 remove（） 方法删除array元素 。这两个函数之间的区别在于前者返回已删除的值，而后者则不返回。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs php\">a=arr.<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'d'</span>, [<span class=\"hljs-number\">1.1</span>, <span class=\"hljs-number\">2.2</span>, <span class=\"hljs-number\">3.8</span>, <span class=\"hljs-number\">3.1</span>, <span class=\"hljs-number\">3.7</span>, <span class=\"hljs-number\">1.2</span>, <span class=\"hljs-number\">4.6</span>])\n<span class=\"hljs-keyword\">print</span>(a.pop())\n<span class=\"hljs-keyword\">print</span>(a.pop(<span class=\"hljs-number\">3</span>))\na.remove(<span class=\"hljs-number\">1.1</span>)\n<span class=\"hljs-keyword\">print</span>(a)\nOutput：\n\n<span class=\"hljs-number\">4.6</span>\n\n<span class=\"hljs-number\">3.1</span>\n\n<span class=\"hljs-keyword\">array</span>（<span class=\"hljs-string\">'d'</span>，[<span class=\"hljs-number\">2.2</span>,<span class=\"hljs-number\">3.8</span>,<span class=\"hljs-number\">3.7</span>,<span class=\"hljs-number\">1.2</span>]）\n</code></pre>\n    <h4 id=\"48pythonoops\">48. Python 有 OOps 概念吗？</h4>\n    <p>Python 是一种面向对象的编程语言。这意味着可以通过创建对象模型在 python 中解决任何程序。但是，Python 可以被视为程序语言和结构语言。</p>\n    <h4 id=\"49\">49. 深拷贝和浅拷贝有什么区别？</h4>\n    <p>\n        创建新实例类型时使用浅拷贝，并保留在新实例中复制的值。浅拷贝用于复制引用指针，就像复制值一样。这些引用指向原始对象，并且在类的任何成员中所做的更改也将影响它的原始副本。浅拷贝允许更快地执行程序，它取决于所使用的数据的大小。</p>\n    <p>\n        深层复制用于存储已复制的值。深层复制不会将引用指针复制到对象。它引用一个对象，并存储一些其他对象指向的新对象。原始副本中所做的更改不会影响使用该对象的任何其他副本。由于为每个被调用的对象创建了某些副本，因此深层复制会使程序的执行速度变慢。</p>\n    <h4 id=\"50python\">50. 如何在 Python 中实现多线程？</h4>\n    <ul>\n        <li>Python 有一个多线程包，但是如果你想要多线程来加速你的代码，那么使用它通常不是一个好主意。</li>\n        <li>Python 有一个名为 Global Interpreter Lock（GIL）的结构。GIL 确保每次只能执行一个“线程”。一个线程获取 GIL，做一点工作，然后将 GIL 传递到下一个线程。</li>\n        <li>这种情况很快发生，因此对于人眼看来，你的线程似乎并行执行，但它们实际上只是轮流使用相同的 CPU 核心。</li>\n        <li>所有这些 GIL 传递都增加了执行的开销。这意味着如果你想让代码运行得更快，那么使用线程包通常不是一个好主意。</li>\n    </ul>\n    <h4 id=\"51python\">51. 在 python 中编译和链接的过程是什么？</h4>\n    <p>编译和链接允许正确编译新扩展而不会出现任何错误，并且只有在通过编译过程时才能进行链接。如果使用动态加载，则它取决于系统提供的样式。python 解释器可用于提供配置设置文件的动态加载，并将重建解释器。</p>\n    <p>这需要的步骤如下：</p>\n    <ol>\n        <li>使用任何名称以及系统编译器支持的任何语言创建文件。例如 file.c或 file.cpp</li>\n        <li>将此文件放在正在使用的发行版的 Modules /目录中。</li>\n        <li>在 Modules /目录中存在的 Setup.local 文件中添加一行。</li>\n        <li>使用 spam file.o 运行该文件</li>\n        <li>通过在顶级目录上使用 make 命令成功运行此重建解释器之后。</li>\n        <li>如果文件已更改，则使用命令“make Makefile”运行rebuildMakefile。</li>\n    </ol>\n    <h4 id=\"52python\">52. 什么是 Python 库？举几个例子。</h4>\n    <p>Python 库是 Python 包的集合。一些主要使用的 python 库是 - Numpy，Pandas，Matplotlib，Scikit-learn 等等。</p>\n    <h4 id=\"53\">53. 什么是拆分用于？</h4>\n    <p>split（）方法用于在 Python 中分隔给定的字符串。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs perl\">a=<span class=\"hljs-string\">\"edureka python\"</span>\n<span class=\"hljs-keyword\">print</span>(a.<span class=\"hljs-keyword\">split</span>())\nOutput：  [<span class=\"hljs-string\">'edureka'</span>，<span class=\"hljs-string\">'python'</span>]\n</code></pre>\n    <h4 id=\"54python\">54. 如何在 python 中导入模块？</h4>\n    <p>可以使用 import 关键字导入模块。你可以通过三种方式导入模块 -</p>\n    <p>例：</p>\n    <pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> array           <span class=\"hljs-comment\">#importing using the original module name</span>\n<span class=\"hljs-keyword\">import</span> array <span class=\"hljs-keyword\">as</span> arr    <span class=\"hljs-comment\"># importing using an alias name</span>\n<span class=\"hljs-keyword\">from</span> array <span class=\"hljs-keyword\">import</span> *    <span class=\"hljs-comment\">#imports everything present in the array module</span>\n</code></pre>\n    <h3 id=\"oops\">OOPS 面试问题</h3>\n    <h4 id=\"55python\">55. 用一个例子解释 Python 中的继承。</h4>\n    <p>继承允许一个类获得另一个类的所有成员（比如属性和方法）。继承提供代码可重用性，使创建和维护应用程序更容易。我们继承的类称为超类，继承的类称为派生/子类。</p>\n    <p>它们是 Python 支持的不同类型的继承：</p>\n    <ul>\n        <li>单一继承 - 派生类获取单个超类的成员。</li>\n        <li>多级继承 - 从基类base1继承的派生类d1，d2继承自base2。</li>\n        <li>分层继承 - 从一个基类可以继承任意数量的子类</li>\n        <li>多重继承 - 派生类从多个基类继承。</li>\n    </ul>\n    <h4 id=\"56python\">56. 如何在 Python 中创建类？</h4>\n    <p>Python 中的类是使用 class 关键字创建的。</p>\n    <p>例：</p>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span>:</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-keyword\">self</span>.name = name\nE1=Employee(<span class=\"hljs-string\">\"abc\"</span>)\nprint(E1.name)\nOutput： abc\n</code></pre>\n    <h4 id=\"57\">57. 什么是猴子补丁？</h4>\n    <p>在 Python 中，术语猴子补丁仅指在运行时对类或模块的动态修改。\n        考虑以下示例：</p>\n    <pre><code class=\"m.py language-m.py\">class MyClass:\ndef f(self):\nprint \"f()\"\n</code></pre>\n    <p>然后我们可以像这样运行猴子补丁测试：</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> m\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">monkey_f</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"monkey_f()\"</span>\n\nm.MyClass.f = monkey_f\nobj = m.MyClass()\nobj.f()\nOutput如下：\n\nmonkey_f（）\n</code></pre>\n    <h4 id=\"58python\">58. python 是否支持多重继承？</h4>\n    <p>多重继承意味着可以从多个父类派生一个类。与 Java 不同，Python 确实支持多重继承。</p>\n    <h4 id=\"59python\">59. Python 中的多态是什么？</h4>\n    <p>多态意味着能够采取多种形式。因此，例如，如果父类具有名为 ABC 的方法，则子类也可以具有具有相同名称 ABC 的方法，该方法具有其自己的参数和变量。Python 允许多态。</p>\n    <h4 id=\"60python\">60. 在 Python 中怎样定义封装？</h4>\n    <p>封装意味着将代码和数据绑定在一起。就是使用私有化的方法，把一些属性或者是方法私有化，外部无法调用。在 Python 中，私有化属性或者方法，可以在属性、方法名字前加上双下划线。</p>\n    <h4 id=\"61python\">61. 你如何在 Python 中进行数据抽象？</h4>\n    <p>数据抽象仅提供所需的详细信息并将实现隐藏起来。它可以通过使用接口和抽象类在 Python 中实现。</p>\n    <h4 id=\"62python\">62. python 是否使用了访问说明符？</h4>\n    <p>Python 不会剥夺对实例变量或函数的访问权限。Python 规定了使用单个或双下划线为变量，函数或方法的名称添加前缀的概念，以模仿受保护和私有访问说明符的行为。 </p>\n    <h4 id=\"63python\">63. 如何在 Python 中创建一个空类？</h4>\n    <p>空类是一个没有在其块中定义的代码的类。它可以使用 pass 关键字创建 。但是，你可以在类本身之外创建此类的对象。IN PYTHON PASS 命令在执行时不执行任何操作。这是一个空语句。 </p>\n    <p>例如</p>\n    <pre><code class=\"hljs makefile\">class a:\n    pass\nobj=a()\nobj.name=<span class=\"hljs-string\">\"xyz\"</span>\nprint(<span class=\"hljs-string\">\"Name = \"</span>,obj.name)\nOutput：\n\nName = xyz\n</code></pre>\n    <h4 id=\"64object\">64. object（）有什么作用？</h4>\n    <p>它返回一个无特征的对象，它是所有类的基础。此外，它不采取任何参数。</p>\n    <h3 id=\"python-1\">基本 Python 编码</h3>\n    <h4 id=\"65python\">65. 用 Python 编写程序来执行冒泡排序算法。</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bs</span><span class=\"hljs-params\">(a)</span>:</span>             <span class=\"hljs-comment\"># a = name of list</span>\n    b=len(a)<span class=\"hljs-number\">-1</span>         <span class=\"hljs-comment\"># minus 1 because we always compare 2 adjacent values</span>\n\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(b):\n        <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> range(b-x):\n            <span class=\"hljs-keyword\">if</span> a[y]&gt;a[y+<span class=\"hljs-number\">1</span>]:\n                a[y],a[y+<span class=\"hljs-number\">1</span>]=a[y+<span class=\"hljs-number\">1</span>],a[y]\n    <span class=\"hljs-keyword\">return</span> a\na=[<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">54</span>,<span class=\"hljs-number\">87</span>]\nbs(a)\n产出：  [<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">54</span>,<span class=\"hljs-number\">87</span>]\n</code></pre>\n    <h4 id=\"66pythonstar\">66. 用 Python 编写程序来生成 Star 三角形。</h4>\n    <pre><code class=\"hljs markdown\">def pyfunc(r):\n<span class=\"hljs-code\">    for x in range(r):</span>\n<span class=\"hljs-code\">        print(' '*(r-x-1)+'*'*(2*x+1))    </span>\npyfunc(9)\nOutput：\n\n<span class=\"hljs-code\">        *</span>\n<span class=\"hljs-code\">       ***</span>\n<span class=\"hljs-code\">      *****</span>\n<span class=\"hljs-code\">     *******</span>\n<span class=\"hljs-code\">    *********</span>\n   <span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>*\n  <span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-emphasis\">***</span>\n <span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>\n<span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span><span class=\"hljs-strong\">*****</span>**\n</code></pre>\n    <h4 id=\"67pythonfibonacci\">67. 编写一个程序，用Python生成Fibonacci系列。</h4>\n    <pre><code class=\"hljs perl\"><span class=\"hljs-comment\"># Enter number of terms needed                   #0,1,1,2,3,5....</span>\na=<span class=\"hljs-keyword\">int</span>(input(<span class=\"hljs-string\">\"Enter the terms\"</span>))\nf=<span class=\"hljs-number\">0</span>                                         <span class=\"hljs-comment\">#first element of series</span>\n<span class=\"hljs-keyword\">s</span>=<span class=\"hljs-number\">1</span>                                         <span class=\"hljs-comment\">#second element of series</span>\n<span class=\"hljs-keyword\">if</span> a&lt;=<span class=\"hljs-number\">0</span>:\n    <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"The requested series is\n\"</span>,f)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">print</span>(f,<span class=\"hljs-keyword\">s</span>,end=<span class=\"hljs-string\">\" \"</span>)\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">x</span> in range(<span class=\"hljs-number\">2</span>,a):\n        <span class=\"hljs-keyword\">next</span>=f+<span class=\"hljs-keyword\">s</span>\n        <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-keyword\">next</span>,end=<span class=\"hljs-string\">\" \"</span>)\n        f=<span class=\"hljs-keyword\">s</span>\n        <span class=\"hljs-keyword\">s</span>=<span class=\"hljs-keyword\">next</span>&lt;<span class=\"hljs-regexp\">/pre&gt;\n\nOutput：input 5 0 1 1 2 3\n</span></code></pre>\n    <h4 id=\"68python\">68. 用 Python 编写程序来检查数字是否为素数。</h4>\n    <pre><code class=\"hljs perl\">a=<span class=\"hljs-keyword\">int</span>(input(<span class=\"hljs-string\">\"enter number\"</span>))\n<span class=\"hljs-keyword\">if</span> a&gt;<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">x</span> in range(<span class=\"hljs-number\">2</span>,a):\n        <span class=\"hljs-keyword\">if</span>(a%x)==<span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"not prime\"</span>)\n            <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"Prime\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"not prime\"</span>)\nOutput：\n\ninput <span class=\"hljs-number\">3</span>\n\nPrime\n</code></pre>\n    <h4 id=\"69python\">69. 用 Python 编写程序来检查序列是否是回文序列。</h4>\n    <pre><code class=\"hljs makefile\">a=input(<span class=\"hljs-string\">\"enter sequence\"</span>)\nb=a[::-1]\nif a==b:\n    print(<span class=\"hljs-string\">\"palindrome\"</span>)\n<span class=\"hljs-section\">else:</span>\n    print(<span class=\"hljs-string\">\"Not a Palindrome\"</span>)\nOutput：\n\nenter sequence 323 palindrome\n</code></pre>\n    <h4 id=\"70\">70. 写一个单行，用于计算文件中大写字母的数量。即使文件太大而无法放入内存，你的代码也应该可以正常工作。</h4>\n    <p>让我们先写一个多行解决方案，然后将其转换为单行代码。</p>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">with <span class=\"hljs-title\">open</span>(<span class=\"hljs-params\">SOME_LARGE_FILE</span>) <span class=\"hljs-keyword\">as</span> fh:\ncount </span>= <span class=\"hljs-number\">0</span>\ntext = fh.read()\n<span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> text:\n    <span class=\"hljs-keyword\">if</span> character.isupper():\ncount += <span class=\"hljs-number\">1</span>\n我们现在尝试将其转换为单行。\n\n<span class=\"hljs-function\">count <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> fh <span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> line <span class=\"hljs-keyword\">if</span> character.isupper(</span>))\n</span></code></pre>\n    <h4 id=\"71python\">71. 在 Python 中为数值数据集编写排序算法。</h4>\n    <p>以下代码可用于在 Python 中对列表进行排序：</p>\n    <pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">list</span> = [<span class=\"hljs-string\">\"1\"</span>, <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"0\"</span>, <span class=\"hljs-string\">\"6\"</span>, <span class=\"hljs-string\">\"9\"</span>]\n<span class=\"hljs-built_in\">list</span> = [<span class=\"hljs-keyword\">int</span>(i) <span class=\"hljs-keyword\">for</span> i in <span class=\"hljs-built_in\">list</span>]\n<span class=\"hljs-built_in\">list</span>.sort()\nprint (<span class=\"hljs-built_in\">list</span>)\n</code></pre>\n    <h4 id=\"72a0a1an\">72. 查看下面的代码，记下 A0，A1，... An 的最终值。</h4>\n    <pre><code class=\"hljs makefile\">A0 = dict(zip(('a','b','c','d','e'),(1,2,3,4,5)))\nA1 = range(10)A2 = sorted([i for i in A1 if i in A0])\nA3 = sorted([A0[s] for s in A0])\nA4 = [i for i in A1 if i in A3]\nA5 = {i:i*i for i in A1}\nA6 = [[i,i*i] for i in A1]\nprint(A0,A1,A2,A3,A4,A5,A6)\n\n以下是 A0，A1，... A6 的最终 Output\n\nA0 = {'a'：1，'c'：3，'b'：2，'e'：5，'d'：4}\nA1 =range（0,10）\nA2 = []\nA3 = [1,2,3,4,5]\nA4 = [1,2,3,4,5]\nA5 = {0：0,1：1,2：4,3：9,4：16,5：25,6：36,7：49,8：64,9：81}\nA6 = [[0,0]，[1,1]，[2,4]，[3,9]，[4,16]，[5,25]，[6,36]，[7,49] ，[8,64]，[9,81]]\n</code></pre>\n    <h3 id=\"python-2\">Python 库面试问题</h3>\n    <h4 id=\"73flask\">73. 解释 Flask 是什么及其好处？</h4>\n    <p>Flask 是基于“Werkzeug，Jinja2 和良好意图”BSD 许可证的 Python 网络微框架。Werkzeug 和 Jinja2\n        是它的两个依赖项。这意味着它对外部库几乎没有依赖性。它使框架轻松，同时有一点依赖更新和更少的安全漏洞。</p>\n    <p>会话基本上允许你记住从一个请求到另一个请求的信息。在一个瓶子中，会话使用签名的 cookie，以便用户可以查看会话内容并进行修改。如果只有密钥 Flask.secret_key，则用户可以修改会话。</p>\n    <h4 id=\"74djangoflask\">74. Django 比 Flask 好吗？</h4>\n    <p>Django 和 Flask 将 Web 浏览器中输入的 URL 或地址映射到 Python 中的函数。 </p>\n    <p>与 Django 相比，Flask 要简单得多，但 Flask 并没有为你做很多事情意味着你需要指定细节，而 Django 为你做了很多事情，你不需要做太多工作。Django 由预编写的代码组成，用户需要分析这些代码，而\n        Flask 则允许用户创建自己的代码，因此，使代码更容易理解。从技术上讲，两者都同样好，都有自己的优点和缺点。</p>\n    <h4 id=\"75djangopyramidflask\">75. 提到 Django，Pyramid 和 Flask 之间的差异。</h4>\n    <ul>\n        <li>Flask 是一个“微框架”，主要用于具有更简单要求的小型应用程序。在烧瓶中，你必须使用外部库。Flask 已准备好使用。</li>\n        <li>Pyramid 适用于大型应用程序。它提供了灵活性，并允许开发人员为他们的项目使用正确的工具。开发人员可以选择数据库，URL 结构，模板样式等。金字塔是可配置的。</li>\n        <li>Django 也可以像 Pyramid 一样用于更大的应用程序。它包括一个ORM。</li>\n    </ul>\n    <h4 id=\"76django\">76. 讨论 Django 架构。</h4>\n    <p>Django MVT 模式：</p>\n    <p><img src=\"https://images.gitbook.cn/6ec77050-85c0-11e9-9a8d-f9d4f0d85b82\" alt=\"enter image description here\"></p>\n    <p>开发人员提供模型，视图和模板，然后将其映射到URL，Django 可以为用户提供服务。</p>\n    <h4 id=\"77django\">77. 解释如何在 Django 中设置数据库。</h4>\n    <p>你可以使用命令 edit mysite / setting.py，它是一个普通的 python 模块，模块级别代表 Django 设置。</p>\n    <p>Django 默认使用 SQLite; 对于 Django 用户来说这很容易，因此不需要任何其他类型的安装。如果你的数据库选择不同，则必须使用 DATABASE'default' 项中的以下键来匹配你的数据库连接设置。</p>\n    <ul>\n        <li>引擎：你可以使用\n            'django.db.backends.sqlite3'，'django.db.backeneds.mysql'，'django.db.backends.postgresql_psycopg2'，'django.db.backends.oracle'等来更改数据库。\n        </li>\n        <li>名称：数据库的名称。如果你使用 SQLite 作为数据库，那么在这种情况下，数据库将是你计算机上的文件，Name 应该是完整的绝对路径，包括该文件的文件名。</li>\n        <li>如果你不选择 SQLite 作为数据库，则必须添加密码，主机，用户等设置。</li>\n    </ul>\n    <p>Django 使用 SQLite 作为默认数据库，它将数据作为单个文件存储在文件系统中。如果你有数据库服务器-PostgreSQL，MySQL，Oracle，MSSQL-并且想要使用它而不是\n        SQLite，那么使用数据库的管理工具为你的 Django 项目创建一个新的数据库。无论哪种方式，在你的（空）数据库到位的情况下，剩下的就是告诉 Django 如何使用它。这是项目的 settings.py\n        文件的来源。</p>\n    <p>我们将以下代码行添加到 setting.py 文件中：</p>\n    <pre><code class=\"hljs cs\">DATABASES = {\n     <span class=\"hljs-string\">'default'</span>: {\n          <span class=\"hljs-string\">'ENGINE'</span> : <span class=\"hljs-string\">'django.db.backends.sqlite3'</span>,\n          <span class=\"hljs-string\">'NAME'</span> : os.path.<span class=\"hljs-keyword\">join</span>(BASE_DIR, <span class=\"hljs-string\">'db.sqlite3'</span>),\n     }\n}\n</code></pre>\n    <h4 id=\"78djangoview\">78. 举例说明如何在 Django 中编写 VIEW？</h4>\n    <p>这是我们在 Django 中使用 write 一个视图的方法：</p>\n    <pre><code class=\"hljs xml\">from django.http import HttpResponse\nimport datetime\n\ndef Current_datetime(request):\n     now = datetime.datetime.now()\n     html = \"<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>It is now %s<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span> % now\n     return HttpResponse(html)\n</code></pre>\n    <h4 id=\"79django\">79. 提及 Django 模板的组成部分。</h4>\n    <p>模板是一个简单的文本文件。它可以创建任何基于文本的格式，如 XML、CSV、HTML 等。模板包含在评估模板时替换为值的变量和控制模板逻辑的标记（％tag％）。</p>\n    <p><img src=\"https://images.gitbook.cn/984aba40-85c0-11e9-9344-293841b71658\" alt=\"enter image description here\"></p>\n    <h4 id=\"80django\">80. 在 Django 框架中解释会话的使用？</h4>\n    <p>Django 提供了一个会话，允许你基于每个站点访问者存储和检索数据。Django 通过在客户端放置会话 ID cookie 并在服务器端存储所有相关数据来抽象发送和接收 cookie 的过程。</p>\n    <p><img src=\"https://images.gitbook.cn/a31e0760-85c0-11e9-9a4b-7f98565be244\" alt=\"enter image description here\"></p>\n    <p>所以数据本身并不存储在客户端。从安全角度来看，这很好。</p>\n    <h4 id=\"81django\">81. 列出 Django 中的继承样式。</h4>\n    <p>在 Django 中，有三种可能的继承样式：</p>\n    <ul>\n        <li>抽象基类：当你只希望父类包含你不想为每个子模型键入的信息时，使用此样式。</li>\n        <li>多表继承：使用此样式如果要对现有模型进行子类化，并且需要每个模型都有自己的数据库表。</li>\n        <li>代理模型：你可以使用此模型，如果你只想修改模型的Python级别行为，而无需更改模型的字段。</li>\n    </ul>\n    <h3 id=\"webscrapingpython\">Web Scraping - Python 面试问题</h3>\n    <h4 id=\"82url\">82. 如何使用我已经知道的 URL 地址本地保存图像？</h4>\n    <p>我们将使用以下代码从 URL 地址本地保存图像</p>\n    <pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">urllib</span><span class=\"hljs-selector-class\">.request</span>\n<span class=\"hljs-selector-tag\">urllib</span><span class=\"hljs-selector-class\">.request</span><span class=\"hljs-selector-class\">.urlretrieve</span>(\"<span class=\"hljs-selector-tag\">URL</span>\", \"<span class=\"hljs-selector-tag\">local-filename</span><span class=\"hljs-selector-class\">.jpg</span>\")\n</code></pre>\n    <h4 id=\"83google\">83. 如何获取任何网址或网页的 Google 缓存时限？</h4>\n    <p>使用以下 URL 格式：</p>\n    <p>http://webcache.googleusercontent.com/search?q=cache:URLGOESHERE</p>\n    <p>请务必将“URLGOESHERE”替换为你要检索其缓存的页面或网站的正确网址，并查看时间。例如，要查看 edureka.co 的 Google Webcache 时代，你需要使用以下网址：</p>\n    <p>http://webcache.googleusercontent.com/search?q=cache:edureka.co</p>\n    <h4 id=\"84imdb250\">84. 你需要从 IMDb 前 250 电影页面中删除数据。它应该只有字段电影名称，年份和评级。</h4>\n    <p>我们将使用以下代码行：</p>\n    <pre><code class=\"hljs perl\">from bs4 import BeautifulSoup\n\nimport requests\nimport sys\n\nurl = <span class=\"hljs-string\">'http://www.imdb.com/chart/top'</span>\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text)\n<span class=\"hljs-keyword\">tr</span> = soup.findChildren(<span class=\"hljs-string\">\"tr\"</span>)\n<span class=\"hljs-keyword\">tr</span> = iter(<span class=\"hljs-keyword\">tr</span>)\n<span class=\"hljs-keyword\">next</span>(<span class=\"hljs-keyword\">tr</span>)\n\n<span class=\"hljs-keyword\">for</span> movie in <span class=\"hljs-keyword\">tr</span>:\ntitle = movie.find(<span class=\"hljs-string\">'td'</span>, {<span class=\"hljs-string\">'class'</span>: <span class=\"hljs-string\">'titleColumn'</span>} ).find(<span class=\"hljs-string\">'a'</span>).contents[<span class=\"hljs-number\">0</span>]\nyear = movie.find(<span class=\"hljs-string\">'td'</span>, {<span class=\"hljs-string\">'class'</span>: <span class=\"hljs-string\">'titleColumn'</span>} ).find(<span class=\"hljs-string\">'span'</span>, {<span class=\"hljs-string\">'class'</span>: <span class=\"hljs-string\">'secondaryInfo'</span>}).contents[<span class=\"hljs-number\">0</span>]\nrating = movie.find(<span class=\"hljs-string\">'td'</span>, {<span class=\"hljs-string\">'class'</span>: <span class=\"hljs-string\">'ratingColumn imdbRating'</span>} ).find(<span class=\"hljs-string\">'strong'</span>).contents[<span class=\"hljs-number\">0</span>]\nrow = title + <span class=\"hljs-string\">' - '</span> + year + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-string\">' '</span> + rating\n\n<span class=\"hljs-keyword\">print</span>(row)\n</code></pre>\n    <p>上述代码将有助于从 IMDb 的前 250 名列表中删除数据</p>\n    <h3 id=\"python-3\">数据分析 - Python 面试问题</h3>\n    <h4 id=\"85pythonmap\">85. 什么是 Python 中的 map 函数？</h4>\n    <p>map 函数执行作为第一个参数给出的函数，该函数作为第二个参数给出的 iterable 的所有元素。如果给定的函数接受多于 1 个参数，则给出了许多迭代。</p>\n    <h4 id=\"86pythonnumpy\">86. python numpy 比列表更好吗？</h4>\n    <p>我们使用 python numpy array而不是列表，原因如下：</p>\n    <ul>\n        <li>减少记忆</li>\n        <li>快速</li>\n        <li>方便</li>\n    </ul>\n    <h4 id=\"87numpyarrayn\">87. 如何在 NumPy array中获得 N 个最大值的索引？</h4>\n    <p>我们可以使用下面的代码在 NumPy array中获得 N 个最大值的索引：</p>\n    <pre><code class=\"hljs markdown\">import numpy as np\narr = np.array([1, 3, 2, 4, 5])\nprint(arr.argsort()[<span class=\"hljs-string\">-3:</span>][<span class=\"hljs-symbol\">::-1</span>])\noutput：\n\n[4 3 1]\n</code></pre>\n    <h4 id=\"88pythonnumpy\">88. 你如何用 Python / NumPy 计算百分位数？</h4>\n    <p>我们可以使用以下代码计算百分位数</p>\n    <pre><code class=\"hljs makefile\">import numpy as np\na = np.array([1,2,3,4,5])\np = np.percentile(a, 50) <span class=\"hljs-comment\">#Returns 50th percentile, e.g. median</span>\nprint(p)\noutput：\n\n3\n</code></pre>\n    <h4 id=\"89numpyscipy\">89. NumPy 和 SciPy 有什么区别？</h4>\n    <ul>\n        <li>在理想的世界中，NumPy 只包含array数据类型和最基本的操作：索引，排序，重新整形，基本元素函数等等。</li>\n        <li>所有数字代码都将驻留在 SciPy 中。然而，NumPy 的一个重要目标是兼容性，因此 NumPy 试图保留其前任任何一个支持的所有功能。</li>\n        <li>因此，NumPy 包含一些线性代数函数，即使它们更恰当地属于 SciPy。无论如何，SciPy 包含更多全功能的线性代数模块版本，以及许多其他数值算法。</li>\n        <li>如果你使用 python 进行科学计算，你应该安装 NumPy 和 SciPy。大多数新功能属于 SciPy 而非 NumPy。</li>\n    </ul>\n    <h4 id=\"90numpyscipy3d\">90. 如何使用 NumPy / SciPy 制作 3D 绘图/可视化？</h4>\n    <p>与 2D 绘图一样，3D 图形超出了 NumPy 和 SciPy 的范围，但就像 2D 情况一样，存在与 NumPy 集成的包。Matplotlib 在 mplot3d 子包中提供基本的 3D 绘图，而 Mayavi\n        使用功能强大的 VTK 引擎提供各种高质量的 3D 可视化功能。</p>\n    <h4 id=\"91n20\">91. 检查给定数字n是否为2或0的幂</h4>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">check_pow_2</span>(<span class=\"hljs-params\">num</span>):\n    <span class=\"hljs-keyword\">if</span> num </span>== <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">if</span> num &amp; (num - <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n\n\n<span class=\"hljs-keyword\">switch</span> = {\n    <span class=\"hljs-number\">0</span>: <span class=\"hljs-string\">\"Number is 0\"</span>,\n    <span class=\"hljs-number\">1</span>: <span class=\"hljs-string\">\"Number is a power of 2\"</span>,\n    <span class=\"hljs-number\">-1</span>: <span class=\"hljs-string\">\"Number is neither a power of 2 nor 0\"</span>\n}\n<span class=\"hljs-keyword\">case</span> = check_pow_2(<span class=\"hljs-number\">16</span>)\n\nprint(<span class=\"hljs-keyword\">switch</span>[<span class=\"hljs-keyword\">case</span>])\n</code></pre>\n    <h4 id=\"92ab\">92. 计算将A转换为B所需的位数</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">count_bits_flip</span><span class=\"hljs-params\">(a, b)</span>:</span>\n    <span class=\"hljs-comment\"># XOR a and b to get 1 on opposite value bit position</span>\n    c = a ^ b\n\n    <span class=\"hljs-comment\"># initialise the counter for 1</span>\n    count = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># count the number of 1s while there is 1 in a ^ b</span>\n    <span class=\"hljs-keyword\">while</span> c != <span class=\"hljs-number\">0</span>:\n        count += <span class=\"hljs-number\">1</span>\n        c &amp;= (c<span class=\"hljs-number\">-1</span>)\n\n    <span class=\"hljs-comment\"># return the count of 1s</span>\n    <span class=\"hljs-keyword\">return</span> count\n<span class=\"hljs-comment\"># 2 = 0010</span>\n<span class=\"hljs-comment\"># 8 = 1000</span>\nprint(count_bits_flip(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>))\n</code></pre>\n    <h4 id=\"93array\">93. 在重复元素array中查找两个非重复元素</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find_non_repeating_numbers</span><span class=\"hljs-params\">(arr)</span>:</span>\n    xor = arr[<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, len(arr)):\n        xor ^= arr[i]\n\n    right_set_bit = xor &amp; ~(xor<span class=\"hljs-number\">-1</span>)\n    first = <span class=\"hljs-number\">0</span>\n    second = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> arr:\n        <span class=\"hljs-keyword\">if</span> i &amp; right_set_bit:\n            first ^= i\n        <span class=\"hljs-keyword\">else</span>:\n            second ^= i\n\n    <span class=\"hljs-keyword\">return</span> first, second\n\n\narr = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>]\nprint(find_non_repeating_numbers(arr))\n</code></pre>\n    <h4 id=\"94\">94. 找到具有相同设置位数的下一个较大和下一个较小的数字</h4>\n    <p>例子：</p>\n    <pre><code class=\"hljs python\">num = <span class=\"hljs-number\">6</span> bin = <span class=\"hljs-number\">110</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">next_greater</span><span class=\"hljs-params\">(num)</span>:</span>\n    res = num\n    <span class=\"hljs-keyword\">if</span> num != <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-comment\"># Find the right most 1 position</span>\n        <span class=\"hljs-comment\"># Ex. right_one = 2 bin = 10</span>\n        right_one = num &amp; -num\n\n        <span class=\"hljs-comment\"># get the left pattern to merge</span>\n        <span class=\"hljs-comment\"># Ex. left_pattern = 8 bin = 1000</span>\n        left_pattern = num + right_one\n\n        <span class=\"hljs-comment\"># get the right patten to merge</span>\n        <span class=\"hljs-comment\"># Ex. right_pattern = 1 bin = 0001</span>\n        right_pattern = (num ^ left_pattern) &gt;&gt; (right_one + <span class=\"hljs-number\">1</span>)\n\n        <span class=\"hljs-comment\"># OR both the patterns</span>\n        <span class=\"hljs-comment\"># Ex. res = 9 bin = 1001</span>\n        res = left_pattern | right_pattern\n\n    <span class=\"hljs-keyword\">return</span> res\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">next_smaller</span><span class=\"hljs-params\">(num)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> ~next_greater(~num)\n\n\nprint(next_greater(<span class=\"hljs-number\">6</span>))\nprint(next_smaller(<span class=\"hljs-number\">6</span>))\n</code></pre>\n    <h4 id=\"95nw\">95. 给定 n 个项目的重量和值，将这些物品放入容量为 W 的背包中背包中的最大总价值。</h4>\n    <p>换句话说，给定两个整数array val [0..n-1] 和 wt [0..n-1]分别代表与 n 项相关的值和权重。也给定一个表示背包容量的整数 W，找出 val [] 的最大值子集\n        这样，这个子集的权重之和小于或等于 W. 你不能破坏一个项目，要么选择完整的项目，要么不选择它（0-1 属性）。</p>\n    <pre><code class=\"hljs shell\">def knapSack(W, wt, val, size):\n    k = [[0 for i in range(W+1)] for i in range(size+1)]\n    for i in range(size+1):\n        for w in range(W+1):\n            if i == 0 or w == 0:\n                k[i][w] = 0\n            elif wt[i-1] &lt;= w:\n                k[i][w] = max(val[i-1] + k[i-1][w-wt[i-1]], k[i-1][w])\n            else:\n                k[i][w] = k[i-1][w]\n\n    for w in k:\n        print(w)\n\n    return k\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> def findElementsInSack(W, matrix, wt, val, size):</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     i = size</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     row = W</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     arr = []</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     <span class=\"hljs-keyword\">while</span> i &gt; 0:</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-built_in\">print</span>(matrix[i][row] - matrix[i-1][row - wt[i-1]] )</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-built_in\">print</span>(val[i-1])</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-keyword\">if</span> matrix[i][row] - matrix[i-1][row - wt[i-1]] == val[i-1]:</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             arr.append(val[i-1])</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             i -= 1</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             row -= wt[i-1]</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">         <span class=\"hljs-keyword\">else</span>:</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">             i -= 1</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"></span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     <span class=\"hljs-built_in\">return</span> arr</span>\n\nprice = [60, 100, 120]\nwt = [1, 2, 3]\nW = 5\nn = len(price)\nk = knapSack(W, wt, price, n)\nprint(k[n][W])\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> <span class=\"hljs-built_in\">print</span>(findElementsInSack(W, k, wt, price, n))</span>\n</code></pre>\n    <h4 id=\"96nn\">96. 给定一根长度为 n 英寸的杆和一系列价格，其中包含所有尺寸小于 n 的尺寸的价格。确定通过切割杆和销售件可获得的最大值。</h4>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">cutting_rod</span>(<span class=\"hljs-params\">prices, n</span>):\n    dp </span>= [<span class=\"hljs-number\">0</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">n+<span class=\"hljs-number\">1</span></span>)]\n    dp[0] </span>= <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, n+<span class=\"hljs-number\">1</span></span>):\n        max_val </span>= -<span class=\"hljs-keyword\">float</span>(<span class=\"hljs-string\">'inf'</span>)\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">i</span>):\n            max_val </span>= max(max_val, prices[j] + dp[i-j<span class=\"hljs-number\">-1</span>])\n        dp[i] = max_val\n\n    <span class=\"hljs-keyword\">return</span> dp[n]\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">20</span>]\n    size = len(arr)\n    print(<span class=\"hljs-string\">\"Maximum Obtainable Value is \"</span> + str(cutting_rod(arr, size)))\n</code></pre>\n    <h4 id=\"97str1str2str1str1str2\">97. 给定两个字符串 str1 和 str2 以及可以在 str1 上执行的操作。查找所需的最小编辑数（操作）将'str1'转换为'str2'</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">edit_distance</span><span class=\"hljs-params\">(str1, str2, m, n)</span>:</span>\n    matrix = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(m+<span class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(m+<span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>):\n\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span>:\n                matrix[i][j] = j\n\n            <span class=\"hljs-keyword\">elif</span> j == <span class=\"hljs-number\">0</span>:\n                matrix[i][j] = i\n\n            <span class=\"hljs-keyword\">elif</span> str1[i<span class=\"hljs-number\">-1</span>] == str2[j<span class=\"hljs-number\">-1</span>]:\n                matrix[i][j] = matrix[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]\n\n            <span class=\"hljs-keyword\">else</span>:\n                matrix[i][j] = <span class=\"hljs-number\">1</span> + min(matrix[i][j<span class=\"hljs-number\">-1</span>],      <span class=\"hljs-comment\"># insert</span>\n                                       matrix[i<span class=\"hljs-number\">-1</span>][j],      <span class=\"hljs-comment\"># remove</span>\n                                       matrix[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>])    <span class=\"hljs-comment\"># replace</span>\n\n    <span class=\"hljs-keyword\">return</span> matrix[m][n]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    str1 = <span class=\"hljs-string\">'sunday'</span>\n    str2 = <span class=\"hljs-string\">'saturday'</span>\n\n    print(edit_distance(str1, str2, len(str1), len(str2)))\n</code></pre>\n    <pre><code class=\"hljs\">\n</code></pre>\n    <h4 id=\"98011\">98. 给定 0 和 1 的二维矩阵，找到最大的广场，其中包含全部 1。</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find_largest_square</span><span class=\"hljs-params\">(matrix)</span>:</span>\n    n = len(matrix)\n\n    <span class=\"hljs-comment\"># make a matrix for storing the solutions</span>\n    cache = [[<span class=\"hljs-number\">0</span>] * n <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> range(n)]\n    <span class=\"hljs-comment\"># size of square and its bottom-right indexes</span>\n    size = <span class=\"hljs-number\">0</span>\n    right_indx = <span class=\"hljs-number\">-1</span>\n    bottom_indx = <span class=\"hljs-number\">-1</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(n):\n\n            <span class=\"hljs-comment\"># if the value is 0 simply move forward as it cannot form a square of 1s</span>\n            <span class=\"hljs-keyword\">if</span> matrix[i][j] == <span class=\"hljs-number\">0</span>:\n                <span class=\"hljs-keyword\">continue</span>\n\n            <span class=\"hljs-comment\"># if it is first row or column, copy the matrix values as it is</span>\n            <span class=\"hljs-keyword\">elif</span> i == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> j == <span class=\"hljs-number\">0</span>:\n                cache[i][j] = matrix[i][j]\n\n            <span class=\"hljs-comment\"># Otherwise, check in the up, left, and diagonally top-left direction for minimum size of square</span>\n            <span class=\"hljs-comment\"># if all are 1s at these positions in matrix, only then min value will be greater than 1</span>\n            <span class=\"hljs-comment\"># hence add the previous square size to the cache + 1</span>\n            <span class=\"hljs-keyword\">else</span>:\n                cache[i][j] = <span class=\"hljs-number\">1</span> + min(cache[i - <span class=\"hljs-number\">1</span>][j], cache[i][j - <span class=\"hljs-number\">1</span>], cache[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>])\n\n            <span class=\"hljs-comment\"># check if the current square size found is larger than the previously found size, if so, update it</span>\n            <span class=\"hljs-keyword\">if</span> cache[i][j] &gt; size:\n                size = cache[i][j]\n                bottom_indx, right_indx = i, j\n\n    <span class=\"hljs-keyword\">return</span> size, bottom_indx, right_indx\n\n\nmat = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n       [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n       [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n       [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]]\nsize, bottom, right = find_largest_square(mat)\n\n<span class=\"hljs-keyword\">if</span> size &gt; <span class=\"hljs-number\">0</span>:\n    print(<span class=\"hljs-string\">\"Size of the square:\"</span>, size)\n    print(<span class=\"hljs-string\">\"Top-left Co-ordinates:\"</span>, bottom-size+<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\",\"</span>, right-size+<span class=\"hljs-number\">1</span>)\n    print(<span class=\"hljs-string\">\"Bottom-right Co-ordinates:\"</span>, bottom, <span class=\"hljs-string\">\",\"</span>, right)\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">\"No square of 1s found\"</span>)\n</code></pre>\n    <h4 id=\"99\">99. 找到两者中存在的最长子序列的长度。子序列是以相同的相对顺序出现的序列，但不一定是连续的。</h4>\n    <p>例子：</p>\n    <pre><code class=\"hljs python\">用于输入的LCS序列“ABCDGH”和“AEDFHR”是长度为<span class=\"hljs-number\">3</span>的“ADH”。\n用于输入序列的LCS“AGGTAB”和“GXTXAYB”是长度为<span class=\"hljs-number\">4</span>的“ GTAB”。\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">lcs</span><span class=\"hljs-params\">(str1, str2)</span>:</span>\n    m = len(str1)\n    n = len(str2)\n\n    matrix = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(m+<span class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, m+<span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, n+<span class=\"hljs-number\">1</span>):\n\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> j == <span class=\"hljs-number\">0</span>:\n                matrix[i][j] = <span class=\"hljs-number\">0</span>\n\n            <span class=\"hljs-keyword\">elif</span> str1[i<span class=\"hljs-number\">-1</span>] == str2[j<span class=\"hljs-number\">-1</span>]:\n                matrix[i][j] = <span class=\"hljs-number\">1</span> + matrix[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]\n\n            <span class=\"hljs-keyword\">else</span>:\n                matrix[i][j] = max(matrix[i<span class=\"hljs-number\">-1</span>][j], matrix[i][j<span class=\"hljs-number\">-1</span>])\n\n    index = matrix[m][n]\n\n    res = [<span class=\"hljs-string\">\"\"</span>] * index\n    i = m\n    j = n\n\n    <span class=\"hljs-keyword\">while</span> i &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> j &gt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">if</span> str1[i<span class=\"hljs-number\">-1</span>] == str2[j<span class=\"hljs-number\">-1</span>]:\n            res[index<span class=\"hljs-number\">-1</span>] = str1[i<span class=\"hljs-number\">-1</span>]\n            i -= <span class=\"hljs-number\">1</span>\n            j -= <span class=\"hljs-number\">1</span>\n            index -= <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">elif</span> matrix[i<span class=\"hljs-number\">-1</span>][j] &gt; matrix[i][j<span class=\"hljs-number\">-1</span>]:\n            i -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            j -= <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> res\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    X = <span class=\"hljs-string\">\"AGGTAB\"</span>\n    Y = <span class=\"hljs-string\">\"GXTXAYB\"</span>\n\n    str = <span class=\"hljs-string\">''</span>.join(lcs(X, Y))\n\n    print(<span class=\"hljs-string\">\"Length of longest common subsequence is:\"</span>, len(str),<span class=\"hljs-string\">\"\\nAnd the subsequence is:\"</span>, str)\n</code></pre>\n    <h4 id=\"100\">100. 找到给定序列的最长子序列的长度，以便对子序列的所有元素进行排序，按顺序递增。</h4>\n    <p>例如，{10,22,9,33,21,50,41,60,80}的LIS长度为6，LIS为{10,22,33,50,60,80}。</p>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">lis</span><span class=\"hljs-params\">(arr)</span>:</span>\n    n = len(arr)\n    dp = [<span class=\"hljs-number\">1</span>] * n\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(i):\n            <span class=\"hljs-keyword\">if</span> arr[j] &lt; arr[i] <span class=\"hljs-keyword\">and</span> dp[j] + <span class=\"hljs-number\">1</span> &gt; dp[i]:\n                dp[i] = <span class=\"hljs-number\">1</span> + dp[j]\n\n    <span class=\"hljs-keyword\">return</span> max(dp)\n\narr = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">41</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">80</span>]\nprint(lis(arr))\n</code></pre>\n    <h4 id=\"101mn\">101. 给定成本矩阵成本[] []和成本[] []中的位置（m，n），</h4>\n    <p>编写一个函数，返回从（0,0）到达（m，n）的最小成本路径的成本。\n        到达路径的总成本（m，n）是该路径上所有成本的总和（包括源和目的地）。\n        你只能从给定的单元格中向下，向右和对角线降低单元格。</p>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">min_cost</span>(<span class=\"hljs-params\">cost, m, n</span>):\n    dp </span>= [[<span class=\"hljs-number\">0</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">n+<span class=\"hljs-number\">1</span></span>)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">m+<span class=\"hljs-number\">1</span></span>)]\n\n    dp[0][0] </span>= cost[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, m+<span class=\"hljs-number\">1</span></span>):\n        dp[i][0] </span>= dp[i<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>] + cost[i][<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, n+<span class=\"hljs-number\">1</span></span>):\n        dp[0][j] </span>= dp[<span class=\"hljs-number\">0</span>][j<span class=\"hljs-number\">-1</span>] + cost[<span class=\"hljs-number\">0</span>][j]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, m+<span class=\"hljs-number\">1</span></span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, n+<span class=\"hljs-number\">1</span></span>):\n            dp[i][j] </span>= cost[i][j] + min(dp[i<span class=\"hljs-number\">-1</span>][j], dp[i][j<span class=\"hljs-number\">-1</span>], dp[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>])\n\n    <span class=\"hljs-keyword\">return</span> dp[m][n]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    cost = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>],\n            [<span class=\"hljs-meta\">4, 8, 2</span>],\n            [<span class=\"hljs-meta\">1, 5, 3</span>]]\n    m = <span class=\"hljs-number\">2</span>\n    n = <span class=\"hljs-number\">2</span>\n    print(<span class=\"hljs-string\">\"Minimum cost from (0, 0) to ({}, {}) is:\"</span>.format(m, n), min_cost(cost, m, n))\n</code></pre>\n    <h4 id=\"102\">102. 将一个集合划分为两个子集，使得子集和的差异最小</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find_min</span><span class=\"hljs-params\">(arr)</span>:</span>\n    sum_of_arr = sum(arr)\n    n = len(arr)\n    dp = [[<span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(sum_of_arr+<span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>):\n        dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">True</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, sum_of_arr+<span class=\"hljs-number\">1</span>):\n        dp[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-keyword\">False</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, n+<span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, sum_of_arr+<span class=\"hljs-number\">1</span>):\n            dp[i][j] = dp[i<span class=\"hljs-number\">-1</span>][j]\n\n            <span class=\"hljs-keyword\">if</span> arr[i<span class=\"hljs-number\">-1</span>] &lt;= j:\n                dp[i][j] |= dp[i<span class=\"hljs-number\">-1</span>][j - arr[i<span class=\"hljs-number\">-1</span>]]\n\n    diff = float(<span class=\"hljs-string\">'inf'</span>)\n\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(int(sum_of_arr/<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>):\n        <span class=\"hljs-keyword\">if</span> dp[n][j] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">True</span>:\n            diff = sum_of_arr - <span class=\"hljs-number\">2</span> * j\n            <span class=\"hljs-keyword\">break</span>\n\n    <span class=\"hljs-keyword\">return</span> diff\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    arr = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\n    print(<span class=\"hljs-string\">\"Minimum difference is:\"</span>, find_min(arr))\n</code></pre>\n    <h4 id=\"103\">103. 给定一组非负整数和一个值和，确定是否存在给定集合的子集，其总和等于给定总和。</h4>\n    <pre><code class=\"hljs python\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isSubsetSum</span><span class=\"hljs-params\">(arr, check_sum)</span>:</span>\n    n = len(arr)\n    possible_sum = [[<span class=\"hljs-keyword\">False</span>] * (n + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> range(check_sum + <span class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>):\n        possible_sum[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-keyword\">True</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, check_sum + <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, n + <span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-keyword\">if</span> i &lt; arr[j - <span class=\"hljs-number\">1</span>]:\n                possible_sum[i][j] = possible_sum[i][j<span class=\"hljs-number\">-1</span>]\n            <span class=\"hljs-keyword\">elif</span> i &gt;= arr[j - <span class=\"hljs-number\">1</span>]:\n                possible_sum[i][j] = possible_sum[i][j<span class=\"hljs-number\">-1</span>] <span class=\"hljs-keyword\">or</span> possible_sum[i - arr[j - <span class=\"hljs-number\">1</span>]][j<span class=\"hljs-number\">-1</span>]\n\n    <span class=\"hljs-keyword\">return</span> possible_sum[check_sum][n]\n\narr = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>]\ncheck_sum = <span class=\"hljs-number\">9</span>\n\n<span class=\"hljs-keyword\">if</span> isSubsetSum(arr, check_sum):\n    print(<span class=\"hljs-string\">\"Found a subset with sum =\"</span>, check_sum)\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">\"Subset with sum =\"</span>, check_sum, <span class=\"hljs-string\">\"Not Found\"</span>)\n</code></pre>\n    <h4 id=\"104hackerrankdp\">104. HackerRank 问题算法 DP</h4>\n    <pre><code class=\"hljs cs\"><span class=\"hljs-function\">def <span class=\"hljs-title\">maxSubArray</span>(<span class=\"hljs-params\">a, size</span>):\n    currMax </span>= a[<span class=\"hljs-number\">0</span>]\n    maxSoFar = a[<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, size</span>):\n        currMax </span>= max(a[i], currMax + a[i])\n        maxSoFar = max(currMax, maxSoFar)\n\n    <span class=\"hljs-keyword\">return</span> maxSoFar\n\ntestcases = <span class=\"hljs-keyword\">int</span>(input())\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> t <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">testcases</span>):\n    n </span>= <span class=\"hljs-keyword\">int</span>(input())\n    arr = list(map(<span class=\"hljs-keyword\">int</span>, input().split()))\n    tempList = list(filter(lambda x: x &gt; <span class=\"hljs-number\">0</span>, arr))\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">if</span> <span class=\"hljs-title\">len</span>(<span class=\"hljs-params\">tempList</span>) !</span>= <span class=\"hljs-number\">0</span>:\n        maximumSum = sum(tempList)\n    <span class=\"hljs-keyword\">else</span>:\n        maximumSum = max(arr)\n    print(maxSubArray(arr, n), maximumSum)\n</code></pre>\n    <h4 id=\"105dist123\">105. 给定距离 dist，计算用 1,2 和 3 步覆盖距离的总方式</h4>\n    <pre><code class=\"hljs makefile\"><span class=\"hljs-section\">Input:  n = 3</span>\n<span class=\"hljs-section\">Output: 4</span>\nBelow are the four ways\n 1 step + 1 step + 1 step\n 1 step + 2 step\n 2 step + 1 step\n 3 step<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n\ndef count_ways(n):\n    count = [0] * (n+1)\n    count[0] = 1\n    count[1] = 1\n    count[2] = 2\n\n    for i in range(3, n+1):\n        count[i] = count[i-1] + count[i-2] + count[i-3]\n\n    return count[n]\n\n\nif __name__ == '__main__':\n    print(count_ways(4))\n</span></code></pre>\n    <h4 id=\"106\">106. 在字符板中查找所有可能的单词</h4>\n    <pre><code class=\"hljs python\">Input: dictionary[] = {<span class=\"hljs-string\">\"GEEKS\"</span>, <span class=\"hljs-string\">\"FOR\"</span>, <span class=\"hljs-string\">\"QUIZ\"</span>, <span class=\"hljs-string\">\"GO\"</span>};\n       boggle[][]   = {{<span class=\"hljs-string\">'G'</span>,<span class=\"hljs-string\">'I'</span>,<span class=\"hljs-string\">'Z'</span>},\n                       {<span class=\"hljs-string\">'U'</span>,<span class=\"hljs-string\">'E'</span>,<span class=\"hljs-string\">'K'</span>},\n                       {<span class=\"hljs-string\">'Q'</span>,<span class=\"hljs-string\">'S'</span>,<span class=\"hljs-string\">'E'</span>}};\nOutput:  Following words of dictionary are present\n         GEEKS\n         QUIZ\n\n         <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">findWordsUtil</span><span class=\"hljs-params\">(words, boggle, visited, found, r, c, str)</span>:</span>\n    rows = len(boggle)\n    cols = len(boggle[<span class=\"hljs-number\">0</span>])\n\n    <span class=\"hljs-comment\"># set the position of character as traversed</span>\n    visited[r][c] = <span class=\"hljs-keyword\">True</span>\n\n    <span class=\"hljs-comment\"># add the character to string</span>\n    str += boggle[r][c]\n\n    <span class=\"hljs-comment\"># if the string is in dictionary add it to the set of found words</span>\n    <span class=\"hljs-keyword\">if</span> str <span class=\"hljs-keyword\">in</span> words:\n        found.add(str)\n\n    <span class=\"hljs-comment\"># traverse all the nearby 8 adjacent cells</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(r<span class=\"hljs-number\">-1</span>, r+<span class=\"hljs-number\">2</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(c<span class=\"hljs-number\">-1</span>, c+<span class=\"hljs-number\">2</span>):\n            <span class=\"hljs-keyword\">if</span> i &gt;= rows <span class=\"hljs-keyword\">or</span> i &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> j &gt;= cols <span class=\"hljs-keyword\">or</span> j &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> visited[i][j]:\n                <span class=\"hljs-keyword\">continue</span>\n            findWordsUtil(words, boggle, visited, found, i, j, str)\n\n    <span class=\"hljs-comment\"># backtrack and set the status of current character as not traversed</span>\n    visited[r][c] = <span class=\"hljs-keyword\">False</span>\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">findWords</span><span class=\"hljs-params\">(words, boggle)</span>:</span>\n    rows = len(boggle)\n    cols = len(boggle[<span class=\"hljs-number\">0</span>])\n\n    <span class=\"hljs-comment\"># initialize a matrix for DFS Traversal</span>\n    visited = [[<span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(cols)] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(rows)]\n\n    <span class=\"hljs-comment\"># set to store the unique found words</span>\n    found = set({})\n    str = <span class=\"hljs-string\">\"\"</span>\n\n    <span class=\"hljs-comment\"># traverse each character in the boggle and do DFS from there</span>\n    <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> range(rows):\n        <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> range(cols):\n            findWordsUtil(words, boggle, visited, found, r, c, str)\n\n    <span class=\"hljs-comment\"># return the set of found words</span>\n    <span class=\"hljs-keyword\">return</span> found\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    words = {<span class=\"hljs-string\">\"GEEKS\"</span>, <span class=\"hljs-string\">\"FOR\"</span>, <span class=\"hljs-string\">\"QUIZ\"</span>, <span class=\"hljs-string\">\"GO\"</span>, <span class=\"hljs-string\">\"SEEK\"</span>}\n    boggle = [[<span class=\"hljs-string\">'G'</span>, <span class=\"hljs-string\">'I'</span>, <span class=\"hljs-string\">'Z'</span>],\n              [<span class=\"hljs-string\">'U'</span>, <span class=\"hljs-string\">'E'</span>, <span class=\"hljs-string\">'K'</span>],\n              [<span class=\"hljs-string\">'Q'</span>, <span class=\"hljs-string\">'S'</span>, <span class=\"hljs-string\">'E'</span>]]\n\n    found = findWords(words, boggle)\n\n    print(<span class=\"hljs-string\">\"Words found in the boggle from the dictionary are:\"</span>)\n    <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> found:\n        print(word)\n</code></pre>\n    <h4 id=\"107\">107. 广度优先搜索遍历</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append(frm)\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bfsUtil</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s, visited)</span></span>:\n        queue = deque([])\n        queue.append(s)\n        visited[s] = True\n\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-symbol\">queue:</span>\n            vertex = queue.popleft()\n            print(vertex, <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n\n            <span class=\"hljs-comment\"># traverse vertices adjacent to vertex</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[vertex]:\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\n                    visited[i] = True\n                    queue.append(i)\n        print()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s=None)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-comment\"># do bfs from the node specified</span>\n        <span class=\"hljs-keyword\">if</span> s is <span class=\"hljs-keyword\">not</span> <span class=\"hljs-symbol\">None:</span>\n            <span class=\"hljs-keyword\">self</span>.bfsUtil(s, visited)\n        <span class=\"hljs-comment\"># traverse for all the vertices in other components of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[v]:\n                <span class=\"hljs-keyword\">self</span>.bfsUtil(v, visited)\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:\n    graph = Graph()\n\n    <span class=\"hljs-comment\"># component 1 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)\n\n    <span class=\"hljs-comment\"># component 2 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>)\n\n    <span class=\"hljs-comment\"># call bfs from 2 vertex</span>\n    print(<span class=\"hljs-string\">\"Breadth First Traversal:\"</span>)\n    graph.bfs(<span class=\"hljs-number\">2</span>)\n</code></pre>\n    <h4 id=\"108\">108. 深度优先搜索遍历</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append(frm)\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dfsUtil</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s, visited)</span></span>:\n        stack = []\n        stack.append(s)\n        visited[s] = True\n\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-symbol\">stack:</span>\n            vertex = stack.pop()\n            print(vertex, <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n\n            <span class=\"hljs-comment\"># traverse vertices adjacent to vertex</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[vertex]:\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n        print()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s=None)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-comment\"># traverse specified vertex</span>\n        <span class=\"hljs-keyword\">if</span> s is <span class=\"hljs-keyword\">not</span> <span class=\"hljs-symbol\">None:</span>\n            <span class=\"hljs-keyword\">self</span>.dfsUtil(s, visited)\n\n        <span class=\"hljs-comment\"># traverse for all the vertices in other components of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[v]:\n                <span class=\"hljs-keyword\">self</span>.dfsUtil(v, visited)\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make an undirected graph</span>\n    graph = Graph()\n\n    <span class=\"hljs-comment\"># component 1 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)\n\n    <span class=\"hljs-comment\"># component 2 of the graph</span>\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>)\n\n    <span class=\"hljs-comment\"># call dfs from 2 vertex</span>\n    print(<span class=\"hljs-string\">\"Depth First Traversal:\"</span>)\n    graph.dfs(<span class=\"hljs-number\">2</span>)\n</code></pre>\n    <h4 id=\"109\">109. 在有向图中检测周期</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, directed=False)</span>:</span>\n        self.graph = defaultdict(list)\n        self.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(self, frm, to)</span>:</span>\n        self.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> self.directed <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">False</span>:\n            self.graph[to].append(frm)\n        <span class=\"hljs-keyword\">else</span>:\n            self.graph[to] = self.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isCyclicUtil</span><span class=\"hljs-params\">(self, s, visited, recurStack)</span>:</span>\n\n        <span class=\"hljs-keyword\">if</span> visited[s] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">False</span>:\n            recurStack[s] = <span class=\"hljs-keyword\">True</span>\n            visited[s] = <span class=\"hljs-keyword\">True</span>\n\n            <span class=\"hljs-comment\"># traverse vertices adjacent to vertex</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.graph[s]:\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">not</span> visited[i]) <span class=\"hljs-keyword\">and</span> self.isCyclicUtil(i, visited, recurStack):\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">True</span>\n                <span class=\"hljs-keyword\">elif</span> recurStack[i]:\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">True</span>\n        recurStack[s] = <span class=\"hljs-keyword\">False</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">False</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isCyclic</span><span class=\"hljs-params\">(self)</span>:</span>\n        visited = {i: <span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.graph}\n        recurStack = {i: <span class=\"hljs-keyword\">False</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.graph}\n\n        <span class=\"hljs-comment\"># traverse for all the vertices of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> self.graph:\n            <span class=\"hljs-keyword\">if</span> self.isCyclicUtil(v, visited, recurStack):\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">True</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">False</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make a directed graph</span>\n    graph = Graph(<span class=\"hljs-keyword\">True</span>)\n\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\n\n    <span class=\"hljs-keyword\">if</span> graph.isCyclic():\n        print(<span class=\"hljs-string\">\"Cycle exists\"</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        print(<span class=\"hljs-string\">\"No cycle in the graph\"</span>)\n\n© <span class=\"hljs-number\">2019</span> GitHub, Inc.\nTerms\nPrivacy\n</code></pre>\n    <h4 id=\"110\">110. 检测无向图中的循环</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-comment\"># True if edge has been traversed or seen once</span>\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append([to, False])\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append([frm, False])\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">findParent</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, sets, v)</span></span>:\n        <span class=\"hljs-keyword\">if</span> sets[v] == -<span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> v\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.findParent(sets, sets[v])\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">union</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, sets, x, y)</span></span>:\n        x_set = <span class=\"hljs-keyword\">self</span>.findParent(sets, x)\n        y_set = <span class=\"hljs-keyword\">self</span>.findParent(sets, y)\n        sets[x_set] = y_set\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isCyclic</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-comment\"># sets that show combined vertices or not</span>\n        sets = {<span class=\"hljs-symbol\">i:</span> -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">for</span> e <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[v]:\n                <span class=\"hljs-comment\"># if an edge is traversed once skip it</span>\n                <span class=\"hljs-keyword\">if</span> e[<span class=\"hljs-number\">1</span>] is <span class=\"hljs-symbol\">True:</span>\n                    continue\n\n                <span class=\"hljs-comment\"># set True for traversing the edge and making union in both adjacency lists</span>\n                e[<span class=\"hljs-number\">1</span>] = True\n\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[e[<span class=\"hljs-number\">0</span>]]:\n                    <span class=\"hljs-keyword\">if</span> i[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-symbol\">v:</span>\n                        i[<span class=\"hljs-number\">1</span>] = True\n                        <span class=\"hljs-keyword\">break</span>\n\n                <span class=\"hljs-comment\"># find parents of both vertices of the edge</span>\n                x = <span class=\"hljs-keyword\">self</span>.findParent(sets, v)\n                y = <span class=\"hljs-keyword\">self</span>.findParent(sets, e[<span class=\"hljs-number\">0</span>])\n\n                <span class=\"hljs-comment\"># if they share a common parent loop found</span>\n                <span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-symbol\">y:</span>\n                    <span class=\"hljs-keyword\">return</span> True\n                <span class=\"hljs-comment\"># union the two vertices in the same set</span>\n                <span class=\"hljs-keyword\">self</span>.union(sets, x, y)\n\n        <span class=\"hljs-comment\"># if no loop or cycle found return false</span>\n        <span class=\"hljs-keyword\">return</span> False\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make a graph</span>\n    graph = Graph()\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)\n\n    <span class=\"hljs-keyword\">if</span> graph.isCyclic():\n        print(<span class=\"hljs-string\">\"Cycle exists in the graph\"</span>)\n    <span class=\"hljs-symbol\">else:</span>\n        print(<span class=\"hljs-string\">\"No cycle in the graph\"</span>)\n</code></pre>\n    <h4 id=\"111dijkstra\">111. Dijkstra的最短路径算法</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to, weight)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append([to, weight])\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append([frm, weight])\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find_min</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, dist, visited)</span></span>:\n        minimum = float(<span class=\"hljs-string\">'inf'</span>)\n        index = -<span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph.keys():\n            <span class=\"hljs-keyword\">if</span> visited[v] is False <span class=\"hljs-keyword\">and</span> dist[v] &lt; <span class=\"hljs-symbol\">minimum:</span>\n                minimum = dist[v]\n                index = v\n\n        <span class=\"hljs-keyword\">return</span> index\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, src)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n        dist = {<span class=\"hljs-symbol\">i:</span> float(<span class=\"hljs-string\">'inf'</span>) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n        parent = {<span class=\"hljs-symbol\">i:</span> None <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        <span class=\"hljs-comment\"># set distance of src vertex from itself 0</span>\n        dist[src] = <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-comment\"># find shortest path for all vertices</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(len(<span class=\"hljs-keyword\">self</span>.graph)-<span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-comment\"># find minimum distance vertex from source</span>\n            <span class=\"hljs-comment\"># initially src itself as dist[src] = 0</span>\n            u = <span class=\"hljs-keyword\">self</span>.find_min(dist, visited)\n\n            <span class=\"hljs-comment\"># mark the node as visited</span>\n            visited[u] = True\n            <span class=\"hljs-comment\"># check if the distance through current edge is less than previously known distance to v</span>\n            <span class=\"hljs-keyword\">for</span> v, w <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[u]:\n\n                <span class=\"hljs-keyword\">if</span> visited[v] is False <span class=\"hljs-keyword\">and</span> dist[u] + w &lt; dist[v]:\n                    dist[v] = dist[u] + w\n                    parent[v] = u\n        <span class=\"hljs-comment\"># return parent list and distance to each node from source</span>\n        <span class=\"hljs-keyword\">return</span> parent, dist\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">printPath</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, parent, v)</span></span>:\n        <span class=\"hljs-keyword\">if</span> parent[v] is <span class=\"hljs-symbol\">None:</span>\n            <span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">self</span>.printPath(parent, parent[v])\n        print(v, <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">printSolution</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, dist, parent, src)</span></span>:\n        print(<span class=\"hljs-string\">'{}\\t{}\\t{}'</span>.format(<span class=\"hljs-string\">'Vertex'</span>, <span class=\"hljs-string\">'Distance'</span>, <span class=\"hljs-string\">'Path'</span>))\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph.keys():\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-symbol\">src:</span>\n                continue\n            print(<span class=\"hljs-string\">'{} -&gt; {}\\t\\t{}\\t\\t{}'</span>.format(src, i, dist[i], src), <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">' '</span>)\n            <span class=\"hljs-keyword\">self</span>.printPath(parent, i)\n            print()\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make an undirected graph</span>\n    graph = Graph()\n\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>)\n    graph.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>)\n    graph.addEdge(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>)\n    graph.addEdge(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>)\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">14</span>)\n    graph.addEdge(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>)\n\n    parent, dist = graph.dijkstra(<span class=\"hljs-number\">0</span>)\n\n    graph.printSolution(dist, parent, <span class=\"hljs-number\">0</span>)\n</code></pre>\n    <h4 id=\"112\">112. 在给定的边缘加权有向图中找出每对顶点之间的最短距离</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">floyd_warshall</span><span class=\"hljs-params\">(graph)</span>:</span>\n    shortest_dist = []\n\n    <span class=\"hljs-comment\"># copy matrix for storing resultant shortest distances</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> graph:\n        shortest_dist.append(i)\n\n    <span class=\"hljs-comment\"># Number of vertices in graph</span>\n    V = len(graph) - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># k is intermediate vertex</span>\n    <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> range(V+<span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-comment\"># i is source</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(V+<span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-comment\"># j is destination</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(V+<span class=\"hljs-number\">1</span>):\n                <span class=\"hljs-comment\"># store the path which is shorter i.e. min(i-&gt;j, i-&gt;k-&gt;j)</span>\n                shortest_dist[i][j] = min(shortest_dist[i][j], shortest_dist[i][k] + shortest_dist[k][j])\n    <span class=\"hljs-comment\"># return the resultant matrix</span>\n    <span class=\"hljs-keyword\">return</span> shortest_dist\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    INF = float(<span class=\"hljs-string\">'inf'</span>)\n    graph = [[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, INF, <span class=\"hljs-number\">10</span>],\n             [INF, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, INF],\n             [INF, INF, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>],\n             [INF, INF, INF, <span class=\"hljs-number\">0</span>]]\n\n    shortest_dist_matrix = floyd_warshall(graph)\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> shortest_dist_matrix:\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> i:\n            <span class=\"hljs-keyword\">if</span> j != float(<span class=\"hljs-string\">'inf'</span>):\n                print(j, <span class=\"hljs-string\">'\\t'</span>, end=<span class=\"hljs-string\">''</span>)\n            <span class=\"hljs-keyword\">else</span>:\n                print(j, end=<span class=\"hljs-string\">' '</span>)\n        print()\n</code></pre>\n    <h4 id=\"113\">113. 图形实现</h4>\n    <pre><code class=\"hljs ruby\"> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Vertex</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.key = key\n        <span class=\"hljs-keyword\">self</span>.adjacent = {}\n        <span class=\"hljs-keyword\">self</span>.visited = False\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">setKey</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.key = key\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getKey</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.key\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getVisited</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.visited\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">setVisited</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, val=True)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.visited = val\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addNeighbour</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, neighbour, weight=<span class=\"hljs-number\">0</span>)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.adjacent[neighbour] = weight\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getNeighbours</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.adjacent.keys()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getWeight</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, neighbour)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.adjacent[neighbour]\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n\n    <span class=\"hljs-comment\"># Graph is undirected by default</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.vertices = {}\n        <span class=\"hljs-keyword\">self</span>.numberOfVertices = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addVertex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        node = Vertex(key)\n        <span class=\"hljs-keyword\">self</span>.vertices[key] = node\n        <span class=\"hljs-keyword\">self</span>.numberOfVertices += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> node\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to, weight=<span class=\"hljs-number\">0</span>)</span></span>:\n        <span class=\"hljs-keyword\">if</span> frm <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            <span class=\"hljs-keyword\">self</span>.addVertex(frm)\n\n        <span class=\"hljs-keyword\">if</span> to <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            <span class=\"hljs-keyword\">self</span>.addVertex(to)\n\n        <span class=\"hljs-keyword\">self</span>.vertices[frm].addNeighbour(<span class=\"hljs-keyword\">self</span>.vertices[to], weight)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">directed:</span>\n            <span class=\"hljs-keyword\">self</span>.vertices[to].addNeighbour(<span class=\"hljs-keyword\">self</span>.vertices[frm], weight)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getVertex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, key)</span></span>:\n        <span class=\"hljs-keyword\">if</span> key <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.vertices[key]\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">return</span> None\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getVertices</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.vertices.keys()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getEdges</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        edges = []\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">vertices:</span>\n            edgesFromVertex = []\n\n            <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.vertices[v].getNeighbours():\n                frm = <span class=\"hljs-keyword\">self</span>.vertices[v].getKey()\n                to = w.getKey()\n                weight = <span class=\"hljs-keyword\">self</span>.vertices[v].getWeight(w)\n                edgesFromVertex.append((frm, to, weight))\n\n            <span class=\"hljs-keyword\">if</span> len(edgesFromVertex) != <span class=\"hljs-number\">0</span>:\n                edges.append(edgesFromVertex)\n\n        <span class=\"hljs-keyword\">return</span> edges\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:\n    g = Graph(directed=False)\n    g.addVertex(<span class=\"hljs-string\">'a'</span>)\n    g.addVertex(<span class=\"hljs-string\">'b'</span>)\n    g.addVertex(<span class=\"hljs-string\">'c'</span>)\n    g.addVertex(<span class=\"hljs-string\">'d'</span>)\n    g.addVertex(<span class=\"hljs-string\">'e'</span>)\n    g.addVertex(<span class=\"hljs-string\">'f'</span>)\n    g.addEdge(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">3</span>)\n    g.addEdge(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-number\">2</span>)\n    g.addEdge(<span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-number\">1</span>)\n    g.addEdge(<span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-number\">5</span>)\n    g.addEdge(<span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">5</span>)\n    g.addEdge(<span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">2</span>)\n    g.addEdge(<span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>, <span class=\"hljs-number\">3</span>)\n    g.addEdge(<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">6</span>)\n    g.addEdge(<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">6</span>)\n    g.addEdge(<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-number\">6</span>)\n\n    <span class=\"hljs-keyword\">for</span> edgeSet <span class=\"hljs-keyword\">in</span> g.getEdges():\n        print(<span class=\"hljs-string\">'edges from'</span>, edgeSet[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">': '</span>, <span class=\"hljs-keyword\">end</span>=<span class=\"hljs-string\">''</span>)\n        print(edgeSet)\n</code></pre>\n    <h4 id=\"114kruskal\">114. Kruskal的最小生成树算法</h4>\n    <pre><code class=\"hljs sql\">class Graph:\n    def __init__(self, directed=False):\n        self.edges = []\n        self.vertices = <span class=\"hljs-keyword\">set</span>({})\n        self.directed = directed\n\n    <span class=\"hljs-keyword\">def</span> addEdge(<span class=\"hljs-keyword\">self</span>, frm, <span class=\"hljs-keyword\">to</span>, weight):\n        self.edges.append([frm, <span class=\"hljs-keyword\">to</span>, weight])\n        self.vertices.add(frm)\n        self.vertices.add(<span class=\"hljs-keyword\">to</span>)\n\n    <span class=\"hljs-keyword\">def</span> removeEdge(<span class=\"hljs-keyword\">self</span>, frm, <span class=\"hljs-keyword\">to</span>, weight):\n        self.edges.remove([frm, <span class=\"hljs-keyword\">to</span>, weight])\n        flag1 = <span class=\"hljs-number\">0</span>\n        flag2 = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> f, t, w <span class=\"hljs-keyword\">in</span> self.edges:\n            <span class=\"hljs-keyword\">if</span> frm == f <span class=\"hljs-keyword\">or</span> frm == t:\n                flag1 = <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">to</span> == f <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">to</span> == t:\n                flag2 = <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> flag1 == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> flag2 == <span class=\"hljs-number\">1</span>:\n                break\n\n        <span class=\"hljs-keyword\">if</span> flag1 != <span class=\"hljs-number\">1</span>:\n            self.vertices.remove(frm)\n\n        <span class=\"hljs-keyword\">if</span> flag2 != <span class=\"hljs-number\">1</span>:\n            self.vertices.remove(<span class=\"hljs-keyword\">to</span>)\n\n    <span class=\"hljs-keyword\">def</span> findParent(<span class=\"hljs-keyword\">self</span>, <span class=\"hljs-keyword\">sets</span>, v):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">sets</span>[v] == <span class=\"hljs-number\">-1</span>:\n            <span class=\"hljs-keyword\">return</span> v\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> self.findParent(<span class=\"hljs-keyword\">sets</span>, <span class=\"hljs-keyword\">sets</span>[v])\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-keyword\">union</span>(<span class=\"hljs-keyword\">self</span>, <span class=\"hljs-keyword\">sets</span>, x, y):\n        x_set = self.findParent(<span class=\"hljs-keyword\">sets</span>, x)\n        y_set = self.findParent(<span class=\"hljs-keyword\">sets</span>, y)\n        <span class=\"hljs-keyword\">sets</span>[x_set] = y_set\n\n    <span class=\"hljs-keyword\">def</span> isCyclic(<span class=\"hljs-keyword\">self</span>):\n        # <span class=\"hljs-keyword\">sets</span> that <span class=\"hljs-keyword\">show</span> combined vertices <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span>\n        <span class=\"hljs-keyword\">sets</span> = {i: <span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.vertices}\n        <span class=\"hljs-keyword\">for</span> v1, v2, w <span class=\"hljs-keyword\">in</span> self.edges:\n            # find parents <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">both</span> vertices <span class=\"hljs-keyword\">of</span> the edge\n            x = self.findParent(<span class=\"hljs-keyword\">sets</span>, v1)\n            y = self.findParent(<span class=\"hljs-keyword\">sets</span>, v2)\n\n            # <span class=\"hljs-keyword\">if</span> they <span class=\"hljs-keyword\">share</span> a common <span class=\"hljs-keyword\">parent</span> <span class=\"hljs-keyword\">loop</span> <span class=\"hljs-keyword\">found</span>\n            <span class=\"hljs-keyword\">if</span> x == y:\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n            # <span class=\"hljs-keyword\">union</span> the two vertices <span class=\"hljs-keyword\">in</span> the same <span class=\"hljs-keyword\">set</span>\n            self.union(<span class=\"hljs-keyword\">sets</span>, x, y)\n\n        # <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">no</span> <span class=\"hljs-keyword\">loop</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">cycle</span> <span class=\"hljs-keyword\">found</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">def</span> kruskalMST(<span class=\"hljs-keyword\">self</span>):\n        g = Graph()\n\n        self.edges = sorted(self.edges, <span class=\"hljs-keyword\">key</span>=lambda x: x[<span class=\"hljs-number\">2</span>])\n\n        <span class=\"hljs-keyword\">for</span> frm, <span class=\"hljs-keyword\">to</span>, w <span class=\"hljs-keyword\">in</span> self.edges:\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">len</span>(g.edges) == <span class=\"hljs-keyword\">len</span>(graph.vertices)<span class=\"hljs-number\">-1</span>:\n                break\n            g.addEdge(frm, <span class=\"hljs-keyword\">to</span>, w)\n            <span class=\"hljs-keyword\">if</span> g.isCyclic():\n                g.removeEdge(frm, <span class=\"hljs-keyword\">to</span>, w)\n        <span class=\"hljs-keyword\">return</span> g\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    # make an undirected graph\n    graph = Graph()\n\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>)\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">15</span>)\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)\n\n    new_graph = graph.kruskalMST()\n\n    <span class=\"hljs-keyword\">for</span> f, t, w <span class=\"hljs-keyword\">in</span> new_graph.edges:\n        print(f, <span class=\"hljs-string\">\"--\"</span>, t, <span class=\"hljs-string\">\"=\"</span>, w)\n</code></pre>\n    <h4 id=\"115\">115. 拓扑排序</h4>\n    <pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, directed=False)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph = defaultdict(list)\n        <span class=\"hljs-keyword\">self</span>.directed = directed\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, frm, to)</span></span>:\n        <span class=\"hljs-keyword\">self</span>.graph[frm].append(to)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.directed is <span class=\"hljs-symbol\">False:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to].append(frm)\n        <span class=\"hljs-symbol\">else:</span>\n            <span class=\"hljs-keyword\">self</span>.graph[to] = <span class=\"hljs-keyword\">self</span>.graph[to]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">topoSortUtil</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, s, visited, sortList)</span></span>:\n        visited[s] = True\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph[s]:\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\n                <span class=\"hljs-keyword\">self</span>.topoSortUtil(i, visited, sortList)\n\n        sortList.insert(<span class=\"hljs-number\">0</span>, s)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">topologicalSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n        visited = {<span class=\"hljs-symbol\">i:</span> False <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.graph}\n\n        sortList = []\n        <span class=\"hljs-comment\"># traverse for all the vertices in other components of graph</span>\n        <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-symbol\">graph:</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[v]:\n                <span class=\"hljs-keyword\">self</span>.topoSortUtil(v, visited, sortList)\n\n        print(sortList)\n\n\n<span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># make an directed graph</span>\n    g = Graph(directed=True)\n\n    g.addEdge(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>)\n    g.addEdge(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>)\n    g.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>)\n    g.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>)\n    g.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    g.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-comment\"># call topologicalSort()</span>\n    print(<span class=\"hljs-string\">\"Topological Sort:\"</span>)\n    g.topologicalSort()\n</code></pre>\n    <h4 id=\"116\">116. 以下哪个语句创建字典？（多选题）</h4>\n    <p>a）d = {}\n        b）d = {“john”：40，“peter”：45}\n        c）d = {40：“john”，45：“peter”}\n        d）d =（40：“john” ，45：“50”）</p>\n    <p>答案： b，c＆d。 </p>\n    <h4 id=\"117\">117. 其中哪一个是分区？</h4>\n    <p>a）/\n        b）//\n        c）％\n        d）没有提到的</p>\n    <p>答案： b</p>\n    <p>当两个操作数都是整数时，python 会删除小数部分并给出舍入值，以获得准确的答案使用分层。例如，5/2 = 2.5，但两个操作数都是整数，因此在 python 中对此表达式的回答是2.要获得2.5作为答案，请使用//使用\n        floor division。所以，5 // 2 = 2.5</p>\n    <h4 id=\"118\">118. 标识符的最大可能长度是多少？</h4>\n    <p>a）31个字符\n        b）63个字符\n        c）79个字符\n        d）以上都不是</p>\n    <p>答案： d）以上都不是</p>\n    <p>标识符可以是任意长度。</p>\n    <h4 id=\"119\">119. 为什么不鼓励以下划线开头的局部变量名？</h4>\n    <p>a）它们用于表示类的私有变量\n        b）它们使解释器混淆\n        c）它们用于指示全局变量\n        d）它们减慢执行速度</p>\n    <p>答案： a）它们用于表示类的私有变量</p>\n    <p>由于 Python 没有私有变量的概念，因此前导下划线用于表示不能从类外部访问的变量。</p>\n    <h4 id=\"120\">120. 以下哪项是无效声明？</h4>\n    <p>a）abc = 1,000,000\n        b）abc = 1000 2000 3000\n        c）a，b，c =\n        1000,2000,3000 d）a<em>b</em>c = 1,000,000</p>\n    <p>答案： b）abc = 1000 2000 3000</p>\n    <p>变量名中不允许使用空格。</p>\n    <h4 id=\"121output\">121. 以下是什么Output？</h4>\n    <pre><code class=\"hljs python\"><span class=\"hljs-keyword\">try</span>:\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">'1'</span> != <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">raise</span> <span class=\"hljs-string\">\"someError\"</span>\n    <span class=\"hljs-keyword\">else</span>:\n        print(<span class=\"hljs-string\">\"someError has not occured\"</span>)\n<span class=\"hljs-keyword\">except</span> <span class=\"hljs-string\">\"someError\"</span>:\n    <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-string\">\"someError has occured\"</span>)\n</code></pre>\n    <p>a）发生了 someError\n        b）没有发生 someError\n        c）无效代码\n        d）以上都没有</p>\n    <p>答案： c）代码无效</p>\n    <p>新的异常类必须从 BaseException 继承。这里没有这样的遗产。</p>\n    <h4 id=\"122list12332221425list11\">122. 假设 list1 是[2,33,222,14,25]，什么是 list1 [-1]？</h4>\n    <p>a）错误\n        b）无\n        c）25\n        d）2</p>\n    <p>答案： c）25</p>\n    <p>索引 - 1 对应于列表中的最后一个索引。</p>\n    <h4 id=\"123cscorestxt\">123. 要打开文件 c：scores.txt 进行写作，我们使用</h4>\n    <p>a）outfile = open（“c：scores.txt”，“r”）\n        b）outfile = open（“c：scores.txt”，“w”）\n        c）outfile = open（file =“c：scores.txt “，”r“）\n        d）outfile = open（file =”c：scores.txt“，”o“）</p>\n    <p>答案： b）该位置包含双斜杠（），w用于表示正在写入文件。</p>\n    <h4 id=\"124output\">124. 以下是什么 Output？</h4>\n    <pre><code class=\"hljs python\">f = <span class=\"hljs-keyword\">None</span>\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range (<span class=\"hljs-number\">5</span>):\n    <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"data.txt\"</span>, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:\n        <span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">2</span>:\n            <span class=\"hljs-keyword\">break</span>\n\n<span class=\"hljs-keyword\">print</span> f.closed\n</code></pre>\n    <p>a）真\n        b）假\n        c）没有\n        d）错误</p>\n    <p>答案： a）是的 </p>\n    <p>与 open 文件一起使用时，WITH 语句可确保在 with 块退出时关闭文件对象。</p>\n    <h4 id=\"125tryexceptelseelse\">125. try-except-else 的 else 部分什么时候执行？</h4>\n    <p>a）总是\n        b）当发生异常时\n        c）当没有异常发生时\n        d）当除了块之外发生异常时</p>\n    <p>答案： c）没有异常发生时</p>\n    <p>当没有异常发生时，执行 else 部分。</p></div>\n</body>\n</html>"},{"title":"work_0604","_content":"\n### done\n    \n    房型计算模块功能划分\n    新增一票否决功能\n    床型更新功能过滤携程供应商\n    \n### doing\n    \n    应用到携程国内房型校验\n","source":"_posts/work_coding/work0604.md","raw":"---\ntitle: work_0604\n---\n\n### done\n    \n    房型计算模块功能划分\n    新增一票否决功能\n    床型更新功能过滤携程供应商\n    \n### doing\n    \n    应用到携程国内房型校验\n","slug":"work_coding/work0604","published":1,"date":"2019-06-04T15:31:14.274Z","updated":"2019-06-04T15:31:14.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwhynmg80000o472sq8y1yeg","content":"<h3 id=\"done\"><a href=\"#done\" class=\"headerlink\" title=\"done\"></a>done</h3><pre><code>房型计算模块功能划分\n新增一票否决功能\n床型更新功能过滤携程供应商\n</code></pre><h3 id=\"doing\"><a href=\"#doing\" class=\"headerlink\" title=\"doing\"></a>doing</h3><pre><code>应用到携程国内房型校验\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"done\"><a href=\"#done\" class=\"headerlink\" title=\"done\"></a>done</h3><pre><code>房型计算模块功能划分\n新增一票否决功能\n床型更新功能过滤携程供应商\n</code></pre><h3 id=\"doing\"><a href=\"#doing\" class=\"headerlink\" title=\"doing\"></a>doing</h3><pre><code>应用到携程国内房型校验\n</code></pre>"},{"title":"循环","_content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>循环</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#71for\">7.1　for 循环</a></li>\n<li><a href=\"#72range\">7.2　range 函数</a></li>\n<li><a href=\"#73while\">7.3　while 循环</a></li>\n<li><a href=\"#74break\">7.4　break 语句</a></li>\n<li><a href=\"#75continue\">7.5　continue 语句</a></li>\n<li><a href=\"#76\">7.6　嵌套循环</a></li>\n<li><a href=\"#77\">7.7　术语表</a></li>\n<li><a href=\"#78\">7.8　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“百分之八十的成功只是出席。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——伍迪 · 艾伦（Woody Allen）</span></p>\n</blockquote>\n<p>之前书中介绍的第二个程序打印 <code>Hello, World!</code> 100 次，就是使用<strong>循环</strong>（loop）实现的。循环的意义是直到代码中定义的条件满足时才停止执行的代码块。本章将学习循环及其使用方法。</p>\n<h3 id=\"71for\">7.1　for 循环</h3>\n<p>本节将介绍如何使用 <strong>for 循环</strong>：一种用来遍历可迭代对象的循环。这个过程被称为<strong>遍历</strong>（iterating）。我们可使用 for 循环来定义可迭代对象中每个元素都要执行一次的指令，然后在指令中对每个元素进行访问和操作。例如，可使用 for 循环遍历一个字符串列表，并使用 <code>upper</code> 方法打印每个字符大写后的字符串。</p>\n<p>可使用语法 <code>\"for [变量名] in [可迭代对象名]: [指令]\"</code> 定义 for 循环，其中[变量名]是计划赋给可迭代对象中每个元素值的变量名称，[指令]是每次循环要执行的代码。下面是一个遍历字符串中每个字符的 for 循环：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jya6kpm</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  name = <span class=\"hljs-string\">\"Ted\"</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">for</span></strong> character <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">name:</span>\n<span class=\"hljs-number\">6</span>      print(character)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> T\n<span class=\"hljs-meta\">&gt;&gt;</span> e\n<span class=\"hljs-meta\">&gt;&gt;</span> d</code></pre>\n<p>每一次循环，变量 <code>character</code> 都会被赋给可迭代对象 <code>name</code> 中的一个元素。第一次循环时打印的结果是 <code>T</code>，因为变量 <code>character</code> 被赋予了可迭代对象 <code>name</code> 中第一个元素的值；以此类推，第二次打印的结果就是 <code>e</code>，直到可迭代对象中的每个元素都遍历完。</p>\n<p>下面是使用 for 循环遍历列表元素的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zeftpq8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  shows = [<span class=\"hljs-string\">\"GOT\"</span>,\n<span class=\"hljs-number\">5</span>           <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">6</span>           <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">shows:</span>\n<span class=\"hljs-number\">8</span>      print(show)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> GOT\n<span class=\"hljs-meta\">&gt;&gt;</span> Narcos\n<span class=\"hljs-meta\">&gt;&gt;</span> Vice</code></pre>\n<p>下面是 for 循环遍历元组中元素的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gpr5a6e</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  coms = (<span class=\"hljs-string\">\"A. Development\"</span>,\n<span class=\"hljs-number\">5</span>          <span class=\"hljs-string\">\"Friends\"</span>,\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-string\">\"Always Sunny\"</span>)\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">coms:</span>\n<span class=\"hljs-number\">8</span>      print(show)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> A. Development\n<span class=\"hljs-meta\">&gt;&gt;</span> Friends\n<span class=\"hljs-meta\">&gt;&gt;</span> Always Sunny</code></pre>\n<p>下面是 for 循环遍历字典元素的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jk7do9b</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  people = {<span class=\"hljs-string\">\"G. Bluth II\"</span>:\n<span class=\"hljs-number\">5</span>            <span class=\"hljs-string\">\"A. Development\"</span>,\n<span class=\"hljs-number\">6</span>            <span class=\"hljs-string\">\"Barney\"</span>:\n<span class=\"hljs-number\">7</span>            <span class=\"hljs-string\">\"HIMYM\"</span>,\n<span class=\"hljs-number\">8</span>            <span class=\"hljs-string\">\"Dennis\"</span>:\n09            <span class=\"hljs-string\">\"Always Sunny\"</span>\n<span class=\"hljs-number\">10</span>            }\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  <strong><span class=\"hljs-keyword\">for</span></strong> character <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">people:</span>\n<span class=\"hljs-number\">14</span>      print(character)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Dennis\n<span class=\"hljs-meta\">&gt;&gt;</span> Barney\n<span class=\"hljs-meta\">&gt;&gt;</span> G. Bluth II</code></pre>\n<p>也可以使用 for 循环修改可变且可迭代对象中的元素，示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8wvp8c</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  tv = [<span class=\"hljs-string\">\"GOT\"</span>,\n<span class=\"hljs-number\">05</span>        <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">06</span>        <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">07</span>  i = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> tv:\n<span class=\"hljs-number\">09</span>      <span class=\"hljs-keyword\">new</span> = tv[i]\n<span class=\"hljs-number\">10</span>      <span class=\"hljs-keyword\">new</span> = <span class=\"hljs-keyword\">new</span>.upper()\n<span class=\"hljs-number\">11</span>      tv[i] = <span class=\"hljs-keyword\">new</span>\n<span class=\"hljs-number\">12</span>      i += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  <span class=\"hljs-built_in\">print</span>(tv)\n\n&gt;&gt; [<span class=\"hljs-string\">'GOT'</span>, <span class=\"hljs-string\">'NARCOS'</span>, <span class=\"hljs-string\">'VICE'</span>]</code></pre>\n<p>上例中使用 for 循环遍历了列表 <code>tv</code>，并通过一个<strong>索引变量</strong>（index variable）跟踪列表内当前的元素。索引变量是代表可迭代对象中索引的一个整数，起始值为 0，每循环一次索引变量的值递增一个。可以通过索引变量来获取列表中当前的元素，保存在变量 <code>new</code> 中。然后对 <code>new</code> 调用 <code>upper</code> 方法并保存结果，再用索引变量替换列表中的当前元素。最后，将 <code>i</code> 的值递增，确保在下一次循环时可以获得下一个元素。</p>\n<p>由于访问可迭代对象中索引和元素是很常见的操作，Python 提供了一个专门的语法：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z45g63j</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  tv = [<span class=\"hljs-string\">\"GOT\"</span>, <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">5</span>        <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">6</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i, show <strong><span class=\"hljs-keyword\">in</span></strong> enumerate(tv):\n<span class=\"hljs-number\">07</span>      <span class=\"hljs-keyword\">new</span> = tv[i]\n<span class=\"hljs-number\">08</span>      <span class=\"hljs-keyword\">new</span> = <span class=\"hljs-keyword\">new</span>.upper()\n<span class=\"hljs-number\">09</span>      tv[i] = <span class=\"hljs-keyword\">new</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  <span class=\"hljs-built_in\">print</span>(tv)\n\n&gt;&gt; [<span class=\"hljs-string\">'GOT'</span>, <span class=\"hljs-string\">'NARCOS'</span>, <span class=\"hljs-string\">'VICE'</span>]</code></pre>\n<p>上例中没有遍历 <code>tv</code> 列表，而是将其调给了 <code>enumerate</code> 函数去遍历该函数返回的结果。<code>enumerate</code> 函数会返回一个对应当前元素索引的值，可保存在变量 <code>i</code> 中。</p>\n<p>还可以使用 for 循环在可变可迭代对象之间传递数据。例如，使用两个 for 循环获取两个不同列表中的所有字符串，然后将每个字符大写，并放入一个新的列表中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcvgklh</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  tv = [<span class=\"hljs-string\">\"GOT\"</span>, <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">05</span>        <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">06</span>  coms = [<span class=\"hljs-string\">\"Arrested Development\"</span>,\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"friends\"</span>,\n08          <span class=\"hljs-string\">\"Always Sunny\"</span>]\n09  all_shows = []\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">tv:</span>\n<span class=\"hljs-number\">13</span>      show = show.upper()\n<span class=\"hljs-number\">14</span>      all_shows.append(show)\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">coms:</span>\n<span class=\"hljs-number\">18</span>      show = show.upper()\n<span class=\"hljs-number\">19</span>      all_shows.append(show)\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>\n<span class=\"hljs-number\">22</span>  print(all_shows)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'GOT'</span>, <span class=\"hljs-string\">'NARCOS'</span>, <span class=\"hljs-string\">'VICE'</span>, <span class=\"hljs-string\">'ARRESTED DEVELOPMENT'</span>, <span class=\"hljs-string\">'FRIENDS'</span>, <span class=\"hljs-string\">'ALWAYS SUNNY'</span>]</code></pre>\n<p>上例中有 3 个列表：<code>tv</code>、<code>coms</code> 和 <code>all_shows</code>。在第一个循环中，遍历了列表 <code>tv</code> 中的所有元素，使用 <code>upper</code> 方法将其中每个元素都大写，然后再通过 <code>append</code> 方法添加每个元素至 <code>all_shows</code>。在第二个循环中，对列表 <code>coms</code> 做同样的操作。打印 <code>all_shows</code> 时，列表会包含另外两个列表中所有的元素，并且每个元素都是大写的。</p>\n<h3 id=\"72range\">7.2　range 函数</h3>\n<p>可使用内置的 <code>range</code> 函数创建一个整数序列，然后通过 for 循环遍历。<code>range</code> 函数接受两个参数：序列起始数字和结束数字，返回的整数序列包含从第一个参数到第二个参数之间（不含第二个参数）的所有整数。使用 <code>range</code> 函数创建数字序列并遍历的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hh5t8rw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span> <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">11</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n…\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span></code></pre>\n<p>上例中使用 for 循环打印了 <code>range</code> 函数返回的可迭代对象中的所有数字。程序员通常将用来遍历整数列表的变量命名为 i。</p>\n<h3 id=\"73while\">7.3　while 循环</h3>\n<p>下面介绍如何使用 <strong>while 循环</strong>：它是一种只要表达式的值为 <code>True</code> 就一直执行代码的循环。while 循环的语法是“<code>while [表达式]: [执行代码]</code>”，其中“<code>[表达式]</code>”是决定循环是否继续进行的表达式，“<code>[执行代码]</code>”则是只要循环继续就执行的代码。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2gwlcy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">while</span></strong> x &gt; <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">6</span>      print(<span class=\"hljs-string\">'{}'</span>.format(x))\n<span class=\"hljs-number\">7</span>      x -= <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">8</span>  print(<span class=\"hljs-string\">\"Happy New Year!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">8</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">7</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Happy New Year!</code></pre>\n<p>只要 while 循环的代码头中定义的表达式“<code>x &gt; 0</code>”求值为 <code>True</code>，循环主体中定义的代码将一直执行下去。第一次循环时，<code>x</code> 的值为 10，表达式 <code>x &gt; 0</code> 的值为 <code>True</code>，因此 while 循环打印 <code>x</code> 的值，并将它的值递减 <code>1</code>，这时 <code>x</code> 的值变成了 9。下一次循环时，还会打印 <code>x</code> 的值，并递减为 8。这个过程一直持续到 <code>x</code> 的值递减为 0，这时 <code>x &gt; 0</code> 的求值为 <code>False</code>，循环结束。Python 将执行循环后面的下一行代码，打印 <code>Happy New Year!</code>。</p>\n<p>如果你定义的 while 循环的表达式求值永远为 <code>True</code>，循环将不会停止执行。一个不会停止执行的循环也被称为<strong>死循环</strong>（infinite loop）。下面就是一个死循环的示例（准备好按 Ctrl+c 强制终止死循环）：</p>\n<pre class=\"代码无行号\"><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hcwvfk8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">while</span></strong> <span class=\"hljs-keyword\">True</span>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, World!\n…</code></pre>\n<p>因为只要代码头中定义的表达式求值为 <code>True</code>，<code>True</code> 的值永远为 <code>True</code>，所以该循环将一直执行下去。</p>\n<h3 id=\"74break\">7.4　break 语句</h3>\n<p>可使用 break <strong>语句</strong>（带关键字 <code>break</code> 的语句）来终止循环。下面这个循环示例会执行 100 次：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrdh88c</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n…</code></pre>\n<p>如果添加一个 break 语句，那么循环只会执行一次：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhxf3uk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n<span class=\"hljs-number\">6</span>      <strong><span class=\"hljs-keyword\">break</span></strong>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span></code></pre>\n<p>只要 Python 遇到 break 语句，循环就会终止。我们可以使用 while 循环和 <code>break</code> 关键字编写一个程序，不断地请求用户提供输入，如果输入 q 则退出。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jmak8tr</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  qs = [<span class=\"hljs-string\">\"What is your name?\"</span>,\n<span class=\"hljs-number\">05</span>        <span class=\"hljs-string\">\"What is your fav. color?\"</span>,\n<span class=\"hljs-number\">06</span>        <span class=\"hljs-string\">\"What is your quest?\"</span>]\n<span class=\"hljs-number\">07</span>  n = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-keyword\">while</span></strong> True:\n<span class=\"hljs-number\">09</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Type q to quit\"</span>)\n<span class=\"hljs-number\">10</span>      a  = input(qs[n])\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-keyword\">if</span></strong> a == <span class=\"hljs-string\">\"q\"</span>:\n<span class=\"hljs-number\">12</span>          <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">13</span>      n = (n + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">3</span>\n\nType q to quit\nWhat <span class=\"hljs-keyword\">is</span> your name?</code></pre>\n<p>每次循环，程序都会向用户询问一个 <code>qs</code> 列表中的问题。</p>\n<p>其中，<code>n</code> 是索引变量。每次循环都会将表达式 <code>(n + 1) % 3</code> 的值赋给 <code>n</code>，这可以让程序循环调用 <code>qs</code> 列表中的问题。第一次循环的结果是 <code>n</code> 的值为 0。第二次时，<code>n</code> 被赋予了 <code>(0 + 1) % 3</code> 的结果，即 1。接下来，被赋予 <code>(1 + 1) % 3</code> 的结果，即 2。因为只要求模表达式中的第一个数字比第二个小，结果就是第一个数字。最后，<code>n</code> 被赋予 <code>(2 + 1) % 3</code> 的值，又重新变成了 0。</p>\n<h3 id=\"75continue\">7.5　continue 语句</h3>\n<p>可使用 continue <strong>语句</strong>（带关键字 <code>continue</code> 的语句）来终止循环的当前迭代，并进入下一次迭代。假设你想打印从 1 到 5 之间除了 3 以外的所有数字，可通过 for 循环和 continue 语句实现。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hflun4p</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>):\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">if</span></strong> i == <span class=\"hljs-number\">3</span>:\n<span class=\"hljs-number\">6</span>          <strong>continue</strong>\n<span class=\"hljs-number\">7</span>      print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span></code></pre>\n<p>在上述循环中，当 <code>i</code> 的值等于 3 时，程序执行 continue 语句，但不会像 <code>break</code> 关键字那样让循环完全终止，而是会继续进行下一次迭代，跳过本应该执行的其他代码。当 <code>i</code> 等于 3 时，Python 会执行 continue 语句，而不是打印 3。</p>\n<p>通过 while 循环和 continue 语句也可以实现相同的结果。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gp7forl</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  i = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">05</span>  <strong><span class=\"hljs-keyword\">while</span></strong> i &lt;= <span class=\"hljs-number\">5</span> :\n<span class=\"hljs-number\">06</span>      <strong><span class=\"hljs-keyword\">if</span></strong> i == <span class=\"hljs-number\">3</span>:\n<span class=\"hljs-number\">07</span>          i += <span class=\"hljs-number\">1</span>\n08          <strong>continue</strong>\n09      print(i)\n<span class=\"hljs-number\">10</span>      i += <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span></code></pre>\n<h3 id=\"76\">7.6　嵌套循环</h3>\n<p>可以通过多种方式对循环进行组合。例如，可以在一个循环里加入另一个循环，甚至在加入的循环里再加一个循环。循环中可嵌套的循环数量没有限制，但是最好要控制数量不要过多。当一个循环位于另一个循环之内时，它就是嵌套在第一个循环中。这种情况下，内部包含一个循环的循环称为<strong>外循环</strong>（outer loop），嵌套的循环称为<strong>内循环</strong>（inner loop）。当存在嵌套循环时，外循环每遍历一次，内循环就遍历一次其可迭代对象中的所有元素。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gqjxjtq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n<span class=\"hljs-number\">6</span>      <strong><span class=\"hljs-keyword\">for</span></strong> letter <strong><span class=\"hljs-keyword\">in</span></strong> [<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>]:\n<span class=\"hljs-number\">7</span>          print(letter)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> a\n<span class=\"hljs-meta\">&gt;&gt;</span> b\n<span class=\"hljs-meta\">&gt;&gt;</span> c\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> a\n<span class=\"hljs-meta\">&gt;&gt;</span> b\n<span class=\"hljs-meta\">&gt;&gt;</span> c</code></pre>\n<p>不管外循环运行多少次，嵌套的 for 循环都会遍历完列表 <code>[\"a\", \"b\", \"c\"]</code>。如果将外循环改为运行 3 次，内循环也会遍历列表 3 次。</p>\n<p>可使用两个 for 循环将一个列表中的所有数字，与另一个列表中的所有数字相加。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z7duawp</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  list1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-number\">05</span>  list2 = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>]\n<span class=\"hljs-number\">06</span>  added = []\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">list1:</span>\n08      <strong><span class=\"hljs-keyword\">for</span></strong> j <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">list2:</span>\n09          added.append(i + j)\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  print(added)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>]</code></pre>\n<p>对于第一个循环遍历列表 <code>list1</code> 中的每个整数，第二个循环遍历自身可迭代对象中的每个整数，并将其与 <code>list1</code> 中的数字相加，然后将结果添加至列表 <code>added</code>。这里将第二个 for 循环中的索引变量命名为 <code>j</code>，因为第一个循环中已使用了 <code>i</code>。</p>\n<p>还可以在 while 循环中嵌套 for 循环，反之亦可。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hnprmmv</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span> <strong><span class=\"hljs-keyword\">while</span></strong> input(<span class=\"hljs-string\">'y or n?'</span>) != <span class=\"hljs-string\">'n'</span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>):\n<span class=\"hljs-number\">6</span>          print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> y or n?y\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>\ny <span class=\"hljs-keyword\">or</span> n?y\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>\ny <span class=\"hljs-keyword\">or</span> n?n\n<span class=\"hljs-meta\">&gt;&gt;</span></code></pre>\n<p>程序在用户输入 n 之前，将会不断地打印数字 1 至 5。</p>\n<h3 id=\"77\">7.7　术语表</h3>\n<p><strong>循环</strong>：在代码中定义的条件未满足之前，将持续执行的一段代码。</p>\n<p><strong>遍历</strong>：使用循环访问可迭代对象中的每个元素。</p>\n<p><strong>for 循环</strong>：用来迭代字符串、列表、元组或字典等可迭代对象的一种循环。</p>\n<p><strong>索引变量</strong>：变量的值为代表可迭代对象中索引的一个数字。</p>\n<p><strong>while 循环</strong>：只要表达式的值为 <code>True</code> 则持续执行的一种循环。</p>\n<p><strong>死循环</strong>：永远都不会终止的循环。</p>\n<p><strong>break 语句</strong>：带关键字 <code>break</code> 的语句，用来终止循环。</p>\n<p><strong>continue 语句</strong>：带关键字 <code>continue</code> 的语句，用来终止循环的当前迭代，并进入到下一次迭代。</p>\n<p><strong>外循环</strong>：内部包含嵌套循环的循环。</p>\n<p><strong>内循环</strong>：嵌套在另一个循环中的循环。</p>\n<h3 id=\"78\">7.8　挑战练习</h3>\n<p>1．打印以下列表 <code>[\"The Walking Dead\", \"Entourage\", \"The Sopranos\", \"The Vampire Diaries\"]</code> 中的每个元素。</p>\n<p>2．打印从 25 到 50 之间的所有数字。</p>\n<p>3．打印第一个挑战练习中的每个元素及其索引。</p>\n<p>4．编写一个包含死循环和数字列表的程序（可选择输入 q 退出）。每次循环时，请用户猜一个在列表中的数字，然后告知其猜测是否正确。</p>\n<p>5．将列表 <code>[8, 19, 148, 4]</code> 中的所有数字，与列表 <code>[9, 1, 33, 83]</code> 中的所有数字相乘，并将结果添加到第 3 个列表中。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","source":"_posts/Python无师自通/7_loop.html","raw":"---\ntitle: 循环\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>循环</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#71for\">7.1　for 循环</a></li>\n<li><a href=\"#72range\">7.2　range 函数</a></li>\n<li><a href=\"#73while\">7.3　while 循环</a></li>\n<li><a href=\"#74break\">7.4　break 语句</a></li>\n<li><a href=\"#75continue\">7.5　continue 语句</a></li>\n<li><a href=\"#76\">7.6　嵌套循环</a></li>\n<li><a href=\"#77\">7.7　术语表</a></li>\n<li><a href=\"#78\">7.8　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“百分之八十的成功只是出席。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——伍迪 · 艾伦（Woody Allen）</span></p>\n</blockquote>\n<p>之前书中介绍的第二个程序打印 <code>Hello, World!</code> 100 次，就是使用<strong>循环</strong>（loop）实现的。循环的意义是直到代码中定义的条件满足时才停止执行的代码块。本章将学习循环及其使用方法。</p>\n<h3 id=\"71for\">7.1　for 循环</h3>\n<p>本节将介绍如何使用 <strong>for 循环</strong>：一种用来遍历可迭代对象的循环。这个过程被称为<strong>遍历</strong>（iterating）。我们可使用 for 循环来定义可迭代对象中每个元素都要执行一次的指令，然后在指令中对每个元素进行访问和操作。例如，可使用 for 循环遍历一个字符串列表，并使用 <code>upper</code> 方法打印每个字符大写后的字符串。</p>\n<p>可使用语法 <code>\"for [变量名] in [可迭代对象名]: [指令]\"</code> 定义 for 循环，其中[变量名]是计划赋给可迭代对象中每个元素值的变量名称，[指令]是每次循环要执行的代码。下面是一个遍历字符串中每个字符的 for 循环：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jya6kpm</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  name = <span class=\"hljs-string\">\"Ted\"</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">for</span></strong> character <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">name:</span>\n<span class=\"hljs-number\">6</span>      print(character)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> T\n<span class=\"hljs-meta\">&gt;&gt;</span> e\n<span class=\"hljs-meta\">&gt;&gt;</span> d</code></pre>\n<p>每一次循环，变量 <code>character</code> 都会被赋给可迭代对象 <code>name</code> 中的一个元素。第一次循环时打印的结果是 <code>T</code>，因为变量 <code>character</code> 被赋予了可迭代对象 <code>name</code> 中第一个元素的值；以此类推，第二次打印的结果就是 <code>e</code>，直到可迭代对象中的每个元素都遍历完。</p>\n<p>下面是使用 for 循环遍历列表元素的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zeftpq8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  shows = [<span class=\"hljs-string\">\"GOT\"</span>,\n<span class=\"hljs-number\">5</span>           <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">6</span>           <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">shows:</span>\n<span class=\"hljs-number\">8</span>      print(show)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> GOT\n<span class=\"hljs-meta\">&gt;&gt;</span> Narcos\n<span class=\"hljs-meta\">&gt;&gt;</span> Vice</code></pre>\n<p>下面是 for 循环遍历元组中元素的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gpr5a6e</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  coms = (<span class=\"hljs-string\">\"A. Development\"</span>,\n<span class=\"hljs-number\">5</span>          <span class=\"hljs-string\">\"Friends\"</span>,\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-string\">\"Always Sunny\"</span>)\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">coms:</span>\n<span class=\"hljs-number\">8</span>      print(show)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> A. Development\n<span class=\"hljs-meta\">&gt;&gt;</span> Friends\n<span class=\"hljs-meta\">&gt;&gt;</span> Always Sunny</code></pre>\n<p>下面是 for 循环遍历字典元素的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jk7do9b</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  people = {<span class=\"hljs-string\">\"G. Bluth II\"</span>:\n<span class=\"hljs-number\">5</span>            <span class=\"hljs-string\">\"A. Development\"</span>,\n<span class=\"hljs-number\">6</span>            <span class=\"hljs-string\">\"Barney\"</span>:\n<span class=\"hljs-number\">7</span>            <span class=\"hljs-string\">\"HIMYM\"</span>,\n<span class=\"hljs-number\">8</span>            <span class=\"hljs-string\">\"Dennis\"</span>:\n09            <span class=\"hljs-string\">\"Always Sunny\"</span>\n<span class=\"hljs-number\">10</span>            }\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  <strong><span class=\"hljs-keyword\">for</span></strong> character <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">people:</span>\n<span class=\"hljs-number\">14</span>      print(character)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Dennis\n<span class=\"hljs-meta\">&gt;&gt;</span> Barney\n<span class=\"hljs-meta\">&gt;&gt;</span> G. Bluth II</code></pre>\n<p>也可以使用 for 循环修改可变且可迭代对象中的元素，示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8wvp8c</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  tv = [<span class=\"hljs-string\">\"GOT\"</span>,\n<span class=\"hljs-number\">05</span>        <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">06</span>        <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">07</span>  i = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> tv:\n<span class=\"hljs-number\">09</span>      <span class=\"hljs-keyword\">new</span> = tv[i]\n<span class=\"hljs-number\">10</span>      <span class=\"hljs-keyword\">new</span> = <span class=\"hljs-keyword\">new</span>.upper()\n<span class=\"hljs-number\">11</span>      tv[i] = <span class=\"hljs-keyword\">new</span>\n<span class=\"hljs-number\">12</span>      i += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  <span class=\"hljs-built_in\">print</span>(tv)\n\n&gt;&gt; [<span class=\"hljs-string\">'GOT'</span>, <span class=\"hljs-string\">'NARCOS'</span>, <span class=\"hljs-string\">'VICE'</span>]</code></pre>\n<p>上例中使用 for 循环遍历了列表 <code>tv</code>，并通过一个<strong>索引变量</strong>（index variable）跟踪列表内当前的元素。索引变量是代表可迭代对象中索引的一个整数，起始值为 0，每循环一次索引变量的值递增一个。可以通过索引变量来获取列表中当前的元素，保存在变量 <code>new</code> 中。然后对 <code>new</code> 调用 <code>upper</code> 方法并保存结果，再用索引变量替换列表中的当前元素。最后，将 <code>i</code> 的值递增，确保在下一次循环时可以获得下一个元素。</p>\n<p>由于访问可迭代对象中索引和元素是很常见的操作，Python 提供了一个专门的语法：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z45g63j</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  tv = [<span class=\"hljs-string\">\"GOT\"</span>, <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">5</span>        <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">6</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i, show <strong><span class=\"hljs-keyword\">in</span></strong> enumerate(tv):\n<span class=\"hljs-number\">07</span>      <span class=\"hljs-keyword\">new</span> = tv[i]\n<span class=\"hljs-number\">08</span>      <span class=\"hljs-keyword\">new</span> = <span class=\"hljs-keyword\">new</span>.upper()\n<span class=\"hljs-number\">09</span>      tv[i] = <span class=\"hljs-keyword\">new</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  <span class=\"hljs-built_in\">print</span>(tv)\n\n&gt;&gt; [<span class=\"hljs-string\">'GOT'</span>, <span class=\"hljs-string\">'NARCOS'</span>, <span class=\"hljs-string\">'VICE'</span>]</code></pre>\n<p>上例中没有遍历 <code>tv</code> 列表，而是将其调给了 <code>enumerate</code> 函数去遍历该函数返回的结果。<code>enumerate</code> 函数会返回一个对应当前元素索引的值，可保存在变量 <code>i</code> 中。</p>\n<p>还可以使用 for 循环在可变可迭代对象之间传递数据。例如，使用两个 for 循环获取两个不同列表中的所有字符串，然后将每个字符大写，并放入一个新的列表中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcvgklh</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  tv = [<span class=\"hljs-string\">\"GOT\"</span>, <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">05</span>        <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">06</span>  coms = [<span class=\"hljs-string\">\"Arrested Development\"</span>,\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"friends\"</span>,\n08          <span class=\"hljs-string\">\"Always Sunny\"</span>]\n09  all_shows = []\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">tv:</span>\n<span class=\"hljs-number\">13</span>      show = show.upper()\n<span class=\"hljs-number\">14</span>      all_shows.append(show)\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">coms:</span>\n<span class=\"hljs-number\">18</span>      show = show.upper()\n<span class=\"hljs-number\">19</span>      all_shows.append(show)\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>\n<span class=\"hljs-number\">22</span>  print(all_shows)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'GOT'</span>, <span class=\"hljs-string\">'NARCOS'</span>, <span class=\"hljs-string\">'VICE'</span>, <span class=\"hljs-string\">'ARRESTED DEVELOPMENT'</span>, <span class=\"hljs-string\">'FRIENDS'</span>, <span class=\"hljs-string\">'ALWAYS SUNNY'</span>]</code></pre>\n<p>上例中有 3 个列表：<code>tv</code>、<code>coms</code> 和 <code>all_shows</code>。在第一个循环中，遍历了列表 <code>tv</code> 中的所有元素，使用 <code>upper</code> 方法将其中每个元素都大写，然后再通过 <code>append</code> 方法添加每个元素至 <code>all_shows</code>。在第二个循环中，对列表 <code>coms</code> 做同样的操作。打印 <code>all_shows</code> 时，列表会包含另外两个列表中所有的元素，并且每个元素都是大写的。</p>\n<h3 id=\"72range\">7.2　range 函数</h3>\n<p>可使用内置的 <code>range</code> 函数创建一个整数序列，然后通过 for 循环遍历。<code>range</code> 函数接受两个参数：序列起始数字和结束数字，返回的整数序列包含从第一个参数到第二个参数之间（不含第二个参数）的所有整数。使用 <code>range</code> 函数创建数字序列并遍历的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hh5t8rw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span> <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">11</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n…\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span></code></pre>\n<p>上例中使用 for 循环打印了 <code>range</code> 函数返回的可迭代对象中的所有数字。程序员通常将用来遍历整数列表的变量命名为 i。</p>\n<h3 id=\"73while\">7.3　while 循环</h3>\n<p>下面介绍如何使用 <strong>while 循环</strong>：它是一种只要表达式的值为 <code>True</code> 就一直执行代码的循环。while 循环的语法是“<code>while [表达式]: [执行代码]</code>”，其中“<code>[表达式]</code>”是决定循环是否继续进行的表达式，“<code>[执行代码]</code>”则是只要循环继续就执行的代码。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2gwlcy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">while</span></strong> x &gt; <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">6</span>      print(<span class=\"hljs-string\">'{}'</span>.format(x))\n<span class=\"hljs-number\">7</span>      x -= <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">8</span>  print(<span class=\"hljs-string\">\"Happy New Year!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">8</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">7</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Happy New Year!</code></pre>\n<p>只要 while 循环的代码头中定义的表达式“<code>x &gt; 0</code>”求值为 <code>True</code>，循环主体中定义的代码将一直执行下去。第一次循环时，<code>x</code> 的值为 10，表达式 <code>x &gt; 0</code> 的值为 <code>True</code>，因此 while 循环打印 <code>x</code> 的值，并将它的值递减 <code>1</code>，这时 <code>x</code> 的值变成了 9。下一次循环时，还会打印 <code>x</code> 的值，并递减为 8。这个过程一直持续到 <code>x</code> 的值递减为 0，这时 <code>x &gt; 0</code> 的求值为 <code>False</code>，循环结束。Python 将执行循环后面的下一行代码，打印 <code>Happy New Year!</code>。</p>\n<p>如果你定义的 while 循环的表达式求值永远为 <code>True</code>，循环将不会停止执行。一个不会停止执行的循环也被称为<strong>死循环</strong>（infinite loop）。下面就是一个死循环的示例（准备好按 Ctrl+c 强制终止死循环）：</p>\n<pre class=\"代码无行号\"><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hcwvfk8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">while</span></strong> <span class=\"hljs-keyword\">True</span>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, World!\n…</code></pre>\n<p>因为只要代码头中定义的表达式求值为 <code>True</code>，<code>True</code> 的值永远为 <code>True</code>，所以该循环将一直执行下去。</p>\n<h3 id=\"74break\">7.4　break 语句</h3>\n<p>可使用 break <strong>语句</strong>（带关键字 <code>break</code> 的语句）来终止循环。下面这个循环示例会执行 100 次：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrdh88c</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n…</code></pre>\n<p>如果添加一个 break 语句，那么循环只会执行一次：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhxf3uk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n<span class=\"hljs-number\">6</span>      <strong><span class=\"hljs-keyword\">break</span></strong>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span></code></pre>\n<p>只要 Python 遇到 break 语句，循环就会终止。我们可以使用 while 循环和 <code>break</code> 关键字编写一个程序，不断地请求用户提供输入，如果输入 q 则退出。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jmak8tr</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  qs = [<span class=\"hljs-string\">\"What is your name?\"</span>,\n<span class=\"hljs-number\">05</span>        <span class=\"hljs-string\">\"What is your fav. color?\"</span>,\n<span class=\"hljs-number\">06</span>        <span class=\"hljs-string\">\"What is your quest?\"</span>]\n<span class=\"hljs-number\">07</span>  n = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-keyword\">while</span></strong> True:\n<span class=\"hljs-number\">09</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Type q to quit\"</span>)\n<span class=\"hljs-number\">10</span>      a  = input(qs[n])\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-keyword\">if</span></strong> a == <span class=\"hljs-string\">\"q\"</span>:\n<span class=\"hljs-number\">12</span>          <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">13</span>      n = (n + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">3</span>\n\nType q to quit\nWhat <span class=\"hljs-keyword\">is</span> your name?</code></pre>\n<p>每次循环，程序都会向用户询问一个 <code>qs</code> 列表中的问题。</p>\n<p>其中，<code>n</code> 是索引变量。每次循环都会将表达式 <code>(n + 1) % 3</code> 的值赋给 <code>n</code>，这可以让程序循环调用 <code>qs</code> 列表中的问题。第一次循环的结果是 <code>n</code> 的值为 0。第二次时，<code>n</code> 被赋予了 <code>(0 + 1) % 3</code> 的结果，即 1。接下来，被赋予 <code>(1 + 1) % 3</code> 的结果，即 2。因为只要求模表达式中的第一个数字比第二个小，结果就是第一个数字。最后，<code>n</code> 被赋予 <code>(2 + 1) % 3</code> 的值，又重新变成了 0。</p>\n<h3 id=\"75continue\">7.5　continue 语句</h3>\n<p>可使用 continue <strong>语句</strong>（带关键字 <code>continue</code> 的语句）来终止循环的当前迭代，并进入下一次迭代。假设你想打印从 1 到 5 之间除了 3 以外的所有数字，可通过 for 循环和 continue 语句实现。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hflun4p</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>):\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">if</span></strong> i == <span class=\"hljs-number\">3</span>:\n<span class=\"hljs-number\">6</span>          <strong>continue</strong>\n<span class=\"hljs-number\">7</span>      print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span></code></pre>\n<p>在上述循环中，当 <code>i</code> 的值等于 3 时，程序执行 continue 语句，但不会像 <code>break</code> 关键字那样让循环完全终止，而是会继续进行下一次迭代，跳过本应该执行的其他代码。当 <code>i</code> 等于 3 时，Python 会执行 continue 语句，而不是打印 3。</p>\n<p>通过 while 循环和 continue 语句也可以实现相同的结果。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gp7forl</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  i = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">05</span>  <strong><span class=\"hljs-keyword\">while</span></strong> i &lt;= <span class=\"hljs-number\">5</span> :\n<span class=\"hljs-number\">06</span>      <strong><span class=\"hljs-keyword\">if</span></strong> i == <span class=\"hljs-number\">3</span>:\n<span class=\"hljs-number\">07</span>          i += <span class=\"hljs-number\">1</span>\n08          <strong>continue</strong>\n09      print(i)\n<span class=\"hljs-number\">10</span>      i += <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span></code></pre>\n<h3 id=\"76\">7.6　嵌套循环</h3>\n<p>可以通过多种方式对循环进行组合。例如，可以在一个循环里加入另一个循环，甚至在加入的循环里再加一个循环。循环中可嵌套的循环数量没有限制，但是最好要控制数量不要过多。当一个循环位于另一个循环之内时，它就是嵌套在第一个循环中。这种情况下，内部包含一个循环的循环称为<strong>外循环</strong>（outer loop），嵌套的循环称为<strong>内循环</strong>（inner loop）。当存在嵌套循环时，外循环每遍历一次，内循环就遍历一次其可迭代对象中的所有元素。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gqjxjtq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n<span class=\"hljs-number\">6</span>      <strong><span class=\"hljs-keyword\">for</span></strong> letter <strong><span class=\"hljs-keyword\">in</span></strong> [<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>]:\n<span class=\"hljs-number\">7</span>          print(letter)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> a\n<span class=\"hljs-meta\">&gt;&gt;</span> b\n<span class=\"hljs-meta\">&gt;&gt;</span> c\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> a\n<span class=\"hljs-meta\">&gt;&gt;</span> b\n<span class=\"hljs-meta\">&gt;&gt;</span> c</code></pre>\n<p>不管外循环运行多少次，嵌套的 for 循环都会遍历完列表 <code>[\"a\", \"b\", \"c\"]</code>。如果将外循环改为运行 3 次，内循环也会遍历列表 3 次。</p>\n<p>可使用两个 for 循环将一个列表中的所有数字，与另一个列表中的所有数字相加。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z7duawp</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  list1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-number\">05</span>  list2 = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>]\n<span class=\"hljs-number\">06</span>  added = []\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">list1:</span>\n08      <strong><span class=\"hljs-keyword\">for</span></strong> j <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">list2:</span>\n09          added.append(i + j)\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  print(added)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>]</code></pre>\n<p>对于第一个循环遍历列表 <code>list1</code> 中的每个整数，第二个循环遍历自身可迭代对象中的每个整数，并将其与 <code>list1</code> 中的数字相加，然后将结果添加至列表 <code>added</code>。这里将第二个 for 循环中的索引变量命名为 <code>j</code>，因为第一个循环中已使用了 <code>i</code>。</p>\n<p>还可以在 while 循环中嵌套 for 循环，反之亦可。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hnprmmv</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span> <strong><span class=\"hljs-keyword\">while</span></strong> input(<span class=\"hljs-string\">'y or n?'</span>) != <span class=\"hljs-string\">'n'</span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>):\n<span class=\"hljs-number\">6</span>          print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> y or n?y\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>\ny <span class=\"hljs-keyword\">or</span> n?y\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>\ny <span class=\"hljs-keyword\">or</span> n?n\n<span class=\"hljs-meta\">&gt;&gt;</span></code></pre>\n<p>程序在用户输入 n 之前，将会不断地打印数字 1 至 5。</p>\n<h3 id=\"77\">7.7　术语表</h3>\n<p><strong>循环</strong>：在代码中定义的条件未满足之前，将持续执行的一段代码。</p>\n<p><strong>遍历</strong>：使用循环访问可迭代对象中的每个元素。</p>\n<p><strong>for 循环</strong>：用来迭代字符串、列表、元组或字典等可迭代对象的一种循环。</p>\n<p><strong>索引变量</strong>：变量的值为代表可迭代对象中索引的一个数字。</p>\n<p><strong>while 循环</strong>：只要表达式的值为 <code>True</code> 则持续执行的一种循环。</p>\n<p><strong>死循环</strong>：永远都不会终止的循环。</p>\n<p><strong>break 语句</strong>：带关键字 <code>break</code> 的语句，用来终止循环。</p>\n<p><strong>continue 语句</strong>：带关键字 <code>continue</code> 的语句，用来终止循环的当前迭代，并进入到下一次迭代。</p>\n<p><strong>外循环</strong>：内部包含嵌套循环的循环。</p>\n<p><strong>内循环</strong>：嵌套在另一个循环中的循环。</p>\n<h3 id=\"78\">7.8　挑战练习</h3>\n<p>1．打印以下列表 <code>[\"The Walking Dead\", \"Entourage\", \"The Sopranos\", \"The Vampire Diaries\"]</code> 中的每个元素。</p>\n<p>2．打印从 25 到 50 之间的所有数字。</p>\n<p>3．打印第一个挑战练习中的每个元素及其索引。</p>\n<p>4．编写一个包含死循环和数字列表的程序（可选择输入 q 退出）。每次循环时，请用户猜一个在列表中的数字，然后告知其猜测是否正确。</p>\n<p>5．将列表 <code>[8, 19, 148, 4]</code> 中的所有数字，与列表 <code>[9, 1, 33, 83]</code> 中的所有数字相乘，并将结果添加到第 3 个列表中。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","slug":"Python无师自通/7_loop","published":1,"date":"2019-06-05T04:36:33.627Z","updated":"2019-06-05T04:36:33.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwiqpovn0000qjh7xai6qcuv","content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>循环</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#71for\">7.1　for 循环</a></li>\n<li><a href=\"#72range\">7.2　range 函数</a></li>\n<li><a href=\"#73while\">7.3　while 循环</a></li>\n<li><a href=\"#74break\">7.4　break 语句</a></li>\n<li><a href=\"#75continue\">7.5　continue 语句</a></li>\n<li><a href=\"#76\">7.6　嵌套循环</a></li>\n<li><a href=\"#77\">7.7　术语表</a></li>\n<li><a href=\"#78\">7.8　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“百分之八十的成功只是出席。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——伍迪 · 艾伦（Woody Allen）</span></p>\n</blockquote>\n<p>之前书中介绍的第二个程序打印 <code>Hello, World!</code> 100 次，就是使用<strong>循环</strong>（loop）实现的。循环的意义是直到代码中定义的条件满足时才停止执行的代码块。本章将学习循环及其使用方法。</p>\n<h3 id=\"71for\">7.1　for 循环</h3>\n<p>本节将介绍如何使用 <strong>for 循环</strong>：一种用来遍历可迭代对象的循环。这个过程被称为<strong>遍历</strong>（iterating）。我们可使用 for 循环来定义可迭代对象中每个元素都要执行一次的指令，然后在指令中对每个元素进行访问和操作。例如，可使用 for 循环遍历一个字符串列表，并使用 <code>upper</code> 方法打印每个字符大写后的字符串。</p>\n<p>可使用语法 <code>\"for [变量名] in [可迭代对象名]: [指令]\"</code> 定义 for 循环，其中[变量名]是计划赋给可迭代对象中每个元素值的变量名称，[指令]是每次循环要执行的代码。下面是一个遍历字符串中每个字符的 for 循环：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jya6kpm</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  name = <span class=\"hljs-string\">\"Ted\"</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">for</span></strong> character <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">name:</span>\n<span class=\"hljs-number\">6</span>      print(character)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> T\n<span class=\"hljs-meta\">&gt;&gt;</span> e\n<span class=\"hljs-meta\">&gt;&gt;</span> d</code></pre>\n<p>每一次循环，变量 <code>character</code> 都会被赋给可迭代对象 <code>name</code> 中的一个元素。第一次循环时打印的结果是 <code>T</code>，因为变量 <code>character</code> 被赋予了可迭代对象 <code>name</code> 中第一个元素的值；以此类推，第二次打印的结果就是 <code>e</code>，直到可迭代对象中的每个元素都遍历完。</p>\n<p>下面是使用 for 循环遍历列表元素的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zeftpq8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  shows = [<span class=\"hljs-string\">\"GOT\"</span>,\n<span class=\"hljs-number\">5</span>           <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">6</span>           <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">shows:</span>\n<span class=\"hljs-number\">8</span>      print(show)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> GOT\n<span class=\"hljs-meta\">&gt;&gt;</span> Narcos\n<span class=\"hljs-meta\">&gt;&gt;</span> Vice</code></pre>\n<p>下面是 for 循环遍历元组中元素的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gpr5a6e</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  coms = (<span class=\"hljs-string\">\"A. Development\"</span>,\n<span class=\"hljs-number\">5</span>          <span class=\"hljs-string\">\"Friends\"</span>,\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-string\">\"Always Sunny\"</span>)\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">coms:</span>\n<span class=\"hljs-number\">8</span>      print(show)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> A. Development\n<span class=\"hljs-meta\">&gt;&gt;</span> Friends\n<span class=\"hljs-meta\">&gt;&gt;</span> Always Sunny</code></pre>\n<p>下面是 for 循环遍历字典元素的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jk7do9b</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  people = {<span class=\"hljs-string\">\"G. Bluth II\"</span>:\n<span class=\"hljs-number\">5</span>            <span class=\"hljs-string\">\"A. Development\"</span>,\n<span class=\"hljs-number\">6</span>            <span class=\"hljs-string\">\"Barney\"</span>:\n<span class=\"hljs-number\">7</span>            <span class=\"hljs-string\">\"HIMYM\"</span>,\n<span class=\"hljs-number\">8</span>            <span class=\"hljs-string\">\"Dennis\"</span>:\n09            <span class=\"hljs-string\">\"Always Sunny\"</span>\n<span class=\"hljs-number\">10</span>            }\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  <strong><span class=\"hljs-keyword\">for</span></strong> character <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">people:</span>\n<span class=\"hljs-number\">14</span>      print(character)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Dennis\n<span class=\"hljs-meta\">&gt;&gt;</span> Barney\n<span class=\"hljs-meta\">&gt;&gt;</span> G. Bluth II</code></pre>\n<p>也可以使用 for 循环修改可变且可迭代对象中的元素，示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8wvp8c</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  tv = [<span class=\"hljs-string\">\"GOT\"</span>,\n<span class=\"hljs-number\">05</span>        <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">06</span>        <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">07</span>  i = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> tv:\n<span class=\"hljs-number\">09</span>      <span class=\"hljs-keyword\">new</span> = tv[i]\n<span class=\"hljs-number\">10</span>      <span class=\"hljs-keyword\">new</span> = <span class=\"hljs-keyword\">new</span>.upper()\n<span class=\"hljs-number\">11</span>      tv[i] = <span class=\"hljs-keyword\">new</span>\n<span class=\"hljs-number\">12</span>      i += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  <span class=\"hljs-built_in\">print</span>(tv)\n\n&gt;&gt; [<span class=\"hljs-string\">'GOT'</span>, <span class=\"hljs-string\">'NARCOS'</span>, <span class=\"hljs-string\">'VICE'</span>]</code></pre>\n<p>上例中使用 for 循环遍历了列表 <code>tv</code>，并通过一个<strong>索引变量</strong>（index variable）跟踪列表内当前的元素。索引变量是代表可迭代对象中索引的一个整数，起始值为 0，每循环一次索引变量的值递增一个。可以通过索引变量来获取列表中当前的元素，保存在变量 <code>new</code> 中。然后对 <code>new</code> 调用 <code>upper</code> 方法并保存结果，再用索引变量替换列表中的当前元素。最后，将 <code>i</code> 的值递增，确保在下一次循环时可以获得下一个元素。</p>\n<p>由于访问可迭代对象中索引和元素是很常见的操作，Python 提供了一个专门的语法：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z45g63j</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  tv = [<span class=\"hljs-string\">\"GOT\"</span>, <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">5</span>        <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">6</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i, show <strong><span class=\"hljs-keyword\">in</span></strong> enumerate(tv):\n<span class=\"hljs-number\">07</span>      <span class=\"hljs-keyword\">new</span> = tv[i]\n<span class=\"hljs-number\">08</span>      <span class=\"hljs-keyword\">new</span> = <span class=\"hljs-keyword\">new</span>.upper()\n<span class=\"hljs-number\">09</span>      tv[i] = <span class=\"hljs-keyword\">new</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  <span class=\"hljs-built_in\">print</span>(tv)\n\n&gt;&gt; [<span class=\"hljs-string\">'GOT'</span>, <span class=\"hljs-string\">'NARCOS'</span>, <span class=\"hljs-string\">'VICE'</span>]</code></pre>\n<p>上例中没有遍历 <code>tv</code> 列表，而是将其调给了 <code>enumerate</code> 函数去遍历该函数返回的结果。<code>enumerate</code> 函数会返回一个对应当前元素索引的值，可保存在变量 <code>i</code> 中。</p>\n<p>还可以使用 for 循环在可变可迭代对象之间传递数据。例如，使用两个 for 循环获取两个不同列表中的所有字符串，然后将每个字符大写，并放入一个新的列表中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcvgklh</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  tv = [<span class=\"hljs-string\">\"GOT\"</span>, <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">05</span>        <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">06</span>  coms = [<span class=\"hljs-string\">\"Arrested Development\"</span>,\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"friends\"</span>,\n08          <span class=\"hljs-string\">\"Always Sunny\"</span>]\n09  all_shows = []\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">tv:</span>\n<span class=\"hljs-number\">13</span>      show = show.upper()\n<span class=\"hljs-number\">14</span>      all_shows.append(show)\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">coms:</span>\n<span class=\"hljs-number\">18</span>      show = show.upper()\n<span class=\"hljs-number\">19</span>      all_shows.append(show)\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>\n<span class=\"hljs-number\">22</span>  print(all_shows)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'GOT'</span>, <span class=\"hljs-string\">'NARCOS'</span>, <span class=\"hljs-string\">'VICE'</span>, <span class=\"hljs-string\">'ARRESTED DEVELOPMENT'</span>, <span class=\"hljs-string\">'FRIENDS'</span>, <span class=\"hljs-string\">'ALWAYS SUNNY'</span>]</code></pre>\n<p>上例中有 3 个列表：<code>tv</code>、<code>coms</code> 和 <code>all_shows</code>。在第一个循环中，遍历了列表 <code>tv</code> 中的所有元素，使用 <code>upper</code> 方法将其中每个元素都大写，然后再通过 <code>append</code> 方法添加每个元素至 <code>all_shows</code>。在第二个循环中，对列表 <code>coms</code> 做同样的操作。打印 <code>all_shows</code> 时，列表会包含另外两个列表中所有的元素，并且每个元素都是大写的。</p>\n<h3 id=\"72range\">7.2　range 函数</h3>\n<p>可使用内置的 <code>range</code> 函数创建一个整数序列，然后通过 for 循环遍历。<code>range</code> 函数接受两个参数：序列起始数字和结束数字，返回的整数序列包含从第一个参数到第二个参数之间（不含第二个参数）的所有整数。使用 <code>range</code> 函数创建数字序列并遍历的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hh5t8rw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span> <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">11</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n…\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span></code></pre>\n<p>上例中使用 for 循环打印了 <code>range</code> 函数返回的可迭代对象中的所有数字。程序员通常将用来遍历整数列表的变量命名为 i。</p>\n<h3 id=\"73while\">7.3　while 循环</h3>\n<p>下面介绍如何使用 <strong>while 循环</strong>：它是一种只要表达式的值为 <code>True</code> 就一直执行代码的循环。while 循环的语法是“<code>while [表达式]: [执行代码]</code>”，其中“<code>[表达式]</code>”是决定循环是否继续进行的表达式，“<code>[执行代码]</code>”则是只要循环继续就执行的代码。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2gwlcy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">while</span></strong> x &gt; <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">6</span>      print(<span class=\"hljs-string\">'{}'</span>.format(x))\n<span class=\"hljs-number\">7</span>      x -= <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">8</span>  print(<span class=\"hljs-string\">\"Happy New Year!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">8</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">7</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Happy New Year!</code></pre>\n<p>只要 while 循环的代码头中定义的表达式“<code>x &gt; 0</code>”求值为 <code>True</code>，循环主体中定义的代码将一直执行下去。第一次循环时，<code>x</code> 的值为 10，表达式 <code>x &gt; 0</code> 的值为 <code>True</code>，因此 while 循环打印 <code>x</code> 的值，并将它的值递减 <code>1</code>，这时 <code>x</code> 的值变成了 9。下一次循环时，还会打印 <code>x</code> 的值，并递减为 8。这个过程一直持续到 <code>x</code> 的值递减为 0，这时 <code>x &gt; 0</code> 的求值为 <code>False</code>，循环结束。Python 将执行循环后面的下一行代码，打印 <code>Happy New Year!</code>。</p>\n<p>如果你定义的 while 循环的表达式求值永远为 <code>True</code>，循环将不会停止执行。一个不会停止执行的循环也被称为<strong>死循环</strong>（infinite loop）。下面就是一个死循环的示例（准备好按 Ctrl+c 强制终止死循环）：</p>\n<pre class=\"代码无行号\"><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hcwvfk8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">while</span></strong> <span class=\"hljs-keyword\">True</span>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, World!\n…</code></pre>\n<p>因为只要代码头中定义的表达式求值为 <code>True</code>，<code>True</code> 的值永远为 <code>True</code>，所以该循环将一直执行下去。</p>\n<h3 id=\"74break\">7.4　break 语句</h3>\n<p>可使用 break <strong>语句</strong>（带关键字 <code>break</code> 的语句）来终止循环。下面这个循环示例会执行 100 次：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrdh88c</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n…</code></pre>\n<p>如果添加一个 break 语句，那么循环只会执行一次：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhxf3uk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n<span class=\"hljs-number\">6</span>      <strong><span class=\"hljs-keyword\">break</span></strong>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span></code></pre>\n<p>只要 Python 遇到 break 语句，循环就会终止。我们可以使用 while 循环和 <code>break</code> 关键字编写一个程序，不断地请求用户提供输入，如果输入 q 则退出。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jmak8tr</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  qs = [<span class=\"hljs-string\">\"What is your name?\"</span>,\n<span class=\"hljs-number\">05</span>        <span class=\"hljs-string\">\"What is your fav. color?\"</span>,\n<span class=\"hljs-number\">06</span>        <span class=\"hljs-string\">\"What is your quest?\"</span>]\n<span class=\"hljs-number\">07</span>  n = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-keyword\">while</span></strong> True:\n<span class=\"hljs-number\">09</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Type q to quit\"</span>)\n<span class=\"hljs-number\">10</span>      a  = input(qs[n])\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-keyword\">if</span></strong> a == <span class=\"hljs-string\">\"q\"</span>:\n<span class=\"hljs-number\">12</span>          <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">13</span>      n = (n + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">3</span>\n\nType q to quit\nWhat <span class=\"hljs-keyword\">is</span> your name?</code></pre>\n<p>每次循环，程序都会向用户询问一个 <code>qs</code> 列表中的问题。</p>\n<p>其中，<code>n</code> 是索引变量。每次循环都会将表达式 <code>(n + 1) % 3</code> 的值赋给 <code>n</code>，这可以让程序循环调用 <code>qs</code> 列表中的问题。第一次循环的结果是 <code>n</code> 的值为 0。第二次时，<code>n</code> 被赋予了 <code>(0 + 1) % 3</code> 的结果，即 1。接下来，被赋予 <code>(1 + 1) % 3</code> 的结果，即 2。因为只要求模表达式中的第一个数字比第二个小，结果就是第一个数字。最后，<code>n</code> 被赋予 <code>(2 + 1) % 3</code> 的值，又重新变成了 0。</p>\n<h3 id=\"75continue\">7.5　continue 语句</h3>\n<p>可使用 continue <strong>语句</strong>（带关键字 <code>continue</code> 的语句）来终止循环的当前迭代，并进入下一次迭代。假设你想打印从 1 到 5 之间除了 3 以外的所有数字，可通过 for 循环和 continue 语句实现。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hflun4p</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>):\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">if</span></strong> i == <span class=\"hljs-number\">3</span>:\n<span class=\"hljs-number\">6</span>          <strong>continue</strong>\n<span class=\"hljs-number\">7</span>      print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span></code></pre>\n<p>在上述循环中，当 <code>i</code> 的值等于 3 时，程序执行 continue 语句，但不会像 <code>break</code> 关键字那样让循环完全终止，而是会继续进行下一次迭代，跳过本应该执行的其他代码。当 <code>i</code> 等于 3 时，Python 会执行 continue 语句，而不是打印 3。</p>\n<p>通过 while 循环和 continue 语句也可以实现相同的结果。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gp7forl</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  i = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">05</span>  <strong><span class=\"hljs-keyword\">while</span></strong> i &lt;= <span class=\"hljs-number\">5</span> :\n<span class=\"hljs-number\">06</span>      <strong><span class=\"hljs-keyword\">if</span></strong> i == <span class=\"hljs-number\">3</span>:\n<span class=\"hljs-number\">07</span>          i += <span class=\"hljs-number\">1</span>\n08          <strong>continue</strong>\n09      print(i)\n<span class=\"hljs-number\">10</span>      i += <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span></code></pre>\n<h3 id=\"76\">7.6　嵌套循环</h3>\n<p>可以通过多种方式对循环进行组合。例如，可以在一个循环里加入另一个循环，甚至在加入的循环里再加一个循环。循环中可嵌套的循环数量没有限制，但是最好要控制数量不要过多。当一个循环位于另一个循环之内时，它就是嵌套在第一个循环中。这种情况下，内部包含一个循环的循环称为<strong>外循环</strong>（outer loop），嵌套的循环称为<strong>内循环</strong>（inner loop）。当存在嵌套循环时，外循环每遍历一次，内循环就遍历一次其可迭代对象中的所有元素。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gqjxjtq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n<span class=\"hljs-number\">6</span>      <strong><span class=\"hljs-keyword\">for</span></strong> letter <strong><span class=\"hljs-keyword\">in</span></strong> [<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>]:\n<span class=\"hljs-number\">7</span>          print(letter)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> a\n<span class=\"hljs-meta\">&gt;&gt;</span> b\n<span class=\"hljs-meta\">&gt;&gt;</span> c\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> a\n<span class=\"hljs-meta\">&gt;&gt;</span> b\n<span class=\"hljs-meta\">&gt;&gt;</span> c</code></pre>\n<p>不管外循环运行多少次，嵌套的 for 循环都会遍历完列表 <code>[\"a\", \"b\", \"c\"]</code>。如果将外循环改为运行 3 次，内循环也会遍历列表 3 次。</p>\n<p>可使用两个 for 循环将一个列表中的所有数字，与另一个列表中的所有数字相加。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z7duawp</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  list1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-number\">05</span>  list2 = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>]\n<span class=\"hljs-number\">06</span>  added = []\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">list1:</span>\n08      <strong><span class=\"hljs-keyword\">for</span></strong> j <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">list2:</span>\n09          added.append(i + j)\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  print(added)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>]</code></pre>\n<p>对于第一个循环遍历列表 <code>list1</code> 中的每个整数，第二个循环遍历自身可迭代对象中的每个整数，并将其与 <code>list1</code> 中的数字相加，然后将结果添加至列表 <code>added</code>。这里将第二个 for 循环中的索引变量命名为 <code>j</code>，因为第一个循环中已使用了 <code>i</code>。</p>\n<p>还可以在 while 循环中嵌套 for 循环，反之亦可。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hnprmmv</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span> <strong><span class=\"hljs-keyword\">while</span></strong> input(<span class=\"hljs-string\">'y or n?'</span>) != <span class=\"hljs-string\">'n'</span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>):\n<span class=\"hljs-number\">6</span>          print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> y or n?y\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>\ny <span class=\"hljs-keyword\">or</span> n?y\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>\ny <span class=\"hljs-keyword\">or</span> n?n\n<span class=\"hljs-meta\">&gt;&gt;</span></code></pre>\n<p>程序在用户输入 n 之前，将会不断地打印数字 1 至 5。</p>\n<h3 id=\"77\">7.7　术语表</h3>\n<p><strong>循环</strong>：在代码中定义的条件未满足之前，将持续执行的一段代码。</p>\n<p><strong>遍历</strong>：使用循环访问可迭代对象中的每个元素。</p>\n<p><strong>for 循环</strong>：用来迭代字符串、列表、元组或字典等可迭代对象的一种循环。</p>\n<p><strong>索引变量</strong>：变量的值为代表可迭代对象中索引的一个数字。</p>\n<p><strong>while 循环</strong>：只要表达式的值为 <code>True</code> 则持续执行的一种循环。</p>\n<p><strong>死循环</strong>：永远都不会终止的循环。</p>\n<p><strong>break 语句</strong>：带关键字 <code>break</code> 的语句，用来终止循环。</p>\n<p><strong>continue 语句</strong>：带关键字 <code>continue</code> 的语句，用来终止循环的当前迭代，并进入到下一次迭代。</p>\n<p><strong>外循环</strong>：内部包含嵌套循环的循环。</p>\n<p><strong>内循环</strong>：嵌套在另一个循环中的循环。</p>\n<h3 id=\"78\">7.8　挑战练习</h3>\n<p>1．打印以下列表 <code>[\"The Walking Dead\", \"Entourage\", \"The Sopranos\", \"The Vampire Diaries\"]</code> 中的每个元素。</p>\n<p>2．打印从 25 到 50 之间的所有数字。</p>\n<p>3．打印第一个挑战练习中的每个元素及其索引。</p>\n<p>4．编写一个包含死循环和数字列表的程序（可选择输入 q 退出）。每次循环时，请用户猜一个在列表中的数字，然后告知其猜测是否正确。</p>\n<p>5．将列表 <code>[8, 19, 148, 4]</code> 中的所有数字，与列表 <code>[9, 1, 33, 83]</code> 中的所有数字相乘，并将结果添加到第 3 个列表中。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>循环</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#71for\">7.1　for 循环</a></li>\n<li><a href=\"#72range\">7.2　range 函数</a></li>\n<li><a href=\"#73while\">7.3　while 循环</a></li>\n<li><a href=\"#74break\">7.4　break 语句</a></li>\n<li><a href=\"#75continue\">7.5　continue 语句</a></li>\n<li><a href=\"#76\">7.6　嵌套循环</a></li>\n<li><a href=\"#77\">7.7　术语表</a></li>\n<li><a href=\"#78\">7.8　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“百分之八十的成功只是出席。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——伍迪 · 艾伦（Woody Allen）</span></p>\n</blockquote>\n<p>之前书中介绍的第二个程序打印 <code>Hello, World!</code> 100 次，就是使用<strong>循环</strong>（loop）实现的。循环的意义是直到代码中定义的条件满足时才停止执行的代码块。本章将学习循环及其使用方法。</p>\n<h3 id=\"71for\">7.1　for 循环</h3>\n<p>本节将介绍如何使用 <strong>for 循环</strong>：一种用来遍历可迭代对象的循环。这个过程被称为<strong>遍历</strong>（iterating）。我们可使用 for 循环来定义可迭代对象中每个元素都要执行一次的指令，然后在指令中对每个元素进行访问和操作。例如，可使用 for 循环遍历一个字符串列表，并使用 <code>upper</code> 方法打印每个字符大写后的字符串。</p>\n<p>可使用语法 <code>\"for [变量名] in [可迭代对象名]: [指令]\"</code> 定义 for 循环，其中[变量名]是计划赋给可迭代对象中每个元素值的变量名称，[指令]是每次循环要执行的代码。下面是一个遍历字符串中每个字符的 for 循环：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jya6kpm</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  name = <span class=\"hljs-string\">\"Ted\"</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">for</span></strong> character <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">name:</span>\n<span class=\"hljs-number\">6</span>      print(character)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> T\n<span class=\"hljs-meta\">&gt;&gt;</span> e\n<span class=\"hljs-meta\">&gt;&gt;</span> d</code></pre>\n<p>每一次循环，变量 <code>character</code> 都会被赋给可迭代对象 <code>name</code> 中的一个元素。第一次循环时打印的结果是 <code>T</code>，因为变量 <code>character</code> 被赋予了可迭代对象 <code>name</code> 中第一个元素的值；以此类推，第二次打印的结果就是 <code>e</code>，直到可迭代对象中的每个元素都遍历完。</p>\n<p>下面是使用 for 循环遍历列表元素的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zeftpq8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  shows = [<span class=\"hljs-string\">\"GOT\"</span>,\n<span class=\"hljs-number\">5</span>           <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">6</span>           <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">shows:</span>\n<span class=\"hljs-number\">8</span>      print(show)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> GOT\n<span class=\"hljs-meta\">&gt;&gt;</span> Narcos\n<span class=\"hljs-meta\">&gt;&gt;</span> Vice</code></pre>\n<p>下面是 for 循环遍历元组中元素的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gpr5a6e</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  coms = (<span class=\"hljs-string\">\"A. Development\"</span>,\n<span class=\"hljs-number\">5</span>          <span class=\"hljs-string\">\"Friends\"</span>,\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-string\">\"Always Sunny\"</span>)\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">coms:</span>\n<span class=\"hljs-number\">8</span>      print(show)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> A. Development\n<span class=\"hljs-meta\">&gt;&gt;</span> Friends\n<span class=\"hljs-meta\">&gt;&gt;</span> Always Sunny</code></pre>\n<p>下面是 for 循环遍历字典元素的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jk7do9b</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  people = {<span class=\"hljs-string\">\"G. Bluth II\"</span>:\n<span class=\"hljs-number\">5</span>            <span class=\"hljs-string\">\"A. Development\"</span>,\n<span class=\"hljs-number\">6</span>            <span class=\"hljs-string\">\"Barney\"</span>:\n<span class=\"hljs-number\">7</span>            <span class=\"hljs-string\">\"HIMYM\"</span>,\n<span class=\"hljs-number\">8</span>            <span class=\"hljs-string\">\"Dennis\"</span>:\n09            <span class=\"hljs-string\">\"Always Sunny\"</span>\n<span class=\"hljs-number\">10</span>            }\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  <strong><span class=\"hljs-keyword\">for</span></strong> character <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">people:</span>\n<span class=\"hljs-number\">14</span>      print(character)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Dennis\n<span class=\"hljs-meta\">&gt;&gt;</span> Barney\n<span class=\"hljs-meta\">&gt;&gt;</span> G. Bluth II</code></pre>\n<p>也可以使用 for 循环修改可变且可迭代对象中的元素，示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8wvp8c</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  tv = [<span class=\"hljs-string\">\"GOT\"</span>,\n<span class=\"hljs-number\">05</span>        <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">06</span>        <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">07</span>  i = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> tv:\n<span class=\"hljs-number\">09</span>      <span class=\"hljs-keyword\">new</span> = tv[i]\n<span class=\"hljs-number\">10</span>      <span class=\"hljs-keyword\">new</span> = <span class=\"hljs-keyword\">new</span>.upper()\n<span class=\"hljs-number\">11</span>      tv[i] = <span class=\"hljs-keyword\">new</span>\n<span class=\"hljs-number\">12</span>      i += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  <span class=\"hljs-built_in\">print</span>(tv)\n\n&gt;&gt; [<span class=\"hljs-string\">'GOT'</span>, <span class=\"hljs-string\">'NARCOS'</span>, <span class=\"hljs-string\">'VICE'</span>]</code></pre>\n<p>上例中使用 for 循环遍历了列表 <code>tv</code>，并通过一个<strong>索引变量</strong>（index variable）跟踪列表内当前的元素。索引变量是代表可迭代对象中索引的一个整数，起始值为 0，每循环一次索引变量的值递增一个。可以通过索引变量来获取列表中当前的元素，保存在变量 <code>new</code> 中。然后对 <code>new</code> 调用 <code>upper</code> 方法并保存结果，再用索引变量替换列表中的当前元素。最后，将 <code>i</code> 的值递增，确保在下一次循环时可以获得下一个元素。</p>\n<p>由于访问可迭代对象中索引和元素是很常见的操作，Python 提供了一个专门的语法：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z45g63j</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  tv = [<span class=\"hljs-string\">\"GOT\"</span>, <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">5</span>        <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">6</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i, show <strong><span class=\"hljs-keyword\">in</span></strong> enumerate(tv):\n<span class=\"hljs-number\">07</span>      <span class=\"hljs-keyword\">new</span> = tv[i]\n<span class=\"hljs-number\">08</span>      <span class=\"hljs-keyword\">new</span> = <span class=\"hljs-keyword\">new</span>.upper()\n<span class=\"hljs-number\">09</span>      tv[i] = <span class=\"hljs-keyword\">new</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  <span class=\"hljs-built_in\">print</span>(tv)\n\n&gt;&gt; [<span class=\"hljs-string\">'GOT'</span>, <span class=\"hljs-string\">'NARCOS'</span>, <span class=\"hljs-string\">'VICE'</span>]</code></pre>\n<p>上例中没有遍历 <code>tv</code> 列表，而是将其调给了 <code>enumerate</code> 函数去遍历该函数返回的结果。<code>enumerate</code> 函数会返回一个对应当前元素索引的值，可保存在变量 <code>i</code> 中。</p>\n<p>还可以使用 for 循环在可变可迭代对象之间传递数据。例如，使用两个 for 循环获取两个不同列表中的所有字符串，然后将每个字符大写，并放入一个新的列表中：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcvgklh</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  tv = [<span class=\"hljs-string\">\"GOT\"</span>, <span class=\"hljs-string\">\"Narcos\"</span>,\n<span class=\"hljs-number\">05</span>        <span class=\"hljs-string\">\"Vice\"</span>]\n<span class=\"hljs-number\">06</span>  coms = [<span class=\"hljs-string\">\"Arrested Development\"</span>,\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"friends\"</span>,\n08          <span class=\"hljs-string\">\"Always Sunny\"</span>]\n09  all_shows = []\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">tv:</span>\n<span class=\"hljs-number\">13</span>      show = show.upper()\n<span class=\"hljs-number\">14</span>      all_shows.append(show)\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>  <strong><span class=\"hljs-keyword\">for</span></strong> show <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">coms:</span>\n<span class=\"hljs-number\">18</span>      show = show.upper()\n<span class=\"hljs-number\">19</span>      all_shows.append(show)\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>\n<span class=\"hljs-number\">22</span>  print(all_shows)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'GOT'</span>, <span class=\"hljs-string\">'NARCOS'</span>, <span class=\"hljs-string\">'VICE'</span>, <span class=\"hljs-string\">'ARRESTED DEVELOPMENT'</span>, <span class=\"hljs-string\">'FRIENDS'</span>, <span class=\"hljs-string\">'ALWAYS SUNNY'</span>]</code></pre>\n<p>上例中有 3 个列表：<code>tv</code>、<code>coms</code> 和 <code>all_shows</code>。在第一个循环中，遍历了列表 <code>tv</code> 中的所有元素，使用 <code>upper</code> 方法将其中每个元素都大写，然后再通过 <code>append</code> 方法添加每个元素至 <code>all_shows</code>。在第二个循环中，对列表 <code>coms</code> 做同样的操作。打印 <code>all_shows</code> 时，列表会包含另外两个列表中所有的元素，并且每个元素都是大写的。</p>\n<h3 id=\"72range\">7.2　range 函数</h3>\n<p>可使用内置的 <code>range</code> 函数创建一个整数序列，然后通过 for 循环遍历。<code>range</code> 函数接受两个参数：序列起始数字和结束数字，返回的整数序列包含从第一个参数到第二个参数之间（不含第二个参数）的所有整数。使用 <code>range</code> 函数创建数字序列并遍历的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hh5t8rw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span> <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">11</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n…\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span></code></pre>\n<p>上例中使用 for 循环打印了 <code>range</code> 函数返回的可迭代对象中的所有数字。程序员通常将用来遍历整数列表的变量命名为 i。</p>\n<h3 id=\"73while\">7.3　while 循环</h3>\n<p>下面介绍如何使用 <strong>while 循环</strong>：它是一种只要表达式的值为 <code>True</code> 就一直执行代码的循环。while 循环的语法是“<code>while [表达式]: [执行代码]</code>”，其中“<code>[表达式]</code>”是决定循环是否继续进行的表达式，“<code>[执行代码]</code>”则是只要循环继续就执行的代码。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2gwlcy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">while</span></strong> x &gt; <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">6</span>      print(<span class=\"hljs-string\">'{}'</span>.format(x))\n<span class=\"hljs-number\">7</span>      x -= <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">8</span>  print(<span class=\"hljs-string\">\"Happy New Year!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">9</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">8</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">7</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">6</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> Happy New Year!</code></pre>\n<p>只要 while 循环的代码头中定义的表达式“<code>x &gt; 0</code>”求值为 <code>True</code>，循环主体中定义的代码将一直执行下去。第一次循环时，<code>x</code> 的值为 10，表达式 <code>x &gt; 0</code> 的值为 <code>True</code>，因此 while 循环打印 <code>x</code> 的值，并将它的值递减 <code>1</code>，这时 <code>x</code> 的值变成了 9。下一次循环时，还会打印 <code>x</code> 的值，并递减为 8。这个过程一直持续到 <code>x</code> 的值递减为 0，这时 <code>x &gt; 0</code> 的求值为 <code>False</code>，循环结束。Python 将执行循环后面的下一行代码，打印 <code>Happy New Year!</code>。</p>\n<p>如果你定义的 while 循环的表达式求值永远为 <code>True</code>，循环将不会停止执行。一个不会停止执行的循环也被称为<strong>死循环</strong>（infinite loop）。下面就是一个死循环的示例（准备好按 Ctrl+c 强制终止死循环）：</p>\n<pre class=\"代码无行号\"><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hcwvfk8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">while</span></strong> <span class=\"hljs-keyword\">True</span>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n\n&gt;&gt; Hello, World!\n…</code></pre>\n<p>因为只要代码头中定义的表达式求值为 <code>True</code>，<code>True</code> 的值永远为 <code>True</code>，所以该循环将一直执行下去。</p>\n<h3 id=\"74break\">7.4　break 语句</h3>\n<p>可使用 break <strong>语句</strong>（带关键字 <code>break</code> 的语句）来终止循环。下面这个循环示例会执行 100 次：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrdh88c</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n…</code></pre>\n<p>如果添加一个 break 语句，那么循环只会执行一次：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zhxf3uk</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n<span class=\"hljs-number\">6</span>      <strong><span class=\"hljs-keyword\">break</span></strong>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">0</span></code></pre>\n<p>只要 Python 遇到 break 语句，循环就会终止。我们可以使用 while 循环和 <code>break</code> 关键字编写一个程序，不断地请求用户提供输入，如果输入 q 则退出。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jmak8tr</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  qs = [<span class=\"hljs-string\">\"What is your name?\"</span>,\n<span class=\"hljs-number\">05</span>        <span class=\"hljs-string\">\"What is your fav. color?\"</span>,\n<span class=\"hljs-number\">06</span>        <span class=\"hljs-string\">\"What is your quest?\"</span>]\n<span class=\"hljs-number\">07</span>  n = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-keyword\">while</span></strong> True:\n<span class=\"hljs-number\">09</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"Type q to quit\"</span>)\n<span class=\"hljs-number\">10</span>      a  = input(qs[n])\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-keyword\">if</span></strong> a == <span class=\"hljs-string\">\"q\"</span>:\n<span class=\"hljs-number\">12</span>          <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">13</span>      n = (n + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">3</span>\n\nType q to quit\nWhat <span class=\"hljs-keyword\">is</span> your name?</code></pre>\n<p>每次循环，程序都会向用户询问一个 <code>qs</code> 列表中的问题。</p>\n<p>其中，<code>n</code> 是索引变量。每次循环都会将表达式 <code>(n + 1) % 3</code> 的值赋给 <code>n</code>，这可以让程序循环调用 <code>qs</code> 列表中的问题。第一次循环的结果是 <code>n</code> 的值为 0。第二次时，<code>n</code> 被赋予了 <code>(0 + 1) % 3</code> 的结果，即 1。接下来，被赋予 <code>(1 + 1) % 3</code> 的结果，即 2。因为只要求模表达式中的第一个数字比第二个小，结果就是第一个数字。最后，<code>n</code> 被赋予 <code>(2 + 1) % 3</code> 的值，又重新变成了 0。</p>\n<h3 id=\"75continue\">7.5　continue 语句</h3>\n<p>可使用 continue <strong>语句</strong>（带关键字 <code>continue</code> 的语句）来终止循环的当前迭代，并进入下一次迭代。假设你想打印从 1 到 5 之间除了 3 以外的所有数字，可通过 for 循环和 continue 语句实现。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hflun4p</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>):\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">if</span></strong> i == <span class=\"hljs-number\">3</span>:\n<span class=\"hljs-number\">6</span>          <strong>continue</strong>\n<span class=\"hljs-number\">7</span>      print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span></code></pre>\n<p>在上述循环中，当 <code>i</code> 的值等于 3 时，程序执行 continue 语句，但不会像 <code>break</code> 关键字那样让循环完全终止，而是会继续进行下一次迭代，跳过本应该执行的其他代码。当 <code>i</code> 等于 3 时，Python 会执行 continue 语句，而不是打印 3。</p>\n<p>通过 while 循环和 continue 语句也可以实现相同的结果。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gp7forl</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  i = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">05</span>  <strong><span class=\"hljs-keyword\">while</span></strong> i &lt;= <span class=\"hljs-number\">5</span> :\n<span class=\"hljs-number\">06</span>      <strong><span class=\"hljs-keyword\">if</span></strong> i == <span class=\"hljs-number\">3</span>:\n<span class=\"hljs-number\">07</span>          i += <span class=\"hljs-number\">1</span>\n08          <strong>continue</strong>\n09      print(i)\n<span class=\"hljs-number\">10</span>      i += <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">5</span></code></pre>\n<h3 id=\"76\">7.6　嵌套循环</h3>\n<p>可以通过多种方式对循环进行组合。例如，可以在一个循环里加入另一个循环，甚至在加入的循环里再加一个循环。循环中可嵌套的循环数量没有限制，但是最好要控制数量不要过多。当一个循环位于另一个循环之内时，它就是嵌套在第一个循环中。这种情况下，内部包含一个循环的循环称为<strong>外循环</strong>（outer loop），嵌套的循环称为<strong>内循环</strong>（inner loop）。当存在嵌套循环时，外循环每遍历一次，内循环就遍历一次其可迭代对象中的所有元素。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gqjxjtq</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>):\n<span class=\"hljs-number\">5</span>      print(i)\n<span class=\"hljs-number\">6</span>      <strong><span class=\"hljs-keyword\">for</span></strong> letter <strong><span class=\"hljs-keyword\">in</span></strong> [<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>]:\n<span class=\"hljs-number\">7</span>          print(letter)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> a\n<span class=\"hljs-meta\">&gt;&gt;</span> b\n<span class=\"hljs-meta\">&gt;&gt;</span> c\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> a\n<span class=\"hljs-meta\">&gt;&gt;</span> b\n<span class=\"hljs-meta\">&gt;&gt;</span> c</code></pre>\n<p>不管外循环运行多少次，嵌套的 for 循环都会遍历完列表 <code>[\"a\", \"b\", \"c\"]</code>。如果将外循环改为运行 3 次，内循环也会遍历列表 3 次。</p>\n<p>可使用两个 for 循环将一个列表中的所有数字，与另一个列表中的所有数字相加。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z7duawp</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  list1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-number\">05</span>  list2 = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>]\n<span class=\"hljs-number\">06</span>  added = []\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">list1:</span>\n08      <strong><span class=\"hljs-keyword\">for</span></strong> j <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-symbol\">list2:</span>\n09          added.append(i + j)\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  print(added)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>]</code></pre>\n<p>对于第一个循环遍历列表 <code>list1</code> 中的每个整数，第二个循环遍历自身可迭代对象中的每个整数，并将其与 <code>list1</code> 中的数字相加，然后将结果添加至列表 <code>added</code>。这里将第二个 for 循环中的索引变量命名为 <code>j</code>，因为第一个循环中已使用了 <code>i</code>。</p>\n<p>还可以在 while 循环中嵌套 for 循环，反之亦可。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hnprmmv</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span> <strong><span class=\"hljs-keyword\">while</span></strong> input(<span class=\"hljs-string\">'y or n?'</span>) != <span class=\"hljs-string\">'n'</span>:\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>):\n<span class=\"hljs-number\">6</span>          print(i)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> y or n?y\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>\ny <span class=\"hljs-keyword\">or</span> n?y\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>\ny <span class=\"hljs-keyword\">or</span> n?n\n<span class=\"hljs-meta\">&gt;&gt;</span></code></pre>\n<p>程序在用户输入 n 之前，将会不断地打印数字 1 至 5。</p>\n<h3 id=\"77\">7.7　术语表</h3>\n<p><strong>循环</strong>：在代码中定义的条件未满足之前，将持续执行的一段代码。</p>\n<p><strong>遍历</strong>：使用循环访问可迭代对象中的每个元素。</p>\n<p><strong>for 循环</strong>：用来迭代字符串、列表、元组或字典等可迭代对象的一种循环。</p>\n<p><strong>索引变量</strong>：变量的值为代表可迭代对象中索引的一个数字。</p>\n<p><strong>while 循环</strong>：只要表达式的值为 <code>True</code> 则持续执行的一种循环。</p>\n<p><strong>死循环</strong>：永远都不会终止的循环。</p>\n<p><strong>break 语句</strong>：带关键字 <code>break</code> 的语句，用来终止循环。</p>\n<p><strong>continue 语句</strong>：带关键字 <code>continue</code> 的语句，用来终止循环的当前迭代，并进入到下一次迭代。</p>\n<p><strong>外循环</strong>：内部包含嵌套循环的循环。</p>\n<p><strong>内循环</strong>：嵌套在另一个循环中的循环。</p>\n<h3 id=\"78\">7.8　挑战练习</h3>\n<p>1．打印以下列表 <code>[\"The Walking Dead\", \"Entourage\", \"The Sopranos\", \"The Vampire Diaries\"]</code> 中的每个元素。</p>\n<p>2．打印从 25 到 50 之间的所有数字。</p>\n<p>3．打印第一个挑战练习中的每个元素及其索引。</p>\n<p>4．编写一个包含死循环和数字列表的程序（可选择输入 q 退出）。每次循环时，请用户猜一个在列表中的数字，然后告知其猜测是否正确。</p>\n<p>5．将列表 <code>[8, 19, 148, 4]</code> 中的所有数字，与列表 <code>[9, 1, 33, 83]</code> 中的所有数字相乘，并将结果添加到第 3 个列表中。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>"},{"title":"字符串操作","_content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>字符串操作</title>\n</head>\n<body>\n<article id=\"articleDiv\">\n    <div class=\"mazi-article-content dont-break-out\"><p></p>\n        <div class=\"toc\">\n            <ul>\n                <li>\n                    <ul>\n                        <li>\n                            <ul>\n                                <li><a href=\"#61\">6.1　三引号字符串</a></li>\n                                <li><a href=\"#62\">6.2　索引</a></li>\n                                <li><a href=\"#63\">6.3　字符串是不可变的</a></li>\n                                <li><a href=\"#64\">6.4　字符串拼接</a></li>\n                                <li><a href=\"#65\">6.5　字符串乘法</a></li>\n                                <li><a href=\"#66\">6.6　改变大小写</a></li>\n                                <li><a href=\"#67\">6.7　格式化</a></li>\n                                <li><a href=\"#68\">6.8　分割</a></li>\n                                <li><a href=\"#69\">6.9　连接</a></li>\n                                <li><a href=\"#610\">6.10　去除空格</a></li>\n                                <li><a href=\"#611\">6.11　替换</a></li>\n                                <li><a href=\"#612\">6.12　查找索引</a></li>\n                                <li><a href=\"#613in\">6.13　in 关键字</a></li>\n                                <li><a href=\"#614\">6.14　字符串转义</a></li>\n                                <li><a href=\"#615\">6.15　换行符</a></li>\n                                <li><a href=\"#616\">6.16　切片</a></li>\n                                <li><a href=\"#617\">6.17　术语表</a></li>\n                                <li><a href=\"#618\">6.18　挑战练习</a></li>\n                            </ul>\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n        </div>\n        <p></p>\n        <blockquote>\n            <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“理论上，理论和实践没有区别。但实践上，是有区别的。”</span></p>\n            <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——简 · 范德斯奈普特（Jan L. A. van de Snepscheut）</span></p>\n        </blockquote>\n        <p>Python 自带操作字符串的功能，例如在指定位置将字符串分割为两部分，或者改变字符串的大小写。举个例子，假设有一个所有字符都是大写的字符串，现在希望将其全部改为小写，这通过 Python\n            可以轻松实现。在本章中，读者将学习更多有关字符串的知识，并掌握 Python 中操作字符串最有效的工具。</p>\n        <h3 id=\"61\">6.1　三引号字符串</h3>\n        <p>如果字符串跨越一行以上，可以使用三引号：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h59ygda</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"\"\" 第一行\n5      第二行\n6      第三行\n7  \"\"\"</span>\n</code></pre>\n        <p>如果使用单引号或双引号定义一个跨行的字符串，Python 会报告语法错误。</p>\n        <h3 id=\"62\">6.2　索引</h3>\n        <p>与列表和元组一样，字符串也是可迭代的。可使用索引查找字符串中的每个字符。与其他可迭代对象一样，字符串中第一个字符所在的索引为 0，其后每个索引递增 1。</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqqc2jw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">6</span>  author[<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-number\">7</span>  author[<span class=\"hljs-number\">2</span>]\n<span class=\"hljs-number\">8</span>  author[<span class=\"hljs-number\">3</span>]\n<span class=\"hljs-number\">9</span>  author[<span class=\"hljs-number\">4</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'K'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'a'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'f'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'k'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'a'</span>\n</code></pre>\n        <p>上述示例中，可使用索引 0、1、2、3、4 来查找字符串 <code>\"Kafka\"</code> 中的每个字符。如果查找的字符串索引大于最后一个索引的值，Python 会报告异常错误：</p>\n        <pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span\n                class=\"hljs-comment\">//tinyurl.com/zk52tef</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[<span class=\"hljs-number\">5</span>]\n\n&gt;&gt; IndexError: <span class=\"hljs-built_in\">string</span> index out of range\n</code></pre>\n        <p>Python 还支持使用<strong>负索引（negative index）</strong>查找列表中的元素：可用来从右向左查找可迭代对象中元素的索引（必须是一个负数）。使用索引 <code>-1</code>\n            可以查找可迭代对象中的最后一个元素，示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hyju2t5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[-<span class=\"hljs-number\">1</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> a\n</code></pre>\n        <p>负索引 <code>-2</code> 查找的是倒数第二个元素，负索引 <code>-3</code> 查找的是倒数第三个元素，以此类推。</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jtpx7sr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[-<span class=\"hljs-number\">2</span>]\n<span class=\"hljs-number\">6</span>  author[-<span class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> k\n<span class=\"hljs-meta\">&gt;&gt;</span> f\n</code></pre>\n        <h3 id=\"63\">6.3　字符串是不可变的</h3>\n        <p>字符串和元组一样都是不可变的，无法修改字符串中的字符。如果想要修改，就必须创建一个新的字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsr83lv</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ff = <span class=\"hljs-string\">\"F.Fitzgerald\"</span>\n<span class=\"hljs-number\">5</span>  ff = <span class=\"hljs-string\">\"F. Scott Fitzgerald\"</span>\n<span class=\"hljs-number\">6</span>  ff\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'F. Scott Fitzgerald'</span>\n</code></pre>\n        <p>Python 提供了多个从已有字符串中创建新字符串的方法，本章将逐一介绍。</p>\n        <h3 id=\"64\">6.4　字符串拼接</h3>\n        <p>可使用加法操作符，将两个或多个字符串组合在一起，结果就是由第一个字符串中的字符和其他字符串中的字符共同构成的一个新字符串。将字符串组合的做法，被称为字符串拼接。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4z5mlg</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"cat\"</span> + <span\n                    class=\"hljs-string\">\"in\"</span> + <span class=\"hljs-string\">\"hat\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'catinhat'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsrajle</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"cat\"</span> + <span\n                    class=\"hljs-string\">\" in\"</span> + <span class=\"hljs-string\">\" the\"</span> + <span\n                    class=\"hljs-string\">\" hat\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'cat in the hat'</span>\n</code></pre>\n        <h3 id=\"65\">6.5　字符串乘法</h3>\n        <p>可使用乘法操作符，将字符串与数字相乘。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zvm9gng</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Sawyer\"</span> * <span class=\"hljs-number\">3</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> SawyerSawyerSawyer\n</code></pre>\n        <h3 id=\"66\">6.6　改变大小写</h3>\n        <p>可使用字符串的 <code>upper</code> 方法，将字符串中的每个字符改为大写。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hhancz6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"We hold these truths...\"</span>.upper()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'WE HOLD THESE TRUTHS...'</span>\n</code></pre>\n        <p>类似地，可使用字符串的 <code>lower</code> 方法将字符串中的每个字符改为小写。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zkz48u5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"SO IT GOES.\"</span>.lower()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'so it goes.'</span>\n</code></pre>\n        <p>还可使用字符串的 <code>capitalize</code> 方法，将字符串的首字母改为大写。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jp5hexn</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"four score and...\"</span>.capitalize()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Four score and...'</span>\n</code></pre>\n        <h3 id=\"67\">6.7　格式化</h3>\n        <p>可使用 <code>format</code> 方法创建新字符串，该方法会把字符串中的“<code>{}</code>”替换为传入的字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/juvguy8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"William {}\"</span>.format(<span class=\"hljs-string\">\"Faulkner\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'William Faulkner'</span>\n</code></pre>\n        <p>也可以把变量作为参数传递：</p>\n        <pre><code class=\"hljs perl\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcpt9se</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">last</span> = <span class=\"hljs-string\">\"Faulkner\"</span>\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-string\">\"William {}\"</span>.format(<span\n                    class=\"hljs-keyword\">last</span>)\n\n&gt;&gt; <span class=\"hljs-string\">'William Faulkner'</span>\n</code></pre>\n        <p>花括号可重复使用：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z6t6d8n</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"William Faulkner\"</span>\n<span class=\"hljs-number\">5</span>  year_born = <span class=\"hljs-string\">\"1897\"</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-string\">\"{} was born in {}.\"</span>.format(author, year_born)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'William Faulkner was born in 1897.'</span>\n</code></pre>\n        <p>如果要根据用户输入来创建字符串，<code>format</code> 方法很有用。示例如下：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gnrdsj9</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  n1 = input(<span class=\"hljs-string\">\"Enter a noun:\"</span>)\n<span class=\"hljs-number\">05</span>  v = input(<span class=\"hljs-string\">\"Enter a verb:\"</span>)\n<span class=\"hljs-number\">06</span>  adj = input(<span class=\"hljs-string\">\"Enter an adj:\"</span>)\n<span class=\"hljs-number\">07</span>  n2 = input(<span class=\"hljs-string\">\"Enter a noun:\"</span>)\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>  r = <span class=\"hljs-string\">\"\"\"The {} {} the {} {}\n11      \"\"\"</span>.format(n1,\n<span class=\"hljs-number\">12</span>                 v,\n<span class=\"hljs-number\">13</span>                 adj,\n<span class=\"hljs-number\">14</span>                 n2)\n<span class=\"hljs-number\">15</span>  print(r)\n\n&gt;&gt; Enter a noun:\n</code></pre>\n        <p>程序让用户输入两个名词、一个动词和一个形容词，然后通过 <code>fomrat</code> 方法将这些输入创建为一个字符串并打印出来。</p>\n        <h3 id=\"68\">6.8　分割</h3>\n        <p>字符串有一个叫 <code>split</code> 的方法，可用来将字符串分割为两个或多个字符串。需要传入一个字符串作为 <code>split</code>\n            方法的参数，并用其将原字符串分割为多个字符串。例如，可以传入句号作为 <code>split</code> 方法的参数，将字符串 <code>\"I jumped over the puddle. It was 12\n                feet!\"</code> 分割成两个不同的字符串。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/he8u28o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span\n                    class=\"hljs-string\">\"I jumped over the puddle. It was 12 feet!\"</span>.split(<span\n                    class=\"hljs-string\">\".\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">\"I jumped over the puddle\"</span>, <span\n                    class=\"hljs-string\">\"It was 12 feet!\"</span>]\n</code></pre>\n        <p>结果是一个含有两个元素的列表：分别是句号前的所有字符组成的字符串，以及句号后所有字符组成的字符串。</p>\n        <h3 id=\"69\">6.9　连接</h3>\n        <p><code>join</code> 方法可以在字符串的每个字符间添加新字符：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2pjkso</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  first_three = <span class=\"hljs-string\">\"abc\"</span>\n<span class=\"hljs-number\">5</span>  result = <span class=\"hljs-string\">\"+\"</span>.join(first_three)\n<span class=\"hljs-number\">6</span>  result\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'a+b+c'</span>\n</code></pre>\n        <p>也可以在空字符串上调用 <code>join</code> 方法，传入一个字符串列表作为参数，从而将这些字符串连接为一个单一字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z49e3up</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  words = [<span class=\"hljs-string\">\"The\"</span>,\n<span class=\"hljs-number\">05</span>           <span class=\"hljs-string\">\"fox\"</span>,\n<span class=\"hljs-number\">06</span>           <span class=\"hljs-string\">\"jumped\"</span>,\n<span class=\"hljs-number\">07</span>           <span class=\"hljs-string\">\"over\"</span>,\n08           <span class=\"hljs-string\">\"the\"</span>,\n09           <span class=\"hljs-string\">\"fence\"</span>,\n<span class=\"hljs-number\">10</span>           <span class=\"hljs-string\">\".\"</span>]\n<span class=\"hljs-number\">11</span>  one = <span class=\"hljs-string\">\"\"</span>.join(words)\n<span class=\"hljs-number\">12</span>  one\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Thefoxjumpedoverthefence.\n</code></pre>\n        <p>还可以在包含空格符的字符串上，调用 <code>join</code> 方法，创建一个所有单词均由空格符分隔的字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4qq5oy</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  words = [<span class=\"hljs-string\">\"The\"</span>,\n<span class=\"hljs-number\">05</span>           <span class=\"hljs-string\">\"fox\"</span>,\n<span class=\"hljs-number\">06</span>           <span class=\"hljs-string\">\"jumped\"</span>,\n<span class=\"hljs-number\">07</span>           <span class=\"hljs-string\">\"over\"</span>,\n08           <span class=\"hljs-string\">\"the\"</span>,\n09           <span class=\"hljs-string\">\"fence\"</span>,\n<span class=\"hljs-number\">10</span>           <span class=\"hljs-string\">\".\"</span>]\n<span class=\"hljs-number\">11</span>  one = <span class=\"hljs-string\">\" \"</span>.join(words)\n<span class=\"hljs-number\">12</span>  one\n\n<span class=\"hljs-meta\">&gt;&gt;</span> The fox jumped over the fence.\n</code></pre>\n        <h3 id=\"610\">6.10　去除空格</h3>\n        <p>可使用 <code>strip</code> 方法去除字符串开头和末尾的空白字符：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jfndhgx</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  s = <span class=\"hljs-string\">\"   The       \"</span>\n<span class=\"hljs-number\">5</span>  s = s.strip()\n<span class=\"hljs-number\">6</span>  s\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'The'</span>\n</code></pre>\n        <h3 id=\"611\">6.11　替换</h3>\n        <p>在 <code>replace</code> 方法中，第一个参数是要被替换的字符串，第二个参数是用来替换的字符串。可使用第二个字符串替换原字符串中所有与第一个字符串一样的内容。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zha4uwo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  equ = <span class=\"hljs-string\">\"All animals are equal.\"</span>\n<span class=\"hljs-number\">5</span>  equ = equ.replace(<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"@\"</span>)\n<span class=\"hljs-number\">6</span>  print(equ)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> All @nim@ls @re equ@l.\n</code></pre>\n        <h3 id=\"612\">6.12　查找索引</h3>\n        <p>可使用 <code>index</code> 方法，获得字符串中某个字符第一次出现的索引。将希望查找的字符作为参数传入，<code>index</code> 方法可以返回该字符在字符串中第一次出现的索引：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hzc6asc</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"animals\"</span>.index(<span\n                    class=\"hljs-string\">\"m\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n        <p>如果 <code>index</code> 方法没有找到匹配的结果，Python 会报告异常错误。如下所示：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jmtc984</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"animals\"</span>.index(<span\n                    class=\"hljs-string\">\"z\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ValueError:</span> substring not found\n</code></pre>\n        <p>如果不确定是否有匹配的结果，可使用如下异常处理的方法：</p>\n        <pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zl6q4fd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">try</span></strong>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-string\">\"animals\"</span>.index(<span\n                    class=\"hljs-string\">\"z\"</span>)\n<span class=\"hljs-number\">6</span>  <strong><span class=\"hljs-keyword\">except</span></strong>:\n<span class=\"hljs-number\">7</span>      print(<span class=\"hljs-string\">\"Not found.\"</span>)\n\n&gt;&gt; Not found.</code></pre>\n        <h3 id=\"613in\">6.13　in 关键字</h3>\n        <p>关键字 <code>in</code> 可检查某个字符串是否在另一个字符串中，返回结果为 <code>True</code> 或 <code>False</code>：</p>\n        <pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsnygwz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Cat\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> <span\n                    class=\"hljs-string\">\"Cat in the hat.\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z9b3e97</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Bat\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> <span\n                    class=\"hljs-string\">\"Cat in the hat.\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n        <p>在 <code>in</code> 前面加上关键字 <code>not</code>，即可检查某个字符串是否不在另一个字符串中：</p>\n        <pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jz8sygd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-string\">\"Potter\"</span> <strong><span\n                    class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> <span\n                    class=\"hljs-string\">\"Harry\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n        <h3 id=\"614\">6.14　字符串转义</h3>\n        <p>如果在字符串中使用了双引号，则会出现如下语法错误：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zj6hc4r</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 该段代码无法执行。</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <span class=\"hljs-string\">\"She said \"</span>Surely.<span\n                    class=\"hljs-string\">\"\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">SyntaxError:</span> invalid syntax\n</code></pre>\n        <p>在双引号前加上反斜杠，即可解决这个错误：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jdsrr7e</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"She said \\\"Surely.\\\"\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zr7o7d7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">'She said \\\"Surely.\\\"'</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n</code></pre>\n        <p>字符串<strong>转义</strong>（escaping），指的是在 Python 中有特殊意义的字符（上例中为双引号）前加上一个符号，告诉 Python 在本例中该符号代表的是一个字符，而没有特殊意义。在\n            Python 中用反斜杠进行转义。</p>\n        <p>如果在字符串中使用单引号，而非双引号，则不需要进行转义：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hoef63o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"She said 'Surely'\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">\"She said 'Surely'\"</span>\n</code></pre>\n        <p>还可以在单引号中使用双引号，这比对双引号进行转义更加简单：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zkgfawo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n</code></pre>\n        <h3 id=\"615\">6.15　换行符</h3>\n        <p>在字符串中加入 <code>\\n</code> 来表示换行：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zyrhaeg</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"line1\\nline2\\nline3\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> line1\n<span class=\"hljs-meta\">&gt;&gt;</span> line2\n<span class=\"hljs-meta\">&gt;&gt;</span> line3\n</code></pre>\n        <h3 id=\"616\">6.16　切片</h3>\n        <p>\n            <strong>切片</strong>（slicing）可将一个可迭代对象中元素的子集，创建为一个新的可迭代对象。切片的语法是<code>[可迭代对象][[起始索引:结束索引]]</code>。<strong>起始索引</strong>（start\n            index）是开始切片的索引，<strong>结束索引</strong>（end index）是结束索引的位置。</p>\n        <p>进行列表切片的示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2rqj2a</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fict = [<span class=\"hljs-string\">\"Tolstoy\"</span>,\n<span class=\"hljs-number\">5</span>          <span class=\"hljs-string\">\"Camus\"</span>,\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-string\">\"Orwell\"</span>,\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-string\">\"Huxley\"</span>,\n<span class=\"hljs-number\">8</span>          <span class=\"hljs-string\">\"Austin\"</span>]\n<span class=\"hljs-number\">9</span>  fict[<span class=\"hljs-number\">0</span><span class=\"hljs-symbol\">:</span><span\n                    class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Tolstoy'</span>, <span\n                    class=\"hljs-string\">'Camus'</span>, <span class=\"hljs-string\">'Orwell'</span>]\n</code></pre>\n        <p>切片时包含起始索引位置的元素，但不包括结束索引位置的元素。因此，如果要从 <code>\"Tolstoy\"</code>（索引为 0）切片到 <code>\"Orwell\"</code>（索引为 2），则需从索引 0\n            到索引 3 进行切片。</p>\n        <p>字符串切片的示例如下：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hug9euj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">17</span>]\n<span class=\"hljs-number\">8</span>  ivan[<span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">33</span>]\n\n&gt;&gt; <span class=\"hljs-string\">'In place of death'</span>\n&gt;&gt; <span class=\"hljs-string\">' there was light.'</span>\n</code></pre>\n        <p>如果起始索引是 0，那么可以将起始索引的位置留空：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/judcpx4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[:<span class=\"hljs-number\">17</span>]\n\n&gt;&gt; <span class=\"hljs-string\">'In place of death'</span>\n</code></pre>\n        <p>如果结束索引是可迭代对象中最后一个元素的索引，那么可以将结束索引的位置留空：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqoscn4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[<span class=\"hljs-number\">17</span>:]\n\n&gt;&gt; <span class=\"hljs-string\">' there was light.'</span>\n</code></pre>\n        <p>起始索引和结束索引均留空，则会返回原可迭代对象：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqvuqoc</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[:]\n\n&gt;&gt; <span class=\"hljs-string\">\"In place of death there was light.\"</span>\n</code></pre>\n        <h3 id=\"617\">6.17　术语表</h3>\n        <p><strong>负索引</strong>：可用来从右向左查找可迭代对象中元素的索引（必须是一个负数）。</p>\n        <p><strong>转义</strong>：在 Python 中具有特殊意义的字符（如双引号）前加上一个符号，告诉 Python 在本例中该字符代表的只是一个字符，没有特殊意义。</p>\n        <p><strong>切片</strong>：将一个可迭代对象中元素的子集，创建为一个新的可迭代对象。</p>\n        <p><strong>起始索引</strong>：开始切片的索引。</p>\n        <p><strong>结束索引</strong>：结束切片的索引。</p>\n        <h3 id=\"618\">6.18　挑战练习</h3>\n        <p>1．打印字符串 <code>\"Camus\"</code> 中的所有字符。</p>\n        <p>2．编写程序，从用户处获取两个字符串，将其插入字符串 <code>\"Yesterday I wrote a [用户输入1]. I sent it to [用户输入2]!\"</code> 中，并打印新字符串。</p>\n        <p>3．想办法将字符串 <code>\"aldous Huxley was born in 1894.\"</code> 的第一个字符大写，从而使语法正确。</p>\n        <p>4．对字符串 <code>\"Where now? Who now? When now?\"</code> 调用一个方法，返回如下述的列表 <code>[\"Where now?\", \"Who now?\", \"When\n            now?\"]</code>。</p>\n        <p>5．对列表 <code>[\"The\", \"fox\", \"jumped\", \"over\", \"the\", \"fence\", \".\"]</code> 进行处理，将其变成一个语法正确的字符串。每个单词间以空格符分隔，但是单词\n            <code>fence</code> 和句号之间不能有空格符。（别忘了，我们之前已经学过将字符串列表连接为单个字符串的方法。）</p>\n        <p>6．将字符串 <code>\"A screaming comes across the sky.\"</code> 中所有的 <code>\"s\"</code> 字符替换为美元符号。</p>\n        <p>7．找到字符串 <code>\"Hemingway\"</code> 中字符 <code>\"m\"</code> 所在的第一个索引。</p>\n        <p>8．在你最喜欢的书中找一段对话，将其变成一个字符串。</p>\n        <p>9．先后使用字符串拼接和字符串乘法，创建字符串 <code>\"three three three\"</code>。</p>\n        <p>10．对字符串 <code>\"It was bright cold day in April, and the clocks were striking thirteen.\"</code>\n            进行切片，只保留逗号之前的字符。</p>\n        <p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div>\n</article>\n</body>\n</html>","source":"_posts/Python无师自通/6_strings.html","raw":"---\ntitle: 字符串操作\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>字符串操作</title>\n</head>\n<body>\n<article id=\"articleDiv\">\n    <div class=\"mazi-article-content dont-break-out\"><p></p>\n        <div class=\"toc\">\n            <ul>\n                <li>\n                    <ul>\n                        <li>\n                            <ul>\n                                <li><a href=\"#61\">6.1　三引号字符串</a></li>\n                                <li><a href=\"#62\">6.2　索引</a></li>\n                                <li><a href=\"#63\">6.3　字符串是不可变的</a></li>\n                                <li><a href=\"#64\">6.4　字符串拼接</a></li>\n                                <li><a href=\"#65\">6.5　字符串乘法</a></li>\n                                <li><a href=\"#66\">6.6　改变大小写</a></li>\n                                <li><a href=\"#67\">6.7　格式化</a></li>\n                                <li><a href=\"#68\">6.8　分割</a></li>\n                                <li><a href=\"#69\">6.9　连接</a></li>\n                                <li><a href=\"#610\">6.10　去除空格</a></li>\n                                <li><a href=\"#611\">6.11　替换</a></li>\n                                <li><a href=\"#612\">6.12　查找索引</a></li>\n                                <li><a href=\"#613in\">6.13　in 关键字</a></li>\n                                <li><a href=\"#614\">6.14　字符串转义</a></li>\n                                <li><a href=\"#615\">6.15　换行符</a></li>\n                                <li><a href=\"#616\">6.16　切片</a></li>\n                                <li><a href=\"#617\">6.17　术语表</a></li>\n                                <li><a href=\"#618\">6.18　挑战练习</a></li>\n                            </ul>\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n        </div>\n        <p></p>\n        <blockquote>\n            <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“理论上，理论和实践没有区别。但实践上，是有区别的。”</span></p>\n            <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——简 · 范德斯奈普特（Jan L. A. van de Snepscheut）</span></p>\n        </blockquote>\n        <p>Python 自带操作字符串的功能，例如在指定位置将字符串分割为两部分，或者改变字符串的大小写。举个例子，假设有一个所有字符都是大写的字符串，现在希望将其全部改为小写，这通过 Python\n            可以轻松实现。在本章中，读者将学习更多有关字符串的知识，并掌握 Python 中操作字符串最有效的工具。</p>\n        <h3 id=\"61\">6.1　三引号字符串</h3>\n        <p>如果字符串跨越一行以上，可以使用三引号：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h59ygda</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"\"\" 第一行\n5      第二行\n6      第三行\n7  \"\"\"</span>\n</code></pre>\n        <p>如果使用单引号或双引号定义一个跨行的字符串，Python 会报告语法错误。</p>\n        <h3 id=\"62\">6.2　索引</h3>\n        <p>与列表和元组一样，字符串也是可迭代的。可使用索引查找字符串中的每个字符。与其他可迭代对象一样，字符串中第一个字符所在的索引为 0，其后每个索引递增 1。</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqqc2jw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">6</span>  author[<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-number\">7</span>  author[<span class=\"hljs-number\">2</span>]\n<span class=\"hljs-number\">8</span>  author[<span class=\"hljs-number\">3</span>]\n<span class=\"hljs-number\">9</span>  author[<span class=\"hljs-number\">4</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'K'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'a'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'f'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'k'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'a'</span>\n</code></pre>\n        <p>上述示例中，可使用索引 0、1、2、3、4 来查找字符串 <code>\"Kafka\"</code> 中的每个字符。如果查找的字符串索引大于最后一个索引的值，Python 会报告异常错误：</p>\n        <pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span\n                class=\"hljs-comment\">//tinyurl.com/zk52tef</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[<span class=\"hljs-number\">5</span>]\n\n&gt;&gt; IndexError: <span class=\"hljs-built_in\">string</span> index out of range\n</code></pre>\n        <p>Python 还支持使用<strong>负索引（negative index）</strong>查找列表中的元素：可用来从右向左查找可迭代对象中元素的索引（必须是一个负数）。使用索引 <code>-1</code>\n            可以查找可迭代对象中的最后一个元素，示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hyju2t5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[-<span class=\"hljs-number\">1</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> a\n</code></pre>\n        <p>负索引 <code>-2</code> 查找的是倒数第二个元素，负索引 <code>-3</code> 查找的是倒数第三个元素，以此类推。</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jtpx7sr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[-<span class=\"hljs-number\">2</span>]\n<span class=\"hljs-number\">6</span>  author[-<span class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> k\n<span class=\"hljs-meta\">&gt;&gt;</span> f\n</code></pre>\n        <h3 id=\"63\">6.3　字符串是不可变的</h3>\n        <p>字符串和元组一样都是不可变的，无法修改字符串中的字符。如果想要修改，就必须创建一个新的字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsr83lv</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ff = <span class=\"hljs-string\">\"F.Fitzgerald\"</span>\n<span class=\"hljs-number\">5</span>  ff = <span class=\"hljs-string\">\"F. Scott Fitzgerald\"</span>\n<span class=\"hljs-number\">6</span>  ff\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'F. Scott Fitzgerald'</span>\n</code></pre>\n        <p>Python 提供了多个从已有字符串中创建新字符串的方法，本章将逐一介绍。</p>\n        <h3 id=\"64\">6.4　字符串拼接</h3>\n        <p>可使用加法操作符，将两个或多个字符串组合在一起，结果就是由第一个字符串中的字符和其他字符串中的字符共同构成的一个新字符串。将字符串组合的做法，被称为字符串拼接。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4z5mlg</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"cat\"</span> + <span\n                    class=\"hljs-string\">\"in\"</span> + <span class=\"hljs-string\">\"hat\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'catinhat'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsrajle</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"cat\"</span> + <span\n                    class=\"hljs-string\">\" in\"</span> + <span class=\"hljs-string\">\" the\"</span> + <span\n                    class=\"hljs-string\">\" hat\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'cat in the hat'</span>\n</code></pre>\n        <h3 id=\"65\">6.5　字符串乘法</h3>\n        <p>可使用乘法操作符，将字符串与数字相乘。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zvm9gng</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Sawyer\"</span> * <span class=\"hljs-number\">3</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> SawyerSawyerSawyer\n</code></pre>\n        <h3 id=\"66\">6.6　改变大小写</h3>\n        <p>可使用字符串的 <code>upper</code> 方法，将字符串中的每个字符改为大写。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hhancz6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"We hold these truths...\"</span>.upper()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'WE HOLD THESE TRUTHS...'</span>\n</code></pre>\n        <p>类似地，可使用字符串的 <code>lower</code> 方法将字符串中的每个字符改为小写。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zkz48u5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"SO IT GOES.\"</span>.lower()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'so it goes.'</span>\n</code></pre>\n        <p>还可使用字符串的 <code>capitalize</code> 方法，将字符串的首字母改为大写。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jp5hexn</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"four score and...\"</span>.capitalize()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Four score and...'</span>\n</code></pre>\n        <h3 id=\"67\">6.7　格式化</h3>\n        <p>可使用 <code>format</code> 方法创建新字符串，该方法会把字符串中的“<code>{}</code>”替换为传入的字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/juvguy8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"William {}\"</span>.format(<span class=\"hljs-string\">\"Faulkner\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'William Faulkner'</span>\n</code></pre>\n        <p>也可以把变量作为参数传递：</p>\n        <pre><code class=\"hljs perl\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcpt9se</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">last</span> = <span class=\"hljs-string\">\"Faulkner\"</span>\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-string\">\"William {}\"</span>.format(<span\n                    class=\"hljs-keyword\">last</span>)\n\n&gt;&gt; <span class=\"hljs-string\">'William Faulkner'</span>\n</code></pre>\n        <p>花括号可重复使用：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z6t6d8n</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"William Faulkner\"</span>\n<span class=\"hljs-number\">5</span>  year_born = <span class=\"hljs-string\">\"1897\"</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-string\">\"{} was born in {}.\"</span>.format(author, year_born)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'William Faulkner was born in 1897.'</span>\n</code></pre>\n        <p>如果要根据用户输入来创建字符串，<code>format</code> 方法很有用。示例如下：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gnrdsj9</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  n1 = input(<span class=\"hljs-string\">\"Enter a noun:\"</span>)\n<span class=\"hljs-number\">05</span>  v = input(<span class=\"hljs-string\">\"Enter a verb:\"</span>)\n<span class=\"hljs-number\">06</span>  adj = input(<span class=\"hljs-string\">\"Enter an adj:\"</span>)\n<span class=\"hljs-number\">07</span>  n2 = input(<span class=\"hljs-string\">\"Enter a noun:\"</span>)\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>  r = <span class=\"hljs-string\">\"\"\"The {} {} the {} {}\n11      \"\"\"</span>.format(n1,\n<span class=\"hljs-number\">12</span>                 v,\n<span class=\"hljs-number\">13</span>                 adj,\n<span class=\"hljs-number\">14</span>                 n2)\n<span class=\"hljs-number\">15</span>  print(r)\n\n&gt;&gt; Enter a noun:\n</code></pre>\n        <p>程序让用户输入两个名词、一个动词和一个形容词，然后通过 <code>fomrat</code> 方法将这些输入创建为一个字符串并打印出来。</p>\n        <h3 id=\"68\">6.8　分割</h3>\n        <p>字符串有一个叫 <code>split</code> 的方法，可用来将字符串分割为两个或多个字符串。需要传入一个字符串作为 <code>split</code>\n            方法的参数，并用其将原字符串分割为多个字符串。例如，可以传入句号作为 <code>split</code> 方法的参数，将字符串 <code>\"I jumped over the puddle. It was 12\n                feet!\"</code> 分割成两个不同的字符串。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/he8u28o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span\n                    class=\"hljs-string\">\"I jumped over the puddle. It was 12 feet!\"</span>.split(<span\n                    class=\"hljs-string\">\".\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">\"I jumped over the puddle\"</span>, <span\n                    class=\"hljs-string\">\"It was 12 feet!\"</span>]\n</code></pre>\n        <p>结果是一个含有两个元素的列表：分别是句号前的所有字符组成的字符串，以及句号后所有字符组成的字符串。</p>\n        <h3 id=\"69\">6.9　连接</h3>\n        <p><code>join</code> 方法可以在字符串的每个字符间添加新字符：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2pjkso</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  first_three = <span class=\"hljs-string\">\"abc\"</span>\n<span class=\"hljs-number\">5</span>  result = <span class=\"hljs-string\">\"+\"</span>.join(first_three)\n<span class=\"hljs-number\">6</span>  result\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'a+b+c'</span>\n</code></pre>\n        <p>也可以在空字符串上调用 <code>join</code> 方法，传入一个字符串列表作为参数，从而将这些字符串连接为一个单一字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z49e3up</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  words = [<span class=\"hljs-string\">\"The\"</span>,\n<span class=\"hljs-number\">05</span>           <span class=\"hljs-string\">\"fox\"</span>,\n<span class=\"hljs-number\">06</span>           <span class=\"hljs-string\">\"jumped\"</span>,\n<span class=\"hljs-number\">07</span>           <span class=\"hljs-string\">\"over\"</span>,\n08           <span class=\"hljs-string\">\"the\"</span>,\n09           <span class=\"hljs-string\">\"fence\"</span>,\n<span class=\"hljs-number\">10</span>           <span class=\"hljs-string\">\".\"</span>]\n<span class=\"hljs-number\">11</span>  one = <span class=\"hljs-string\">\"\"</span>.join(words)\n<span class=\"hljs-number\">12</span>  one\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Thefoxjumpedoverthefence.\n</code></pre>\n        <p>还可以在包含空格符的字符串上，调用 <code>join</code> 方法，创建一个所有单词均由空格符分隔的字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4qq5oy</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  words = [<span class=\"hljs-string\">\"The\"</span>,\n<span class=\"hljs-number\">05</span>           <span class=\"hljs-string\">\"fox\"</span>,\n<span class=\"hljs-number\">06</span>           <span class=\"hljs-string\">\"jumped\"</span>,\n<span class=\"hljs-number\">07</span>           <span class=\"hljs-string\">\"over\"</span>,\n08           <span class=\"hljs-string\">\"the\"</span>,\n09           <span class=\"hljs-string\">\"fence\"</span>,\n<span class=\"hljs-number\">10</span>           <span class=\"hljs-string\">\".\"</span>]\n<span class=\"hljs-number\">11</span>  one = <span class=\"hljs-string\">\" \"</span>.join(words)\n<span class=\"hljs-number\">12</span>  one\n\n<span class=\"hljs-meta\">&gt;&gt;</span> The fox jumped over the fence.\n</code></pre>\n        <h3 id=\"610\">6.10　去除空格</h3>\n        <p>可使用 <code>strip</code> 方法去除字符串开头和末尾的空白字符：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jfndhgx</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  s = <span class=\"hljs-string\">\"   The       \"</span>\n<span class=\"hljs-number\">5</span>  s = s.strip()\n<span class=\"hljs-number\">6</span>  s\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'The'</span>\n</code></pre>\n        <h3 id=\"611\">6.11　替换</h3>\n        <p>在 <code>replace</code> 方法中，第一个参数是要被替换的字符串，第二个参数是用来替换的字符串。可使用第二个字符串替换原字符串中所有与第一个字符串一样的内容。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zha4uwo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  equ = <span class=\"hljs-string\">\"All animals are equal.\"</span>\n<span class=\"hljs-number\">5</span>  equ = equ.replace(<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"@\"</span>)\n<span class=\"hljs-number\">6</span>  print(equ)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> All @nim@ls @re equ@l.\n</code></pre>\n        <h3 id=\"612\">6.12　查找索引</h3>\n        <p>可使用 <code>index</code> 方法，获得字符串中某个字符第一次出现的索引。将希望查找的字符作为参数传入，<code>index</code> 方法可以返回该字符在字符串中第一次出现的索引：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hzc6asc</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"animals\"</span>.index(<span\n                    class=\"hljs-string\">\"m\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n        <p>如果 <code>index</code> 方法没有找到匹配的结果，Python 会报告异常错误。如下所示：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jmtc984</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"animals\"</span>.index(<span\n                    class=\"hljs-string\">\"z\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ValueError:</span> substring not found\n</code></pre>\n        <p>如果不确定是否有匹配的结果，可使用如下异常处理的方法：</p>\n        <pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zl6q4fd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">try</span></strong>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-string\">\"animals\"</span>.index(<span\n                    class=\"hljs-string\">\"z\"</span>)\n<span class=\"hljs-number\">6</span>  <strong><span class=\"hljs-keyword\">except</span></strong>:\n<span class=\"hljs-number\">7</span>      print(<span class=\"hljs-string\">\"Not found.\"</span>)\n\n&gt;&gt; Not found.</code></pre>\n        <h3 id=\"613in\">6.13　in 关键字</h3>\n        <p>关键字 <code>in</code> 可检查某个字符串是否在另一个字符串中，返回结果为 <code>True</code> 或 <code>False</code>：</p>\n        <pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsnygwz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Cat\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> <span\n                    class=\"hljs-string\">\"Cat in the hat.\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z9b3e97</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Bat\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> <span\n                    class=\"hljs-string\">\"Cat in the hat.\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n        <p>在 <code>in</code> 前面加上关键字 <code>not</code>，即可检查某个字符串是否不在另一个字符串中：</p>\n        <pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jz8sygd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-string\">\"Potter\"</span> <strong><span\n                    class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> <span\n                    class=\"hljs-string\">\"Harry\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n        <h3 id=\"614\">6.14　字符串转义</h3>\n        <p>如果在字符串中使用了双引号，则会出现如下语法错误：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zj6hc4r</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 该段代码无法执行。</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <span class=\"hljs-string\">\"She said \"</span>Surely.<span\n                    class=\"hljs-string\">\"\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">SyntaxError:</span> invalid syntax\n</code></pre>\n        <p>在双引号前加上反斜杠，即可解决这个错误：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jdsrr7e</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"She said \\\"Surely.\\\"\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zr7o7d7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">'She said \\\"Surely.\\\"'</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n</code></pre>\n        <p>字符串<strong>转义</strong>（escaping），指的是在 Python 中有特殊意义的字符（上例中为双引号）前加上一个符号，告诉 Python 在本例中该符号代表的是一个字符，而没有特殊意义。在\n            Python 中用反斜杠进行转义。</p>\n        <p>如果在字符串中使用单引号，而非双引号，则不需要进行转义：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hoef63o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"She said 'Surely'\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">\"She said 'Surely'\"</span>\n</code></pre>\n        <p>还可以在单引号中使用双引号，这比对双引号进行转义更加简单：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zkgfawo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n</code></pre>\n        <h3 id=\"615\">6.15　换行符</h3>\n        <p>在字符串中加入 <code>\\n</code> 来表示换行：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zyrhaeg</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"line1\\nline2\\nline3\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> line1\n<span class=\"hljs-meta\">&gt;&gt;</span> line2\n<span class=\"hljs-meta\">&gt;&gt;</span> line3\n</code></pre>\n        <h3 id=\"616\">6.16　切片</h3>\n        <p>\n            <strong>切片</strong>（slicing）可将一个可迭代对象中元素的子集，创建为一个新的可迭代对象。切片的语法是<code>[可迭代对象][[起始索引:结束索引]]</code>。<strong>起始索引</strong>（start\n            index）是开始切片的索引，<strong>结束索引</strong>（end index）是结束索引的位置。</p>\n        <p>进行列表切片的示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2rqj2a</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fict = [<span class=\"hljs-string\">\"Tolstoy\"</span>,\n<span class=\"hljs-number\">5</span>          <span class=\"hljs-string\">\"Camus\"</span>,\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-string\">\"Orwell\"</span>,\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-string\">\"Huxley\"</span>,\n<span class=\"hljs-number\">8</span>          <span class=\"hljs-string\">\"Austin\"</span>]\n<span class=\"hljs-number\">9</span>  fict[<span class=\"hljs-number\">0</span><span class=\"hljs-symbol\">:</span><span\n                    class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Tolstoy'</span>, <span\n                    class=\"hljs-string\">'Camus'</span>, <span class=\"hljs-string\">'Orwell'</span>]\n</code></pre>\n        <p>切片时包含起始索引位置的元素，但不包括结束索引位置的元素。因此，如果要从 <code>\"Tolstoy\"</code>（索引为 0）切片到 <code>\"Orwell\"</code>（索引为 2），则需从索引 0\n            到索引 3 进行切片。</p>\n        <p>字符串切片的示例如下：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hug9euj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">17</span>]\n<span class=\"hljs-number\">8</span>  ivan[<span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">33</span>]\n\n&gt;&gt; <span class=\"hljs-string\">'In place of death'</span>\n&gt;&gt; <span class=\"hljs-string\">' there was light.'</span>\n</code></pre>\n        <p>如果起始索引是 0，那么可以将起始索引的位置留空：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/judcpx4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[:<span class=\"hljs-number\">17</span>]\n\n&gt;&gt; <span class=\"hljs-string\">'In place of death'</span>\n</code></pre>\n        <p>如果结束索引是可迭代对象中最后一个元素的索引，那么可以将结束索引的位置留空：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqoscn4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[<span class=\"hljs-number\">17</span>:]\n\n&gt;&gt; <span class=\"hljs-string\">' there was light.'</span>\n</code></pre>\n        <p>起始索引和结束索引均留空，则会返回原可迭代对象：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqvuqoc</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[:]\n\n&gt;&gt; <span class=\"hljs-string\">\"In place of death there was light.\"</span>\n</code></pre>\n        <h3 id=\"617\">6.17　术语表</h3>\n        <p><strong>负索引</strong>：可用来从右向左查找可迭代对象中元素的索引（必须是一个负数）。</p>\n        <p><strong>转义</strong>：在 Python 中具有特殊意义的字符（如双引号）前加上一个符号，告诉 Python 在本例中该字符代表的只是一个字符，没有特殊意义。</p>\n        <p><strong>切片</strong>：将一个可迭代对象中元素的子集，创建为一个新的可迭代对象。</p>\n        <p><strong>起始索引</strong>：开始切片的索引。</p>\n        <p><strong>结束索引</strong>：结束切片的索引。</p>\n        <h3 id=\"618\">6.18　挑战练习</h3>\n        <p>1．打印字符串 <code>\"Camus\"</code> 中的所有字符。</p>\n        <p>2．编写程序，从用户处获取两个字符串，将其插入字符串 <code>\"Yesterday I wrote a [用户输入1]. I sent it to [用户输入2]!\"</code> 中，并打印新字符串。</p>\n        <p>3．想办法将字符串 <code>\"aldous Huxley was born in 1894.\"</code> 的第一个字符大写，从而使语法正确。</p>\n        <p>4．对字符串 <code>\"Where now? Who now? When now?\"</code> 调用一个方法，返回如下述的列表 <code>[\"Where now?\", \"Who now?\", \"When\n            now?\"]</code>。</p>\n        <p>5．对列表 <code>[\"The\", \"fox\", \"jumped\", \"over\", \"the\", \"fence\", \".\"]</code> 进行处理，将其变成一个语法正确的字符串。每个单词间以空格符分隔，但是单词\n            <code>fence</code> 和句号之间不能有空格符。（别忘了，我们之前已经学过将字符串列表连接为单个字符串的方法。）</p>\n        <p>6．将字符串 <code>\"A screaming comes across the sky.\"</code> 中所有的 <code>\"s\"</code> 字符替换为美元符号。</p>\n        <p>7．找到字符串 <code>\"Hemingway\"</code> 中字符 <code>\"m\"</code> 所在的第一个索引。</p>\n        <p>8．在你最喜欢的书中找一段对话，将其变成一个字符串。</p>\n        <p>9．先后使用字符串拼接和字符串乘法，创建字符串 <code>\"three three three\"</code>。</p>\n        <p>10．对字符串 <code>\"It was bright cold day in April, and the clocks were striking thirteen.\"</code>\n            进行切片，只保留逗号之前的字符。</p>\n        <p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div>\n</article>\n</body>\n</html>","slug":"Python无师自通/6_strings","published":1,"date":"2019-06-04T04:55:38.512Z","updated":"2019-06-04T04:55:38.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwiqpow60001qjh7m14s7d7l","content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>字符串操作</title>\n</head>\n<body>\n<article id=\"articleDiv\">\n    <div class=\"mazi-article-content dont-break-out\"><p></p>\n        <div class=\"toc\">\n            <ul>\n                <li>\n                    <ul>\n                        <li>\n                            <ul>\n                                <li><a href=\"#61\">6.1　三引号字符串</a></li>\n                                <li><a href=\"#62\">6.2　索引</a></li>\n                                <li><a href=\"#63\">6.3　字符串是不可变的</a></li>\n                                <li><a href=\"#64\">6.4　字符串拼接</a></li>\n                                <li><a href=\"#65\">6.5　字符串乘法</a></li>\n                                <li><a href=\"#66\">6.6　改变大小写</a></li>\n                                <li><a href=\"#67\">6.7　格式化</a></li>\n                                <li><a href=\"#68\">6.8　分割</a></li>\n                                <li><a href=\"#69\">6.9　连接</a></li>\n                                <li><a href=\"#610\">6.10　去除空格</a></li>\n                                <li><a href=\"#611\">6.11　替换</a></li>\n                                <li><a href=\"#612\">6.12　查找索引</a></li>\n                                <li><a href=\"#613in\">6.13　in 关键字</a></li>\n                                <li><a href=\"#614\">6.14　字符串转义</a></li>\n                                <li><a href=\"#615\">6.15　换行符</a></li>\n                                <li><a href=\"#616\">6.16　切片</a></li>\n                                <li><a href=\"#617\">6.17　术语表</a></li>\n                                <li><a href=\"#618\">6.18　挑战练习</a></li>\n                            </ul>\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n        </div>\n        <p></p>\n        <blockquote>\n            <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“理论上，理论和实践没有区别。但实践上，是有区别的。”</span></p>\n            <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——简 · 范德斯奈普特（Jan L. A. van de Snepscheut）</span></p>\n        </blockquote>\n        <p>Python 自带操作字符串的功能，例如在指定位置将字符串分割为两部分，或者改变字符串的大小写。举个例子，假设有一个所有字符都是大写的字符串，现在希望将其全部改为小写，这通过 Python\n            可以轻松实现。在本章中，读者将学习更多有关字符串的知识，并掌握 Python 中操作字符串最有效的工具。</p>\n        <h3 id=\"61\">6.1　三引号字符串</h3>\n        <p>如果字符串跨越一行以上，可以使用三引号：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h59ygda</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"\"\" 第一行\n5      第二行\n6      第三行\n7  \"\"\"</span>\n</code></pre>\n        <p>如果使用单引号或双引号定义一个跨行的字符串，Python 会报告语法错误。</p>\n        <h3 id=\"62\">6.2　索引</h3>\n        <p>与列表和元组一样，字符串也是可迭代的。可使用索引查找字符串中的每个字符。与其他可迭代对象一样，字符串中第一个字符所在的索引为 0，其后每个索引递增 1。</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqqc2jw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">6</span>  author[<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-number\">7</span>  author[<span class=\"hljs-number\">2</span>]\n<span class=\"hljs-number\">8</span>  author[<span class=\"hljs-number\">3</span>]\n<span class=\"hljs-number\">9</span>  author[<span class=\"hljs-number\">4</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'K'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'a'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'f'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'k'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'a'</span>\n</code></pre>\n        <p>上述示例中，可使用索引 0、1、2、3、4 来查找字符串 <code>\"Kafka\"</code> 中的每个字符。如果查找的字符串索引大于最后一个索引的值，Python 会报告异常错误：</p>\n        <pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zk52tef</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[<span class=\"hljs-number\">5</span>]\n\n&gt;&gt; IndexError: <span class=\"hljs-built_in\">string</span> index out of range\n</code></pre>\n        <p>Python 还支持使用<strong>负索引（negative index）</strong>查找列表中的元素：可用来从右向左查找可迭代对象中元素的索引（必须是一个负数）。使用索引 <code>-1</code>\n            可以查找可迭代对象中的最后一个元素，示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hyju2t5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[-<span class=\"hljs-number\">1</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> a\n</code></pre>\n        <p>负索引 <code>-2</code> 查找的是倒数第二个元素，负索引 <code>-3</code> 查找的是倒数第三个元素，以此类推。</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jtpx7sr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[-<span class=\"hljs-number\">2</span>]\n<span class=\"hljs-number\">6</span>  author[-<span class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> k\n<span class=\"hljs-meta\">&gt;&gt;</span> f\n</code></pre>\n        <h3 id=\"63\">6.3　字符串是不可变的</h3>\n        <p>字符串和元组一样都是不可变的，无法修改字符串中的字符。如果想要修改，就必须创建一个新的字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsr83lv</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ff = <span class=\"hljs-string\">\"F.Fitzgerald\"</span>\n<span class=\"hljs-number\">5</span>  ff = <span class=\"hljs-string\">\"F. Scott Fitzgerald\"</span>\n<span class=\"hljs-number\">6</span>  ff\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'F. Scott Fitzgerald'</span>\n</code></pre>\n        <p>Python 提供了多个从已有字符串中创建新字符串的方法，本章将逐一介绍。</p>\n        <h3 id=\"64\">6.4　字符串拼接</h3>\n        <p>可使用加法操作符，将两个或多个字符串组合在一起，结果就是由第一个字符串中的字符和其他字符串中的字符共同构成的一个新字符串。将字符串组合的做法，被称为字符串拼接。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4z5mlg</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"cat\"</span> + <span class=\"hljs-string\">\"in\"</span> + <span class=\"hljs-string\">\"hat\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'catinhat'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsrajle</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"cat\"</span> + <span class=\"hljs-string\">\" in\"</span> + <span class=\"hljs-string\">\" the\"</span> + <span class=\"hljs-string\">\" hat\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'cat in the hat'</span>\n</code></pre>\n        <h3 id=\"65\">6.5　字符串乘法</h3>\n        <p>可使用乘法操作符，将字符串与数字相乘。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zvm9gng</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Sawyer\"</span> * <span class=\"hljs-number\">3</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> SawyerSawyerSawyer\n</code></pre>\n        <h3 id=\"66\">6.6　改变大小写</h3>\n        <p>可使用字符串的 <code>upper</code> 方法，将字符串中的每个字符改为大写。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hhancz6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"We hold these truths...\"</span>.upper()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'WE HOLD THESE TRUTHS...'</span>\n</code></pre>\n        <p>类似地，可使用字符串的 <code>lower</code> 方法将字符串中的每个字符改为小写。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zkz48u5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"SO IT GOES.\"</span>.lower()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'so it goes.'</span>\n</code></pre>\n        <p>还可使用字符串的 <code>capitalize</code> 方法，将字符串的首字母改为大写。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jp5hexn</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"four score and...\"</span>.capitalize()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Four score and...'</span>\n</code></pre>\n        <h3 id=\"67\">6.7　格式化</h3>\n        <p>可使用 <code>format</code> 方法创建新字符串，该方法会把字符串中的“<code>{}</code>”替换为传入的字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/juvguy8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"William {}\"</span>.format(<span class=\"hljs-string\">\"Faulkner\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'William Faulkner'</span>\n</code></pre>\n        <p>也可以把变量作为参数传递：</p>\n        <pre><code class=\"hljs perl\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcpt9se</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">last</span> = <span class=\"hljs-string\">\"Faulkner\"</span>\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-string\">\"William {}\"</span>.format(<span class=\"hljs-keyword\">last</span>)\n\n&gt;&gt; <span class=\"hljs-string\">'William Faulkner'</span>\n</code></pre>\n        <p>花括号可重复使用：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z6t6d8n</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"William Faulkner\"</span>\n<span class=\"hljs-number\">5</span>  year_born = <span class=\"hljs-string\">\"1897\"</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-string\">\"{} was born in {}.\"</span>.format(author, year_born)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'William Faulkner was born in 1897.'</span>\n</code></pre>\n        <p>如果要根据用户输入来创建字符串，<code>format</code> 方法很有用。示例如下：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gnrdsj9</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  n1 = input(<span class=\"hljs-string\">\"Enter a noun:\"</span>)\n<span class=\"hljs-number\">05</span>  v = input(<span class=\"hljs-string\">\"Enter a verb:\"</span>)\n<span class=\"hljs-number\">06</span>  adj = input(<span class=\"hljs-string\">\"Enter an adj:\"</span>)\n<span class=\"hljs-number\">07</span>  n2 = input(<span class=\"hljs-string\">\"Enter a noun:\"</span>)\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>  r = <span class=\"hljs-string\">\"\"\"The {} {} the {} {}\n11      \"\"\"</span>.format(n1,\n<span class=\"hljs-number\">12</span>                 v,\n<span class=\"hljs-number\">13</span>                 adj,\n<span class=\"hljs-number\">14</span>                 n2)\n<span class=\"hljs-number\">15</span>  print(r)\n\n&gt;&gt; Enter a noun:\n</code></pre>\n        <p>程序让用户输入两个名词、一个动词和一个形容词，然后通过 <code>fomrat</code> 方法将这些输入创建为一个字符串并打印出来。</p>\n        <h3 id=\"68\">6.8　分割</h3>\n        <p>字符串有一个叫 <code>split</code> 的方法，可用来将字符串分割为两个或多个字符串。需要传入一个字符串作为 <code>split</code>\n            方法的参数，并用其将原字符串分割为多个字符串。例如，可以传入句号作为 <code>split</code> 方法的参数，将字符串 <code>\"I jumped over the puddle. It was 12\n                feet!\"</code> 分割成两个不同的字符串。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/he8u28o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"I jumped over the puddle. It was 12 feet!\"</span>.split(<span class=\"hljs-string\">\".\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">\"I jumped over the puddle\"</span>, <span class=\"hljs-string\">\"It was 12 feet!\"</span>]\n</code></pre>\n        <p>结果是一个含有两个元素的列表：分别是句号前的所有字符组成的字符串，以及句号后所有字符组成的字符串。</p>\n        <h3 id=\"69\">6.9　连接</h3>\n        <p><code>join</code> 方法可以在字符串的每个字符间添加新字符：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2pjkso</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  first_three = <span class=\"hljs-string\">\"abc\"</span>\n<span class=\"hljs-number\">5</span>  result = <span class=\"hljs-string\">\"+\"</span>.join(first_three)\n<span class=\"hljs-number\">6</span>  result\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'a+b+c'</span>\n</code></pre>\n        <p>也可以在空字符串上调用 <code>join</code> 方法，传入一个字符串列表作为参数，从而将这些字符串连接为一个单一字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z49e3up</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  words = [<span class=\"hljs-string\">\"The\"</span>,\n<span class=\"hljs-number\">05</span>           <span class=\"hljs-string\">\"fox\"</span>,\n<span class=\"hljs-number\">06</span>           <span class=\"hljs-string\">\"jumped\"</span>,\n<span class=\"hljs-number\">07</span>           <span class=\"hljs-string\">\"over\"</span>,\n08           <span class=\"hljs-string\">\"the\"</span>,\n09           <span class=\"hljs-string\">\"fence\"</span>,\n<span class=\"hljs-number\">10</span>           <span class=\"hljs-string\">\".\"</span>]\n<span class=\"hljs-number\">11</span>  one = <span class=\"hljs-string\">\"\"</span>.join(words)\n<span class=\"hljs-number\">12</span>  one\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Thefoxjumpedoverthefence.\n</code></pre>\n        <p>还可以在包含空格符的字符串上，调用 <code>join</code> 方法，创建一个所有单词均由空格符分隔的字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4qq5oy</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  words = [<span class=\"hljs-string\">\"The\"</span>,\n<span class=\"hljs-number\">05</span>           <span class=\"hljs-string\">\"fox\"</span>,\n<span class=\"hljs-number\">06</span>           <span class=\"hljs-string\">\"jumped\"</span>,\n<span class=\"hljs-number\">07</span>           <span class=\"hljs-string\">\"over\"</span>,\n08           <span class=\"hljs-string\">\"the\"</span>,\n09           <span class=\"hljs-string\">\"fence\"</span>,\n<span class=\"hljs-number\">10</span>           <span class=\"hljs-string\">\".\"</span>]\n<span class=\"hljs-number\">11</span>  one = <span class=\"hljs-string\">\" \"</span>.join(words)\n<span class=\"hljs-number\">12</span>  one\n\n<span class=\"hljs-meta\">&gt;&gt;</span> The fox jumped over the fence.\n</code></pre>\n        <h3 id=\"610\">6.10　去除空格</h3>\n        <p>可使用 <code>strip</code> 方法去除字符串开头和末尾的空白字符：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jfndhgx</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  s = <span class=\"hljs-string\">\"   The       \"</span>\n<span class=\"hljs-number\">5</span>  s = s.strip()\n<span class=\"hljs-number\">6</span>  s\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'The'</span>\n</code></pre>\n        <h3 id=\"611\">6.11　替换</h3>\n        <p>在 <code>replace</code> 方法中，第一个参数是要被替换的字符串，第二个参数是用来替换的字符串。可使用第二个字符串替换原字符串中所有与第一个字符串一样的内容。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zha4uwo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  equ = <span class=\"hljs-string\">\"All animals are equal.\"</span>\n<span class=\"hljs-number\">5</span>  equ = equ.replace(<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"@\"</span>)\n<span class=\"hljs-number\">6</span>  print(equ)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> All @nim@ls @re equ@l.\n</code></pre>\n        <h3 id=\"612\">6.12　查找索引</h3>\n        <p>可使用 <code>index</code> 方法，获得字符串中某个字符第一次出现的索引。将希望查找的字符作为参数传入，<code>index</code> 方法可以返回该字符在字符串中第一次出现的索引：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hzc6asc</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"animals\"</span>.index(<span class=\"hljs-string\">\"m\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n        <p>如果 <code>index</code> 方法没有找到匹配的结果，Python 会报告异常错误。如下所示：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jmtc984</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"animals\"</span>.index(<span class=\"hljs-string\">\"z\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ValueError:</span> substring not found\n</code></pre>\n        <p>如果不确定是否有匹配的结果，可使用如下异常处理的方法：</p>\n        <pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zl6q4fd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">try</span></strong>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-string\">\"animals\"</span>.index(<span class=\"hljs-string\">\"z\"</span>)\n<span class=\"hljs-number\">6</span>  <strong><span class=\"hljs-keyword\">except</span></strong>:\n<span class=\"hljs-number\">7</span>      print(<span class=\"hljs-string\">\"Not found.\"</span>)\n\n&gt;&gt; Not found.</code></pre>\n        <h3 id=\"613in\">6.13　in 关键字</h3>\n        <p>关键字 <code>in</code> 可检查某个字符串是否在另一个字符串中，返回结果为 <code>True</code> 或 <code>False</code>：</p>\n        <pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsnygwz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Cat\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-string\">\"Cat in the hat.\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z9b3e97</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Bat\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-string\">\"Cat in the hat.\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n        <p>在 <code>in</code> 前面加上关键字 <code>not</code>，即可检查某个字符串是否不在另一个字符串中：</p>\n        <pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jz8sygd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-string\">\"Potter\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-string\">\"Harry\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n        <h3 id=\"614\">6.14　字符串转义</h3>\n        <p>如果在字符串中使用了双引号，则会出现如下语法错误：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zj6hc4r</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 该段代码无法执行。</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <span class=\"hljs-string\">\"She said \"</span>Surely.<span class=\"hljs-string\">\"\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">SyntaxError:</span> invalid syntax\n</code></pre>\n        <p>在双引号前加上反斜杠，即可解决这个错误：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jdsrr7e</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"She said \\\"Surely.\\\"\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zr7o7d7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">'She said \\\"Surely.\\\"'</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n</code></pre>\n        <p>字符串<strong>转义</strong>（escaping），指的是在 Python 中有特殊意义的字符（上例中为双引号）前加上一个符号，告诉 Python 在本例中该符号代表的是一个字符，而没有特殊意义。在\n            Python 中用反斜杠进行转义。</p>\n        <p>如果在字符串中使用单引号，而非双引号，则不需要进行转义：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hoef63o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"She said 'Surely'\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">\"She said 'Surely'\"</span>\n</code></pre>\n        <p>还可以在单引号中使用双引号，这比对双引号进行转义更加简单：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zkgfawo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n</code></pre>\n        <h3 id=\"615\">6.15　换行符</h3>\n        <p>在字符串中加入 <code>\\n</code> 来表示换行：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zyrhaeg</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"line1\\nline2\\nline3\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> line1\n<span class=\"hljs-meta\">&gt;&gt;</span> line2\n<span class=\"hljs-meta\">&gt;&gt;</span> line3\n</code></pre>\n        <h3 id=\"616\">6.16　切片</h3>\n        <p>\n            <strong>切片</strong>（slicing）可将一个可迭代对象中元素的子集，创建为一个新的可迭代对象。切片的语法是<code>[可迭代对象][[起始索引:结束索引]]</code>。<strong>起始索引</strong>（start\n            index）是开始切片的索引，<strong>结束索引</strong>（end index）是结束索引的位置。</p>\n        <p>进行列表切片的示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2rqj2a</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fict = [<span class=\"hljs-string\">\"Tolstoy\"</span>,\n<span class=\"hljs-number\">5</span>          <span class=\"hljs-string\">\"Camus\"</span>,\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-string\">\"Orwell\"</span>,\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-string\">\"Huxley\"</span>,\n<span class=\"hljs-number\">8</span>          <span class=\"hljs-string\">\"Austin\"</span>]\n<span class=\"hljs-number\">9</span>  fict[<span class=\"hljs-number\">0</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Tolstoy'</span>, <span class=\"hljs-string\">'Camus'</span>, <span class=\"hljs-string\">'Orwell'</span>]\n</code></pre>\n        <p>切片时包含起始索引位置的元素，但不包括结束索引位置的元素。因此，如果要从 <code>\"Tolstoy\"</code>（索引为 0）切片到 <code>\"Orwell\"</code>（索引为 2），则需从索引 0\n            到索引 3 进行切片。</p>\n        <p>字符串切片的示例如下：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hug9euj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">17</span>]\n<span class=\"hljs-number\">8</span>  ivan[<span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">33</span>]\n\n&gt;&gt; <span class=\"hljs-string\">'In place of death'</span>\n&gt;&gt; <span class=\"hljs-string\">' there was light.'</span>\n</code></pre>\n        <p>如果起始索引是 0，那么可以将起始索引的位置留空：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/judcpx4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[:<span class=\"hljs-number\">17</span>]\n\n&gt;&gt; <span class=\"hljs-string\">'In place of death'</span>\n</code></pre>\n        <p>如果结束索引是可迭代对象中最后一个元素的索引，那么可以将结束索引的位置留空：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqoscn4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[<span class=\"hljs-number\">17</span>:]\n\n&gt;&gt; <span class=\"hljs-string\">' there was light.'</span>\n</code></pre>\n        <p>起始索引和结束索引均留空，则会返回原可迭代对象：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqvuqoc</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[:]\n\n&gt;&gt; <span class=\"hljs-string\">\"In place of death there was light.\"</span>\n</code></pre>\n        <h3 id=\"617\">6.17　术语表</h3>\n        <p><strong>负索引</strong>：可用来从右向左查找可迭代对象中元素的索引（必须是一个负数）。</p>\n        <p><strong>转义</strong>：在 Python 中具有特殊意义的字符（如双引号）前加上一个符号，告诉 Python 在本例中该字符代表的只是一个字符，没有特殊意义。</p>\n        <p><strong>切片</strong>：将一个可迭代对象中元素的子集，创建为一个新的可迭代对象。</p>\n        <p><strong>起始索引</strong>：开始切片的索引。</p>\n        <p><strong>结束索引</strong>：结束切片的索引。</p>\n        <h3 id=\"618\">6.18　挑战练习</h3>\n        <p>1．打印字符串 <code>\"Camus\"</code> 中的所有字符。</p>\n        <p>2．编写程序，从用户处获取两个字符串，将其插入字符串 <code>\"Yesterday I wrote a [用户输入1]. I sent it to [用户输入2]!\"</code> 中，并打印新字符串。</p>\n        <p>3．想办法将字符串 <code>\"aldous Huxley was born in 1894.\"</code> 的第一个字符大写，从而使语法正确。</p>\n        <p>4．对字符串 <code>\"Where now? Who now? When now?\"</code> 调用一个方法，返回如下述的列表 <code>[\"Where now?\", \"Who now?\", \"When\n            now?\"]</code>。</p>\n        <p>5．对列表 <code>[\"The\", \"fox\", \"jumped\", \"over\", \"the\", \"fence\", \".\"]</code> 进行处理，将其变成一个语法正确的字符串。每个单词间以空格符分隔，但是单词\n            <code>fence</code> 和句号之间不能有空格符。（别忘了，我们之前已经学过将字符串列表连接为单个字符串的方法。）</p>\n        <p>6．将字符串 <code>\"A screaming comes across the sky.\"</code> 中所有的 <code>\"s\"</code> 字符替换为美元符号。</p>\n        <p>7．找到字符串 <code>\"Hemingway\"</code> 中字符 <code>\"m\"</code> 所在的第一个索引。</p>\n        <p>8．在你最喜欢的书中找一段对话，将其变成一个字符串。</p>\n        <p>9．先后使用字符串拼接和字符串乘法，创建字符串 <code>\"three three three\"</code>。</p>\n        <p>10．对字符串 <code>\"It was bright cold day in April, and the clocks were striking thirteen.\"</code>\n            进行切片，只保留逗号之前的字符。</p>\n        <p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div>\n</article>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>字符串操作</title>\n</head>\n<body>\n<article id=\"articleDiv\">\n    <div class=\"mazi-article-content dont-break-out\"><p></p>\n        <div class=\"toc\">\n            <ul>\n                <li>\n                    <ul>\n                        <li>\n                            <ul>\n                                <li><a href=\"#61\">6.1　三引号字符串</a></li>\n                                <li><a href=\"#62\">6.2　索引</a></li>\n                                <li><a href=\"#63\">6.3　字符串是不可变的</a></li>\n                                <li><a href=\"#64\">6.4　字符串拼接</a></li>\n                                <li><a href=\"#65\">6.5　字符串乘法</a></li>\n                                <li><a href=\"#66\">6.6　改变大小写</a></li>\n                                <li><a href=\"#67\">6.7　格式化</a></li>\n                                <li><a href=\"#68\">6.8　分割</a></li>\n                                <li><a href=\"#69\">6.9　连接</a></li>\n                                <li><a href=\"#610\">6.10　去除空格</a></li>\n                                <li><a href=\"#611\">6.11　替换</a></li>\n                                <li><a href=\"#612\">6.12　查找索引</a></li>\n                                <li><a href=\"#613in\">6.13　in 关键字</a></li>\n                                <li><a href=\"#614\">6.14　字符串转义</a></li>\n                                <li><a href=\"#615\">6.15　换行符</a></li>\n                                <li><a href=\"#616\">6.16　切片</a></li>\n                                <li><a href=\"#617\">6.17　术语表</a></li>\n                                <li><a href=\"#618\">6.18　挑战练习</a></li>\n                            </ul>\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n        </div>\n        <p></p>\n        <blockquote>\n            <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“理论上，理论和实践没有区别。但实践上，是有区别的。”</span></p>\n            <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——简 · 范德斯奈普特（Jan L. A. van de Snepscheut）</span></p>\n        </blockquote>\n        <p>Python 自带操作字符串的功能，例如在指定位置将字符串分割为两部分，或者改变字符串的大小写。举个例子，假设有一个所有字符都是大写的字符串，现在希望将其全部改为小写，这通过 Python\n            可以轻松实现。在本章中，读者将学习更多有关字符串的知识，并掌握 Python 中操作字符串最有效的工具。</p>\n        <h3 id=\"61\">6.1　三引号字符串</h3>\n        <p>如果字符串跨越一行以上，可以使用三引号：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h59ygda</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"\"\" 第一行\n5      第二行\n6      第三行\n7  \"\"\"</span>\n</code></pre>\n        <p>如果使用单引号或双引号定义一个跨行的字符串，Python 会报告语法错误。</p>\n        <h3 id=\"62\">6.2　索引</h3>\n        <p>与列表和元组一样，字符串也是可迭代的。可使用索引查找字符串中的每个字符。与其他可迭代对象一样，字符串中第一个字符所在的索引为 0，其后每个索引递增 1。</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqqc2jw</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">6</span>  author[<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-number\">7</span>  author[<span class=\"hljs-number\">2</span>]\n<span class=\"hljs-number\">8</span>  author[<span class=\"hljs-number\">3</span>]\n<span class=\"hljs-number\">9</span>  author[<span class=\"hljs-number\">4</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'K'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'a'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'f'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'k'</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'a'</span>\n</code></pre>\n        <p>上述示例中，可使用索引 0、1、2、3、4 来查找字符串 <code>\"Kafka\"</code> 中的每个字符。如果查找的字符串索引大于最后一个索引的值，Python 会报告异常错误：</p>\n        <pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zk52tef</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[<span class=\"hljs-number\">5</span>]\n\n&gt;&gt; IndexError: <span class=\"hljs-built_in\">string</span> index out of range\n</code></pre>\n        <p>Python 还支持使用<strong>负索引（negative index）</strong>查找列表中的元素：可用来从右向左查找可迭代对象中元素的索引（必须是一个负数）。使用索引 <code>-1</code>\n            可以查找可迭代对象中的最后一个元素，示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hyju2t5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[-<span class=\"hljs-number\">1</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> a\n</code></pre>\n        <p>负索引 <code>-2</code> 查找的是倒数第二个元素，负索引 <code>-3</code> 查找的是倒数第三个元素，以此类推。</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jtpx7sr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"Kafka\"</span>\n<span class=\"hljs-number\">5</span>  author[-<span class=\"hljs-number\">2</span>]\n<span class=\"hljs-number\">6</span>  author[-<span class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> k\n<span class=\"hljs-meta\">&gt;&gt;</span> f\n</code></pre>\n        <h3 id=\"63\">6.3　字符串是不可变的</h3>\n        <p>字符串和元组一样都是不可变的，无法修改字符串中的字符。如果想要修改，就必须创建一个新的字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsr83lv</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ff = <span class=\"hljs-string\">\"F.Fitzgerald\"</span>\n<span class=\"hljs-number\">5</span>  ff = <span class=\"hljs-string\">\"F. Scott Fitzgerald\"</span>\n<span class=\"hljs-number\">6</span>  ff\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'F. Scott Fitzgerald'</span>\n</code></pre>\n        <p>Python 提供了多个从已有字符串中创建新字符串的方法，本章将逐一介绍。</p>\n        <h3 id=\"64\">6.4　字符串拼接</h3>\n        <p>可使用加法操作符，将两个或多个字符串组合在一起，结果就是由第一个字符串中的字符和其他字符串中的字符共同构成的一个新字符串。将字符串组合的做法，被称为字符串拼接。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4z5mlg</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"cat\"</span> + <span class=\"hljs-string\">\"in\"</span> + <span class=\"hljs-string\">\"hat\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'catinhat'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gsrajle</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"cat\"</span> + <span class=\"hljs-string\">\" in\"</span> + <span class=\"hljs-string\">\" the\"</span> + <span class=\"hljs-string\">\" hat\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'cat in the hat'</span>\n</code></pre>\n        <h3 id=\"65\">6.5　字符串乘法</h3>\n        <p>可使用乘法操作符，将字符串与数字相乘。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zvm9gng</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Sawyer\"</span> * <span class=\"hljs-number\">3</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> SawyerSawyerSawyer\n</code></pre>\n        <h3 id=\"66\">6.6　改变大小写</h3>\n        <p>可使用字符串的 <code>upper</code> 方法，将字符串中的每个字符改为大写。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hhancz6</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"We hold these truths...\"</span>.upper()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'WE HOLD THESE TRUTHS...'</span>\n</code></pre>\n        <p>类似地，可使用字符串的 <code>lower</code> 方法将字符串中的每个字符改为小写。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zkz48u5</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"SO IT GOES.\"</span>.lower()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'so it goes.'</span>\n</code></pre>\n        <p>还可使用字符串的 <code>capitalize</code> 方法，将字符串的首字母改为大写。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jp5hexn</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"four score and...\"</span>.capitalize()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Four score and...'</span>\n</code></pre>\n        <h3 id=\"67\">6.7　格式化</h3>\n        <p>可使用 <code>format</code> 方法创建新字符串，该方法会把字符串中的“<code>{}</code>”替换为传入的字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/juvguy8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"William {}\"</span>.format(<span class=\"hljs-string\">\"Faulkner\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'William Faulkner'</span>\n</code></pre>\n        <p>也可以把变量作为参数传递：</p>\n        <pre><code class=\"hljs perl\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcpt9se</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">last</span> = <span class=\"hljs-string\">\"Faulkner\"</span>\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-string\">\"William {}\"</span>.format(<span class=\"hljs-keyword\">last</span>)\n\n&gt;&gt; <span class=\"hljs-string\">'William Faulkner'</span>\n</code></pre>\n        <p>花括号可重复使用：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z6t6d8n</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  author = <span class=\"hljs-string\">\"William Faulkner\"</span>\n<span class=\"hljs-number\">5</span>  year_born = <span class=\"hljs-string\">\"1897\"</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  <span class=\"hljs-string\">\"{} was born in {}.\"</span>.format(author, year_born)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'William Faulkner was born in 1897.'</span>\n</code></pre>\n        <p>如果要根据用户输入来创建字符串，<code>format</code> 方法很有用。示例如下：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gnrdsj9</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  n1 = input(<span class=\"hljs-string\">\"Enter a noun:\"</span>)\n<span class=\"hljs-number\">05</span>  v = input(<span class=\"hljs-string\">\"Enter a verb:\"</span>)\n<span class=\"hljs-number\">06</span>  adj = input(<span class=\"hljs-string\">\"Enter an adj:\"</span>)\n<span class=\"hljs-number\">07</span>  n2 = input(<span class=\"hljs-string\">\"Enter a noun:\"</span>)\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>  r = <span class=\"hljs-string\">\"\"\"The {} {} the {} {}\n11      \"\"\"</span>.format(n1,\n<span class=\"hljs-number\">12</span>                 v,\n<span class=\"hljs-number\">13</span>                 adj,\n<span class=\"hljs-number\">14</span>                 n2)\n<span class=\"hljs-number\">15</span>  print(r)\n\n&gt;&gt; Enter a noun:\n</code></pre>\n        <p>程序让用户输入两个名词、一个动词和一个形容词，然后通过 <code>fomrat</code> 方法将这些输入创建为一个字符串并打印出来。</p>\n        <h3 id=\"68\">6.8　分割</h3>\n        <p>字符串有一个叫 <code>split</code> 的方法，可用来将字符串分割为两个或多个字符串。需要传入一个字符串作为 <code>split</code>\n            方法的参数，并用其将原字符串分割为多个字符串。例如，可以传入句号作为 <code>split</code> 方法的参数，将字符串 <code>\"I jumped over the puddle. It was 12\n                feet!\"</code> 分割成两个不同的字符串。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/he8u28o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"I jumped over the puddle. It was 12 feet!\"</span>.split(<span class=\"hljs-string\">\".\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">\"I jumped over the puddle\"</span>, <span class=\"hljs-string\">\"It was 12 feet!\"</span>]\n</code></pre>\n        <p>结果是一个含有两个元素的列表：分别是句号前的所有字符组成的字符串，以及句号后所有字符组成的字符串。</p>\n        <h3 id=\"69\">6.9　连接</h3>\n        <p><code>join</code> 方法可以在字符串的每个字符间添加新字符：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2pjkso</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  first_three = <span class=\"hljs-string\">\"abc\"</span>\n<span class=\"hljs-number\">5</span>  result = <span class=\"hljs-string\">\"+\"</span>.join(first_three)\n<span class=\"hljs-number\">6</span>  result\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'a+b+c'</span>\n</code></pre>\n        <p>也可以在空字符串上调用 <code>join</code> 方法，传入一个字符串列表作为参数，从而将这些字符串连接为一个单一字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z49e3up</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  words = [<span class=\"hljs-string\">\"The\"</span>,\n<span class=\"hljs-number\">05</span>           <span class=\"hljs-string\">\"fox\"</span>,\n<span class=\"hljs-number\">06</span>           <span class=\"hljs-string\">\"jumped\"</span>,\n<span class=\"hljs-number\">07</span>           <span class=\"hljs-string\">\"over\"</span>,\n08           <span class=\"hljs-string\">\"the\"</span>,\n09           <span class=\"hljs-string\">\"fence\"</span>,\n<span class=\"hljs-number\">10</span>           <span class=\"hljs-string\">\".\"</span>]\n<span class=\"hljs-number\">11</span>  one = <span class=\"hljs-string\">\"\"</span>.join(words)\n<span class=\"hljs-number\">12</span>  one\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Thefoxjumpedoverthefence.\n</code></pre>\n        <p>还可以在包含空格符的字符串上，调用 <code>join</code> 方法，创建一个所有单词均由空格符分隔的字符串：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h4qq5oy</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  words = [<span class=\"hljs-string\">\"The\"</span>,\n<span class=\"hljs-number\">05</span>           <span class=\"hljs-string\">\"fox\"</span>,\n<span class=\"hljs-number\">06</span>           <span class=\"hljs-string\">\"jumped\"</span>,\n<span class=\"hljs-number\">07</span>           <span class=\"hljs-string\">\"over\"</span>,\n08           <span class=\"hljs-string\">\"the\"</span>,\n09           <span class=\"hljs-string\">\"fence\"</span>,\n<span class=\"hljs-number\">10</span>           <span class=\"hljs-string\">\".\"</span>]\n<span class=\"hljs-number\">11</span>  one = <span class=\"hljs-string\">\" \"</span>.join(words)\n<span class=\"hljs-number\">12</span>  one\n\n<span class=\"hljs-meta\">&gt;&gt;</span> The fox jumped over the fence.\n</code></pre>\n        <h3 id=\"610\">6.10　去除空格</h3>\n        <p>可使用 <code>strip</code> 方法去除字符串开头和末尾的空白字符：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jfndhgx</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  s = <span class=\"hljs-string\">\"   The       \"</span>\n<span class=\"hljs-number\">5</span>  s = s.strip()\n<span class=\"hljs-number\">6</span>  s\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'The'</span>\n</code></pre>\n        <h3 id=\"611\">6.11　替换</h3>\n        <p>在 <code>replace</code> 方法中，第一个参数是要被替换的字符串，第二个参数是用来替换的字符串。可使用第二个字符串替换原字符串中所有与第一个字符串一样的内容。示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zha4uwo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  equ = <span class=\"hljs-string\">\"All animals are equal.\"</span>\n<span class=\"hljs-number\">5</span>  equ = equ.replace(<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"@\"</span>)\n<span class=\"hljs-number\">6</span>  print(equ)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> All @nim@ls @re equ@l.\n</code></pre>\n        <h3 id=\"612\">6.12　查找索引</h3>\n        <p>可使用 <code>index</code> 方法，获得字符串中某个字符第一次出现的索引。将希望查找的字符作为参数传入，<code>index</code> 方法可以返回该字符在字符串中第一次出现的索引：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hzc6asc</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"animals\"</span>.index(<span class=\"hljs-string\">\"m\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n        <p>如果 <code>index</code> 方法没有找到匹配的结果，Python 会报告异常错误。如下所示：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jmtc984</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"animals\"</span>.index(<span class=\"hljs-string\">\"z\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">ValueError:</span> substring not found\n</code></pre>\n        <p>如果不确定是否有匹配的结果，可使用如下异常处理的方法：</p>\n        <pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zl6q4fd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">try</span></strong>:\n<span class=\"hljs-number\">5</span>      <span class=\"hljs-string\">\"animals\"</span>.index(<span class=\"hljs-string\">\"z\"</span>)\n<span class=\"hljs-number\">6</span>  <strong><span class=\"hljs-keyword\">except</span></strong>:\n<span class=\"hljs-number\">7</span>      print(<span class=\"hljs-string\">\"Not found.\"</span>)\n\n&gt;&gt; Not found.</code></pre>\n        <h3 id=\"613in\">6.13　in 关键字</h3>\n        <p>关键字 <code>in</code> 可检查某个字符串是否在另一个字符串中，返回结果为 <code>True</code> 或 <code>False</code>：</p>\n        <pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsnygwz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Cat\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-string\">\"Cat in the hat.\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z9b3e97</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"Bat\"</span> <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-string\">\"Cat in the hat.\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n        <p>在 <code>in</code> 前面加上关键字 <code>not</code>，即可检查某个字符串是否不在另一个字符串中：</p>\n        <pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jz8sygd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-string\">\"Potter\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> <span class=\"hljs-string\">\"Harry\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True</code></pre>\n        <h3 id=\"614\">6.14　字符串转义</h3>\n        <p>如果在字符串中使用了双引号，则会出现如下语法错误：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zj6hc4r</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 该段代码无法执行。</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <span class=\"hljs-string\">\"She said \"</span>Surely.<span class=\"hljs-string\">\"\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-symbol\">SyntaxError:</span> invalid syntax\n</code></pre>\n        <p>在双引号前加上反斜杠，即可解决这个错误：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jdsrr7e</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"She said \\\"Surely.\\\"\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zr7o7d7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">'She said \\\"Surely.\\\"'</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n</code></pre>\n        <p>字符串<strong>转义</strong>（escaping），指的是在 Python 中有特殊意义的字符（上例中为双引号）前加上一个符号，告诉 Python 在本例中该符号代表的是一个字符，而没有特殊意义。在\n            Python 中用反斜杠进行转义。</p>\n        <p>如果在字符串中使用单引号，而非双引号，则不需要进行转义：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hoef63o</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">\"She said 'Surely'\"</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">\"She said 'Surely'\"</span>\n</code></pre>\n        <p>还可以在单引号中使用双引号，这比对双引号进行转义更加简单：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zkgfawo</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'She said \"Surely.\"'</span>\n</code></pre>\n        <h3 id=\"615\">6.15　换行符</h3>\n        <p>在字符串中加入 <code>\\n</code> 来表示换行：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zyrhaeg</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"line1\\nline2\\nline3\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> line1\n<span class=\"hljs-meta\">&gt;&gt;</span> line2\n<span class=\"hljs-meta\">&gt;&gt;</span> line3\n</code></pre>\n        <h3 id=\"616\">6.16　切片</h3>\n        <p>\n            <strong>切片</strong>（slicing）可将一个可迭代对象中元素的子集，创建为一个新的可迭代对象。切片的语法是<code>[可迭代对象][[起始索引:结束索引]]</code>。<strong>起始索引</strong>（start\n            index）是开始切片的索引，<strong>结束索引</strong>（end index）是结束索引的位置。</p>\n        <p>进行列表切片的示例如下：</p>\n        <pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h2rqj2a</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  fict = [<span class=\"hljs-string\">\"Tolstoy\"</span>,\n<span class=\"hljs-number\">5</span>          <span class=\"hljs-string\">\"Camus\"</span>,\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-string\">\"Orwell\"</span>,\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-string\">\"Huxley\"</span>,\n<span class=\"hljs-number\">8</span>          <span class=\"hljs-string\">\"Austin\"</span>]\n<span class=\"hljs-number\">9</span>  fict[<span class=\"hljs-number\">0</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-string\">'Tolstoy'</span>, <span class=\"hljs-string\">'Camus'</span>, <span class=\"hljs-string\">'Orwell'</span>]\n</code></pre>\n        <p>切片时包含起始索引位置的元素，但不包括结束索引位置的元素。因此，如果要从 <code>\"Tolstoy\"</code>（索引为 0）切片到 <code>\"Orwell\"</code>（索引为 2），则需从索引 0\n            到索引 3 进行切片。</p>\n        <p>字符串切片的示例如下：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hug9euj</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">17</span>]\n<span class=\"hljs-number\">8</span>  ivan[<span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">33</span>]\n\n&gt;&gt; <span class=\"hljs-string\">'In place of death'</span>\n&gt;&gt; <span class=\"hljs-string\">' there was light.'</span>\n</code></pre>\n        <p>如果起始索引是 0，那么可以将起始索引的位置留空：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/judcpx4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[:<span class=\"hljs-number\">17</span>]\n\n&gt;&gt; <span class=\"hljs-string\">'In place of death'</span>\n</code></pre>\n        <p>如果结束索引是可迭代对象中最后一个元素的索引，那么可以将结束索引的位置留空：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqoscn4</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[<span class=\"hljs-number\">17</span>:]\n\n&gt;&gt; <span class=\"hljs-string\">' there was light.'</span>\n</code></pre>\n        <p>起始索引和结束索引均留空，则会返回原可迭代对象：</p>\n        <pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqvuqoc</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  ivan = <span class=\"hljs-string\">\"\"\"In place of death there was light.\"\"\"</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  ivan[:]\n\n&gt;&gt; <span class=\"hljs-string\">\"In place of death there was light.\"</span>\n</code></pre>\n        <h3 id=\"617\">6.17　术语表</h3>\n        <p><strong>负索引</strong>：可用来从右向左查找可迭代对象中元素的索引（必须是一个负数）。</p>\n        <p><strong>转义</strong>：在 Python 中具有特殊意义的字符（如双引号）前加上一个符号，告诉 Python 在本例中该字符代表的只是一个字符，没有特殊意义。</p>\n        <p><strong>切片</strong>：将一个可迭代对象中元素的子集，创建为一个新的可迭代对象。</p>\n        <p><strong>起始索引</strong>：开始切片的索引。</p>\n        <p><strong>结束索引</strong>：结束切片的索引。</p>\n        <h3 id=\"618\">6.18　挑战练习</h3>\n        <p>1．打印字符串 <code>\"Camus\"</code> 中的所有字符。</p>\n        <p>2．编写程序，从用户处获取两个字符串，将其插入字符串 <code>\"Yesterday I wrote a [用户输入1]. I sent it to [用户输入2]!\"</code> 中，并打印新字符串。</p>\n        <p>3．想办法将字符串 <code>\"aldous Huxley was born in 1894.\"</code> 的第一个字符大写，从而使语法正确。</p>\n        <p>4．对字符串 <code>\"Where now? Who now? When now?\"</code> 调用一个方法，返回如下述的列表 <code>[\"Where now?\", \"Who now?\", \"When\n            now?\"]</code>。</p>\n        <p>5．对列表 <code>[\"The\", \"fox\", \"jumped\", \"over\", \"the\", \"fence\", \".\"]</code> 进行处理，将其变成一个语法正确的字符串。每个单词间以空格符分隔，但是单词\n            <code>fence</code> 和句号之间不能有空格符。（别忘了，我们之前已经学过将字符串列表连接为单个字符串的方法。）</p>\n        <p>6．将字符串 <code>\"A screaming comes across the sky.\"</code> 中所有的 <code>\"s\"</code> 字符替换为美元符号。</p>\n        <p>7．找到字符串 <code>\"Hemingway\"</code> 中字符 <code>\"m\"</code> 所在的第一个索引。</p>\n        <p>8．在你最喜欢的书中找一段对话，将其变成一个字符串。</p>\n        <p>9．先后使用字符串拼接和字符串乘法，创建字符串 <code>\"three three three\"</code>。</p>\n        <p>10．对字符串 <code>\"It was bright cold day in April, and the clocks were striking thirteen.\"</code>\n            进行切片，只保留逗号之前的字符。</p>\n        <p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div>\n</article>\n</body>\n</html>"},{"title":"模块","_content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>模块</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#81\">8.1　导入内置模块</a></li>\n<li><a href=\"#82\">8.2　导入其他模块</a></li>\n<li><a href=\"#83\">8.3　术语表</a></li>\n<li><a href=\"#84\">8.4　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“坚韧与志气在任何时代都会带来奇迹。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——乔治 · 华盛顿（George Washington）</span></p>\n</blockquote>\n<p>假设你写了一个有 10000 行代码的程序。如果把全部代码写在一个文件里，查询起来将会非常困难。每次出现错误或异常时，不得不快速浏览 10000 行代码来查找导致问题的那行。为解决这个问题，程序员将大型程序分割成多个包含 Python 代码的文件，也被称为<strong>模块</strong>（module）。Python 支持在一个模块中使用另一个模块内的代码。Python 还有<strong>内置模块</strong>（builtin module），它是 Python 语言自带的，包含了许多重要的功能。本章将学习模块及其使用方式。</p>\n<h3 id=\"81\">8.1　导入内置模块</h3>\n<p>使用模块之前，必须先<strong>导入</strong>（import）：意味着要写代码，以便让 Python 知道从哪获取模块。可使用语法 <code>import [模块名]</code>导入模块，将<code>[模块名]</code>替换为希望导入模块的名字。导入模块之后，即可使用其中的变量和函数。</p>\n<p>Python 有许多不同的模块，包括拥有数学相关功能的 <code>math</code> 模块。可在网页 https://docs.python.org/3/py-modindex.html 查看所有 Python 的内置模块。导入 <code>math</code> 模块的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/h3ds93u</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> math</code></pre>\n<p>导入模块之后，可通过语法<code>[模块名].[代码]</code>使用其中的代码，将<code>[模块名]</code>替换为已导入模块的名称，<code>[代码]</code>替换为希望使用的函数或变量的名称。下面是导入 <code>math</code> 模块并使用其中 <code>pow</code> 函数的示例，该函数接受两个参数 <code>x</code> 和 <code>y</code>，并求 <code>x</code> 的 <code>y</code> 次方：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/hyjo59s</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> math\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  math.<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n\n&gt;&gt; <span class=\"hljs-number\">8.0</span></code></pre>\n<p>首先，在文件顶部导入 <code>math</code> 模块。这里应该在文件顶部导入了所有模块，以便明确程序都使用了哪些模块。接下来，通过 <code>math.pow(2, 3)</code> 调用 <code>pow</code> 函数，返回结果为 <code>8.0</code>。</p>\n<p><code>random</code> 是另一个内置模块。可使用其中一个叫 <code>randint</code> 的函数生成一个随机整数：传入两个整数，函数返回两者之间的一个随机整数。</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hr3fppn</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\"># 你运行的时候输出结果可能不是 52</span>\n<span class=\"hljs-number\">05</span>  <span class=\"hljs-comment\"># 因为是随机生成的！</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  <strong>import</strong> random\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  random.randint(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">52</span></code></pre>\n<p>可使用内置模块 <code>statistics</code> 计算由数字组成的可迭代对象的均值、中间值和众数（mode）。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jrnznoy</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong>import</strong> statistics\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>  <span class=\"hljs-comment\"># 均值</span>\n<span class=\"hljs-number\">07</span>  nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">46</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">2</span>]\n08  statistics.mean(nums)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  <span class=\"hljs-comment\"># 中值</span>\n<span class=\"hljs-number\">12</span>  statistics.median(nums)\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  <span class=\"hljs-comment\"># 众数</span>\n<span class=\"hljs-number\">16</span>  statistics.mode(nums)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">18.857142857142858</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">12</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">33</span></code></pre>\n<p>可使用内置模块 <code>keyword</code> 检查字符串是不是 Python 关键字。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zjphfho</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong>import</strong> keyword\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  keyword.iskeyword(<span class=\"hljs-string\">\"for\"</span>)\n<span class=\"hljs-number\">8</span>  keyword.iskeyword(<span class=\"hljs-string\">\"football\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n<h3 id=\"82\">8.2　导入其他模块</h3>\n<p>本节中，我们将创建一个模块，然后在另一个模块中导入该模块并使用其中的代码。首先，在计算机上创建一个名为 tstp 的新文件夹。在文件夹中，新建一个名为 <code>hello.py</code>的文件。将如下代码添加到 <code>hello.py</code>并保存文件：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z5v9hk3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_hello</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">5</span>      print(<span class=\"hljs-string\">\"Hello\"</span>)</code></pre>\n<p>在 tstp 文件夹中，再新建一个名为 <code>project.py</code> 的文件。将如下代码添加到 <code>project.py</code> 中并保存文件：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/j4xv728</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> hello\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  hello.print_hello()\n\n&gt;&gt; Hello</code></pre>\n<p>本例使用 <code>import</code> 关键字导入第一个示例中的代码。</p>\n<p>导入模块时，其中的代码都会被执行。创建一个名为 <code>module1.py</code> 的模块，代码如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zgyddhp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 1 中的代码</span>\n<span class=\"hljs-number\">5</span>  print(<span class=\"hljs-string\">\"Hello!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello!</code></pre>\n<p>在名为 <code>module2.py</code> 的另一个模块中导入 <code>module1.py</code> 时，其中的代码将会被执行：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jamt9dy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 2 中的代码</span>\n<span class=\"hljs-number\">5</span>  <strong>import</strong> hello\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello!</code></pre>\n<p>这个行为有时候会导致不便。比如你的模块中可能有测试代码，不希望在导入时执行。那么将模块中所有的代码放置在 <code>if __name__ == \"__main__\"</code> 语句中，即可解决该问题。例如，可以将上例中的 <code>module1.py</code> 的代码改成如下示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2xdzc7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 1 中的代码</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">if</span></strong> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">\"__main__\"</span>:\n<span class=\"hljs-number\">6</span>      print(<span class=\"hljs-string\">\"Hello!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello!</code></pre>\n<p>运行该程序时，输出总是不变的。但是在 <code>module2.py</code> 中导入该模块时，<code>module1.py</code> 中的代码不会运行，不会打印 <code>Hello!</code>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jjccxds</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 2 中的代码</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">import</span></strong> hello</code></pre>\n<h3 id=\"83\">8.3　术语表</h3>\n<p><strong>模块</strong>：含有代码的 Python 文件的别称。</p>\n<p><strong>内置模块</strong>：Python 语言中自带的模块，包含诸多重要的功能。</p>\n<p><strong>导入</strong>：编写代码，告诉 Python 从哪导入计划使用的模块。</p>\n<h3 id=\"84\">8.4　挑战练习</h3>\n<p>1．调用 <code>statistics</code> 模块中不同于示例中提到的函数。</p>\n<p>2．创建一个名为 <code>cubed</code> 的模块，在其中写一个函数：接受一个数字作为参数，返回该数字的立方。并在另一个模块中导入并调用该函数。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","source":"_posts/Python无师自通/8_modules.html","raw":"---\ntitle: 模块\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>模块</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#81\">8.1　导入内置模块</a></li>\n<li><a href=\"#82\">8.2　导入其他模块</a></li>\n<li><a href=\"#83\">8.3　术语表</a></li>\n<li><a href=\"#84\">8.4　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“坚韧与志气在任何时代都会带来奇迹。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——乔治 · 华盛顿（George Washington）</span></p>\n</blockquote>\n<p>假设你写了一个有 10000 行代码的程序。如果把全部代码写在一个文件里，查询起来将会非常困难。每次出现错误或异常时，不得不快速浏览 10000 行代码来查找导致问题的那行。为解决这个问题，程序员将大型程序分割成多个包含 Python 代码的文件，也被称为<strong>模块</strong>（module）。Python 支持在一个模块中使用另一个模块内的代码。Python 还有<strong>内置模块</strong>（builtin module），它是 Python 语言自带的，包含了许多重要的功能。本章将学习模块及其使用方式。</p>\n<h3 id=\"81\">8.1　导入内置模块</h3>\n<p>使用模块之前，必须先<strong>导入</strong>（import）：意味着要写代码，以便让 Python 知道从哪获取模块。可使用语法 <code>import [模块名]</code>导入模块，将<code>[模块名]</code>替换为希望导入模块的名字。导入模块之后，即可使用其中的变量和函数。</p>\n<p>Python 有许多不同的模块，包括拥有数学相关功能的 <code>math</code> 模块。可在网页 https://docs.python.org/3/py-modindex.html 查看所有 Python 的内置模块。导入 <code>math</code> 模块的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/h3ds93u</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> math</code></pre>\n<p>导入模块之后，可通过语法<code>[模块名].[代码]</code>使用其中的代码，将<code>[模块名]</code>替换为已导入模块的名称，<code>[代码]</code>替换为希望使用的函数或变量的名称。下面是导入 <code>math</code> 模块并使用其中 <code>pow</code> 函数的示例，该函数接受两个参数 <code>x</code> 和 <code>y</code>，并求 <code>x</code> 的 <code>y</code> 次方：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/hyjo59s</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> math\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  math.<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n\n&gt;&gt; <span class=\"hljs-number\">8.0</span></code></pre>\n<p>首先，在文件顶部导入 <code>math</code> 模块。这里应该在文件顶部导入了所有模块，以便明确程序都使用了哪些模块。接下来，通过 <code>math.pow(2, 3)</code> 调用 <code>pow</code> 函数，返回结果为 <code>8.0</code>。</p>\n<p><code>random</code> 是另一个内置模块。可使用其中一个叫 <code>randint</code> 的函数生成一个随机整数：传入两个整数，函数返回两者之间的一个随机整数。</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hr3fppn</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\"># 你运行的时候输出结果可能不是 52</span>\n<span class=\"hljs-number\">05</span>  <span class=\"hljs-comment\"># 因为是随机生成的！</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  <strong>import</strong> random\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  random.randint(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">52</span></code></pre>\n<p>可使用内置模块 <code>statistics</code> 计算由数字组成的可迭代对象的均值、中间值和众数（mode）。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jrnznoy</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong>import</strong> statistics\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>  <span class=\"hljs-comment\"># 均值</span>\n<span class=\"hljs-number\">07</span>  nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">46</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">2</span>]\n08  statistics.mean(nums)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  <span class=\"hljs-comment\"># 中值</span>\n<span class=\"hljs-number\">12</span>  statistics.median(nums)\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  <span class=\"hljs-comment\"># 众数</span>\n<span class=\"hljs-number\">16</span>  statistics.mode(nums)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">18.857142857142858</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">12</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">33</span></code></pre>\n<p>可使用内置模块 <code>keyword</code> 检查字符串是不是 Python 关键字。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zjphfho</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong>import</strong> keyword\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  keyword.iskeyword(<span class=\"hljs-string\">\"for\"</span>)\n<span class=\"hljs-number\">8</span>  keyword.iskeyword(<span class=\"hljs-string\">\"football\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n<h3 id=\"82\">8.2　导入其他模块</h3>\n<p>本节中，我们将创建一个模块，然后在另一个模块中导入该模块并使用其中的代码。首先，在计算机上创建一个名为 tstp 的新文件夹。在文件夹中，新建一个名为 <code>hello.py</code>的文件。将如下代码添加到 <code>hello.py</code>并保存文件：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z5v9hk3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_hello</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">5</span>      print(<span class=\"hljs-string\">\"Hello\"</span>)</code></pre>\n<p>在 tstp 文件夹中，再新建一个名为 <code>project.py</code> 的文件。将如下代码添加到 <code>project.py</code> 中并保存文件：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/j4xv728</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> hello\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  hello.print_hello()\n\n&gt;&gt; Hello</code></pre>\n<p>本例使用 <code>import</code> 关键字导入第一个示例中的代码。</p>\n<p>导入模块时，其中的代码都会被执行。创建一个名为 <code>module1.py</code> 的模块，代码如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zgyddhp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 1 中的代码</span>\n<span class=\"hljs-number\">5</span>  print(<span class=\"hljs-string\">\"Hello!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello!</code></pre>\n<p>在名为 <code>module2.py</code> 的另一个模块中导入 <code>module1.py</code> 时，其中的代码将会被执行：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jamt9dy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 2 中的代码</span>\n<span class=\"hljs-number\">5</span>  <strong>import</strong> hello\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello!</code></pre>\n<p>这个行为有时候会导致不便。比如你的模块中可能有测试代码，不希望在导入时执行。那么将模块中所有的代码放置在 <code>if __name__ == \"__main__\"</code> 语句中，即可解决该问题。例如，可以将上例中的 <code>module1.py</code> 的代码改成如下示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2xdzc7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 1 中的代码</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">if</span></strong> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">\"__main__\"</span>:\n<span class=\"hljs-number\">6</span>      print(<span class=\"hljs-string\">\"Hello!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello!</code></pre>\n<p>运行该程序时，输出总是不变的。但是在 <code>module2.py</code> 中导入该模块时，<code>module1.py</code> 中的代码不会运行，不会打印 <code>Hello!</code>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jjccxds</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 2 中的代码</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">import</span></strong> hello</code></pre>\n<h3 id=\"83\">8.3　术语表</h3>\n<p><strong>模块</strong>：含有代码的 Python 文件的别称。</p>\n<p><strong>内置模块</strong>：Python 语言中自带的模块，包含诸多重要的功能。</p>\n<p><strong>导入</strong>：编写代码，告诉 Python 从哪导入计划使用的模块。</p>\n<h3 id=\"84\">8.4　挑战练习</h3>\n<p>1．调用 <code>statistics</code> 模块中不同于示例中提到的函数。</p>\n<p>2．创建一个名为 <code>cubed</code> 的模块，在其中写一个函数：接受一个数字作为参数，返回该数字的立方。并在另一个模块中导入并调用该函数。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","slug":"Python无师自通/8_modules","published":1,"date":"2019-06-06T05:58:45.855Z","updated":"2019-06-06T05:58:45.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwk932se0000f1h7miwguuhr","content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>模块</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#81\">8.1　导入内置模块</a></li>\n<li><a href=\"#82\">8.2　导入其他模块</a></li>\n<li><a href=\"#83\">8.3　术语表</a></li>\n<li><a href=\"#84\">8.4　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“坚韧与志气在任何时代都会带来奇迹。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——乔治 · 华盛顿（George Washington）</span></p>\n</blockquote>\n<p>假设你写了一个有 10000 行代码的程序。如果把全部代码写在一个文件里，查询起来将会非常困难。每次出现错误或异常时，不得不快速浏览 10000 行代码来查找导致问题的那行。为解决这个问题，程序员将大型程序分割成多个包含 Python 代码的文件，也被称为<strong>模块</strong>（module）。Python 支持在一个模块中使用另一个模块内的代码。Python 还有<strong>内置模块</strong>（builtin module），它是 Python 语言自带的，包含了许多重要的功能。本章将学习模块及其使用方式。</p>\n<h3 id=\"81\">8.1　导入内置模块</h3>\n<p>使用模块之前，必须先<strong>导入</strong>（import）：意味着要写代码，以便让 Python 知道从哪获取模块。可使用语法 <code>import [模块名]</code>导入模块，将<code>[模块名]</code>替换为希望导入模块的名字。导入模块之后，即可使用其中的变量和函数。</p>\n<p>Python 有许多不同的模块，包括拥有数学相关功能的 <code>math</code> 模块。可在网页 https://docs.python.org/3/py-modindex.html 查看所有 Python 的内置模块。导入 <code>math</code> 模块的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/h3ds93u</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> math</code></pre>\n<p>导入模块之后，可通过语法<code>[模块名].[代码]</code>使用其中的代码，将<code>[模块名]</code>替换为已导入模块的名称，<code>[代码]</code>替换为希望使用的函数或变量的名称。下面是导入 <code>math</code> 模块并使用其中 <code>pow</code> 函数的示例，该函数接受两个参数 <code>x</code> 和 <code>y</code>，并求 <code>x</code> 的 <code>y</code> 次方：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/hyjo59s</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> math\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  math.<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n\n&gt;&gt; <span class=\"hljs-number\">8.0</span></code></pre>\n<p>首先，在文件顶部导入 <code>math</code> 模块。这里应该在文件顶部导入了所有模块，以便明确程序都使用了哪些模块。接下来，通过 <code>math.pow(2, 3)</code> 调用 <code>pow</code> 函数，返回结果为 <code>8.0</code>。</p>\n<p><code>random</code> 是另一个内置模块。可使用其中一个叫 <code>randint</code> 的函数生成一个随机整数：传入两个整数，函数返回两者之间的一个随机整数。</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hr3fppn</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\"># 你运行的时候输出结果可能不是 52</span>\n<span class=\"hljs-number\">05</span>  <span class=\"hljs-comment\"># 因为是随机生成的！</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  <strong>import</strong> random\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  random.randint(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">52</span></code></pre>\n<p>可使用内置模块 <code>statistics</code> 计算由数字组成的可迭代对象的均值、中间值和众数（mode）。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jrnznoy</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong>import</strong> statistics\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>  <span class=\"hljs-comment\"># 均值</span>\n<span class=\"hljs-number\">07</span>  nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">46</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">2</span>]\n08  statistics.mean(nums)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  <span class=\"hljs-comment\"># 中值</span>\n<span class=\"hljs-number\">12</span>  statistics.median(nums)\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  <span class=\"hljs-comment\"># 众数</span>\n<span class=\"hljs-number\">16</span>  statistics.mode(nums)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">18.857142857142858</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">12</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">33</span></code></pre>\n<p>可使用内置模块 <code>keyword</code> 检查字符串是不是 Python 关键字。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zjphfho</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong>import</strong> keyword\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  keyword.iskeyword(<span class=\"hljs-string\">\"for\"</span>)\n<span class=\"hljs-number\">8</span>  keyword.iskeyword(<span class=\"hljs-string\">\"football\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n<h3 id=\"82\">8.2　导入其他模块</h3>\n<p>本节中，我们将创建一个模块，然后在另一个模块中导入该模块并使用其中的代码。首先，在计算机上创建一个名为 tstp 的新文件夹。在文件夹中，新建一个名为 <code>hello.py</code>的文件。将如下代码添加到 <code>hello.py</code>并保存文件：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z5v9hk3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_hello</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">5</span>      print(<span class=\"hljs-string\">\"Hello\"</span>)</code></pre>\n<p>在 tstp 文件夹中，再新建一个名为 <code>project.py</code> 的文件。将如下代码添加到 <code>project.py</code> 中并保存文件：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/j4xv728</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> hello\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  hello.print_hello()\n\n&gt;&gt; Hello</code></pre>\n<p>本例使用 <code>import</code> 关键字导入第一个示例中的代码。</p>\n<p>导入模块时，其中的代码都会被执行。创建一个名为 <code>module1.py</code> 的模块，代码如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zgyddhp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 1 中的代码</span>\n<span class=\"hljs-number\">5</span>  print(<span class=\"hljs-string\">\"Hello!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello!</code></pre>\n<p>在名为 <code>module2.py</code> 的另一个模块中导入 <code>module1.py</code> 时，其中的代码将会被执行：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jamt9dy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 2 中的代码</span>\n<span class=\"hljs-number\">5</span>  <strong>import</strong> hello\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello!</code></pre>\n<p>这个行为有时候会导致不便。比如你的模块中可能有测试代码，不希望在导入时执行。那么将模块中所有的代码放置在 <code>if __name__ == \"__main__\"</code> 语句中，即可解决该问题。例如，可以将上例中的 <code>module1.py</code> 的代码改成如下示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2xdzc7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 1 中的代码</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">if</span></strong> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">\"__main__\"</span>:\n<span class=\"hljs-number\">6</span>      print(<span class=\"hljs-string\">\"Hello!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello!</code></pre>\n<p>运行该程序时，输出总是不变的。但是在 <code>module2.py</code> 中导入该模块时，<code>module1.py</code> 中的代码不会运行，不会打印 <code>Hello!</code>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jjccxds</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 2 中的代码</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">import</span></strong> hello</code></pre>\n<h3 id=\"83\">8.3　术语表</h3>\n<p><strong>模块</strong>：含有代码的 Python 文件的别称。</p>\n<p><strong>内置模块</strong>：Python 语言中自带的模块，包含诸多重要的功能。</p>\n<p><strong>导入</strong>：编写代码，告诉 Python 从哪导入计划使用的模块。</p>\n<h3 id=\"84\">8.4　挑战练习</h3>\n<p>1．调用 <code>statistics</code> 模块中不同于示例中提到的函数。</p>\n<p>2．创建一个名为 <code>cubed</code> 的模块，在其中写一个函数：接受一个数字作为参数，返回该数字的立方。并在另一个模块中导入并调用该函数。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>模块</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#81\">8.1　导入内置模块</a></li>\n<li><a href=\"#82\">8.2　导入其他模块</a></li>\n<li><a href=\"#83\">8.3　术语表</a></li>\n<li><a href=\"#84\">8.4　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“坚韧与志气在任何时代都会带来奇迹。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——乔治 · 华盛顿（George Washington）</span></p>\n</blockquote>\n<p>假设你写了一个有 10000 行代码的程序。如果把全部代码写在一个文件里，查询起来将会非常困难。每次出现错误或异常时，不得不快速浏览 10000 行代码来查找导致问题的那行。为解决这个问题，程序员将大型程序分割成多个包含 Python 代码的文件，也被称为<strong>模块</strong>（module）。Python 支持在一个模块中使用另一个模块内的代码。Python 还有<strong>内置模块</strong>（builtin module），它是 Python 语言自带的，包含了许多重要的功能。本章将学习模块及其使用方式。</p>\n<h3 id=\"81\">8.1　导入内置模块</h3>\n<p>使用模块之前，必须先<strong>导入</strong>（import）：意味着要写代码，以便让 Python 知道从哪获取模块。可使用语法 <code>import [模块名]</code>导入模块，将<code>[模块名]</code>替换为希望导入模块的名字。导入模块之后，即可使用其中的变量和函数。</p>\n<p>Python 有许多不同的模块，包括拥有数学相关功能的 <code>math</code> 模块。可在网页 https://docs.python.org/3/py-modindex.html 查看所有 Python 的内置模块。导入 <code>math</code> 模块的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/h3ds93u</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> math</code></pre>\n<p>导入模块之后，可通过语法<code>[模块名].[代码]</code>使用其中的代码，将<code>[模块名]</code>替换为已导入模块的名称，<code>[代码]</code>替换为希望使用的函数或变量的名称。下面是导入 <code>math</code> 模块并使用其中 <code>pow</code> 函数的示例，该函数接受两个参数 <code>x</code> 和 <code>y</code>，并求 <code>x</code> 的 <code>y</code> 次方：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/hyjo59s</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> math\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  math.<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n\n&gt;&gt; <span class=\"hljs-number\">8.0</span></code></pre>\n<p>首先，在文件顶部导入 <code>math</code> 模块。这里应该在文件顶部导入了所有模块，以便明确程序都使用了哪些模块。接下来，通过 <code>math.pow(2, 3)</code> 调用 <code>pow</code> 函数，返回结果为 <code>8.0</code>。</p>\n<p><code>random</code> 是另一个内置模块。可使用其中一个叫 <code>randint</code> 的函数生成一个随机整数：传入两个整数，函数返回两者之间的一个随机整数。</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hr3fppn</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\"># 你运行的时候输出结果可能不是 52</span>\n<span class=\"hljs-number\">05</span>  <span class=\"hljs-comment\"># 因为是随机生成的！</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08  <strong>import</strong> random\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  random.randint(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">52</span></code></pre>\n<p>可使用内置模块 <code>statistics</code> 计算由数字组成的可迭代对象的均值、中间值和众数（mode）。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jrnznoy</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong>import</strong> statistics\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>  <span class=\"hljs-comment\"># 均值</span>\n<span class=\"hljs-number\">07</span>  nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">46</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">2</span>]\n08  statistics.mean(nums)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  <span class=\"hljs-comment\"># 中值</span>\n<span class=\"hljs-number\">12</span>  statistics.median(nums)\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>  <span class=\"hljs-comment\"># 众数</span>\n<span class=\"hljs-number\">16</span>  statistics.mode(nums)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">18.857142857142858</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">12</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">33</span></code></pre>\n<p>可使用内置模块 <code>keyword</code> 检查字符串是不是 Python 关键字。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zjphfho</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong>import</strong> keyword\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  keyword.iskeyword(<span class=\"hljs-string\">\"for\"</span>)\n<span class=\"hljs-number\">8</span>  keyword.iskeyword(<span class=\"hljs-string\">\"football\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> True\n<span class=\"hljs-meta\">&gt;&gt;</span> False</code></pre>\n<h3 id=\"82\">8.2　导入其他模块</h3>\n<p>本节中，我们将创建一个模块，然后在另一个模块中导入该模块并使用其中的代码。首先，在计算机上创建一个名为 tstp 的新文件夹。在文件夹中，新建一个名为 <code>hello.py</code>的文件。将如下代码添加到 <code>hello.py</code>并保存文件：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z5v9hk3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_hello</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">5</span>      print(<span class=\"hljs-string\">\"Hello\"</span>)</code></pre>\n<p>在 tstp 文件夹中，再新建一个名为 <code>project.py</code> 的文件。将如下代码添加到 <code>project.py</code> 中并保存文件：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/j4xv728</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> hello\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  hello.print_hello()\n\n&gt;&gt; Hello</code></pre>\n<p>本例使用 <code>import</code> 关键字导入第一个示例中的代码。</p>\n<p>导入模块时，其中的代码都会被执行。创建一个名为 <code>module1.py</code> 的模块，代码如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zgyddhp</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 1 中的代码</span>\n<span class=\"hljs-number\">5</span>  print(<span class=\"hljs-string\">\"Hello!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello!</code></pre>\n<p>在名为 <code>module2.py</code> 的另一个模块中导入 <code>module1.py</code> 时，其中的代码将会被执行：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jamt9dy</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 2 中的代码</span>\n<span class=\"hljs-number\">5</span>  <strong>import</strong> hello\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello!</code></pre>\n<p>这个行为有时候会导致不便。比如你的模块中可能有测试代码，不希望在导入时执行。那么将模块中所有的代码放置在 <code>if __name__ == \"__main__\"</code> 语句中，即可解决该问题。例如，可以将上例中的 <code>module1.py</code> 的代码改成如下示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j2xdzc7</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 1 中的代码</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">if</span></strong> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">\"__main__\"</span>:\n<span class=\"hljs-number\">6</span>      print(<span class=\"hljs-string\">\"Hello!\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello!</code></pre>\n<p>运行该程序时，输出总是不变的。但是在 <code>module2.py</code> 中导入该模块时，<code>module1.py</code> 中的代码不会运行，不会打印 <code>Hello!</code>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jjccxds</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-comment\"># 模块 2 中的代码</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">import</span></strong> hello</code></pre>\n<h3 id=\"83\">8.3　术语表</h3>\n<p><strong>模块</strong>：含有代码的 Python 文件的别称。</p>\n<p><strong>内置模块</strong>：Python 语言中自带的模块，包含诸多重要的功能。</p>\n<p><strong>导入</strong>：编写代码，告诉 Python 从哪导入计划使用的模块。</p>\n<h3 id=\"84\">8.4　挑战练习</h3>\n<p>1．调用 <code>statistics</code> 模块中不同于示例中提到的函数。</p>\n<p>2．创建一个名为 <code>cubed</code> 的模块，在其中写一个函数：接受一个数字作为参数，返回该数字的立方。并在另一个模块中导入并调用该函数。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>"},{"title":"文件","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>文件</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#91\">9.1　写文件操作</a></li>\n<li><a href=\"#92\">9.2　自动关闭文件</a></li>\n<li><a href=\"#93\">9.3　读取文件</a></li>\n<li><a href=\"#94csv\">9.4　CSV 文件</a></li>\n<li><a href=\"#95\">9.5　术语表</a></li>\n<li><a href=\"#96\">9.6　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“我坚信，自我教育是唯一的教育形式。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——艾萨克 · 阿西莫夫（Isaac Asimov）</span></p>\n</blockquote>\n<p>我们可以使用 Python 处理文件。例如，可使用 Python 读取或写文件数据。<strong>读取</strong>（reading）文件数据指的是访问文件中的数据。向文件中<strong>写</strong>（writing）数据指的是添加或修改文件中的数据。本章将学习文件处理的基础知识。</p>\n<h3 id=\"91\">9.1　写文件操作</h3>\n<p>处理文件的第一步是使用 Python 内置的 <code>open</code> 函数打开文件。<code>open</code> 函数有两个参数：一个代表要打开文件路径的字符串，另一个代表打开文件的模式。</p>\n<p>文件路径（file path），指的是文件在计算机中所处的位置。例如，<code>/Users/bob/st.txt</code> 是文件 <code>st.txt</code> 的文件路径。斜杠分隔的每个单词都是一个文件夹的名称。加在一起就代表了文件的位置。如果文件路径中只有文件的名字（没有斜杠分隔的文件夹），Python 将会在当前运行程序所在的目录中查找文件。操作时避免直接手写文件路径。类 UNIX 操作系统和 Windows 在文件路径中使用的斜杠数量不同。为了避免程序在不同操作系统中运行出错，应使用内置的 <code>os</code> 模块来创建文件路径。模块中的 <code>path</code> 函数接受文件路径中的文件夹名作为参数，并自动构建完整的文件路径。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hkqfkar</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong>import</strong> os\n<span class=\"hljs-number\">5</span>  os.path.join(<span class=\"hljs-string\">\"Users\"</span>,\n<span class=\"hljs-number\">6</span>               <span class=\"hljs-string\">\"bob\"</span>,\n<span class=\"hljs-number\">7</span>               <span class=\"hljs-string\">\"st.txt\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Users/bob/st.txt'</span></code></pre>\n<p>使用 <code>path</code> 函数创建文件路径，可以确保其在任何操作系统中都可以正常运行。但是在处理文件路径时还是容易出现问题。如果碰到问题，访问以下链接来获取更多帮助：http://theselftaughtprogrammer.io/filepaths。</p>\n<p>传入 <code>open</code> 函数的参数模式，决定了对打开的文件执行什么操作。以下是支持的文件打开模式。</p>\n<ul>\n<li><code>\"r\"</code> 以只读模式打开文件。</li>\n<li><code>\"w\"</code> 以只写模式打开文件。如果文件已存在，会覆盖文件。如果文件不存在，则会创建一个新文件。</li>\n<li><code>\"w+\"</code> 以可读可写模式打开文件。如果文件已存在，会覆盖原文件。如果文件不存在，则创建一个新文件进行读写操作。</li>\n</ul>\n<p><code>open</code> 函数会返回一个叫<strong>文件对象</strong>（file object）的对象，可用来读/写文件。使用 <code>\"w\"</code> 模式时，如果没有现存文件，<code>open</code> 函数会在运行程序的目录中创建一个新文件。</p>\n<p>然后，可使用文件对象的 <code>write</code> 方法写入文件，并通过 <code>close</code> 方法关闭文件。如果使用了 <code>open</code> 函数打开文件，就必须要通过 <code>close</code> 方法关闭。如果你使用 <code>open</code> 函数打开了多个文件但又忘记关闭，有可能会导致程序出错。下面是一个读、写、关闭文件的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zfgczj5</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  st = open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"w\"</span>)\n<span class=\"hljs-number\">5</span>  st.write(<span class=\"hljs-string\">\"Hi from Python!\"</span>)\n<span class=\"hljs-number\">6</span>  st.close()</code></pre>\n<p>上例使用 <code>open</code> 函数打开了文件，并将返回的文件对象保存在变量 <code>st</code> 中。然后调用 <code>st</code> 的 <code>write</code> 方法，接受一个字符串作为参数，再写入 Python 创建的新文件中。最后，调用文件对象的 <code>close</code> 方法关闭文件。</p>\n<h3 id=\"92\">9.2　自动关闭文件</h3>\n<p>还有一种我们更推荐使用的文件打开方法，可以避免忘记关闭文件。如果使用该方法，要将所有需要访问的文件对象的代码写在 with <strong>语句</strong>之中：一种复合语句，Python 在执行完该语句时会自动执行下一个的行为。</p>\n<p>使用 with 语句打开文件的语法是“<code>with open([文件路径], [模式]) as [变量名]: [执行代码]</code>”。[文件路径] 代表文件所在的位置，[模式] 代表以何种模式打开文件，[变量名]代表文件对象被赋予的变量名，[执行代码]则是需要访问文件对象变量的代码。</p>\n<p>在使用上述语法打开文件时，会在[执行代码]运行完毕后自动关闭文件。下面是使用新语法读、写、关闭文件的示例：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jt9guu2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">5</span>      f.write(<span class=\"hljs-string\">\"Hi from Python!\"</span>)\n</code></pre>\n<p>只要还在 with 语句内，就可以访问文件对象。在本例中，文件对象被命名为 <code>f</code>。Python 执行完 with 语句中的代码后，会自动关闭文件。</p>\n<h3 id=\"93\">9.3　读取文件</h3>\n<p>如果要读取文件，可传入 <code>\"r\"</code> 作为 <code>open</code> 函数的第二个参数。然后调用文件对象的 <code>read</code> 方法，会返回一个包含文件所有行的可迭代对象。示例如下：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hmuamr7</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\"># 确保在上例中已经</span>\n<span class=\"hljs-number\">05</span>  <span class=\"hljs-comment\"># 创建了文件</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"r\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">10</span>      print(f.read())\n\n&gt;&gt; Hi <span class=\"hljs-keyword\">from</span> Python!\n</code></pre>\n<p>在没有关闭又重新打开文件的情况下，你只能调用文件对象的 read 方法一次。因此，如果后续程序需要，应该将文件内容保存在一个变量或容器中。下面是将上例中的文件内容保存在列表中的示例：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hkzhxdz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">04</span>  my_list = <span class=\"hljs-keyword\">list</span>()\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  with open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"r\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">08</span>      my_list.append(f.read())\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  <span class=\"hljs-keyword\">print</span>(my_list)\n\n&gt;&gt; [<span class=\"hljs-string\">'Hi from Python!'</span>]\n</code></pre>\n<p>之后就可以在程序中访问该数据了。</p>\n<h3 id=\"94csv\">9.4　CSV 文件</h3>\n<p>Python 有一个内置模块支持处理 <strong>CSV 文件</strong>（CSV file）。CSV 文件的后缀为 <code>.csv</code>，它使用英文逗号来分隔数据（CSV 是逗号分隔值的英文简称）。需要管理如 Excel 等报表软件的程序员经常使用 CSV 文件。CSV 文件中用逗号分隔的每个数据代表报表中的一个单元格，每行代表一个报表行。<strong>分隔符</strong>（delimiter）是 CSV 文件中用来分隔数据的符号，如逗号或竖线“<code>|”</code>。下面是 CSV 文件 <code>self-taught.csv</code> 中的内容示例：</p>\n<p>one,two,three four,five,six</p>\n<p>如果在 Excel 中载入该文件，则会在第一行看到 one、two 和 three 各占一格，在第二行看到 four、five 和 six 各占一格。</p>\n<p>也可使用 with 语句打开 CSV 文件，但是在语句中需要使用 <code>csv</code> 模块将文件对象转化成 <code>csv</code> 对象。<code>csv</code> 模块有一个叫 <code>writer</code> 的方法，可接受一个文件对象和一个分隔符。<code>writer</code> 方法返回一个带 <code>writerow</code> 方法的 <code>csv</code> 对象。<code>writerow</code> 方法接受一个列表作为参数，可用来向 CSV 文件写入数据。列表中的每个元素都会被写入，并传入 <code>writer</code> 方法的分隔符来分隔。<code>writerow</code> 方法只创建一行数据，因此要创建两行数据必须调用该方法两次。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/go9wepf</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> csv\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.csv\"</span>, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">8</span>      w = csv.writer(f,\n<span class=\"hljs-number\">09</span>                    delimiter=<span class=\"hljs-string\">\",\"</span>)\n<span class=\"hljs-number\">10</span>      w.writerow([<span class=\"hljs-string\">\"one\"</span>,\n<span class=\"hljs-number\">11</span>                  <span class=\"hljs-string\">\"two\"</span>,\n<span class=\"hljs-number\">12</span>                  <span class=\"hljs-string\">\"three\"</span>])\n<span class=\"hljs-number\">13</span>      w.writerow([<span class=\"hljs-string\">\"four\"</span>,\n<span class=\"hljs-number\">14</span>                  <span class=\"hljs-string\">\"five\"</span>,\n<span class=\"hljs-number\">15</span>                  <span class=\"hljs-string\">\"six\"</span>])</code></pre>\n<p>该程序会创建一个叫 <code>st.csv</code> 的文件，在文本编辑器中打开该文件时，内容大致如下：</p>\n<p>one,two,three</p>\n<p>four,five,six</p>\n<p>如果将文件载入 Excel（或 Google 表格）中，你不会看到逗号，而是在第一行看到 one、two 和 three 各占一格，在第二行看到 four、five 和 six 各占一格。</p>\n<p>还可以使用 <code>csv</code> 模块读取文件的内容。在读取 CSV 文件的内容之前，首先传入 <code>\"r\"</code> 作为 <code>open</code> 函数的第二个参数，然后在 with 语句中调用 <code>reader</code> 方法，传入文件对象并以逗号作为分隔符，这会返回一个可迭代对象，可用来访问文件中的每行数据。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gvcdgxf</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\">#确保已经在上例中创建了数据文件</span>\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>  <strong><span class=\"hljs-keyword\">import</span></strong> csv\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.csv\"</span>, <span class=\"hljs-string\">\"r\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">13</span>      r = csv.reader(f, delimiter=<span class=\"hljs-string\">\",\"</span>)\n<span class=\"hljs-number\">14</span>      <strong><span class=\"hljs-keyword\">for</span></strong> row <strong><span class=\"hljs-keyword\">in</span></strong> r:\n<span class=\"hljs-number\">15</span>          print(<span class=\"hljs-string\">\",\"</span>.join(row))\n\n&gt;&gt; one,two,three\n&gt;&gt; four,five,six</code></pre>\n<p>本例中打开了 <code>st.csv</code> 文件以用于读取数据，并使用 <code>reader</code> 方法将文件对象转换为了 <code>csv</code> 对象。然后使用循环遍历 <code>csv</code> 对象。每次循环时，调用逗号字符串的 <code>join</code> 方法，在文件每行数据的中间添加逗号，并打印其在原文件中的样子（由逗号分隔）。</p>\n<h3 id=\"95\">9.5　术语表</h3>\n<p><strong>读取</strong>：访问文件的内容。</p>\n<p><strong>写</strong>：添加或修改文件中的数据。</p>\n<p><strong>文件路径</strong>：文件在计算机中存储的位置。</p>\n<p><strong>with 语句</strong>：一种复合语句，当 Python 退出语句时会自动执行的一个操作。</p>\n<p><strong>文件对象</strong>：可用来读写文件的对象。</p>\n<p><strong>CSV 文件</strong>：后缀为 <code>.csv</code> 的文件，使用逗号分隔数据（CSV 表示逗号分隔的值）。常用在管理报表的程序中。</p>\n<p><strong>分隔符</strong>：用来分隔 CSV 文件中数据的符号，如逗号。</p>\n<h3 id=\"96\">9.6　挑战练习</h3>\n<p>1．在计算机上找一个文件，并使用 Python 打印其内容。</p>\n<p>2．编写一个程序来向用户提问，并将回答保存至文件。</p>\n<p>3．将以下列表中的元素写入一个 CSV 文件：<code>[[\"Top Gun\", \"Risky Business\", \"Minority Report\"], [\"Titanic\", \"The Revenant\", \"Inception\"], [\"Training Day\", \"Man on Fire\", \"Flight\"]]</code>。每个列表应该在文件中各占一行，其中元素使用逗号分隔。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","source":"_posts/Python无师自通/9_file.html","raw":"---\ntitle: 文件\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>文件</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#91\">9.1　写文件操作</a></li>\n<li><a href=\"#92\">9.2　自动关闭文件</a></li>\n<li><a href=\"#93\">9.3　读取文件</a></li>\n<li><a href=\"#94csv\">9.4　CSV 文件</a></li>\n<li><a href=\"#95\">9.5　术语表</a></li>\n<li><a href=\"#96\">9.6　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“我坚信，自我教育是唯一的教育形式。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——艾萨克 · 阿西莫夫（Isaac Asimov）</span></p>\n</blockquote>\n<p>我们可以使用 Python 处理文件。例如，可使用 Python 读取或写文件数据。<strong>读取</strong>（reading）文件数据指的是访问文件中的数据。向文件中<strong>写</strong>（writing）数据指的是添加或修改文件中的数据。本章将学习文件处理的基础知识。</p>\n<h3 id=\"91\">9.1　写文件操作</h3>\n<p>处理文件的第一步是使用 Python 内置的 <code>open</code> 函数打开文件。<code>open</code> 函数有两个参数：一个代表要打开文件路径的字符串，另一个代表打开文件的模式。</p>\n<p>文件路径（file path），指的是文件在计算机中所处的位置。例如，<code>/Users/bob/st.txt</code> 是文件 <code>st.txt</code> 的文件路径。斜杠分隔的每个单词都是一个文件夹的名称。加在一起就代表了文件的位置。如果文件路径中只有文件的名字（没有斜杠分隔的文件夹），Python 将会在当前运行程序所在的目录中查找文件。操作时避免直接手写文件路径。类 UNIX 操作系统和 Windows 在文件路径中使用的斜杠数量不同。为了避免程序在不同操作系统中运行出错，应使用内置的 <code>os</code> 模块来创建文件路径。模块中的 <code>path</code> 函数接受文件路径中的文件夹名作为参数，并自动构建完整的文件路径。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hkqfkar</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong>import</strong> os\n<span class=\"hljs-number\">5</span>  os.path.join(<span class=\"hljs-string\">\"Users\"</span>,\n<span class=\"hljs-number\">6</span>               <span class=\"hljs-string\">\"bob\"</span>,\n<span class=\"hljs-number\">7</span>               <span class=\"hljs-string\">\"st.txt\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Users/bob/st.txt'</span></code></pre>\n<p>使用 <code>path</code> 函数创建文件路径，可以确保其在任何操作系统中都可以正常运行。但是在处理文件路径时还是容易出现问题。如果碰到问题，访问以下链接来获取更多帮助：http://theselftaughtprogrammer.io/filepaths。</p>\n<p>传入 <code>open</code> 函数的参数模式，决定了对打开的文件执行什么操作。以下是支持的文件打开模式。</p>\n<ul>\n<li><code>\"r\"</code> 以只读模式打开文件。</li>\n<li><code>\"w\"</code> 以只写模式打开文件。如果文件已存在，会覆盖文件。如果文件不存在，则会创建一个新文件。</li>\n<li><code>\"w+\"</code> 以可读可写模式打开文件。如果文件已存在，会覆盖原文件。如果文件不存在，则创建一个新文件进行读写操作。</li>\n</ul>\n<p><code>open</code> 函数会返回一个叫<strong>文件对象</strong>（file object）的对象，可用来读/写文件。使用 <code>\"w\"</code> 模式时，如果没有现存文件，<code>open</code> 函数会在运行程序的目录中创建一个新文件。</p>\n<p>然后，可使用文件对象的 <code>write</code> 方法写入文件，并通过 <code>close</code> 方法关闭文件。如果使用了 <code>open</code> 函数打开文件，就必须要通过 <code>close</code> 方法关闭。如果你使用 <code>open</code> 函数打开了多个文件但又忘记关闭，有可能会导致程序出错。下面是一个读、写、关闭文件的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zfgczj5</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  st = open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"w\"</span>)\n<span class=\"hljs-number\">5</span>  st.write(<span class=\"hljs-string\">\"Hi from Python!\"</span>)\n<span class=\"hljs-number\">6</span>  st.close()</code></pre>\n<p>上例使用 <code>open</code> 函数打开了文件，并将返回的文件对象保存在变量 <code>st</code> 中。然后调用 <code>st</code> 的 <code>write</code> 方法，接受一个字符串作为参数，再写入 Python 创建的新文件中。最后，调用文件对象的 <code>close</code> 方法关闭文件。</p>\n<h3 id=\"92\">9.2　自动关闭文件</h3>\n<p>还有一种我们更推荐使用的文件打开方法，可以避免忘记关闭文件。如果使用该方法，要将所有需要访问的文件对象的代码写在 with <strong>语句</strong>之中：一种复合语句，Python 在执行完该语句时会自动执行下一个的行为。</p>\n<p>使用 with 语句打开文件的语法是“<code>with open([文件路径], [模式]) as [变量名]: [执行代码]</code>”。[文件路径] 代表文件所在的位置，[模式] 代表以何种模式打开文件，[变量名]代表文件对象被赋予的变量名，[执行代码]则是需要访问文件对象变量的代码。</p>\n<p>在使用上述语法打开文件时，会在[执行代码]运行完毕后自动关闭文件。下面是使用新语法读、写、关闭文件的示例：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jt9guu2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">5</span>      f.write(<span class=\"hljs-string\">\"Hi from Python!\"</span>)\n</code></pre>\n<p>只要还在 with 语句内，就可以访问文件对象。在本例中，文件对象被命名为 <code>f</code>。Python 执行完 with 语句中的代码后，会自动关闭文件。</p>\n<h3 id=\"93\">9.3　读取文件</h3>\n<p>如果要读取文件，可传入 <code>\"r\"</code> 作为 <code>open</code> 函数的第二个参数。然后调用文件对象的 <code>read</code> 方法，会返回一个包含文件所有行的可迭代对象。示例如下：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hmuamr7</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\"># 确保在上例中已经</span>\n<span class=\"hljs-number\">05</span>  <span class=\"hljs-comment\"># 创建了文件</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"r\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">10</span>      print(f.read())\n\n&gt;&gt; Hi <span class=\"hljs-keyword\">from</span> Python!\n</code></pre>\n<p>在没有关闭又重新打开文件的情况下，你只能调用文件对象的 read 方法一次。因此，如果后续程序需要，应该将文件内容保存在一个变量或容器中。下面是将上例中的文件内容保存在列表中的示例：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hkzhxdz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">04</span>  my_list = <span class=\"hljs-keyword\">list</span>()\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  with open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"r\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">08</span>      my_list.append(f.read())\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  <span class=\"hljs-keyword\">print</span>(my_list)\n\n&gt;&gt; [<span class=\"hljs-string\">'Hi from Python!'</span>]\n</code></pre>\n<p>之后就可以在程序中访问该数据了。</p>\n<h3 id=\"94csv\">9.4　CSV 文件</h3>\n<p>Python 有一个内置模块支持处理 <strong>CSV 文件</strong>（CSV file）。CSV 文件的后缀为 <code>.csv</code>，它使用英文逗号来分隔数据（CSV 是逗号分隔值的英文简称）。需要管理如 Excel 等报表软件的程序员经常使用 CSV 文件。CSV 文件中用逗号分隔的每个数据代表报表中的一个单元格，每行代表一个报表行。<strong>分隔符</strong>（delimiter）是 CSV 文件中用来分隔数据的符号，如逗号或竖线“<code>|”</code>。下面是 CSV 文件 <code>self-taught.csv</code> 中的内容示例：</p>\n<p>one,two,three four,five,six</p>\n<p>如果在 Excel 中载入该文件，则会在第一行看到 one、two 和 three 各占一格，在第二行看到 four、five 和 six 各占一格。</p>\n<p>也可使用 with 语句打开 CSV 文件，但是在语句中需要使用 <code>csv</code> 模块将文件对象转化成 <code>csv</code> 对象。<code>csv</code> 模块有一个叫 <code>writer</code> 的方法，可接受一个文件对象和一个分隔符。<code>writer</code> 方法返回一个带 <code>writerow</code> 方法的 <code>csv</code> 对象。<code>writerow</code> 方法接受一个列表作为参数，可用来向 CSV 文件写入数据。列表中的每个元素都会被写入，并传入 <code>writer</code> 方法的分隔符来分隔。<code>writerow</code> 方法只创建一行数据，因此要创建两行数据必须调用该方法两次。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/go9wepf</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> csv\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.csv\"</span>, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">8</span>      w = csv.writer(f,\n<span class=\"hljs-number\">09</span>                    delimiter=<span class=\"hljs-string\">\",\"</span>)\n<span class=\"hljs-number\">10</span>      w.writerow([<span class=\"hljs-string\">\"one\"</span>,\n<span class=\"hljs-number\">11</span>                  <span class=\"hljs-string\">\"two\"</span>,\n<span class=\"hljs-number\">12</span>                  <span class=\"hljs-string\">\"three\"</span>])\n<span class=\"hljs-number\">13</span>      w.writerow([<span class=\"hljs-string\">\"four\"</span>,\n<span class=\"hljs-number\">14</span>                  <span class=\"hljs-string\">\"five\"</span>,\n<span class=\"hljs-number\">15</span>                  <span class=\"hljs-string\">\"six\"</span>])</code></pre>\n<p>该程序会创建一个叫 <code>st.csv</code> 的文件，在文本编辑器中打开该文件时，内容大致如下：</p>\n<p>one,two,three</p>\n<p>four,five,six</p>\n<p>如果将文件载入 Excel（或 Google 表格）中，你不会看到逗号，而是在第一行看到 one、two 和 three 各占一格，在第二行看到 four、five 和 six 各占一格。</p>\n<p>还可以使用 <code>csv</code> 模块读取文件的内容。在读取 CSV 文件的内容之前，首先传入 <code>\"r\"</code> 作为 <code>open</code> 函数的第二个参数，然后在 with 语句中调用 <code>reader</code> 方法，传入文件对象并以逗号作为分隔符，这会返回一个可迭代对象，可用来访问文件中的每行数据。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gvcdgxf</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\">#确保已经在上例中创建了数据文件</span>\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>  <strong><span class=\"hljs-keyword\">import</span></strong> csv\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.csv\"</span>, <span class=\"hljs-string\">\"r\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">13</span>      r = csv.reader(f, delimiter=<span class=\"hljs-string\">\",\"</span>)\n<span class=\"hljs-number\">14</span>      <strong><span class=\"hljs-keyword\">for</span></strong> row <strong><span class=\"hljs-keyword\">in</span></strong> r:\n<span class=\"hljs-number\">15</span>          print(<span class=\"hljs-string\">\",\"</span>.join(row))\n\n&gt;&gt; one,two,three\n&gt;&gt; four,five,six</code></pre>\n<p>本例中打开了 <code>st.csv</code> 文件以用于读取数据，并使用 <code>reader</code> 方法将文件对象转换为了 <code>csv</code> 对象。然后使用循环遍历 <code>csv</code> 对象。每次循环时，调用逗号字符串的 <code>join</code> 方法，在文件每行数据的中间添加逗号，并打印其在原文件中的样子（由逗号分隔）。</p>\n<h3 id=\"95\">9.5　术语表</h3>\n<p><strong>读取</strong>：访问文件的内容。</p>\n<p><strong>写</strong>：添加或修改文件中的数据。</p>\n<p><strong>文件路径</strong>：文件在计算机中存储的位置。</p>\n<p><strong>with 语句</strong>：一种复合语句，当 Python 退出语句时会自动执行的一个操作。</p>\n<p><strong>文件对象</strong>：可用来读写文件的对象。</p>\n<p><strong>CSV 文件</strong>：后缀为 <code>.csv</code> 的文件，使用逗号分隔数据（CSV 表示逗号分隔的值）。常用在管理报表的程序中。</p>\n<p><strong>分隔符</strong>：用来分隔 CSV 文件中数据的符号，如逗号。</p>\n<h3 id=\"96\">9.6　挑战练习</h3>\n<p>1．在计算机上找一个文件，并使用 Python 打印其内容。</p>\n<p>2．编写一个程序来向用户提问，并将回答保存至文件。</p>\n<p>3．将以下列表中的元素写入一个 CSV 文件：<code>[[\"Top Gun\", \"Risky Business\", \"Minority Report\"], [\"Titanic\", \"The Revenant\", \"Inception\"], [\"Training Day\", \"Man on Fire\", \"Flight\"]]</code>。每个列表应该在文件中各占一行，其中元素使用逗号分隔。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","slug":"Python无师自通/9_file","published":1,"date":"2019-06-07T01:50:39.988Z","updated":"2019-06-07T01:50:39.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwlfntzs0000th72j1qgl0km","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>文件</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#91\">9.1　写文件操作</a></li>\n<li><a href=\"#92\">9.2　自动关闭文件</a></li>\n<li><a href=\"#93\">9.3　读取文件</a></li>\n<li><a href=\"#94csv\">9.4　CSV 文件</a></li>\n<li><a href=\"#95\">9.5　术语表</a></li>\n<li><a href=\"#96\">9.6　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“我坚信，自我教育是唯一的教育形式。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——艾萨克 · 阿西莫夫（Isaac Asimov）</span></p>\n</blockquote>\n<p>我们可以使用 Python 处理文件。例如，可使用 Python 读取或写文件数据。<strong>读取</strong>（reading）文件数据指的是访问文件中的数据。向文件中<strong>写</strong>（writing）数据指的是添加或修改文件中的数据。本章将学习文件处理的基础知识。</p>\n<h3 id=\"91\">9.1　写文件操作</h3>\n<p>处理文件的第一步是使用 Python 内置的 <code>open</code> 函数打开文件。<code>open</code> 函数有两个参数：一个代表要打开文件路径的字符串，另一个代表打开文件的模式。</p>\n<p>文件路径（file path），指的是文件在计算机中所处的位置。例如，<code>/Users/bob/st.txt</code> 是文件 <code>st.txt</code> 的文件路径。斜杠分隔的每个单词都是一个文件夹的名称。加在一起就代表了文件的位置。如果文件路径中只有文件的名字（没有斜杠分隔的文件夹），Python 将会在当前运行程序所在的目录中查找文件。操作时避免直接手写文件路径。类 UNIX 操作系统和 Windows 在文件路径中使用的斜杠数量不同。为了避免程序在不同操作系统中运行出错，应使用内置的 <code>os</code> 模块来创建文件路径。模块中的 <code>path</code> 函数接受文件路径中的文件夹名作为参数，并自动构建完整的文件路径。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hkqfkar</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong>import</strong> os\n<span class=\"hljs-number\">5</span>  os.path.join(<span class=\"hljs-string\">\"Users\"</span>,\n<span class=\"hljs-number\">6</span>               <span class=\"hljs-string\">\"bob\"</span>,\n<span class=\"hljs-number\">7</span>               <span class=\"hljs-string\">\"st.txt\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Users/bob/st.txt'</span></code></pre>\n<p>使用 <code>path</code> 函数创建文件路径，可以确保其在任何操作系统中都可以正常运行。但是在处理文件路径时还是容易出现问题。如果碰到问题，访问以下链接来获取更多帮助：http://theselftaughtprogrammer.io/filepaths。</p>\n<p>传入 <code>open</code> 函数的参数模式，决定了对打开的文件执行什么操作。以下是支持的文件打开模式。</p>\n<ul>\n<li><code>\"r\"</code> 以只读模式打开文件。</li>\n<li><code>\"w\"</code> 以只写模式打开文件。如果文件已存在，会覆盖文件。如果文件不存在，则会创建一个新文件。</li>\n<li><code>\"w+\"</code> 以可读可写模式打开文件。如果文件已存在，会覆盖原文件。如果文件不存在，则创建一个新文件进行读写操作。</li>\n</ul>\n<p><code>open</code> 函数会返回一个叫<strong>文件对象</strong>（file object）的对象，可用来读/写文件。使用 <code>\"w\"</code> 模式时，如果没有现存文件，<code>open</code> 函数会在运行程序的目录中创建一个新文件。</p>\n<p>然后，可使用文件对象的 <code>write</code> 方法写入文件，并通过 <code>close</code> 方法关闭文件。如果使用了 <code>open</code> 函数打开文件，就必须要通过 <code>close</code> 方法关闭。如果你使用 <code>open</code> 函数打开了多个文件但又忘记关闭，有可能会导致程序出错。下面是一个读、写、关闭文件的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zfgczj5</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  st = open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"w\"</span>)\n<span class=\"hljs-number\">5</span>  st.write(<span class=\"hljs-string\">\"Hi from Python!\"</span>)\n<span class=\"hljs-number\">6</span>  st.close()</code></pre>\n<p>上例使用 <code>open</code> 函数打开了文件，并将返回的文件对象保存在变量 <code>st</code> 中。然后调用 <code>st</code> 的 <code>write</code> 方法，接受一个字符串作为参数，再写入 Python 创建的新文件中。最后，调用文件对象的 <code>close</code> 方法关闭文件。</p>\n<h3 id=\"92\">9.2　自动关闭文件</h3>\n<p>还有一种我们更推荐使用的文件打开方法，可以避免忘记关闭文件。如果使用该方法，要将所有需要访问的文件对象的代码写在 with <strong>语句</strong>之中：一种复合语句，Python 在执行完该语句时会自动执行下一个的行为。</p>\n<p>使用 with 语句打开文件的语法是“<code>with open([文件路径], [模式]) as [变量名]: [执行代码]</code>”。[文件路径] 代表文件所在的位置，[模式] 代表以何种模式打开文件，[变量名]代表文件对象被赋予的变量名，[执行代码]则是需要访问文件对象变量的代码。</p>\n<p>在使用上述语法打开文件时，会在[执行代码]运行完毕后自动关闭文件。下面是使用新语法读、写、关闭文件的示例：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jt9guu2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">5</span>      f.write(<span class=\"hljs-string\">\"Hi from Python!\"</span>)\n</code></pre>\n<p>只要还在 with 语句内，就可以访问文件对象。在本例中，文件对象被命名为 <code>f</code>。Python 执行完 with 语句中的代码后，会自动关闭文件。</p>\n<h3 id=\"93\">9.3　读取文件</h3>\n<p>如果要读取文件，可传入 <code>\"r\"</code> 作为 <code>open</code> 函数的第二个参数。然后调用文件对象的 <code>read</code> 方法，会返回一个包含文件所有行的可迭代对象。示例如下：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hmuamr7</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\"># 确保在上例中已经</span>\n<span class=\"hljs-number\">05</span>  <span class=\"hljs-comment\"># 创建了文件</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"r\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">10</span>      print(f.read())\n\n&gt;&gt; Hi <span class=\"hljs-keyword\">from</span> Python!\n</code></pre>\n<p>在没有关闭又重新打开文件的情况下，你只能调用文件对象的 read 方法一次。因此，如果后续程序需要，应该将文件内容保存在一个变量或容器中。下面是将上例中的文件内容保存在列表中的示例：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hkzhxdz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">04</span>  my_list = <span class=\"hljs-keyword\">list</span>()\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  with open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"r\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">08</span>      my_list.append(f.read())\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  <span class=\"hljs-keyword\">print</span>(my_list)\n\n&gt;&gt; [<span class=\"hljs-string\">'Hi from Python!'</span>]\n</code></pre>\n<p>之后就可以在程序中访问该数据了。</p>\n<h3 id=\"94csv\">9.4　CSV 文件</h3>\n<p>Python 有一个内置模块支持处理 <strong>CSV 文件</strong>（CSV file）。CSV 文件的后缀为 <code>.csv</code>，它使用英文逗号来分隔数据（CSV 是逗号分隔值的英文简称）。需要管理如 Excel 等报表软件的程序员经常使用 CSV 文件。CSV 文件中用逗号分隔的每个数据代表报表中的一个单元格，每行代表一个报表行。<strong>分隔符</strong>（delimiter）是 CSV 文件中用来分隔数据的符号，如逗号或竖线“<code>|”</code>。下面是 CSV 文件 <code>self-taught.csv</code> 中的内容示例：</p>\n<p>one,two,three four,five,six</p>\n<p>如果在 Excel 中载入该文件，则会在第一行看到 one、two 和 three 各占一格，在第二行看到 four、five 和 six 各占一格。</p>\n<p>也可使用 with 语句打开 CSV 文件，但是在语句中需要使用 <code>csv</code> 模块将文件对象转化成 <code>csv</code> 对象。<code>csv</code> 模块有一个叫 <code>writer</code> 的方法，可接受一个文件对象和一个分隔符。<code>writer</code> 方法返回一个带 <code>writerow</code> 方法的 <code>csv</code> 对象。<code>writerow</code> 方法接受一个列表作为参数，可用来向 CSV 文件写入数据。列表中的每个元素都会被写入，并传入 <code>writer</code> 方法的分隔符来分隔。<code>writerow</code> 方法只创建一行数据，因此要创建两行数据必须调用该方法两次。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/go9wepf</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> csv\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.csv\"</span>, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">8</span>      w = csv.writer(f,\n<span class=\"hljs-number\">09</span>                    delimiter=<span class=\"hljs-string\">\",\"</span>)\n<span class=\"hljs-number\">10</span>      w.writerow([<span class=\"hljs-string\">\"one\"</span>,\n<span class=\"hljs-number\">11</span>                  <span class=\"hljs-string\">\"two\"</span>,\n<span class=\"hljs-number\">12</span>                  <span class=\"hljs-string\">\"three\"</span>])\n<span class=\"hljs-number\">13</span>      w.writerow([<span class=\"hljs-string\">\"four\"</span>,\n<span class=\"hljs-number\">14</span>                  <span class=\"hljs-string\">\"five\"</span>,\n<span class=\"hljs-number\">15</span>                  <span class=\"hljs-string\">\"six\"</span>])</code></pre>\n<p>该程序会创建一个叫 <code>st.csv</code> 的文件，在文本编辑器中打开该文件时，内容大致如下：</p>\n<p>one,two,three</p>\n<p>four,five,six</p>\n<p>如果将文件载入 Excel（或 Google 表格）中，你不会看到逗号，而是在第一行看到 one、two 和 three 各占一格，在第二行看到 four、five 和 six 各占一格。</p>\n<p>还可以使用 <code>csv</code> 模块读取文件的内容。在读取 CSV 文件的内容之前，首先传入 <code>\"r\"</code> 作为 <code>open</code> 函数的第二个参数，然后在 with 语句中调用 <code>reader</code> 方法，传入文件对象并以逗号作为分隔符，这会返回一个可迭代对象，可用来访问文件中的每行数据。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gvcdgxf</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\">#确保已经在上例中创建了数据文件</span>\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>  <strong><span class=\"hljs-keyword\">import</span></strong> csv\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.csv\"</span>, <span class=\"hljs-string\">\"r\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">13</span>      r = csv.reader(f, delimiter=<span class=\"hljs-string\">\",\"</span>)\n<span class=\"hljs-number\">14</span>      <strong><span class=\"hljs-keyword\">for</span></strong> row <strong><span class=\"hljs-keyword\">in</span></strong> r:\n<span class=\"hljs-number\">15</span>          print(<span class=\"hljs-string\">\",\"</span>.join(row))\n\n&gt;&gt; one,two,three\n&gt;&gt; four,five,six</code></pre>\n<p>本例中打开了 <code>st.csv</code> 文件以用于读取数据，并使用 <code>reader</code> 方法将文件对象转换为了 <code>csv</code> 对象。然后使用循环遍历 <code>csv</code> 对象。每次循环时，调用逗号字符串的 <code>join</code> 方法，在文件每行数据的中间添加逗号，并打印其在原文件中的样子（由逗号分隔）。</p>\n<h3 id=\"95\">9.5　术语表</h3>\n<p><strong>读取</strong>：访问文件的内容。</p>\n<p><strong>写</strong>：添加或修改文件中的数据。</p>\n<p><strong>文件路径</strong>：文件在计算机中存储的位置。</p>\n<p><strong>with 语句</strong>：一种复合语句，当 Python 退出语句时会自动执行的一个操作。</p>\n<p><strong>文件对象</strong>：可用来读写文件的对象。</p>\n<p><strong>CSV 文件</strong>：后缀为 <code>.csv</code> 的文件，使用逗号分隔数据（CSV 表示逗号分隔的值）。常用在管理报表的程序中。</p>\n<p><strong>分隔符</strong>：用来分隔 CSV 文件中数据的符号，如逗号。</p>\n<h3 id=\"96\">9.6　挑战练习</h3>\n<p>1．在计算机上找一个文件，并使用 Python 打印其内容。</p>\n<p>2．编写一个程序来向用户提问，并将回答保存至文件。</p>\n<p>3．将以下列表中的元素写入一个 CSV 文件：<code>[[\"Top Gun\", \"Risky Business\", \"Minority Report\"], [\"Titanic\", \"The Revenant\", \"Inception\"], [\"Training Day\", \"Man on Fire\", \"Flight\"]]</code>。每个列表应该在文件中各占一行，其中元素使用逗号分隔。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>文件</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#91\">9.1　写文件操作</a></li>\n<li><a href=\"#92\">9.2　自动关闭文件</a></li>\n<li><a href=\"#93\">9.3　读取文件</a></li>\n<li><a href=\"#94csv\">9.4　CSV 文件</a></li>\n<li><a href=\"#95\">9.5　术语表</a></li>\n<li><a href=\"#96\">9.6　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“我坚信，自我教育是唯一的教育形式。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——艾萨克 · 阿西莫夫（Isaac Asimov）</span></p>\n</blockquote>\n<p>我们可以使用 Python 处理文件。例如，可使用 Python 读取或写文件数据。<strong>读取</strong>（reading）文件数据指的是访问文件中的数据。向文件中<strong>写</strong>（writing）数据指的是添加或修改文件中的数据。本章将学习文件处理的基础知识。</p>\n<h3 id=\"91\">9.1　写文件操作</h3>\n<p>处理文件的第一步是使用 Python 内置的 <code>open</code> 函数打开文件。<code>open</code> 函数有两个参数：一个代表要打开文件路径的字符串，另一个代表打开文件的模式。</p>\n<p>文件路径（file path），指的是文件在计算机中所处的位置。例如，<code>/Users/bob/st.txt</code> 是文件 <code>st.txt</code> 的文件路径。斜杠分隔的每个单词都是一个文件夹的名称。加在一起就代表了文件的位置。如果文件路径中只有文件的名字（没有斜杠分隔的文件夹），Python 将会在当前运行程序所在的目录中查找文件。操作时避免直接手写文件路径。类 UNIX 操作系统和 Windows 在文件路径中使用的斜杠数量不同。为了避免程序在不同操作系统中运行出错，应使用内置的 <code>os</code> 模块来创建文件路径。模块中的 <code>path</code> 函数接受文件路径中的文件夹名作为参数，并自动构建完整的文件路径。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hkqfkar</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong>import</strong> os\n<span class=\"hljs-number\">5</span>  os.path.join(<span class=\"hljs-string\">\"Users\"</span>,\n<span class=\"hljs-number\">6</span>               <span class=\"hljs-string\">\"bob\"</span>,\n<span class=\"hljs-number\">7</span>               <span class=\"hljs-string\">\"st.txt\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">'Users/bob/st.txt'</span></code></pre>\n<p>使用 <code>path</code> 函数创建文件路径，可以确保其在任何操作系统中都可以正常运行。但是在处理文件路径时还是容易出现问题。如果碰到问题，访问以下链接来获取更多帮助：http://theselftaughtprogrammer.io/filepaths。</p>\n<p>传入 <code>open</code> 函数的参数模式，决定了对打开的文件执行什么操作。以下是支持的文件打开模式。</p>\n<ul>\n<li><code>\"r\"</code> 以只读模式打开文件。</li>\n<li><code>\"w\"</code> 以只写模式打开文件。如果文件已存在，会覆盖文件。如果文件不存在，则会创建一个新文件。</li>\n<li><code>\"w+\"</code> 以可读可写模式打开文件。如果文件已存在，会覆盖原文件。如果文件不存在，则创建一个新文件进行读写操作。</li>\n</ul>\n<p><code>open</code> 函数会返回一个叫<strong>文件对象</strong>（file object）的对象，可用来读/写文件。使用 <code>\"w\"</code> 模式时，如果没有现存文件，<code>open</code> 函数会在运行程序的目录中创建一个新文件。</p>\n<p>然后，可使用文件对象的 <code>write</code> 方法写入文件，并通过 <code>close</code> 方法关闭文件。如果使用了 <code>open</code> 函数打开文件，就必须要通过 <code>close</code> 方法关闭。如果你使用 <code>open</code> 函数打开了多个文件但又忘记关闭，有可能会导致程序出错。下面是一个读、写、关闭文件的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cpp\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zfgczj5</span></span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  st = open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"w\"</span>)\n<span class=\"hljs-number\">5</span>  st.write(<span class=\"hljs-string\">\"Hi from Python!\"</span>)\n<span class=\"hljs-number\">6</span>  st.close()</code></pre>\n<p>上例使用 <code>open</code> 函数打开了文件，并将返回的文件对象保存在变量 <code>st</code> 中。然后调用 <code>st</code> 的 <code>write</code> 方法，接受一个字符串作为参数，再写入 Python 创建的新文件中。最后，调用文件对象的 <code>close</code> 方法关闭文件。</p>\n<h3 id=\"92\">9.2　自动关闭文件</h3>\n<p>还有一种我们更推荐使用的文件打开方法，可以避免忘记关闭文件。如果使用该方法，要将所有需要访问的文件对象的代码写在 with <strong>语句</strong>之中：一种复合语句，Python 在执行完该语句时会自动执行下一个的行为。</p>\n<p>使用 with 语句打开文件的语法是“<code>with open([文件路径], [模式]) as [变量名]: [执行代码]</code>”。[文件路径] 代表文件所在的位置，[模式] 代表以何种模式打开文件，[变量名]代表文件对象被赋予的变量名，[执行代码]则是需要访问文件对象变量的代码。</p>\n<p>在使用上述语法打开文件时，会在[执行代码]运行完毕后自动关闭文件。下面是使用新语法读、写、关闭文件的示例：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jt9guu2</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">5</span>      f.write(<span class=\"hljs-string\">\"Hi from Python!\"</span>)\n</code></pre>\n<p>只要还在 with 语句内，就可以访问文件对象。在本例中，文件对象被命名为 <code>f</code>。Python 执行完 with 语句中的代码后，会自动关闭文件。</p>\n<h3 id=\"93\">9.3　读取文件</h3>\n<p>如果要读取文件，可传入 <code>\"r\"</code> 作为 <code>open</code> 函数的第二个参数。然后调用文件对象的 <code>read</code> 方法，会返回一个包含文件所有行的可迭代对象。示例如下：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hmuamr7</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\"># 确保在上例中已经</span>\n<span class=\"hljs-number\">05</span>  <span class=\"hljs-comment\"># 创建了文件</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"r\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">10</span>      print(f.read())\n\n&gt;&gt; Hi <span class=\"hljs-keyword\">from</span> Python!\n</code></pre>\n<p>在没有关闭又重新打开文件的情况下，你只能调用文件对象的 read 方法一次。因此，如果后续程序需要，应该将文件内容保存在一个变量或容器中。下面是将上例中的文件内容保存在列表中的示例：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hkzhxdz</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">04</span>  my_list = <span class=\"hljs-keyword\">list</span>()\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>  with open(<span class=\"hljs-string\">\"st.txt\"</span>, <span class=\"hljs-string\">\"r\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">08</span>      my_list.append(f.read())\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  <span class=\"hljs-keyword\">print</span>(my_list)\n\n&gt;&gt; [<span class=\"hljs-string\">'Hi from Python!'</span>]\n</code></pre>\n<p>之后就可以在程序中访问该数据了。</p>\n<h3 id=\"94csv\">9.4　CSV 文件</h3>\n<p>Python 有一个内置模块支持处理 <strong>CSV 文件</strong>（CSV file）。CSV 文件的后缀为 <code>.csv</code>，它使用英文逗号来分隔数据（CSV 是逗号分隔值的英文简称）。需要管理如 Excel 等报表软件的程序员经常使用 CSV 文件。CSV 文件中用逗号分隔的每个数据代表报表中的一个单元格，每行代表一个报表行。<strong>分隔符</strong>（delimiter）是 CSV 文件中用来分隔数据的符号，如逗号或竖线“<code>|”</code>。下面是 CSV 文件 <code>self-taught.csv</code> 中的内容示例：</p>\n<p>one,two,three four,five,six</p>\n<p>如果在 Excel 中载入该文件，则会在第一行看到 one、two 和 three 各占一格，在第二行看到 four、five 和 six 各占一格。</p>\n<p>也可使用 with 语句打开 CSV 文件，但是在语句中需要使用 <code>csv</code> 模块将文件对象转化成 <code>csv</code> 对象。<code>csv</code> 模块有一个叫 <code>writer</code> 的方法，可接受一个文件对象和一个分隔符。<code>writer</code> 方法返回一个带 <code>writerow</code> 方法的 <code>csv</code> 对象。<code>writerow</code> 方法接受一个列表作为参数，可用来向 CSV 文件写入数据。列表中的每个元素都会被写入，并传入 <code>writer</code> 方法的分隔符来分隔。<code>writerow</code> 方法只创建一行数据，因此要创建两行数据必须调用该方法两次。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/go9wepf</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-keyword\">import</span></strong> csv\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.csv\"</span>, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">8</span>      w = csv.writer(f,\n<span class=\"hljs-number\">09</span>                    delimiter=<span class=\"hljs-string\">\",\"</span>)\n<span class=\"hljs-number\">10</span>      w.writerow([<span class=\"hljs-string\">\"one\"</span>,\n<span class=\"hljs-number\">11</span>                  <span class=\"hljs-string\">\"two\"</span>,\n<span class=\"hljs-number\">12</span>                  <span class=\"hljs-string\">\"three\"</span>])\n<span class=\"hljs-number\">13</span>      w.writerow([<span class=\"hljs-string\">\"four\"</span>,\n<span class=\"hljs-number\">14</span>                  <span class=\"hljs-string\">\"five\"</span>,\n<span class=\"hljs-number\">15</span>                  <span class=\"hljs-string\">\"six\"</span>])</code></pre>\n<p>该程序会创建一个叫 <code>st.csv</code> 的文件，在文本编辑器中打开该文件时，内容大致如下：</p>\n<p>one,two,three</p>\n<p>four,five,six</p>\n<p>如果将文件载入 Excel（或 Google 表格）中，你不会看到逗号，而是在第一行看到 one、two 和 three 各占一格，在第二行看到 four、five 和 six 各占一格。</p>\n<p>还可以使用 <code>csv</code> 模块读取文件的内容。在读取 CSV 文件的内容之前，首先传入 <code>\"r\"</code> 作为 <code>open</code> 函数的第二个参数，然后在 with 语句中调用 <code>reader</code> 方法，传入文件对象并以逗号作为分隔符，这会返回一个可迭代对象，可用来访问文件中的每行数据。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gvcdgxf</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <span class=\"hljs-comment\">#确保已经在上例中创建了数据文件</span>\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>  <strong><span class=\"hljs-keyword\">import</span></strong> csv\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>  <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"st.csv\"</span>, <span class=\"hljs-string\">\"r\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-number\">13</span>      r = csv.reader(f, delimiter=<span class=\"hljs-string\">\",\"</span>)\n<span class=\"hljs-number\">14</span>      <strong><span class=\"hljs-keyword\">for</span></strong> row <strong><span class=\"hljs-keyword\">in</span></strong> r:\n<span class=\"hljs-number\">15</span>          print(<span class=\"hljs-string\">\",\"</span>.join(row))\n\n&gt;&gt; one,two,three\n&gt;&gt; four,five,six</code></pre>\n<p>本例中打开了 <code>st.csv</code> 文件以用于读取数据，并使用 <code>reader</code> 方法将文件对象转换为了 <code>csv</code> 对象。然后使用循环遍历 <code>csv</code> 对象。每次循环时，调用逗号字符串的 <code>join</code> 方法，在文件每行数据的中间添加逗号，并打印其在原文件中的样子（由逗号分隔）。</p>\n<h3 id=\"95\">9.5　术语表</h3>\n<p><strong>读取</strong>：访问文件的内容。</p>\n<p><strong>写</strong>：添加或修改文件中的数据。</p>\n<p><strong>文件路径</strong>：文件在计算机中存储的位置。</p>\n<p><strong>with 语句</strong>：一种复合语句，当 Python 退出语句时会自动执行的一个操作。</p>\n<p><strong>文件对象</strong>：可用来读写文件的对象。</p>\n<p><strong>CSV 文件</strong>：后缀为 <code>.csv</code> 的文件，使用逗号分隔数据（CSV 表示逗号分隔的值）。常用在管理报表的程序中。</p>\n<p><strong>分隔符</strong>：用来分隔 CSV 文件中数据的符号，如逗号。</p>\n<h3 id=\"96\">9.6　挑战练习</h3>\n<p>1．在计算机上找一个文件，并使用 Python 打印其内容。</p>\n<p>2．编写一个程序来向用户提问，并将回答保存至文件。</p>\n<p>3．将以下列表中的元素写入一个 CSV 文件：<code>[[\"Top Gun\", \"Risky Business\", \"Minority Report\"], [\"Titanic\", \"The Revenant\", \"Inception\"], [\"Training Day\", \"Man on Fire\", \"Flight\"]]</code>。每个列表应该在文件中各占一行，其中元素使用逗号分隔。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>"},{"title":"start","_content":"\n### 编写Golang\n- package 如果是编写可执行文件包名必须是 main, 如果是编写可被调用的包(库)可以自定义名字\n- main函数 代码执行入口\n- 使用import导包\n- 函数规范 花括号\n- 函数类型在变量的后面，使用\"var\"或者\":=\"来定义变量\n\n### 语言特性\n- 垃圾回收\n    内存自动回收，无需管理内存，开发人员可以专注业务实现\n- 天然并发\n    语言层面支持并发，基于CSP模型实现，可以创建很多的goroute(轻量级线程，协程)\n- channel管道\n    类型unix/linux中的pipe, 多个goroute之间通过channel进行通信\n    支持任何类型  \n- 函数支持多值返回\n    一个函数可以返回多个指\n\n### 执行\n- 在同一个包下的文件相互调用\n    \n    比如在hello中调用test的goroute_test函数执行go run hello.go会发生错误\n    \n    # command-line-arguments\n    \n    ./hello.go:13:5: undefined: goroute_test\n    \n    原因是在运行的时候go没有去编译test.go导致无法调用test文件中的函数\n    正常执行命令为`go run test.go hello.go`\n\n### 注意\n    不建议在文件中定义全局变量用于其他文件函数中完成变量共享\n    应该使用参数传递的方式进行共享\n    \n### 包\n- 把相同功能的代码放到同一个目录，称之为包\n- 包可以被其他包引用\n- main包是用来生成可执行文件的，每个程序只有一个main包\n- 包的主要用途是提高代码的可复用性\n- 从包中向外开放的函数必须要以大写开头","source":"_posts/golang/start.md","raw":"---\ntitle: start\n---\n\n### 编写Golang\n- package 如果是编写可执行文件包名必须是 main, 如果是编写可被调用的包(库)可以自定义名字\n- main函数 代码执行入口\n- 使用import导包\n- 函数规范 花括号\n- 函数类型在变量的后面，使用\"var\"或者\":=\"来定义变量\n\n### 语言特性\n- 垃圾回收\n    内存自动回收，无需管理内存，开发人员可以专注业务实现\n- 天然并发\n    语言层面支持并发，基于CSP模型实现，可以创建很多的goroute(轻量级线程，协程)\n- channel管道\n    类型unix/linux中的pipe, 多个goroute之间通过channel进行通信\n    支持任何类型  \n- 函数支持多值返回\n    一个函数可以返回多个指\n\n### 执行\n- 在同一个包下的文件相互调用\n    \n    比如在hello中调用test的goroute_test函数执行go run hello.go会发生错误\n    \n    # command-line-arguments\n    \n    ./hello.go:13:5: undefined: goroute_test\n    \n    原因是在运行的时候go没有去编译test.go导致无法调用test文件中的函数\n    正常执行命令为`go run test.go hello.go`\n\n### 注意\n    不建议在文件中定义全局变量用于其他文件函数中完成变量共享\n    应该使用参数传递的方式进行共享\n    \n### 包\n- 把相同功能的代码放到同一个目录，称之为包\n- 包可以被其他包引用\n- main包是用来生成可执行文件的，每个程序只有一个main包\n- 包的主要用途是提高代码的可复用性\n- 从包中向外开放的函数必须要以大写开头","slug":"golang/start","published":1,"date":"2019-06-08T07:54:14.265Z","updated":"2019-06-08T07:54:14.265Z","_id":"cjwlw6a3x0000y4722eztmw0k","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"编写Golang\"><a href=\"#编写Golang\" class=\"headerlink\" title=\"编写Golang\"></a>编写Golang</h3><ul>\n<li>package 如果是编写可执行文件包名必须是 main, 如果是编写可被调用的包(库)可以自定义名字</li>\n<li>main函数 代码执行入口</li>\n<li>使用import导包</li>\n<li>函数规范 花括号</li>\n<li>函数类型在变量的后面，使用”var”或者”:=”来定义变量</li>\n</ul>\n<h3 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a>语言特性</h3><ul>\n<li>垃圾回收<br>  内存自动回收，无需管理内存，开发人员可以专注业务实现</li>\n<li>天然并发<br>  语言层面支持并发，基于CSP模型实现，可以创建很多的goroute(轻量级线程，协程)</li>\n<li>channel管道<br>  类型unix/linux中的pipe, 多个goroute之间通过channel进行通信<br>  支持任何类型  </li>\n<li>函数支持多值返回<br>  一个函数可以返回多个指</li>\n</ul>\n<h3 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h3><ul>\n<li><p>在同一个包下的文件相互调用</p>\n<p>  比如在hello中调用test的goroute_test函数执行go run hello.go会发生错误</p>\n<h1 id=\"command-line-arguments\"><a href=\"#command-line-arguments\" class=\"headerlink\" title=\"command-line-arguments\"></a>command-line-arguments</h1><p>  ./hello.go:13:5: undefined: goroute_test</p>\n<p>  原因是在运行的时候go没有去编译test.go导致无法调用test文件中的函数<br>  正常执行命令为<code>go run test.go hello.go</code></p>\n</li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><pre><code>不建议在文件中定义全局变量用于其他文件函数中完成变量共享\n应该使用参数传递的方式进行共享\n</code></pre><h3 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h3><ul>\n<li>把相同功能的代码放到同一个目录，称之为包</li>\n<li>包可以被其他包引用</li>\n<li>main包是用来生成可执行文件的，每个程序只有一个main包</li>\n<li>包的主要用途是提高代码的可复用性</li>\n<li>从包中向外开放的函数必须要以大写开头</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"编写Golang\"><a href=\"#编写Golang\" class=\"headerlink\" title=\"编写Golang\"></a>编写Golang</h3><ul>\n<li>package 如果是编写可执行文件包名必须是 main, 如果是编写可被调用的包(库)可以自定义名字</li>\n<li>main函数 代码执行入口</li>\n<li>使用import导包</li>\n<li>函数规范 花括号</li>\n<li>函数类型在变量的后面，使用”var”或者”:=”来定义变量</li>\n</ul>\n<h3 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a>语言特性</h3><ul>\n<li>垃圾回收<br>  内存自动回收，无需管理内存，开发人员可以专注业务实现</li>\n<li>天然并发<br>  语言层面支持并发，基于CSP模型实现，可以创建很多的goroute(轻量级线程，协程)</li>\n<li>channel管道<br>  类型unix/linux中的pipe, 多个goroute之间通过channel进行通信<br>  支持任何类型  </li>\n<li>函数支持多值返回<br>  一个函数可以返回多个指</li>\n</ul>\n<h3 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h3><ul>\n<li><p>在同一个包下的文件相互调用</p>\n<p>  比如在hello中调用test的goroute_test函数执行go run hello.go会发生错误</p>\n<h1 id=\"command-line-arguments\"><a href=\"#command-line-arguments\" class=\"headerlink\" title=\"command-line-arguments\"></a>command-line-arguments</h1><p>  ./hello.go:13:5: undefined: goroute_test</p>\n<p>  原因是在运行的时候go没有去编译test.go导致无法调用test文件中的函数<br>  正常执行命令为<code>go run test.go hello.go</code></p>\n</li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><pre><code>不建议在文件中定义全局变量用于其他文件函数中完成变量共享\n应该使用参数传递的方式进行共享\n</code></pre><h3 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h3><ul>\n<li>把相同功能的代码放到同一个目录，称之为包</li>\n<li>包可以被其他包引用</li>\n<li>main包是用来生成可执行文件的，每个程序只有一个main包</li>\n<li>包的主要用途是提高代码的可复用性</li>\n<li>从包中向外开放的函数必须要以大写开头</li>\n</ul>\n"},{"title":"综合练习","_content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>综合练习</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#101hangman\">10.1　Hangman</a></li>\n<li><a href=\"#102\">10.2　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“我所学到的一切，都是从书本上得来的。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——亚伯拉罕 · 林肯（Abraham Lincoln）</span></p>\n</blockquote>\n<p>本章将结合目前所学的知识，开发一个文本游戏——经典的 Hangman 猜词游戏。如果之前没玩过，可先了解游戏的大致规则。</p>\n<p>1．玩家一挑选一个秘密单词，单词中有多少个字母，则划多少条横线（这里用下划线表示）。</p>\n<p>2．玩家二每次猜一个字母。</p>\n<p>3．如果玩家二猜测的字母正确，玩家一将下划线修改为正确的字母。在本书的游戏版本中，如果单词中有一个字母出现两次，玩家二也必须猜两次。如果玩家二猜测错误，玩家一则画出上吊的人的一部分身体（从头部开始），如图 10-1 所示。</p>\n<p><img src=\"https://images.gitbook.cn/50a48af0-700c-11e9-83ce-bf64b45f6e99\" alt=\"enter image description here\"></p>\n<p>图 10-1　游戏图案</p>\n<p>4．如果玩家二在玩家一画完上吊的人之前猜对单词，玩家二胜利，反之失败。</p>\n<p>在接下来要编写的程序中，计算机将扮演玩家一，用户将扮演玩家二。准备好玩游戏了吗？</p>\n<h3 id=\"101hangman\">10.1　Hangman</h3>\n<p>Hangman 游戏代码的第一部分如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jhrvs94</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">hangman</span><span class=\"hljs-params\">(word)</span>:</span>\n<span class=\"hljs-number\">05</span>      wrong = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">06</span>      stages = [<span class=\"hljs-string\">\"\"</span>,\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"                \"</span>,\n<span class=\"hljs-number\">08</span>          <span class=\"hljs-string\">\"|               \"</span>,\n<span class=\"hljs-number\">09</span>          <span class=\"hljs-string\">\"|        |      \"</span>,\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-string\">\"|        0      \"</span>,\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-string\">\"|       /|\\     \"</span>,\n<span class=\"hljs-number\">12</span>          <span class=\"hljs-string\">\"|       / \\     \"</span>,\n<span class=\"hljs-number\">13</span>          <span class=\"hljs-string\">\"|               \"</span>\n<span class=\"hljs-number\">14</span>           ]\n<span class=\"hljs-number\">15</span>      rletters = list(word)\n<span class=\"hljs-number\">16</span>      board = [<span class=\"hljs-string\">\"__\"</span>] * len(word)\n<span class=\"hljs-number\">17</span>      win = <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">18</span>      print(<span class=\"hljs-string\">\"Welcome to Hangman\"</span>)</code></pre>\n<p>首先，创建一个叫 <code>hangman</code> 的函数用于保存游戏。该函数接受一个叫 <code>word</code> 的变量作为参数，也就是玩家二要猜的单词。用另一个变量 <code>wrong</code> 记录玩家二猜错了多少个字母。</p>\n<p>变量 <code>stages</code> 是一个列表，含有用来画上吊的人的字符串。Python 将 <code>stages</code> 列表中的每个字符串换行打印出来之后，就会组成一个上吊的人的图案。变量 <code>rletter</code> 也是一个列表，用来保存 <code>word</code> 变量中的每个字母，同时也用来记录还需要猜对的字母。</p>\n<p>变量 <code>board</code> 也是一个字符串列表，用来记录显示给玩家二的提示，假如单词是 <code>cat</code> 则可能显示 <code>c__t</code>（玩家二已经猜对了 <code>c</code> 和 <code>t</code>）。这里用 <code>[\"__\"]</code> * <code>len(word)</code> 来填充 <code>board</code> 列表，变量 <code>word</code> 中的每个字母都用一个下划线表示。例如，如果单词是 <code>cat</code>，<code>board</code> 列表一开始的元素就是 <code>[\"__\", \"__\", \"__\"]</code>。</p>\n<p>还需要一个叫 <code>win</code> 的变量，起始值为 <code>False</code>，用来记录玩家二是否赢了游戏。接下来，打印 <code>Welcome to Hangman</code>。</p>\n<p>代码的第二部分则是一个维持游戏运行的循环，如下所示：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cs\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-meta\"># http://tinyurl.com/ztrp5jc</span>\n<span class=\"hljs-number\">02</span>  <strong><span class=\"hljs-keyword\">while</span></strong> wrong &lt; len(stages) - <span class=\"hljs-number\">1</span>:\n<span class=\"hljs-number\">03</span>      print(<span class=\"hljs-string\">\"\\n\"</span>)\n<span class=\"hljs-number\">04</span>      msg = <span class=\"hljs-string\">\"Guess a letter\"</span>\n<span class=\"hljs-number\">05</span>      <span class=\"hljs-keyword\">char</span> = input(msg)\n<span class=\"hljs-number\">06</span>      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">char</span> <strong><span class=\"hljs-keyword\">in</span></strong> rletters:\n<span class=\"hljs-number\">07</span>          cind = rletters.index(<span class=\"hljs-keyword\">char</span>)\n<span class=\"hljs-number\">08</span>          board[cind] = <span class=\"hljs-keyword\">char</span>\n<span class=\"hljs-number\">09</span>          rletters[cind] = <span class=\"hljs-string\">'$'</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">11</span>          wrong += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">12</span>      print((<span class=\"hljs-string\">\" \"</span>.<span class=\"hljs-keyword\">join</span>(board)))\n<span class=\"hljs-number\">13</span>      e = wrong + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">14</span>      <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>.<span class=\"hljs-keyword\">join</span>(stages[<span class=\"hljs-number\">0</span>:e]))\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-string\">\"__\"</span> <strong>not</strong> <strong><span class=\"hljs-keyword\">in</span></strong> board:\n<span class=\"hljs-number\">16</span>          <strong>print</strong>(<span class=\"hljs-string\">\"You win!\"</span>)\n<span class=\"hljs-number\">17</span>          print(<span class=\"hljs-string\">\" \"</span>.<span class=\"hljs-keyword\">join</span>(board))\n<span class=\"hljs-number\">18</span>          win = True\n<span class=\"hljs-number\">19</span>          <strong><span class=\"hljs-keyword\">break</span></strong></code></pre>\n<p>只要变量 <code>wrong</code> 的值小于 <code>len(stages) - 1</code>，循环（和游戏）就会继续。变量 <code>wrong</code> 记录了玩家二猜错的次数，因此当玩家二猜错的次数大于画完上吊的人所需字符串的数量时（<code>stages</code> 列表中的字符串数量），游戏结束。我们将 <code>stages</code> 列表的长度减去 1，这是因为列表从 0 开始计数，而 <code>wrong</code> 变量则是从 1 开始。</p>\n<p>进入循环之后，打印一个空白行，让 shell 中的游戏界面看上去不乱。然后，通过内置的 <code>input</code> 函数收集玩家二的答案，并保存在变量 <code>guess</code> 中。</p>\n<p>如果 <code>guess</code> 在 <code>rletters</code>（记录玩家二没猜对的字母列表）中，则猜测正确。如果猜对了，则需要更新 <code>board</code> 列表，后面会用来打印剩余的字母。如果玩家二猜了字母 <code>c</code>，则要将 <code>board</code> 列表改为 <code>[\"c\", \"__\", \"__\"]</code>。</p>\n<p>因此，应使用 <code>rletters</code> 列表的 <code>index</code> 方法，获取玩家二所猜字母的第一个索引，并在 <code>board</code> 列表中的对应索引位置替换为正确的字母。</p>\n<p>但是有一个问题。由于 <code>index</code> 只返回要查找字母的第一个索引，那么如果变量 <code>word</code> 中相同的字母有两个或两个以上，代码就会出错。为了解决这个问题，我们把 <code>rletters</code> 中猜对的字母替换为美元符号，这样下次循环时，<code>index</code> 函数就能找到字母下一次出现的索引（如果有的话），而不是仍返回第一个索引。</p>\n<p>如果玩家二猜错了，则将 <code>wrong</code> 的值递增 1。</p>\n<p>下一步，用 <code>board</code> 和 <code>stages</code> 列表打印得分情况和上吊的人。打印得分情况的代码是 <code>\" \".join(board)</code>。</p>\n<p>打印上吊的人会更复杂一些。当 <code>stages</code> 列表中的每个元素打印在一行之后，完整图案就打印完了。可通过 <code>'\\n'.join(stages)</code> 打印整个图案，代码会在列表中的各个元素后加入一个换行符，这样就能确保每个字符串各占一行了。</p>\n<p>如果要在游戏的每个阶段都打印上吊的人，则需对 <code>stages</code> 列表进行切片。从阶段 0 开始，切片至目前所处的阶段（用变量 wrong 表示）并加一。加一，是因为在切片时尾端不会出现在结果里。切片只会返回打印当前上吊的人进度所需要的字符串。</p>\n<p>最后，检查玩家二是否赢得游戏。如果 <code>board</code> 列表中没有了下划线，就表示猜对了所有字母，玩家二赢得游戏。如果是这样，则打印 <code>You win! It was:</code> 和猜对的单词。同时将变量 <code>variable</code> 设为 <code>True</code>，跳出循环。</p>\n<p>退出循环之后，如果玩家二赢了游戏，则程序结束。如果输了，变量 <code>win</code> 被设为 <code>False</code>。如果是这种情况，则打印完整的上吊的人和 <code>You lose!</code>，最后是没有猜对的那个单词：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqklqxo</span>\n<span class=\"hljs-number\">2</span>  <strong><span class=\"hljs-keyword\">if</span></strong> <strong><span class=\"hljs-keyword\">not</span></strong> win:\n<span class=\"hljs-number\">3</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"\\n\"</span>.join(stages[<span class=\"hljs-number\">0</span>:wrong]))\n<span class=\"hljs-number\">4</span>      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"You lose! It was {}.\"</span>.format(word))</code></pre>\n<p>完整的代码如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h9q2cpc</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">hangman</span><span class=\"hljs-params\">(word)</span>:</span>\n<span class=\"hljs-number\">05</span>      wrong = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">06</span>      stages = [<span class=\"hljs-string\">\"\"</span>,\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"                \"</span>,\n<span class=\"hljs-number\">08</span>          <span class=\"hljs-string\">\"|               \"</span>,\n<span class=\"hljs-number\">09</span>          <span class=\"hljs-string\">\"|        |      \"</span>,\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-string\">\"|        0      \"</span>,\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-string\">\"|       /|\\     \"</span>,\n<span class=\"hljs-number\">12</span>          <span class=\"hljs-string\">\"|       / \\     \"</span>,\n<span class=\"hljs-number\">13</span>          <span class=\"hljs-string\">\"|               \"</span>\n<span class=\"hljs-number\">14</span>           ]\n<span class=\"hljs-number\">15</span>      rletters = list(word)\n<span class=\"hljs-number\">16</span>      board = [<span class=\"hljs-string\">\"__\"</span>] * len(word)\n<span class=\"hljs-number\">17</span>      win = <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">18</span>      print(<span class=\"hljs-string\">\"Welcome to Hangman\"</span>)\n<span class=\"hljs-number\">19</span>      <strong><span class=\"hljs-keyword\">while</span></strong> wrong &lt; len(stages) - <span class=\"hljs-number\">1</span>:\n<span class=\"hljs-number\">20</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>)\n<span class=\"hljs-number\">21</span>          msg = <span class=\"hljs-string\">\"Guess a letter\"</span>\n<span class=\"hljs-number\">22</span>          char = input(msg)\n<span class=\"hljs-number\">23</span>          <strong><span class=\"hljs-keyword\">if</span></strong> char <strong><span class=\"hljs-keyword\">in</span></strong> rletters:\n<span class=\"hljs-number\">24</span>              cind = rletters.index(char)\n<span class=\"hljs-number\">25</span>              board[cind] = char\n<span class=\"hljs-number\">26</span>              rletters[cind] = <span class=\"hljs-string\">'$'</span>\n<span class=\"hljs-number\">27</span>          <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">28</span>              wrong += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">29</span>          <strong>print</strong>((<span class=\"hljs-string\">\" \"</span>.join(board)))\n<span class=\"hljs-number\">30</span>          e = wrong + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">31</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>.join(stages[<span class=\"hljs-number\">0</span>:e]))\n<span class=\"hljs-number\">32</span>          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-string\">\"__\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> board:\n<span class=\"hljs-number\">33</span>              <strong>print</strong>(<span class=\"hljs-string\">\"You win!\"</span>)\n<span class=\"hljs-number\">34</span>              print(<span class=\"hljs-string\">\" \"</span>.join(board))\n<span class=\"hljs-number\">35</span>              win = <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">36</span>              <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">37</span>      <strong><span class=\"hljs-keyword\">if</span></strong> <strong><span class=\"hljs-keyword\">not</span></strong> win:\n<span class=\"hljs-number\">38</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>.join(stages[<span class=\"hljs-number\">0</span>:wrong]))\n<span class=\"hljs-number\">39</span>          print(<span class=\"hljs-string\">\"You lose! It was {}.\"</span>.format(word))\n<span class=\"hljs-number\">40</span>\n<span class=\"hljs-number\">41</span>\n<span class=\"hljs-number\">42</span>  hangman(<span class=\"hljs-string\">\"cat\"</span>)</code></pre>\n<h3 id=\"102\">10.2　挑战练习</h3>\n<p>修改本章编写的游戏，要求从一个单词列表中随机选择单词。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","source":"_posts/Python无师自通/10_practice.html","raw":"---\ntitle: 综合练习\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>综合练习</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#101hangman\">10.1　Hangman</a></li>\n<li><a href=\"#102\">10.2　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“我所学到的一切，都是从书本上得来的。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——亚伯拉罕 · 林肯（Abraham Lincoln）</span></p>\n</blockquote>\n<p>本章将结合目前所学的知识，开发一个文本游戏——经典的 Hangman 猜词游戏。如果之前没玩过，可先了解游戏的大致规则。</p>\n<p>1．玩家一挑选一个秘密单词，单词中有多少个字母，则划多少条横线（这里用下划线表示）。</p>\n<p>2．玩家二每次猜一个字母。</p>\n<p>3．如果玩家二猜测的字母正确，玩家一将下划线修改为正确的字母。在本书的游戏版本中，如果单词中有一个字母出现两次，玩家二也必须猜两次。如果玩家二猜测错误，玩家一则画出上吊的人的一部分身体（从头部开始），如图 10-1 所示。</p>\n<p><img src=\"https://images.gitbook.cn/50a48af0-700c-11e9-83ce-bf64b45f6e99\" alt=\"enter image description here\"></p>\n<p>图 10-1　游戏图案</p>\n<p>4．如果玩家二在玩家一画完上吊的人之前猜对单词，玩家二胜利，反之失败。</p>\n<p>在接下来要编写的程序中，计算机将扮演玩家一，用户将扮演玩家二。准备好玩游戏了吗？</p>\n<h3 id=\"101hangman\">10.1　Hangman</h3>\n<p>Hangman 游戏代码的第一部分如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jhrvs94</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">hangman</span><span class=\"hljs-params\">(word)</span>:</span>\n<span class=\"hljs-number\">05</span>      wrong = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">06</span>      stages = [<span class=\"hljs-string\">\"\"</span>,\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"                \"</span>,\n<span class=\"hljs-number\">08</span>          <span class=\"hljs-string\">\"|               \"</span>,\n<span class=\"hljs-number\">09</span>          <span class=\"hljs-string\">\"|        |      \"</span>,\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-string\">\"|        0      \"</span>,\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-string\">\"|       /|\\     \"</span>,\n<span class=\"hljs-number\">12</span>          <span class=\"hljs-string\">\"|       / \\     \"</span>,\n<span class=\"hljs-number\">13</span>          <span class=\"hljs-string\">\"|               \"</span>\n<span class=\"hljs-number\">14</span>           ]\n<span class=\"hljs-number\">15</span>      rletters = list(word)\n<span class=\"hljs-number\">16</span>      board = [<span class=\"hljs-string\">\"__\"</span>] * len(word)\n<span class=\"hljs-number\">17</span>      win = <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">18</span>      print(<span class=\"hljs-string\">\"Welcome to Hangman\"</span>)</code></pre>\n<p>首先，创建一个叫 <code>hangman</code> 的函数用于保存游戏。该函数接受一个叫 <code>word</code> 的变量作为参数，也就是玩家二要猜的单词。用另一个变量 <code>wrong</code> 记录玩家二猜错了多少个字母。</p>\n<p>变量 <code>stages</code> 是一个列表，含有用来画上吊的人的字符串。Python 将 <code>stages</code> 列表中的每个字符串换行打印出来之后，就会组成一个上吊的人的图案。变量 <code>rletter</code> 也是一个列表，用来保存 <code>word</code> 变量中的每个字母，同时也用来记录还需要猜对的字母。</p>\n<p>变量 <code>board</code> 也是一个字符串列表，用来记录显示给玩家二的提示，假如单词是 <code>cat</code> 则可能显示 <code>c__t</code>（玩家二已经猜对了 <code>c</code> 和 <code>t</code>）。这里用 <code>[\"__\"]</code> * <code>len(word)</code> 来填充 <code>board</code> 列表，变量 <code>word</code> 中的每个字母都用一个下划线表示。例如，如果单词是 <code>cat</code>，<code>board</code> 列表一开始的元素就是 <code>[\"__\", \"__\", \"__\"]</code>。</p>\n<p>还需要一个叫 <code>win</code> 的变量，起始值为 <code>False</code>，用来记录玩家二是否赢了游戏。接下来，打印 <code>Welcome to Hangman</code>。</p>\n<p>代码的第二部分则是一个维持游戏运行的循环，如下所示：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cs\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-meta\"># http://tinyurl.com/ztrp5jc</span>\n<span class=\"hljs-number\">02</span>  <strong><span class=\"hljs-keyword\">while</span></strong> wrong &lt; len(stages) - <span class=\"hljs-number\">1</span>:\n<span class=\"hljs-number\">03</span>      print(<span class=\"hljs-string\">\"\\n\"</span>)\n<span class=\"hljs-number\">04</span>      msg = <span class=\"hljs-string\">\"Guess a letter\"</span>\n<span class=\"hljs-number\">05</span>      <span class=\"hljs-keyword\">char</span> = input(msg)\n<span class=\"hljs-number\">06</span>      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">char</span> <strong><span class=\"hljs-keyword\">in</span></strong> rletters:\n<span class=\"hljs-number\">07</span>          cind = rletters.index(<span class=\"hljs-keyword\">char</span>)\n<span class=\"hljs-number\">08</span>          board[cind] = <span class=\"hljs-keyword\">char</span>\n<span class=\"hljs-number\">09</span>          rletters[cind] = <span class=\"hljs-string\">'$'</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">11</span>          wrong += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">12</span>      print((<span class=\"hljs-string\">\" \"</span>.<span class=\"hljs-keyword\">join</span>(board)))\n<span class=\"hljs-number\">13</span>      e = wrong + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">14</span>      <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>.<span class=\"hljs-keyword\">join</span>(stages[<span class=\"hljs-number\">0</span>:e]))\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-string\">\"__\"</span> <strong>not</strong> <strong><span class=\"hljs-keyword\">in</span></strong> board:\n<span class=\"hljs-number\">16</span>          <strong>print</strong>(<span class=\"hljs-string\">\"You win!\"</span>)\n<span class=\"hljs-number\">17</span>          print(<span class=\"hljs-string\">\" \"</span>.<span class=\"hljs-keyword\">join</span>(board))\n<span class=\"hljs-number\">18</span>          win = True\n<span class=\"hljs-number\">19</span>          <strong><span class=\"hljs-keyword\">break</span></strong></code></pre>\n<p>只要变量 <code>wrong</code> 的值小于 <code>len(stages) - 1</code>，循环（和游戏）就会继续。变量 <code>wrong</code> 记录了玩家二猜错的次数，因此当玩家二猜错的次数大于画完上吊的人所需字符串的数量时（<code>stages</code> 列表中的字符串数量），游戏结束。我们将 <code>stages</code> 列表的长度减去 1，这是因为列表从 0 开始计数，而 <code>wrong</code> 变量则是从 1 开始。</p>\n<p>进入循环之后，打印一个空白行，让 shell 中的游戏界面看上去不乱。然后，通过内置的 <code>input</code> 函数收集玩家二的答案，并保存在变量 <code>guess</code> 中。</p>\n<p>如果 <code>guess</code> 在 <code>rletters</code>（记录玩家二没猜对的字母列表）中，则猜测正确。如果猜对了，则需要更新 <code>board</code> 列表，后面会用来打印剩余的字母。如果玩家二猜了字母 <code>c</code>，则要将 <code>board</code> 列表改为 <code>[\"c\", \"__\", \"__\"]</code>。</p>\n<p>因此，应使用 <code>rletters</code> 列表的 <code>index</code> 方法，获取玩家二所猜字母的第一个索引，并在 <code>board</code> 列表中的对应索引位置替换为正确的字母。</p>\n<p>但是有一个问题。由于 <code>index</code> 只返回要查找字母的第一个索引，那么如果变量 <code>word</code> 中相同的字母有两个或两个以上，代码就会出错。为了解决这个问题，我们把 <code>rletters</code> 中猜对的字母替换为美元符号，这样下次循环时，<code>index</code> 函数就能找到字母下一次出现的索引（如果有的话），而不是仍返回第一个索引。</p>\n<p>如果玩家二猜错了，则将 <code>wrong</code> 的值递增 1。</p>\n<p>下一步，用 <code>board</code> 和 <code>stages</code> 列表打印得分情况和上吊的人。打印得分情况的代码是 <code>\" \".join(board)</code>。</p>\n<p>打印上吊的人会更复杂一些。当 <code>stages</code> 列表中的每个元素打印在一行之后，完整图案就打印完了。可通过 <code>'\\n'.join(stages)</code> 打印整个图案，代码会在列表中的各个元素后加入一个换行符，这样就能确保每个字符串各占一行了。</p>\n<p>如果要在游戏的每个阶段都打印上吊的人，则需对 <code>stages</code> 列表进行切片。从阶段 0 开始，切片至目前所处的阶段（用变量 wrong 表示）并加一。加一，是因为在切片时尾端不会出现在结果里。切片只会返回打印当前上吊的人进度所需要的字符串。</p>\n<p>最后，检查玩家二是否赢得游戏。如果 <code>board</code> 列表中没有了下划线，就表示猜对了所有字母，玩家二赢得游戏。如果是这样，则打印 <code>You win! It was:</code> 和猜对的单词。同时将变量 <code>variable</code> 设为 <code>True</code>，跳出循环。</p>\n<p>退出循环之后，如果玩家二赢了游戏，则程序结束。如果输了，变量 <code>win</code> 被设为 <code>False</code>。如果是这种情况，则打印完整的上吊的人和 <code>You lose!</code>，最后是没有猜对的那个单词：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqklqxo</span>\n<span class=\"hljs-number\">2</span>  <strong><span class=\"hljs-keyword\">if</span></strong> <strong><span class=\"hljs-keyword\">not</span></strong> win:\n<span class=\"hljs-number\">3</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"\\n\"</span>.join(stages[<span class=\"hljs-number\">0</span>:wrong]))\n<span class=\"hljs-number\">4</span>      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"You lose! It was {}.\"</span>.format(word))</code></pre>\n<p>完整的代码如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h9q2cpc</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">hangman</span><span class=\"hljs-params\">(word)</span>:</span>\n<span class=\"hljs-number\">05</span>      wrong = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">06</span>      stages = [<span class=\"hljs-string\">\"\"</span>,\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"                \"</span>,\n<span class=\"hljs-number\">08</span>          <span class=\"hljs-string\">\"|               \"</span>,\n<span class=\"hljs-number\">09</span>          <span class=\"hljs-string\">\"|        |      \"</span>,\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-string\">\"|        0      \"</span>,\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-string\">\"|       /|\\     \"</span>,\n<span class=\"hljs-number\">12</span>          <span class=\"hljs-string\">\"|       / \\     \"</span>,\n<span class=\"hljs-number\">13</span>          <span class=\"hljs-string\">\"|               \"</span>\n<span class=\"hljs-number\">14</span>           ]\n<span class=\"hljs-number\">15</span>      rletters = list(word)\n<span class=\"hljs-number\">16</span>      board = [<span class=\"hljs-string\">\"__\"</span>] * len(word)\n<span class=\"hljs-number\">17</span>      win = <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">18</span>      print(<span class=\"hljs-string\">\"Welcome to Hangman\"</span>)\n<span class=\"hljs-number\">19</span>      <strong><span class=\"hljs-keyword\">while</span></strong> wrong &lt; len(stages) - <span class=\"hljs-number\">1</span>:\n<span class=\"hljs-number\">20</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>)\n<span class=\"hljs-number\">21</span>          msg = <span class=\"hljs-string\">\"Guess a letter\"</span>\n<span class=\"hljs-number\">22</span>          char = input(msg)\n<span class=\"hljs-number\">23</span>          <strong><span class=\"hljs-keyword\">if</span></strong> char <strong><span class=\"hljs-keyword\">in</span></strong> rletters:\n<span class=\"hljs-number\">24</span>              cind = rletters.index(char)\n<span class=\"hljs-number\">25</span>              board[cind] = char\n<span class=\"hljs-number\">26</span>              rletters[cind] = <span class=\"hljs-string\">'$'</span>\n<span class=\"hljs-number\">27</span>          <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">28</span>              wrong += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">29</span>          <strong>print</strong>((<span class=\"hljs-string\">\" \"</span>.join(board)))\n<span class=\"hljs-number\">30</span>          e = wrong + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">31</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>.join(stages[<span class=\"hljs-number\">0</span>:e]))\n<span class=\"hljs-number\">32</span>          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-string\">\"__\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> board:\n<span class=\"hljs-number\">33</span>              <strong>print</strong>(<span class=\"hljs-string\">\"You win!\"</span>)\n<span class=\"hljs-number\">34</span>              print(<span class=\"hljs-string\">\" \"</span>.join(board))\n<span class=\"hljs-number\">35</span>              win = <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">36</span>              <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">37</span>      <strong><span class=\"hljs-keyword\">if</span></strong> <strong><span class=\"hljs-keyword\">not</span></strong> win:\n<span class=\"hljs-number\">38</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>.join(stages[<span class=\"hljs-number\">0</span>:wrong]))\n<span class=\"hljs-number\">39</span>          print(<span class=\"hljs-string\">\"You lose! It was {}.\"</span>.format(word))\n<span class=\"hljs-number\">40</span>\n<span class=\"hljs-number\">41</span>\n<span class=\"hljs-number\">42</span>  hangman(<span class=\"hljs-string\">\"cat\"</span>)</code></pre>\n<h3 id=\"102\">10.2　挑战练习</h3>\n<p>修改本章编写的游戏，要求从一个单词列表中随机选择单词。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","slug":"Python无师自通/10_practice","published":1,"date":"2019-06-08T06:28:36.873Z","updated":"2019-06-08T06:28:36.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwn5187d00004z72lv3g5m5f","content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>综合练习</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#101hangman\">10.1　Hangman</a></li>\n<li><a href=\"#102\">10.2　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“我所学到的一切，都是从书本上得来的。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——亚伯拉罕 · 林肯（Abraham Lincoln）</span></p>\n</blockquote>\n<p>本章将结合目前所学的知识，开发一个文本游戏——经典的 Hangman 猜词游戏。如果之前没玩过，可先了解游戏的大致规则。</p>\n<p>1．玩家一挑选一个秘密单词，单词中有多少个字母，则划多少条横线（这里用下划线表示）。</p>\n<p>2．玩家二每次猜一个字母。</p>\n<p>3．如果玩家二猜测的字母正确，玩家一将下划线修改为正确的字母。在本书的游戏版本中，如果单词中有一个字母出现两次，玩家二也必须猜两次。如果玩家二猜测错误，玩家一则画出上吊的人的一部分身体（从头部开始），如图 10-1 所示。</p>\n<p><img src=\"https://images.gitbook.cn/50a48af0-700c-11e9-83ce-bf64b45f6e99\" alt=\"enter image description here\"></p>\n<p>图 10-1　游戏图案</p>\n<p>4．如果玩家二在玩家一画完上吊的人之前猜对单词，玩家二胜利，反之失败。</p>\n<p>在接下来要编写的程序中，计算机将扮演玩家一，用户将扮演玩家二。准备好玩游戏了吗？</p>\n<h3 id=\"101hangman\">10.1　Hangman</h3>\n<p>Hangman 游戏代码的第一部分如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jhrvs94</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">hangman</span><span class=\"hljs-params\">(word)</span>:</span>\n<span class=\"hljs-number\">05</span>      wrong = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">06</span>      stages = [<span class=\"hljs-string\">\"\"</span>,\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"                \"</span>,\n<span class=\"hljs-number\">08</span>          <span class=\"hljs-string\">\"|               \"</span>,\n<span class=\"hljs-number\">09</span>          <span class=\"hljs-string\">\"|        |      \"</span>,\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-string\">\"|        0      \"</span>,\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-string\">\"|       /|\\     \"</span>,\n<span class=\"hljs-number\">12</span>          <span class=\"hljs-string\">\"|       / \\     \"</span>,\n<span class=\"hljs-number\">13</span>          <span class=\"hljs-string\">\"|               \"</span>\n<span class=\"hljs-number\">14</span>           ]\n<span class=\"hljs-number\">15</span>      rletters = list(word)\n<span class=\"hljs-number\">16</span>      board = [<span class=\"hljs-string\">\"__\"</span>] * len(word)\n<span class=\"hljs-number\">17</span>      win = <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">18</span>      print(<span class=\"hljs-string\">\"Welcome to Hangman\"</span>)</code></pre>\n<p>首先，创建一个叫 <code>hangman</code> 的函数用于保存游戏。该函数接受一个叫 <code>word</code> 的变量作为参数，也就是玩家二要猜的单词。用另一个变量 <code>wrong</code> 记录玩家二猜错了多少个字母。</p>\n<p>变量 <code>stages</code> 是一个列表，含有用来画上吊的人的字符串。Python 将 <code>stages</code> 列表中的每个字符串换行打印出来之后，就会组成一个上吊的人的图案。变量 <code>rletter</code> 也是一个列表，用来保存 <code>word</code> 变量中的每个字母，同时也用来记录还需要猜对的字母。</p>\n<p>变量 <code>board</code> 也是一个字符串列表，用来记录显示给玩家二的提示，假如单词是 <code>cat</code> 则可能显示 <code>c__t</code>（玩家二已经猜对了 <code>c</code> 和 <code>t</code>）。这里用 <code>[\"__\"]</code> * <code>len(word)</code> 来填充 <code>board</code> 列表，变量 <code>word</code> 中的每个字母都用一个下划线表示。例如，如果单词是 <code>cat</code>，<code>board</code> 列表一开始的元素就是 <code>[\"__\", \"__\", \"__\"]</code>。</p>\n<p>还需要一个叫 <code>win</code> 的变量，起始值为 <code>False</code>，用来记录玩家二是否赢了游戏。接下来，打印 <code>Welcome to Hangman</code>。</p>\n<p>代码的第二部分则是一个维持游戏运行的循环，如下所示：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cs\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-meta\"># http://tinyurl.com/ztrp5jc</span>\n<span class=\"hljs-number\">02</span>  <strong><span class=\"hljs-keyword\">while</span></strong> wrong &lt; len(stages) - <span class=\"hljs-number\">1</span>:\n<span class=\"hljs-number\">03</span>      print(<span class=\"hljs-string\">\"\\n\"</span>)\n<span class=\"hljs-number\">04</span>      msg = <span class=\"hljs-string\">\"Guess a letter\"</span>\n<span class=\"hljs-number\">05</span>      <span class=\"hljs-keyword\">char</span> = input(msg)\n<span class=\"hljs-number\">06</span>      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">char</span> <strong><span class=\"hljs-keyword\">in</span></strong> rletters:\n<span class=\"hljs-number\">07</span>          cind = rletters.index(<span class=\"hljs-keyword\">char</span>)\n<span class=\"hljs-number\">08</span>          board[cind] = <span class=\"hljs-keyword\">char</span>\n<span class=\"hljs-number\">09</span>          rletters[cind] = <span class=\"hljs-string\">'$'</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">11</span>          wrong += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">12</span>      print((<span class=\"hljs-string\">\" \"</span>.<span class=\"hljs-keyword\">join</span>(board)))\n<span class=\"hljs-number\">13</span>      e = wrong + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">14</span>      <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>.<span class=\"hljs-keyword\">join</span>(stages[<span class=\"hljs-number\">0</span>:e]))\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-string\">\"__\"</span> <strong>not</strong> <strong><span class=\"hljs-keyword\">in</span></strong> board:\n<span class=\"hljs-number\">16</span>          <strong>print</strong>(<span class=\"hljs-string\">\"You win!\"</span>)\n<span class=\"hljs-number\">17</span>          print(<span class=\"hljs-string\">\" \"</span>.<span class=\"hljs-keyword\">join</span>(board))\n<span class=\"hljs-number\">18</span>          win = True\n<span class=\"hljs-number\">19</span>          <strong><span class=\"hljs-keyword\">break</span></strong></code></pre>\n<p>只要变量 <code>wrong</code> 的值小于 <code>len(stages) - 1</code>，循环（和游戏）就会继续。变量 <code>wrong</code> 记录了玩家二猜错的次数，因此当玩家二猜错的次数大于画完上吊的人所需字符串的数量时（<code>stages</code> 列表中的字符串数量），游戏结束。我们将 <code>stages</code> 列表的长度减去 1，这是因为列表从 0 开始计数，而 <code>wrong</code> 变量则是从 1 开始。</p>\n<p>进入循环之后，打印一个空白行，让 shell 中的游戏界面看上去不乱。然后，通过内置的 <code>input</code> 函数收集玩家二的答案，并保存在变量 <code>guess</code> 中。</p>\n<p>如果 <code>guess</code> 在 <code>rletters</code>（记录玩家二没猜对的字母列表）中，则猜测正确。如果猜对了，则需要更新 <code>board</code> 列表，后面会用来打印剩余的字母。如果玩家二猜了字母 <code>c</code>，则要将 <code>board</code> 列表改为 <code>[\"c\", \"__\", \"__\"]</code>。</p>\n<p>因此，应使用 <code>rletters</code> 列表的 <code>index</code> 方法，获取玩家二所猜字母的第一个索引，并在 <code>board</code> 列表中的对应索引位置替换为正确的字母。</p>\n<p>但是有一个问题。由于 <code>index</code> 只返回要查找字母的第一个索引，那么如果变量 <code>word</code> 中相同的字母有两个或两个以上，代码就会出错。为了解决这个问题，我们把 <code>rletters</code> 中猜对的字母替换为美元符号，这样下次循环时，<code>index</code> 函数就能找到字母下一次出现的索引（如果有的话），而不是仍返回第一个索引。</p>\n<p>如果玩家二猜错了，则将 <code>wrong</code> 的值递增 1。</p>\n<p>下一步，用 <code>board</code> 和 <code>stages</code> 列表打印得分情况和上吊的人。打印得分情况的代码是 <code>\" \".join(board)</code>。</p>\n<p>打印上吊的人会更复杂一些。当 <code>stages</code> 列表中的每个元素打印在一行之后，完整图案就打印完了。可通过 <code>'\\n'.join(stages)</code> 打印整个图案，代码会在列表中的各个元素后加入一个换行符，这样就能确保每个字符串各占一行了。</p>\n<p>如果要在游戏的每个阶段都打印上吊的人，则需对 <code>stages</code> 列表进行切片。从阶段 0 开始，切片至目前所处的阶段（用变量 wrong 表示）并加一。加一，是因为在切片时尾端不会出现在结果里。切片只会返回打印当前上吊的人进度所需要的字符串。</p>\n<p>最后，检查玩家二是否赢得游戏。如果 <code>board</code> 列表中没有了下划线，就表示猜对了所有字母，玩家二赢得游戏。如果是这样，则打印 <code>You win! It was:</code> 和猜对的单词。同时将变量 <code>variable</code> 设为 <code>True</code>，跳出循环。</p>\n<p>退出循环之后，如果玩家二赢了游戏，则程序结束。如果输了，变量 <code>win</code> 被设为 <code>False</code>。如果是这种情况，则打印完整的上吊的人和 <code>You lose!</code>，最后是没有猜对的那个单词：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqklqxo</span>\n<span class=\"hljs-number\">2</span>  <strong><span class=\"hljs-keyword\">if</span></strong> <strong><span class=\"hljs-keyword\">not</span></strong> win:\n<span class=\"hljs-number\">3</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"\\n\"</span>.join(stages[<span class=\"hljs-number\">0</span>:wrong]))\n<span class=\"hljs-number\">4</span>      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"You lose! It was {}.\"</span>.format(word))</code></pre>\n<p>完整的代码如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h9q2cpc</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">hangman</span><span class=\"hljs-params\">(word)</span>:</span>\n<span class=\"hljs-number\">05</span>      wrong = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">06</span>      stages = [<span class=\"hljs-string\">\"\"</span>,\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"                \"</span>,\n<span class=\"hljs-number\">08</span>          <span class=\"hljs-string\">\"|               \"</span>,\n<span class=\"hljs-number\">09</span>          <span class=\"hljs-string\">\"|        |      \"</span>,\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-string\">\"|        0      \"</span>,\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-string\">\"|       /|\\     \"</span>,\n<span class=\"hljs-number\">12</span>          <span class=\"hljs-string\">\"|       / \\     \"</span>,\n<span class=\"hljs-number\">13</span>          <span class=\"hljs-string\">\"|               \"</span>\n<span class=\"hljs-number\">14</span>           ]\n<span class=\"hljs-number\">15</span>      rletters = list(word)\n<span class=\"hljs-number\">16</span>      board = [<span class=\"hljs-string\">\"__\"</span>] * len(word)\n<span class=\"hljs-number\">17</span>      win = <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">18</span>      print(<span class=\"hljs-string\">\"Welcome to Hangman\"</span>)\n<span class=\"hljs-number\">19</span>      <strong><span class=\"hljs-keyword\">while</span></strong> wrong &lt; len(stages) - <span class=\"hljs-number\">1</span>:\n<span class=\"hljs-number\">20</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>)\n<span class=\"hljs-number\">21</span>          msg = <span class=\"hljs-string\">\"Guess a letter\"</span>\n<span class=\"hljs-number\">22</span>          char = input(msg)\n<span class=\"hljs-number\">23</span>          <strong><span class=\"hljs-keyword\">if</span></strong> char <strong><span class=\"hljs-keyword\">in</span></strong> rletters:\n<span class=\"hljs-number\">24</span>              cind = rletters.index(char)\n<span class=\"hljs-number\">25</span>              board[cind] = char\n<span class=\"hljs-number\">26</span>              rletters[cind] = <span class=\"hljs-string\">'$'</span>\n<span class=\"hljs-number\">27</span>          <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">28</span>              wrong += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">29</span>          <strong>print</strong>((<span class=\"hljs-string\">\" \"</span>.join(board)))\n<span class=\"hljs-number\">30</span>          e = wrong + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">31</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>.join(stages[<span class=\"hljs-number\">0</span>:e]))\n<span class=\"hljs-number\">32</span>          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-string\">\"__\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> board:\n<span class=\"hljs-number\">33</span>              <strong>print</strong>(<span class=\"hljs-string\">\"You win!\"</span>)\n<span class=\"hljs-number\">34</span>              print(<span class=\"hljs-string\">\" \"</span>.join(board))\n<span class=\"hljs-number\">35</span>              win = <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">36</span>              <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">37</span>      <strong><span class=\"hljs-keyword\">if</span></strong> <strong><span class=\"hljs-keyword\">not</span></strong> win:\n<span class=\"hljs-number\">38</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>.join(stages[<span class=\"hljs-number\">0</span>:wrong]))\n<span class=\"hljs-number\">39</span>          print(<span class=\"hljs-string\">\"You lose! It was {}.\"</span>.format(word))\n<span class=\"hljs-number\">40</span>\n<span class=\"hljs-number\">41</span>\n<span class=\"hljs-number\">42</span>  hangman(<span class=\"hljs-string\">\"cat\"</span>)</code></pre>\n<h3 id=\"102\">10.2　挑战练习</h3>\n<p>修改本章编写的游戏，要求从一个单词列表中随机选择单词。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>综合练习</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#101hangman\">10.1　Hangman</a></li>\n<li><a href=\"#102\">10.2　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“我所学到的一切，都是从书本上得来的。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——亚伯拉罕 · 林肯（Abraham Lincoln）</span></p>\n</blockquote>\n<p>本章将结合目前所学的知识，开发一个文本游戏——经典的 Hangman 猜词游戏。如果之前没玩过，可先了解游戏的大致规则。</p>\n<p>1．玩家一挑选一个秘密单词，单词中有多少个字母，则划多少条横线（这里用下划线表示）。</p>\n<p>2．玩家二每次猜一个字母。</p>\n<p>3．如果玩家二猜测的字母正确，玩家一将下划线修改为正确的字母。在本书的游戏版本中，如果单词中有一个字母出现两次，玩家二也必须猜两次。如果玩家二猜测错误，玩家一则画出上吊的人的一部分身体（从头部开始），如图 10-1 所示。</p>\n<p><img src=\"https://images.gitbook.cn/50a48af0-700c-11e9-83ce-bf64b45f6e99\" alt=\"enter image description here\"></p>\n<p>图 10-1　游戏图案</p>\n<p>4．如果玩家二在玩家一画完上吊的人之前猜对单词，玩家二胜利，反之失败。</p>\n<p>在接下来要编写的程序中，计算机将扮演玩家一，用户将扮演玩家二。准备好玩游戏了吗？</p>\n<h3 id=\"101hangman\">10.1　Hangman</h3>\n<p>Hangman 游戏代码的第一部分如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jhrvs94</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">hangman</span><span class=\"hljs-params\">(word)</span>:</span>\n<span class=\"hljs-number\">05</span>      wrong = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">06</span>      stages = [<span class=\"hljs-string\">\"\"</span>,\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"                \"</span>,\n<span class=\"hljs-number\">08</span>          <span class=\"hljs-string\">\"|               \"</span>,\n<span class=\"hljs-number\">09</span>          <span class=\"hljs-string\">\"|        |      \"</span>,\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-string\">\"|        0      \"</span>,\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-string\">\"|       /|\\     \"</span>,\n<span class=\"hljs-number\">12</span>          <span class=\"hljs-string\">\"|       / \\     \"</span>,\n<span class=\"hljs-number\">13</span>          <span class=\"hljs-string\">\"|               \"</span>\n<span class=\"hljs-number\">14</span>           ]\n<span class=\"hljs-number\">15</span>      rletters = list(word)\n<span class=\"hljs-number\">16</span>      board = [<span class=\"hljs-string\">\"__\"</span>] * len(word)\n<span class=\"hljs-number\">17</span>      win = <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">18</span>      print(<span class=\"hljs-string\">\"Welcome to Hangman\"</span>)</code></pre>\n<p>首先，创建一个叫 <code>hangman</code> 的函数用于保存游戏。该函数接受一个叫 <code>word</code> 的变量作为参数，也就是玩家二要猜的单词。用另一个变量 <code>wrong</code> 记录玩家二猜错了多少个字母。</p>\n<p>变量 <code>stages</code> 是一个列表，含有用来画上吊的人的字符串。Python 将 <code>stages</code> 列表中的每个字符串换行打印出来之后，就会组成一个上吊的人的图案。变量 <code>rletter</code> 也是一个列表，用来保存 <code>word</code> 变量中的每个字母，同时也用来记录还需要猜对的字母。</p>\n<p>变量 <code>board</code> 也是一个字符串列表，用来记录显示给玩家二的提示，假如单词是 <code>cat</code> 则可能显示 <code>c__t</code>（玩家二已经猜对了 <code>c</code> 和 <code>t</code>）。这里用 <code>[\"__\"]</code> * <code>len(word)</code> 来填充 <code>board</code> 列表，变量 <code>word</code> 中的每个字母都用一个下划线表示。例如，如果单词是 <code>cat</code>，<code>board</code> 列表一开始的元素就是 <code>[\"__\", \"__\", \"__\"]</code>。</p>\n<p>还需要一个叫 <code>win</code> 的变量，起始值为 <code>False</code>，用来记录玩家二是否赢了游戏。接下来，打印 <code>Welcome to Hangman</code>。</p>\n<p>代码的第二部分则是一个维持游戏运行的循环，如下所示：</p>\n<pre class=\"代码无行号\"><code class=\"hljs cs\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-meta\"># http://tinyurl.com/ztrp5jc</span>\n<span class=\"hljs-number\">02</span>  <strong><span class=\"hljs-keyword\">while</span></strong> wrong &lt; len(stages) - <span class=\"hljs-number\">1</span>:\n<span class=\"hljs-number\">03</span>      print(<span class=\"hljs-string\">\"\\n\"</span>)\n<span class=\"hljs-number\">04</span>      msg = <span class=\"hljs-string\">\"Guess a letter\"</span>\n<span class=\"hljs-number\">05</span>      <span class=\"hljs-keyword\">char</span> = input(msg)\n<span class=\"hljs-number\">06</span>      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">char</span> <strong><span class=\"hljs-keyword\">in</span></strong> rletters:\n<span class=\"hljs-number\">07</span>          cind = rletters.index(<span class=\"hljs-keyword\">char</span>)\n<span class=\"hljs-number\">08</span>          board[cind] = <span class=\"hljs-keyword\">char</span>\n<span class=\"hljs-number\">09</span>          rletters[cind] = <span class=\"hljs-string\">'$'</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">11</span>          wrong += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">12</span>      print((<span class=\"hljs-string\">\" \"</span>.<span class=\"hljs-keyword\">join</span>(board)))\n<span class=\"hljs-number\">13</span>      e = wrong + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">14</span>      <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>.<span class=\"hljs-keyword\">join</span>(stages[<span class=\"hljs-number\">0</span>:e]))\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-string\">\"__\"</span> <strong>not</strong> <strong><span class=\"hljs-keyword\">in</span></strong> board:\n<span class=\"hljs-number\">16</span>          <strong>print</strong>(<span class=\"hljs-string\">\"You win!\"</span>)\n<span class=\"hljs-number\">17</span>          print(<span class=\"hljs-string\">\" \"</span>.<span class=\"hljs-keyword\">join</span>(board))\n<span class=\"hljs-number\">18</span>          win = True\n<span class=\"hljs-number\">19</span>          <strong><span class=\"hljs-keyword\">break</span></strong></code></pre>\n<p>只要变量 <code>wrong</code> 的值小于 <code>len(stages) - 1</code>，循环（和游戏）就会继续。变量 <code>wrong</code> 记录了玩家二猜错的次数，因此当玩家二猜错的次数大于画完上吊的人所需字符串的数量时（<code>stages</code> 列表中的字符串数量），游戏结束。我们将 <code>stages</code> 列表的长度减去 1，这是因为列表从 0 开始计数，而 <code>wrong</code> 变量则是从 1 开始。</p>\n<p>进入循环之后，打印一个空白行，让 shell 中的游戏界面看上去不乱。然后，通过内置的 <code>input</code> 函数收集玩家二的答案，并保存在变量 <code>guess</code> 中。</p>\n<p>如果 <code>guess</code> 在 <code>rletters</code>（记录玩家二没猜对的字母列表）中，则猜测正确。如果猜对了，则需要更新 <code>board</code> 列表，后面会用来打印剩余的字母。如果玩家二猜了字母 <code>c</code>，则要将 <code>board</code> 列表改为 <code>[\"c\", \"__\", \"__\"]</code>。</p>\n<p>因此，应使用 <code>rletters</code> 列表的 <code>index</code> 方法，获取玩家二所猜字母的第一个索引，并在 <code>board</code> 列表中的对应索引位置替换为正确的字母。</p>\n<p>但是有一个问题。由于 <code>index</code> 只返回要查找字母的第一个索引，那么如果变量 <code>word</code> 中相同的字母有两个或两个以上，代码就会出错。为了解决这个问题，我们把 <code>rletters</code> 中猜对的字母替换为美元符号，这样下次循环时，<code>index</code> 函数就能找到字母下一次出现的索引（如果有的话），而不是仍返回第一个索引。</p>\n<p>如果玩家二猜错了，则将 <code>wrong</code> 的值递增 1。</p>\n<p>下一步，用 <code>board</code> 和 <code>stages</code> 列表打印得分情况和上吊的人。打印得分情况的代码是 <code>\" \".join(board)</code>。</p>\n<p>打印上吊的人会更复杂一些。当 <code>stages</code> 列表中的每个元素打印在一行之后，完整图案就打印完了。可通过 <code>'\\n'.join(stages)</code> 打印整个图案，代码会在列表中的各个元素后加入一个换行符，这样就能确保每个字符串各占一行了。</p>\n<p>如果要在游戏的每个阶段都打印上吊的人，则需对 <code>stages</code> 列表进行切片。从阶段 0 开始，切片至目前所处的阶段（用变量 wrong 表示）并加一。加一，是因为在切片时尾端不会出现在结果里。切片只会返回打印当前上吊的人进度所需要的字符串。</p>\n<p>最后，检查玩家二是否赢得游戏。如果 <code>board</code> 列表中没有了下划线，就表示猜对了所有字母，玩家二赢得游戏。如果是这样，则打印 <code>You win! It was:</code> 和猜对的单词。同时将变量 <code>variable</code> 设为 <code>True</code>，跳出循环。</p>\n<p>退出循环之后，如果玩家二赢了游戏，则程序结束。如果输了，变量 <code>win</code> 被设为 <code>False</code>。如果是这种情况，则打印完整的上吊的人和 <code>You lose!</code>，最后是没有猜对的那个单词：</p>\n<pre class=\"代码无行号\"><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqklqxo</span>\n<span class=\"hljs-number\">2</span>  <strong><span class=\"hljs-keyword\">if</span></strong> <strong><span class=\"hljs-keyword\">not</span></strong> win:\n<span class=\"hljs-number\">3</span>      <strong><span class=\"hljs-built_in\">print</span></strong>(<span class=\"hljs-string\">\"\\n\"</span>.join(stages[<span class=\"hljs-number\">0</span>:wrong]))\n<span class=\"hljs-number\">4</span>      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"You lose! It was {}.\"</span>.format(word))</code></pre>\n<p>完整的代码如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h9q2cpc</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">hangman</span><span class=\"hljs-params\">(word)</span>:</span>\n<span class=\"hljs-number\">05</span>      wrong = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">06</span>      stages = [<span class=\"hljs-string\">\"\"</span>,\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-string\">\"                \"</span>,\n<span class=\"hljs-number\">08</span>          <span class=\"hljs-string\">\"|               \"</span>,\n<span class=\"hljs-number\">09</span>          <span class=\"hljs-string\">\"|        |      \"</span>,\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-string\">\"|        0      \"</span>,\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-string\">\"|       /|\\     \"</span>,\n<span class=\"hljs-number\">12</span>          <span class=\"hljs-string\">\"|       / \\     \"</span>,\n<span class=\"hljs-number\">13</span>          <span class=\"hljs-string\">\"|               \"</span>\n<span class=\"hljs-number\">14</span>           ]\n<span class=\"hljs-number\">15</span>      rletters = list(word)\n<span class=\"hljs-number\">16</span>      board = [<span class=\"hljs-string\">\"__\"</span>] * len(word)\n<span class=\"hljs-number\">17</span>      win = <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">18</span>      print(<span class=\"hljs-string\">\"Welcome to Hangman\"</span>)\n<span class=\"hljs-number\">19</span>      <strong><span class=\"hljs-keyword\">while</span></strong> wrong &lt; len(stages) - <span class=\"hljs-number\">1</span>:\n<span class=\"hljs-number\">20</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>)\n<span class=\"hljs-number\">21</span>          msg = <span class=\"hljs-string\">\"Guess a letter\"</span>\n<span class=\"hljs-number\">22</span>          char = input(msg)\n<span class=\"hljs-number\">23</span>          <strong><span class=\"hljs-keyword\">if</span></strong> char <strong><span class=\"hljs-keyword\">in</span></strong> rletters:\n<span class=\"hljs-number\">24</span>              cind = rletters.index(char)\n<span class=\"hljs-number\">25</span>              board[cind] = char\n<span class=\"hljs-number\">26</span>              rletters[cind] = <span class=\"hljs-string\">'$'</span>\n<span class=\"hljs-number\">27</span>          <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">28</span>              wrong += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">29</span>          <strong>print</strong>((<span class=\"hljs-string\">\" \"</span>.join(board)))\n<span class=\"hljs-number\">30</span>          e = wrong + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">31</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>.join(stages[<span class=\"hljs-number\">0</span>:e]))\n<span class=\"hljs-number\">32</span>          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-string\">\"__\"</span> <strong><span class=\"hljs-keyword\">not</span></strong> <strong><span class=\"hljs-keyword\">in</span></strong> board:\n<span class=\"hljs-number\">33</span>              <strong>print</strong>(<span class=\"hljs-string\">\"You win!\"</span>)\n<span class=\"hljs-number\">34</span>              print(<span class=\"hljs-string\">\" \"</span>.join(board))\n<span class=\"hljs-number\">35</span>              win = <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">36</span>              <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">37</span>      <strong><span class=\"hljs-keyword\">if</span></strong> <strong><span class=\"hljs-keyword\">not</span></strong> win:\n<span class=\"hljs-number\">38</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\\n\"</span>.join(stages[<span class=\"hljs-number\">0</span>:wrong]))\n<span class=\"hljs-number\">39</span>          print(<span class=\"hljs-string\">\"You lose! It was {}.\"</span>.format(word))\n<span class=\"hljs-number\">40</span>\n<span class=\"hljs-number\">41</span>\n<span class=\"hljs-number\">42</span>  hangman(<span class=\"hljs-string\">\"cat\"</span>)</code></pre>\n<h3 id=\"102\">10.2　挑战练习</h3>\n<p>修改本章编写的游戏，要求从一个单词列表中随机选择单词。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>"},{"title":"练习","_content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>练习</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#111\">11.1　阅读</a></li>\n<li><a href=\"#112\">11.2　其他资源</a></li>\n<li><a href=\"#113\">11.3　寻求帮助</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“练习成就不了完美。多练习会产生髓磷脂，是髓磷脂让你做到完美。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——丹尼尔 · 科伊尔（Daniel Coyle）</span></p>\n</blockquote>\n<p>如果这是你读的第一本编程书，建议在阅读下一章之前多花时间做些练习。以下是碰到问题时可参考的一些资源。</p>\n<h3 id=\"111\">11.1　阅读</h3>\n<p>查看以下网址以获得信息：</p>\n<p>http://programmers.stackexchange.com/questions/44177/what-is-the-single-most-effective-thing-you-did-to-improve-your-programming-skill。</p>\n<h3 id=\"112\">11.2　其他资源</h3>\n<p>本书也整理了一些其他的编程资源，读者可前往以下链接查看：http://www.theselftaughtprogrammer.io/resources。</p>\n<h3 id=\"113\">11.3　寻求帮助</h3>\n<p>如果碰到了问题，可以参考如下建议。首先，在 Facebook 的“自学程序员群组”中提问，网址是 https://www.facebook.com/groups/selftaughtprogrammers。群组中有不少热心的程序员，可以帮助解答你的问题。</p>\n<p>还建议多逛逛 http://www.stackoverflow.com，可以在上面提出编程相关的问题，会得到社区成员的解答。</p>\n<p>学会寻求他人的帮助是非常重要的。想办法解决问题是学习过程中很重要的部分；但是在某些时候，可能会事倍功半。过去笔者在做项目时，常常纠结于要自己解决所有问题。这样就导致效率低下。如果今天再出现类似的情况，则会上网提问。每次提问后都会有人提供新的思路。因此，编程社区对于程序员的帮助是十分巨大的。</p></div></article>\n</body>\n</html>","source":"_posts/Python无师自通/11_testing.html","raw":"---\ntitle: 练习\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>练习</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#111\">11.1　阅读</a></li>\n<li><a href=\"#112\">11.2　其他资源</a></li>\n<li><a href=\"#113\">11.3　寻求帮助</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“练习成就不了完美。多练习会产生髓磷脂，是髓磷脂让你做到完美。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——丹尼尔 · 科伊尔（Daniel Coyle）</span></p>\n</blockquote>\n<p>如果这是你读的第一本编程书，建议在阅读下一章之前多花时间做些练习。以下是碰到问题时可参考的一些资源。</p>\n<h3 id=\"111\">11.1　阅读</h3>\n<p>查看以下网址以获得信息：</p>\n<p>http://programmers.stackexchange.com/questions/44177/what-is-the-single-most-effective-thing-you-did-to-improve-your-programming-skill。</p>\n<h3 id=\"112\">11.2　其他资源</h3>\n<p>本书也整理了一些其他的编程资源，读者可前往以下链接查看：http://www.theselftaughtprogrammer.io/resources。</p>\n<h3 id=\"113\">11.3　寻求帮助</h3>\n<p>如果碰到了问题，可以参考如下建议。首先，在 Facebook 的“自学程序员群组”中提问，网址是 https://www.facebook.com/groups/selftaughtprogrammers。群组中有不少热心的程序员，可以帮助解答你的问题。</p>\n<p>还建议多逛逛 http://www.stackoverflow.com，可以在上面提出编程相关的问题，会得到社区成员的解答。</p>\n<p>学会寻求他人的帮助是非常重要的。想办法解决问题是学习过程中很重要的部分；但是在某些时候，可能会事倍功半。过去笔者在做项目时，常常纠结于要自己解决所有问题。这样就导致效率低下。如果今天再出现类似的情况，则会上网提问。每次提问后都会有人提供新的思路。因此，编程社区对于程序员的帮助是十分巨大的。</p></div></article>\n</body>\n</html>","slug":"Python无师自通/11_testing","published":1,"date":"2019-06-09T03:09:50.798Z","updated":"2019-06-09T03:09:50.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwoddi8i0000nv7230qgzlaj","content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>练习</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#111\">11.1　阅读</a></li>\n<li><a href=\"#112\">11.2　其他资源</a></li>\n<li><a href=\"#113\">11.3　寻求帮助</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“练习成就不了完美。多练习会产生髓磷脂，是髓磷脂让你做到完美。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——丹尼尔 · 科伊尔（Daniel Coyle）</span></p>\n</blockquote>\n<p>如果这是你读的第一本编程书，建议在阅读下一章之前多花时间做些练习。以下是碰到问题时可参考的一些资源。</p>\n<h3 id=\"111\">11.1　阅读</h3>\n<p>查看以下网址以获得信息：</p>\n<p>http://programmers.stackexchange.com/questions/44177/what-is-the-single-most-effective-thing-you-did-to-improve-your-programming-skill。</p>\n<h3 id=\"112\">11.2　其他资源</h3>\n<p>本书也整理了一些其他的编程资源，读者可前往以下链接查看：http://www.theselftaughtprogrammer.io/resources。</p>\n<h3 id=\"113\">11.3　寻求帮助</h3>\n<p>如果碰到了问题，可以参考如下建议。首先，在 Facebook 的“自学程序员群组”中提问，网址是 https://www.facebook.com/groups/selftaughtprogrammers。群组中有不少热心的程序员，可以帮助解答你的问题。</p>\n<p>还建议多逛逛 http://www.stackoverflow.com，可以在上面提出编程相关的问题，会得到社区成员的解答。</p>\n<p>学会寻求他人的帮助是非常重要的。想办法解决问题是学习过程中很重要的部分；但是在某些时候，可能会事倍功半。过去笔者在做项目时，常常纠结于要自己解决所有问题。这样就导致效率低下。如果今天再出现类似的情况，则会上网提问。每次提问后都会有人提供新的思路。因此，编程社区对于程序员的帮助是十分巨大的。</p></div></article>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>练习</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#111\">11.1　阅读</a></li>\n<li><a href=\"#112\">11.2　其他资源</a></li>\n<li><a href=\"#113\">11.3　寻求帮助</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“练习成就不了完美。多练习会产生髓磷脂，是髓磷脂让你做到完美。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——丹尼尔 · 科伊尔（Daniel Coyle）</span></p>\n</blockquote>\n<p>如果这是你读的第一本编程书，建议在阅读下一章之前多花时间做些练习。以下是碰到问题时可参考的一些资源。</p>\n<h3 id=\"111\">11.1　阅读</h3>\n<p>查看以下网址以获得信息：</p>\n<p>http://programmers.stackexchange.com/questions/44177/what-is-the-single-most-effective-thing-you-did-to-improve-your-programming-skill。</p>\n<h3 id=\"112\">11.2　其他资源</h3>\n<p>本书也整理了一些其他的编程资源，读者可前往以下链接查看：http://www.theselftaughtprogrammer.io/resources。</p>\n<h3 id=\"113\">11.3　寻求帮助</h3>\n<p>如果碰到了问题，可以参考如下建议。首先，在 Facebook 的“自学程序员群组”中提问，网址是 https://www.facebook.com/groups/selftaughtprogrammers。群组中有不少热心的程序员，可以帮助解答你的问题。</p>\n<p>还建议多逛逛 http://www.stackoverflow.com，可以在上面提出编程相关的问题，会得到社区成员的解答。</p>\n<p>学会寻求他人的帮助是非常重要的。想办法解决问题是学习过程中很重要的部分；但是在某些时候，可能会事倍功半。过去笔者在做项目时，常常纠结于要自己解决所有问题。这样就导致效率低下。如果今天再出现类似的情况，则会上网提问。每次提问后都会有人提供新的思路。因此，编程社区对于程序员的帮助是十分巨大的。</p></div></article>\n</body>\n</html>"},{"title":"base","_content":"\n### Golang执行顺序\n\n    初始化全局变量 -> init函数 -> main函数\n\n### Golang类型推导\n```go\nvar (\n\n    a = 100\n    b = \"sb\"\n)\n```\n\n### iota自动计数\nvar (\n\n    a   // 0\n    b   // 1\n    c   // 2\n)\n\n### 值类型与引用类型\n- 值类型\n    \n    int、float、bool、string、array、struct\n    变量直接存储值，内存通常在栈中分配\n\n- 引用类型\n    \n    指针、slice、map、chan\n    变量存储的是一个地址，这个地址存储最终的值，内存通常在堆上分配，通过GC回收\n    \n### Swap\n```go\n\nfunc Swap(a, b int) (int, int) {\n\treturn b, a\n}\n\nfunc Swap2(a, b *int) {\n\t*a, *b = *b, *a\n}\n\nfunc main() {\n\ta, b := 50, 100\n\tfmt.Println(a, b)\n\ta, b = b , a\n\tfmt.Println(a, b)\n\ta, b = Swap(a, b)\n\tfmt.Println(a, b)\n\ta, b = Swap2(&a, &b)\n\tfmt.Println(a, b)\n}\n```\n\n### 关键字\n![](../../img/golang_keywords.png)","source":"_posts/golang/base.md","raw":"---\ntitle: base\n---\n\n### Golang执行顺序\n\n    初始化全局变量 -> init函数 -> main函数\n\n### Golang类型推导\n```go\nvar (\n\n    a = 100\n    b = \"sb\"\n)\n```\n\n### iota自动计数\nvar (\n\n    a   // 0\n    b   // 1\n    c   // 2\n)\n\n### 值类型与引用类型\n- 值类型\n    \n    int、float、bool、string、array、struct\n    变量直接存储值，内存通常在栈中分配\n\n- 引用类型\n    \n    指针、slice、map、chan\n    变量存储的是一个地址，这个地址存储最终的值，内存通常在堆上分配，通过GC回收\n    \n### Swap\n```go\n\nfunc Swap(a, b int) (int, int) {\n\treturn b, a\n}\n\nfunc Swap2(a, b *int) {\n\t*a, *b = *b, *a\n}\n\nfunc main() {\n\ta, b := 50, 100\n\tfmt.Println(a, b)\n\ta, b = b , a\n\tfmt.Println(a, b)\n\ta, b = Swap(a, b)\n\tfmt.Println(a, b)\n\ta, b = Swap2(&a, &b)\n\tfmt.Println(a, b)\n}\n```\n\n### 关键字\n![](../../img/golang_keywords.png)","slug":"golang/base","published":1,"date":"2019-06-08T07:56:01.517Z","updated":"2019-06-08T07:56:01.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwoddi8r0001nv72bmsmd7z6","content":"<h3 id=\"Golang执行顺序\"><a href=\"#Golang执行顺序\" class=\"headerlink\" title=\"Golang执行顺序\"></a>Golang执行顺序</h3><pre><code>初始化全局变量 -&gt; init函数 -&gt; main函数\n</code></pre><h3 id=\"Golang类型推导\"><a href=\"#Golang类型推导\" class=\"headerlink\" title=\"Golang类型推导\"></a>Golang类型推导</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">    a = <span class=\"number\">100</span></span><br><span class=\"line\">    b = <span class=\"string\">\"sb\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"iota自动计数\"><a href=\"#iota自动计数\" class=\"headerlink\" title=\"iota自动计数\"></a>iota自动计数</h3><p>var (</p>\n<pre><code>a   // 0\nb   // 1\nc   // 2\n</code></pre><p>)</p>\n<h3 id=\"值类型与引用类型\"><a href=\"#值类型与引用类型\" class=\"headerlink\" title=\"值类型与引用类型\"></a>值类型与引用类型</h3><ul>\n<li><p>值类型</p>\n<p>  int、float、bool、string、array、struct<br>  变量直接存储值，内存通常在栈中分配</p>\n</li>\n<li><p>引用类型</p>\n<p>  指针、slice、map、chan<br>  变量存储的是一个地址，这个地址存储最终的值，内存通常在堆上分配，通过GC回收</p>\n</li>\n</ul>\n<h3 id=\"Swap\"><a href=\"#Swap\" class=\"headerlink\" title=\"Swap\"></a>Swap</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Swap</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b, a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Swap2</span><span class=\"params\">(a, b *<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t*a, *b = *b, *a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta, b := <span class=\"number\">50</span>, <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\">\ta, b = b , a</span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\">\ta, b = Swap(a, b)</span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\">\ta, b = Swap2(&amp;a, &amp;b)</span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p><img src=\"../../img/golang_keywords.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Golang执行顺序\"><a href=\"#Golang执行顺序\" class=\"headerlink\" title=\"Golang执行顺序\"></a>Golang执行顺序</h3><pre><code>初始化全局变量 -&gt; init函数 -&gt; main函数\n</code></pre><h3 id=\"Golang类型推导\"><a href=\"#Golang类型推导\" class=\"headerlink\" title=\"Golang类型推导\"></a>Golang类型推导</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">    a = <span class=\"number\">100</span></span><br><span class=\"line\">    b = <span class=\"string\">\"sb\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"iota自动计数\"><a href=\"#iota自动计数\" class=\"headerlink\" title=\"iota自动计数\"></a>iota自动计数</h3><p>var (</p>\n<pre><code>a   // 0\nb   // 1\nc   // 2\n</code></pre><p>)</p>\n<h3 id=\"值类型与引用类型\"><a href=\"#值类型与引用类型\" class=\"headerlink\" title=\"值类型与引用类型\"></a>值类型与引用类型</h3><ul>\n<li><p>值类型</p>\n<p>  int、float、bool、string、array、struct<br>  变量直接存储值，内存通常在栈中分配</p>\n</li>\n<li><p>引用类型</p>\n<p>  指针、slice、map、chan<br>  变量存储的是一个地址，这个地址存储最终的值，内存通常在堆上分配，通过GC回收</p>\n</li>\n</ul>\n<h3 id=\"Swap\"><a href=\"#Swap\" class=\"headerlink\" title=\"Swap\"></a>Swap</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Swap</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b, a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Swap2</span><span class=\"params\">(a, b *<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t*a, *b = *b, *a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta, b := <span class=\"number\">50</span>, <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\">\ta, b = b , a</span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\">\ta, b = Swap(a, b)</span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\">\ta, b = Swap2(&amp;a, &amp;b)</span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p><img src=\"../../img/golang_keywords.png\" alt></p>\n"},{"title":"work 0609","_content":"\n### doing\n- 酒店校验优化，优先导出信息全的疑似错误酒店并过滤中英文计算的\n- 疑似错误酒店 需要更改 spl_hotel_01 的 mapping_status\n- 定时任务的管理，激活时间、完成时间都需要记录，更新的条数","source":"_posts/work_coding/work_0609.md","raw":"---\ntitle: work 0609\n---\n\n### doing\n- 酒店校验优化，优先导出信息全的疑似错误酒店并过滤中英文计算的\n- 疑似错误酒店 需要更改 spl_hotel_01 的 mapping_status\n- 定时任务的管理，激活时间、完成时间都需要记录，更新的条数","slug":"work_coding/work_0609","published":1,"date":"2019-06-09T13:11:50.395Z","updated":"2019-06-09T13:11:50.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwp0zy7700008y72xsss5c03","content":"<h3 id=\"doing\"><a href=\"#doing\" class=\"headerlink\" title=\"doing\"></a>doing</h3><ul>\n<li>酒店校验优化，优先导出信息全的疑似错误酒店并过滤中英文计算的</li>\n<li>疑似错误酒店 需要更改 spl_hotel_01 的 mapping_status</li>\n<li>定时任务的管理，激活时间、完成时间都需要记录，更新的条数</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"doing\"><a href=\"#doing\" class=\"headerlink\" title=\"doing\"></a>doing</h3><ul>\n<li>酒店校验优化，优先导出信息全的疑似错误酒店并过滤中英文计算的</li>\n<li>疑似错误酒店 需要更改 spl_hotel_01 的 mapping_status</li>\n<li>定时任务的管理，激活时间、完成时间都需要记录，更新的条数</li>\n</ul>\n"},{"title":"day_4","_content":"\n### 内置函数\n- close 主要用来关闭chanel\n- len 用来求长度，如string、array、slice、map、chan(channel)\n- new 用来分配内存，返回的是指针。主要用来分配值类型，如int、struct\n- make 用来分配内存，返回的是值，主要用来分配引用类型，如chan、map、slice\n- append 用来追加元素到数组、slice中\n    ```go\n    var a []int\n    a = append(a, 10, 20, 383)  // [10, 20, 383]\n    a = append(a, a...)     // [10, 20, 383, 10, 20, 383]\n    fmt.Println(a)\n    ```\n- panic、recover 用来做错误处理\n    ```go\n    // recover 捕获异常\n    defer func() {\n        if err := recover(); err != nil {\n            fmt.Println(err)\n        }\n    }()\n    ```\n    ```go\n    // 抛出异常    \n    func initConfig() (err error) {\n        return errors.New(\"init config failed\")\n    }\n    err := initConfig()\n    if err != nil {\n        panic(err)\n    }\n    ```\n    \n### new跟make的区别\n```go\n    func test() {\n    \n        s1 := new([]int)\n        fmt.Println(s1)     // &[]\n    \n        s2 := make([]int, 10)   \n        fmt.Println(s2)     // [0,0,0,0,0,0,0,0,0,0]\n        \n        // (*s1)[0] = 100   // 会报越界错误，原因是没有初始化长度\n        \n        *s1 = make([]int, 5)    // 初始化长度\n        (*s1)[0] = 100\n        s2[0] = 100\n        fmt.Println(s1)\n        return\n    }\n```\n\n### 闭包\n```go\n    package main\n    \n    import (\n        \"fmt\"\n        \"strings\"\n    )\n    \n    func Adder() func(int) int {\n        var x int\n        f := func(d int) int {\n            x += d\n            return x\n        }\n        return f\n    }\n    \n    func makeSuffix(suffix string) func(string) string {\n        f := func(name string) string {\n    \n            if strings.HasSuffix(name, suffix) == false {\n                return name + suffix\n            }\n            return name\n        }\n    \n        return f\n    }\n    \n    func main() {\n        /*\n            f := Adder()\n            fmt.Println(f(1))   // 1\n            fmt.Println(f(100))     // 101\n            fmt.Println(f(1000))    // 1101\n        */\n        f1 := makeSuffix(\".bmp\")\n        fmt.Println(f1(\"test\"))\n        fmt.Println(f1(\"pic\"))\n    \n        f2 := makeSuffix(\".jpg\")\n        fmt.Println(f2(\"test\"))\n        fmt.Println(f2(\"pic\"))\n    }\n\n```\n\n### 数组\n- 是同一种数据类型的固定长度的序列，且长度一旦定义就不能改变\n    ```go\n    // 初始化数组\n    var a0 [5]int = [5]int{1, 2, 3} // int类型默认值为0\n    var a1 = [5]int{1, 2, 3}\n    var a2 = [...]int{1, 2, 3, 4, 50}\n    var s0 = [5]string{3: \"hello\", 4: \"tom\"}\t// string类型默认值是空字符串\n    fmt.Println(a0)\n    fmt.Println(a1)\n    fmt.Println(a2)\n    fmt.Println(s0)\n    \n    //多维数组\n    var age [5][3]int\n    var f [2][3]int = [...][3]int{{1,2,3}, {7,8,9}}\n    ```\n\n- `var a [5]int` 与 `var a [10]int` 不是同一种类型\n- 元素默认初始化为0\n- 数组是值类型，改变副本数组的值不会改变原数组的值，需要修改则要传递地址\n    ```go\n    package main\n    \n    import \"fmt\"\n    \n    func test1() {\n        var a [10]int\n    \n        //j := 10\n        a[0] = 100\n        //a[j] = 200\n    \n        fmt.Println(a)\n    \n        for i := 0; i < len(a); i++ {\n            fmt.Println(a[i])\n        }\n    \n        for index, val := range a {\n            fmt.Printf(\"a[%d]=%d\\n\", index, val)\n        }\n    }\n    \n    func test3(arr *[5]int) {\n        (*arr)[0] = 1000\n    }\n    \n    func test2() {\n        var a [10]int\n        b := a\n    \n        b[0] = 100\n        fmt.Println(a)\n    }\n    \n    func main() {\n    \n        //test1()\n        test2()\n        var a [5]int\n        test3(&a)\n        fmt.Println(a)\n    }\n    \n    ```\n - 使用非递归的方式实现斐波那契数列，打印前10个数\n     ```go\n    func Fib(n int) {\n        if n <= 2 {\n            n = 2\n        }\n        //var res [n]int64          // non-constant array bound n\n        res := make([]int64, n)\t// 实例化动态数组(切片)要使用make\n        res[0] = 1\n        fmt.Println(res[0])\n        res[1] = 1\n        fmt.Println(res[0])\n        for i := 2; i < n; i++ {\n            res[i] = res[i-1] + res[i-2]\n            fmt.Println(res[i])\n        }\n    }\n     ```\n \n \n ### slice切片\n - 是数组的一个引用，因此切片是引用类型\n - 切片的长度可以改变，因此切片是一个可变数组\n - cap()用来求得切片的最大容量 0<=len(slice)<=len(array), 其中array是被引用的数组\n - 切片的定义 `var 变量名 []类型` 和数组定义区别于不指定数组长度\n - 可以使用make来创建切片\n - 可以使用append函数操作切片\n - 切片扩容，在原切片容量不够的时候，会额外开辟一片有足够容量的内存，将原切片的数据拷贝进来\n     ```go\n     func testSlice() {\n        var a [5]int = [...]int{1, 2, 3, 4, 5}\n        s := a[1:]\n        fmt.Printf(\"before len[%d] cap[%d]\\n\", len(s), cap(s))\n        s[1] = 100\n        fmt.Printf(\"s=%p a[1]=%p\\n\", s, &a[1])\n        fmt.Println(\"before a:\", a)\n    \n        s = append(s, 10)\n        s = append(s, 10)\n        fmt.Printf(\"after len[%d] cap[%d]\\n\", len(s), cap(s))\n        s = append(s, 10)\n        s = append(s, 10)\n        s = append(s, 10)\n    \n        s[1] = 1000\n        fmt.Println(\"after a:\", a)\n        fmt.Println(s)\n        fmt.Printf(\"s=%p a[1]=%p\\n\", s, &a[1])\n    }\n     ```\n - 拷贝copy()\n     ```go\n     func testCopy() {\n    \n        var a []int = []int{1, 2, 3, 4, 5, 6}\n        b := make([]int, 1)\n    \n        copy(b, a)\n    \n        fmt.Println(b)\n    }\n     ```\n - string的修改要使用rune()来转换而不是使用[]byte(), 否则不能很好地处理中文字符串\n     ```go\n     func testModifyString() {\n        s := \"我hello world\"\n        s1 := []rune(s)\n    \n        s1[0] = 200\n        s1[1] = 128\n        s1[2] = 64\n        str := string(s1)\n        fmt.Println(str)\n    }\n     ```\n     \n ### 排序与查找\n - 排序\n     ```go\n     func SortCase(){\n        var a  = [...]int{1,2,58,88,4}\n        sort.Ints(a[:])\n        fmt.Println(a)\n    }\n     ```\n - 查找，二分查找, 如果是对无序数组进行查找则会先对数组进行排序\n     ```go\n     func SearchCase(){\n        var a  = [...]int{1,2,58,88,4}\n        sort.Ints(a[:])\n        index := sort.SearchInts(a[:], 88)\n        fmt.Println(index)\n    }\n     ```\n     \n     \n### map(字典)\n- key-value的数据结构，又叫字典或关联数组\n- 声明, 不会分配内存，初始化需要make。`var mapCase map[keyType][valueType]`\n    ```go\n    package main\n    \n    import \"fmt\"\n    \n    // 插入和更新\n    func testMap() {\n        var a map[string]string = map[string]string{\n            \"key\": \"value\",\n        }\n        //a := make(map[string]string, 10)\n        \n        a[\"abc\"] = \"efg\"\n        a[\"abc\"] = \"efg\"\n        a[\"abc1\"] = \"efg\"\n    \n        fmt.Println(a)\n    }\n\n    // 二维map\n    func testMap2() {\n    \n        a := make(map[string]map[string]string, 100)\n        a[\"key1\"] = make(map[string]string)\n        a[\"key1\"][\"key2\"] = \"abc\"\n        a[\"key1\"][\"key3\"] = \"abc\"\n        a[\"key1\"][\"key4\"] = \"abc\"\n        a[\"key1\"][\"key5\"] = \"abc\"\n        fmt.Println(a)\n    \n    }\n\n    // 查找\n    func modify(a map[string]map[string]string) {\n        _, ok := a[\"zhangsan\"]\n        if !ok {\n            a[\"zhangsan\"] = make(map[string]string)\n        }\n    \n        a[\"zhangsan\"][\"passwd\"] = \"123456\"\n        a[\"zhangsan\"][\"nickname\"] = \"pangpang\"\n    \n        return\n    }\n\n    \n    func testMap3() {\n    \n        a := make(map[string]map[string]string, 100)\n    \n        modify(a)\n    \n        fmt.Println(a)\n    }\n    \n    // 遍历\n    func trans(a map[string]map[string]string) {\n        for k, v := range a {\n            fmt.Println(k)\n            for k1, v1 := range v {\n                fmt.Println(\"\\t\", k1, v1)\n            }\n        }\n    }\n    \n    // 删除\n    func testMap4() {\n    \n        a := make(map[string]map[string]string, 100)\n        a[\"key1\"] = make(map[string]string)\n        a[\"key1\"][\"key2\"] = \"abc\"\n        a[\"key1\"][\"key3\"] = \"abc\"\n        a[\"key1\"][\"key4\"] = \"abc\"\n        a[\"key1\"][\"key5\"] = \"abc\"\n    \n        a[\"key2\"] = make(map[string]string)\n        a[\"key2\"][\"key2\"] = \"abc\"\n        a[\"key2\"][\"key3\"] = \"abc\"\n    \n        trans(a)\n        delete(a, \"key1\")\n        fmt.Println()\n        trans(a)\n    \n        fmt.Println(len(a))\n    }\n    \n    func testMap5() {\n        var a []map[int]int\n        a = make([]map[int]int, 5)\n    \n        if a[0] == nil {\n            a[0] = make(map[int]int)\n        }\n        a[0][10] = 10\n        fmt.Println(a)\n    }\n    \n    func main() {\n        //testMap()\n        //testMap2()\n        //testMap3()\n        //testMap4()\n        testMap5()\n    }\n    ```\n- map排序，go未提供直接用于map排序的方法\n    \n    排序思路，先获取所有的key，对key进行排序，然后根据排好序的key进行遍历\n    ```go\n    package main\n    \n    import (\n        \"fmt\"\n        \"sort\"\n    )\n    \n    // 排序\n    func testMapSort() {\n        var a map[int]int\n        a = make(map[int]int, 5)\n    \n        a[8] = 10\n        a[3] = 10\n        a[2] = 10\n        a[1] = 10\n        a[18] = 10\n    \n        var keys []int\n        for k, _ := range a {\n            keys = append(keys, k)\n            //fmt.Println(k, v)\n        }\n    \n        sort.Ints(keys)\n    \n        for _, v := range keys {\n            fmt.Println(v, a[v])\n        }\n    }\n    \n    // 反转\n    func testMapReverse() {\n        var a map[string]int\n        var b map[int]string\n    \n        a = make(map[string]int, 5)\n        b = make(map[int]string, 5)\n    \n        a[\"abc\"] = 101\n        a[\"efg\"] = 10\n    \n        for k, v := range a {\n            b[v] = k\n        }\n    \n        fmt.Println(b)\n    }\n    \n    func main() {\n        testMapSort()\n        testMapReverse()\n    }\n    ```\n\n### 线程同步\n- sync包\n- 互斥锁 `var mu sync.Mutex`\n- 读写锁 `var mu snyc.RWMutex`, 适用于读多写少的应用场景\n- 原子操作 atomic\n    ```go\n    package main\n    \n    import (\n        \"fmt\"\n        \"math/rand\"\n        \"sync\"\n        \"sync/atomic\"\n        \"time\"\n    )\n    \n    var lock sync.Mutex\n    var rwLock sync.RWMutex\n    \n    func testRWLock() {\n        var a map[int]int\n        a = make(map[int]int, 5)\n        var count int32\n        a[8] = 10\n        a[3] = 10\n        a[2] = 10\n        a[1] = 10\n        a[18] = 10\n    \n        for i := 0; i < 2; i++ {\n            go func(b map[int]int) {\n                //rwLock.Lock() // 读写锁\n                lock.Lock()  // 互斥锁\n                b[8] = rand.Intn(100)\n                time.Sleep(10 * time.Millisecond)\n                lock.Unlock()\n                //rwLock.Unlock()\n            }(a)\n        }\n    \n        for i := 0; i < 100; i++ {\n            go func(b map[int]int) {\n                for {\n                    lock.Lock()\t\n                    //rwLock.RLock()\n                    time.Sleep(time.Millisecond)\n                    //fmt.Println(a)\n                    //rwLock.RUnlock()\n                    lock.Unlock()\n                    atomic.AddInt32(&count, 1)\n                }\n            }(a)\n        }\n        time.Sleep(time.Second * 3)\n        fmt.Println(atomic.LoadInt32(&count))\n    }\n    \n    func main() {\n        testRWLock()\n    }\n    \n    ```\n\n### 使用 go get 安装三方包\n","source":"_posts/golang/data_type.md","raw":"---\ntitle: day_4\n---\n\n### 内置函数\n- close 主要用来关闭chanel\n- len 用来求长度，如string、array、slice、map、chan(channel)\n- new 用来分配内存，返回的是指针。主要用来分配值类型，如int、struct\n- make 用来分配内存，返回的是值，主要用来分配引用类型，如chan、map、slice\n- append 用来追加元素到数组、slice中\n    ```go\n    var a []int\n    a = append(a, 10, 20, 383)  // [10, 20, 383]\n    a = append(a, a...)     // [10, 20, 383, 10, 20, 383]\n    fmt.Println(a)\n    ```\n- panic、recover 用来做错误处理\n    ```go\n    // recover 捕获异常\n    defer func() {\n        if err := recover(); err != nil {\n            fmt.Println(err)\n        }\n    }()\n    ```\n    ```go\n    // 抛出异常    \n    func initConfig() (err error) {\n        return errors.New(\"init config failed\")\n    }\n    err := initConfig()\n    if err != nil {\n        panic(err)\n    }\n    ```\n    \n### new跟make的区别\n```go\n    func test() {\n    \n        s1 := new([]int)\n        fmt.Println(s1)     // &[]\n    \n        s2 := make([]int, 10)   \n        fmt.Println(s2)     // [0,0,0,0,0,0,0,0,0,0]\n        \n        // (*s1)[0] = 100   // 会报越界错误，原因是没有初始化长度\n        \n        *s1 = make([]int, 5)    // 初始化长度\n        (*s1)[0] = 100\n        s2[0] = 100\n        fmt.Println(s1)\n        return\n    }\n```\n\n### 闭包\n```go\n    package main\n    \n    import (\n        \"fmt\"\n        \"strings\"\n    )\n    \n    func Adder() func(int) int {\n        var x int\n        f := func(d int) int {\n            x += d\n            return x\n        }\n        return f\n    }\n    \n    func makeSuffix(suffix string) func(string) string {\n        f := func(name string) string {\n    \n            if strings.HasSuffix(name, suffix) == false {\n                return name + suffix\n            }\n            return name\n        }\n    \n        return f\n    }\n    \n    func main() {\n        /*\n            f := Adder()\n            fmt.Println(f(1))   // 1\n            fmt.Println(f(100))     // 101\n            fmt.Println(f(1000))    // 1101\n        */\n        f1 := makeSuffix(\".bmp\")\n        fmt.Println(f1(\"test\"))\n        fmt.Println(f1(\"pic\"))\n    \n        f2 := makeSuffix(\".jpg\")\n        fmt.Println(f2(\"test\"))\n        fmt.Println(f2(\"pic\"))\n    }\n\n```\n\n### 数组\n- 是同一种数据类型的固定长度的序列，且长度一旦定义就不能改变\n    ```go\n    // 初始化数组\n    var a0 [5]int = [5]int{1, 2, 3} // int类型默认值为0\n    var a1 = [5]int{1, 2, 3}\n    var a2 = [...]int{1, 2, 3, 4, 50}\n    var s0 = [5]string{3: \"hello\", 4: \"tom\"}\t// string类型默认值是空字符串\n    fmt.Println(a0)\n    fmt.Println(a1)\n    fmt.Println(a2)\n    fmt.Println(s0)\n    \n    //多维数组\n    var age [5][3]int\n    var f [2][3]int = [...][3]int{{1,2,3}, {7,8,9}}\n    ```\n\n- `var a [5]int` 与 `var a [10]int` 不是同一种类型\n- 元素默认初始化为0\n- 数组是值类型，改变副本数组的值不会改变原数组的值，需要修改则要传递地址\n    ```go\n    package main\n    \n    import \"fmt\"\n    \n    func test1() {\n        var a [10]int\n    \n        //j := 10\n        a[0] = 100\n        //a[j] = 200\n    \n        fmt.Println(a)\n    \n        for i := 0; i < len(a); i++ {\n            fmt.Println(a[i])\n        }\n    \n        for index, val := range a {\n            fmt.Printf(\"a[%d]=%d\\n\", index, val)\n        }\n    }\n    \n    func test3(arr *[5]int) {\n        (*arr)[0] = 1000\n    }\n    \n    func test2() {\n        var a [10]int\n        b := a\n    \n        b[0] = 100\n        fmt.Println(a)\n    }\n    \n    func main() {\n    \n        //test1()\n        test2()\n        var a [5]int\n        test3(&a)\n        fmt.Println(a)\n    }\n    \n    ```\n - 使用非递归的方式实现斐波那契数列，打印前10个数\n     ```go\n    func Fib(n int) {\n        if n <= 2 {\n            n = 2\n        }\n        //var res [n]int64          // non-constant array bound n\n        res := make([]int64, n)\t// 实例化动态数组(切片)要使用make\n        res[0] = 1\n        fmt.Println(res[0])\n        res[1] = 1\n        fmt.Println(res[0])\n        for i := 2; i < n; i++ {\n            res[i] = res[i-1] + res[i-2]\n            fmt.Println(res[i])\n        }\n    }\n     ```\n \n \n ### slice切片\n - 是数组的一个引用，因此切片是引用类型\n - 切片的长度可以改变，因此切片是一个可变数组\n - cap()用来求得切片的最大容量 0<=len(slice)<=len(array), 其中array是被引用的数组\n - 切片的定义 `var 变量名 []类型` 和数组定义区别于不指定数组长度\n - 可以使用make来创建切片\n - 可以使用append函数操作切片\n - 切片扩容，在原切片容量不够的时候，会额外开辟一片有足够容量的内存，将原切片的数据拷贝进来\n     ```go\n     func testSlice() {\n        var a [5]int = [...]int{1, 2, 3, 4, 5}\n        s := a[1:]\n        fmt.Printf(\"before len[%d] cap[%d]\\n\", len(s), cap(s))\n        s[1] = 100\n        fmt.Printf(\"s=%p a[1]=%p\\n\", s, &a[1])\n        fmt.Println(\"before a:\", a)\n    \n        s = append(s, 10)\n        s = append(s, 10)\n        fmt.Printf(\"after len[%d] cap[%d]\\n\", len(s), cap(s))\n        s = append(s, 10)\n        s = append(s, 10)\n        s = append(s, 10)\n    \n        s[1] = 1000\n        fmt.Println(\"after a:\", a)\n        fmt.Println(s)\n        fmt.Printf(\"s=%p a[1]=%p\\n\", s, &a[1])\n    }\n     ```\n - 拷贝copy()\n     ```go\n     func testCopy() {\n    \n        var a []int = []int{1, 2, 3, 4, 5, 6}\n        b := make([]int, 1)\n    \n        copy(b, a)\n    \n        fmt.Println(b)\n    }\n     ```\n - string的修改要使用rune()来转换而不是使用[]byte(), 否则不能很好地处理中文字符串\n     ```go\n     func testModifyString() {\n        s := \"我hello world\"\n        s1 := []rune(s)\n    \n        s1[0] = 200\n        s1[1] = 128\n        s1[2] = 64\n        str := string(s1)\n        fmt.Println(str)\n    }\n     ```\n     \n ### 排序与查找\n - 排序\n     ```go\n     func SortCase(){\n        var a  = [...]int{1,2,58,88,4}\n        sort.Ints(a[:])\n        fmt.Println(a)\n    }\n     ```\n - 查找，二分查找, 如果是对无序数组进行查找则会先对数组进行排序\n     ```go\n     func SearchCase(){\n        var a  = [...]int{1,2,58,88,4}\n        sort.Ints(a[:])\n        index := sort.SearchInts(a[:], 88)\n        fmt.Println(index)\n    }\n     ```\n     \n     \n### map(字典)\n- key-value的数据结构，又叫字典或关联数组\n- 声明, 不会分配内存，初始化需要make。`var mapCase map[keyType][valueType]`\n    ```go\n    package main\n    \n    import \"fmt\"\n    \n    // 插入和更新\n    func testMap() {\n        var a map[string]string = map[string]string{\n            \"key\": \"value\",\n        }\n        //a := make(map[string]string, 10)\n        \n        a[\"abc\"] = \"efg\"\n        a[\"abc\"] = \"efg\"\n        a[\"abc1\"] = \"efg\"\n    \n        fmt.Println(a)\n    }\n\n    // 二维map\n    func testMap2() {\n    \n        a := make(map[string]map[string]string, 100)\n        a[\"key1\"] = make(map[string]string)\n        a[\"key1\"][\"key2\"] = \"abc\"\n        a[\"key1\"][\"key3\"] = \"abc\"\n        a[\"key1\"][\"key4\"] = \"abc\"\n        a[\"key1\"][\"key5\"] = \"abc\"\n        fmt.Println(a)\n    \n    }\n\n    // 查找\n    func modify(a map[string]map[string]string) {\n        _, ok := a[\"zhangsan\"]\n        if !ok {\n            a[\"zhangsan\"] = make(map[string]string)\n        }\n    \n        a[\"zhangsan\"][\"passwd\"] = \"123456\"\n        a[\"zhangsan\"][\"nickname\"] = \"pangpang\"\n    \n        return\n    }\n\n    \n    func testMap3() {\n    \n        a := make(map[string]map[string]string, 100)\n    \n        modify(a)\n    \n        fmt.Println(a)\n    }\n    \n    // 遍历\n    func trans(a map[string]map[string]string) {\n        for k, v := range a {\n            fmt.Println(k)\n            for k1, v1 := range v {\n                fmt.Println(\"\\t\", k1, v1)\n            }\n        }\n    }\n    \n    // 删除\n    func testMap4() {\n    \n        a := make(map[string]map[string]string, 100)\n        a[\"key1\"] = make(map[string]string)\n        a[\"key1\"][\"key2\"] = \"abc\"\n        a[\"key1\"][\"key3\"] = \"abc\"\n        a[\"key1\"][\"key4\"] = \"abc\"\n        a[\"key1\"][\"key5\"] = \"abc\"\n    \n        a[\"key2\"] = make(map[string]string)\n        a[\"key2\"][\"key2\"] = \"abc\"\n        a[\"key2\"][\"key3\"] = \"abc\"\n    \n        trans(a)\n        delete(a, \"key1\")\n        fmt.Println()\n        trans(a)\n    \n        fmt.Println(len(a))\n    }\n    \n    func testMap5() {\n        var a []map[int]int\n        a = make([]map[int]int, 5)\n    \n        if a[0] == nil {\n            a[0] = make(map[int]int)\n        }\n        a[0][10] = 10\n        fmt.Println(a)\n    }\n    \n    func main() {\n        //testMap()\n        //testMap2()\n        //testMap3()\n        //testMap4()\n        testMap5()\n    }\n    ```\n- map排序，go未提供直接用于map排序的方法\n    \n    排序思路，先获取所有的key，对key进行排序，然后根据排好序的key进行遍历\n    ```go\n    package main\n    \n    import (\n        \"fmt\"\n        \"sort\"\n    )\n    \n    // 排序\n    func testMapSort() {\n        var a map[int]int\n        a = make(map[int]int, 5)\n    \n        a[8] = 10\n        a[3] = 10\n        a[2] = 10\n        a[1] = 10\n        a[18] = 10\n    \n        var keys []int\n        for k, _ := range a {\n            keys = append(keys, k)\n            //fmt.Println(k, v)\n        }\n    \n        sort.Ints(keys)\n    \n        for _, v := range keys {\n            fmt.Println(v, a[v])\n        }\n    }\n    \n    // 反转\n    func testMapReverse() {\n        var a map[string]int\n        var b map[int]string\n    \n        a = make(map[string]int, 5)\n        b = make(map[int]string, 5)\n    \n        a[\"abc\"] = 101\n        a[\"efg\"] = 10\n    \n        for k, v := range a {\n            b[v] = k\n        }\n    \n        fmt.Println(b)\n    }\n    \n    func main() {\n        testMapSort()\n        testMapReverse()\n    }\n    ```\n\n### 线程同步\n- sync包\n- 互斥锁 `var mu sync.Mutex`\n- 读写锁 `var mu snyc.RWMutex`, 适用于读多写少的应用场景\n- 原子操作 atomic\n    ```go\n    package main\n    \n    import (\n        \"fmt\"\n        \"math/rand\"\n        \"sync\"\n        \"sync/atomic\"\n        \"time\"\n    )\n    \n    var lock sync.Mutex\n    var rwLock sync.RWMutex\n    \n    func testRWLock() {\n        var a map[int]int\n        a = make(map[int]int, 5)\n        var count int32\n        a[8] = 10\n        a[3] = 10\n        a[2] = 10\n        a[1] = 10\n        a[18] = 10\n    \n        for i := 0; i < 2; i++ {\n            go func(b map[int]int) {\n                //rwLock.Lock() // 读写锁\n                lock.Lock()  // 互斥锁\n                b[8] = rand.Intn(100)\n                time.Sleep(10 * time.Millisecond)\n                lock.Unlock()\n                //rwLock.Unlock()\n            }(a)\n        }\n    \n        for i := 0; i < 100; i++ {\n            go func(b map[int]int) {\n                for {\n                    lock.Lock()\t\n                    //rwLock.RLock()\n                    time.Sleep(time.Millisecond)\n                    //fmt.Println(a)\n                    //rwLock.RUnlock()\n                    lock.Unlock()\n                    atomic.AddInt32(&count, 1)\n                }\n            }(a)\n        }\n        time.Sleep(time.Second * 3)\n        fmt.Println(atomic.LoadInt32(&count))\n    }\n    \n    func main() {\n        testRWLock()\n    }\n    \n    ```\n\n### 使用 go get 安装三方包\n","slug":"golang/data_type","published":1,"date":"2019-06-09T12:06:03.424Z","updated":"2019-06-09T12:06:03.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwp0zy8900018y72ntita886","content":"<h3 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h3><ul>\n<li>close 主要用来关闭chanel</li>\n<li>len 用来求长度，如string、array、slice、map、chan(channel)</li>\n<li>new 用来分配内存，返回的是指针。主要用来分配值类型，如int、struct</li>\n<li>make 用来分配内存，返回的是值，主要用来分配引用类型，如chan、map、slice</li>\n<li><p>append 用来追加元素到数组、slice中</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span></span><br><span class=\"line\">a = <span class=\"built_in\">append</span>(a, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">383</span>)  <span class=\"comment\">// [10, 20, 383]</span></span><br><span class=\"line\">a = <span class=\"built_in\">append</span>(a, a...)     <span class=\"comment\">// [10, 20, 383, 10, 20, 383]</span></span><br><span class=\"line\">fmt.Println(a)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>panic、recover 用来做错误处理</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// recover 捕获异常</span></span><br><span class=\"line\"><span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抛出异常    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initConfig</span><span class=\"params\">()</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"init config failed\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">err := initConfig()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"new跟make的区别\"><a href=\"#new跟make的区别\" class=\"headerlink\" title=\"new跟make的区别\"></a>new跟make的区别</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    s1 := <span class=\"built_in\">new</span>([]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">    fmt.Println(s1)     <span class=\"comment\">// &amp;[]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    s2 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">10</span>)   </span><br><span class=\"line\">    fmt.Println(s2)     <span class=\"comment\">// [0,0,0,0,0,0,0,0,0,0]</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// (*s1)[0] = 100   // 会报越界错误，原因是没有初始化长度</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    *s1 = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>)    <span class=\"comment\">// 初始化长度</span></span><br><span class=\"line\">    (*s1)[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">    s2[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">    fmt.Println(s1)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"strings\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Adder</span><span class=\"params\">()</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"keyword\">int</span></span><br><span class=\"line\">    f := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(d <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">        x += d</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeSuffix</span><span class=\"params\">(suffix <span class=\"keyword\">string</span>)</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    f := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> strings.HasSuffix(name, suffix) == <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name + suffix</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        f := Adder()</span></span><br><span class=\"line\"><span class=\"comment\">        fmt.Println(f(1))   // 1</span></span><br><span class=\"line\"><span class=\"comment\">        fmt.Println(f(100))     // 101</span></span><br><span class=\"line\"><span class=\"comment\">        fmt.Println(f(1000))    // 1101</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    f1 := makeSuffix(<span class=\"string\">\".bmp\"</span>)</span><br><span class=\"line\">    fmt.Println(f1(<span class=\"string\">\"test\"</span>))</span><br><span class=\"line\">    fmt.Println(f1(<span class=\"string\">\"pic\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    f2 := makeSuffix(<span class=\"string\">\".jpg\"</span>)</span><br><span class=\"line\">    fmt.Println(f2(<span class=\"string\">\"test\"</span>))</span><br><span class=\"line\">    fmt.Println(f2(<span class=\"string\">\"pic\"</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li><p>是同一种数据类型的固定长度的序列，且长度一旦定义就不能改变</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a0 [<span class=\"number\">5</span>]<span class=\"keyword\">int</span> = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125; <span class=\"comment\">// int类型默认值为0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a1 = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">50</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s0 = [<span class=\"number\">5</span>]<span class=\"keyword\">string</span>&#123;<span class=\"number\">3</span>: <span class=\"string\">\"hello\"</span>, <span class=\"number\">4</span>: <span class=\"string\">\"tom\"</span>&#125;\t<span class=\"comment\">// string类型默认值是空字符串</span></span><br><span class=\"line\">fmt.Println(a0)</span><br><span class=\"line\">fmt.Println(a1)</span><br><span class=\"line\">fmt.Println(a2)</span><br><span class=\"line\">fmt.Println(s0)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多维数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age [<span class=\"number\">5</span>][<span class=\"number\">3</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f [<span class=\"number\">2</span>][<span class=\"number\">3</span>]<span class=\"keyword\">int</span> = [...][<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>var a [5]int</code> 与 <code>var a [10]int</code> 不是同一种类型</p>\n</li>\n<li>元素默认初始化为0</li>\n<li><p>数组是值类型，改变副本数组的值不会改变原数组的值，需要修改则要传递地址</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a [<span class=\"number\">10</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//j := 10</span></span><br><span class=\"line\">    a[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"comment\">//a[j] = 200</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">        fmt.Println(a[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, val := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"a[%d]=%d\\n\"</span>, index, val)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test3</span><span class=\"params\">(arr *[5]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    (*arr)[<span class=\"number\">0</span>] = <span class=\"number\">1000</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a [<span class=\"number\">10</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    b := a</span><br><span class=\"line\"></span><br><span class=\"line\">    b[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//test1()</span></span><br><span class=\"line\">    test2()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a [<span class=\"number\">5</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    test3(&amp;a)</span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用非递归的方式实现斐波那契数列，打印前10个数 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Fib</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        n = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//var res [n]int64          // non-constant array bound n</span></span><br><span class=\"line\">    res := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int64</span>, n)\t<span class=\"comment\">// 实例化动态数组(切片)要使用make</span></span><br><span class=\"line\">    res[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">    fmt.Println(res[<span class=\"number\">0</span>])</span><br><span class=\"line\">    res[<span class=\"number\">1</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">    fmt.Println(res[<span class=\"number\">0</span>])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">2</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">        res[i] = res[i<span class=\"number\">-1</span>] + res[i<span class=\"number\">-2</span>]</span><br><span class=\"line\">        fmt.Println(res[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"slice切片\"><a href=\"#slice切片\" class=\"headerlink\" title=\"slice切片\"></a>slice切片</h3><ul>\n<li>是数组的一个引用，因此切片是引用类型</li>\n<li>切片的长度可以改变，因此切片是一个可变数组</li>\n<li>cap()用来求得切片的最大容量 0&lt;=len(slice)&lt;=len(array), 其中array是被引用的数组</li>\n<li>切片的定义 <code>var 变量名 []类型</code> 和数组定义区别于不指定数组长度</li>\n<li>可以使用make来创建切片</li>\n<li>可以使用append函数操作切片</li>\n<li><p>切片扩容，在原切片容量不够的时候，会额外开辟一片有足够容量的内存，将原切片的数据拷贝进来</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testSlice</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a [<span class=\"number\">5</span>]<span class=\"keyword\">int</span> = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">    s := a[<span class=\"number\">1</span>:]</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"before len[%d] cap[%d]\\n\"</span>, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s))</span><br><span class=\"line\">    s[<span class=\"number\">1</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"s=%p a[1]=%p\\n\"</span>, s, &amp;a[<span class=\"number\">1</span>])</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"before a:\"</span>, a)</span><br><span class=\"line\"></span><br><span class=\"line\">    s = <span class=\"built_in\">append</span>(s, <span class=\"number\">10</span>)</span><br><span class=\"line\">    s = <span class=\"built_in\">append</span>(s, <span class=\"number\">10</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"after len[%d] cap[%d]\\n\"</span>, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s))</span><br><span class=\"line\">    s = <span class=\"built_in\">append</span>(s, <span class=\"number\">10</span>)</span><br><span class=\"line\">    s = <span class=\"built_in\">append</span>(s, <span class=\"number\">10</span>)</span><br><span class=\"line\">    s = <span class=\"built_in\">append</span>(s, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    s[<span class=\"number\">1</span>] = <span class=\"number\">1000</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"after a:\"</span>, a)</span><br><span class=\"line\">    fmt.Println(s)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"s=%p a[1]=%p\\n\"</span>, s, &amp;a[<span class=\"number\">1</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拷贝copy()</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testCopy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span> = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">    b := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">copy</span>(b, a)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>string的修改要使用rune()来转换而不是使用[]byte(), 否则不能很好地处理中文字符串</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testModifyString</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    s := <span class=\"string\">\"我hello world\"</span></span><br><span class=\"line\">    s1 := []<span class=\"keyword\">rune</span>(s)</span><br><span class=\"line\"></span><br><span class=\"line\">    s1[<span class=\"number\">0</span>] = <span class=\"number\">200</span></span><br><span class=\"line\">    s1[<span class=\"number\">1</span>] = <span class=\"number\">128</span></span><br><span class=\"line\">    s1[<span class=\"number\">2</span>] = <span class=\"number\">64</span></span><br><span class=\"line\">    str := <span class=\"keyword\">string</span>(s1)</span><br><span class=\"line\">    fmt.Println(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"排序与查找\"><a href=\"#排序与查找\" class=\"headerlink\" title=\"排序与查找\"></a>排序与查找</h3><ul>\n<li><p>排序</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SortCase</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a  = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">58</span>,<span class=\"number\">88</span>,<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">    sort.Ints(a[:])</span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查找，二分查找, 如果是对无序数组进行查找则会先对数组进行排序</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SearchCase</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a  = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">58</span>,<span class=\"number\">88</span>,<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">    sort.Ints(a[:])</span><br><span class=\"line\">    index := sort.SearchInts(a[:], <span class=\"number\">88</span>)</span><br><span class=\"line\">    fmt.Println(index)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"map-字典\"><a href=\"#map-字典\" class=\"headerlink\" title=\"map(字典)\"></a>map(字典)</h3><ul>\n<li>key-value的数据结构，又叫字典或关联数组</li>\n<li><p>声明, 不会分配内存，初始化需要make。<code>var mapCase map[keyType][valueType]</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入和更新</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testMap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">\"key\"</span>: <span class=\"string\">\"value\"</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//a := make(map[string]string, 10)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    a[<span class=\"string\">\"abc\"</span>] = <span class=\"string\">\"efg\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"abc\"</span>] = <span class=\"string\">\"efg\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"abc1\"</span>] = <span class=\"string\">\"efg\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二维map</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testMap2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    a := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key2\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key3\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key4\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key5\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    _, ok := a[<span class=\"string\">\"zhangsan\"</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">        a[<span class=\"string\">\"zhangsan\"</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    a[<span class=\"string\">\"zhangsan\"</span>][<span class=\"string\">\"passwd\"</span>] = <span class=\"string\">\"123456\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"zhangsan\"</span>][<span class=\"string\">\"nickname\"</span>] = <span class=\"string\">\"pangpang\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testMap3</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    a := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    modify(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trans</span><span class=\"params\">(a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">        fmt.Println(k)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k1, v1 := <span class=\"keyword\">range</span> v &#123;</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">\"\\t\"</span>, k1, v1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testMap4</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    a := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key2\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key3\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key4\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key5\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a[<span class=\"string\">\"key2\"</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\">    a[<span class=\"string\">\"key2\"</span>][<span class=\"string\">\"key2\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"key2\"</span>][<span class=\"string\">\"key3\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    trans(a)</span><br><span class=\"line\">    <span class=\"built_in\">delete</span>(a, <span class=\"string\">\"key1\"</span>)</span><br><span class=\"line\">    fmt.Println()</span><br><span class=\"line\">    trans(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"built_in\">len</span>(a))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testMap5</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a []<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    a = <span class=\"built_in\">make</span>([]<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a[<span class=\"number\">0</span>] == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        a[<span class=\"number\">0</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a[<span class=\"number\">0</span>][<span class=\"number\">10</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//testMap()</span></span><br><span class=\"line\">    <span class=\"comment\">//testMap2()</span></span><br><span class=\"line\">    <span class=\"comment\">//testMap3()</span></span><br><span class=\"line\">    <span class=\"comment\">//testMap4()</span></span><br><span class=\"line\">    testMap5()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>map排序，go未提供直接用于map排序的方法</p>\n<p>  排序思路，先获取所有的key，对key进行排序，然后根据排好序的key进行遍历</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"sort\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testMapSort</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    a = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    a[<span class=\"number\">8</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">3</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">2</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">1</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">18</span>] = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys []<span class=\"keyword\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, _ := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">        keys = <span class=\"built_in\">append</span>(keys, k)</span><br><span class=\"line\">        <span class=\"comment\">//fmt.Println(k, v)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sort.Ints(keys)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> keys &#123;</span><br><span class=\"line\">        fmt.Println(v, a[v])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 反转</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testMapReverse</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    b = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    a[<span class=\"string\">\"abc\"</span>] = <span class=\"number\">101</span></span><br><span class=\"line\">    a[<span class=\"string\">\"efg\"</span>] = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">        b[v] = k</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    testMapSort()</span><br><span class=\"line\">    testMapReverse()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h3><ul>\n<li>sync包</li>\n<li>互斥锁 <code>var mu sync.Mutex</code></li>\n<li>读写锁 <code>var mu snyc.RWMutex</code>, 适用于读多写少的应用场景</li>\n<li>原子操作 atomic  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">    <span class=\"string\">\"sync\"</span></span><br><span class=\"line\">    <span class=\"string\">\"sync/atomic\"</span></span><br><span class=\"line\">    <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lock sync.Mutex</span><br><span class=\"line\"><span class=\"keyword\">var</span> rwLock sync.RWMutex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testRWLock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    a = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count <span class=\"keyword\">int32</span></span><br><span class=\"line\">    a[<span class=\"number\">8</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">3</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">2</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">1</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">18</span>] = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++ &#123;</span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(b <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//rwLock.Lock() // 读写锁</span></span><br><span class=\"line\">            lock.Lock()  <span class=\"comment\">// 互斥锁</span></span><br><span class=\"line\">            b[<span class=\"number\">8</span>] = rand.Intn(<span class=\"number\">100</span>)</span><br><span class=\"line\">            time.Sleep(<span class=\"number\">10</span> * time.Millisecond)</span><br><span class=\"line\">            lock.Unlock()</span><br><span class=\"line\">            <span class=\"comment\">//rwLock.Unlock()</span></span><br><span class=\"line\">        &#125;(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(b <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">                lock.Lock()\t</span><br><span class=\"line\">                <span class=\"comment\">//rwLock.RLock()</span></span><br><span class=\"line\">                time.Sleep(time.Millisecond)</span><br><span class=\"line\">                <span class=\"comment\">//fmt.Println(a)</span></span><br><span class=\"line\">                <span class=\"comment\">//rwLock.RUnlock()</span></span><br><span class=\"line\">                lock.Unlock()</span><br><span class=\"line\">                atomic.AddInt32(&amp;count, <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    time.Sleep(time.Second * <span class=\"number\">3</span>)</span><br><span class=\"line\">    fmt.Println(atomic.LoadInt32(&amp;count))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    testRWLock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"使用-go-get-安装三方包\"><a href=\"#使用-go-get-安装三方包\" class=\"headerlink\" title=\"使用 go get 安装三方包\"></a>使用 go get 安装三方包</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h3><ul>\n<li>close 主要用来关闭chanel</li>\n<li>len 用来求长度，如string、array、slice、map、chan(channel)</li>\n<li>new 用来分配内存，返回的是指针。主要用来分配值类型，如int、struct</li>\n<li>make 用来分配内存，返回的是值，主要用来分配引用类型，如chan、map、slice</li>\n<li><p>append 用来追加元素到数组、slice中</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span></span><br><span class=\"line\">a = <span class=\"built_in\">append</span>(a, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">383</span>)  <span class=\"comment\">// [10, 20, 383]</span></span><br><span class=\"line\">a = <span class=\"built_in\">append</span>(a, a...)     <span class=\"comment\">// [10, 20, 383, 10, 20, 383]</span></span><br><span class=\"line\">fmt.Println(a)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>panic、recover 用来做错误处理</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// recover 捕获异常</span></span><br><span class=\"line\"><span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抛出异常    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initConfig</span><span class=\"params\">()</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"init config failed\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">err := initConfig()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"new跟make的区别\"><a href=\"#new跟make的区别\" class=\"headerlink\" title=\"new跟make的区别\"></a>new跟make的区别</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    s1 := <span class=\"built_in\">new</span>([]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">    fmt.Println(s1)     <span class=\"comment\">// &amp;[]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    s2 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">10</span>)   </span><br><span class=\"line\">    fmt.Println(s2)     <span class=\"comment\">// [0,0,0,0,0,0,0,0,0,0]</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// (*s1)[0] = 100   // 会报越界错误，原因是没有初始化长度</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    *s1 = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>)    <span class=\"comment\">// 初始化长度</span></span><br><span class=\"line\">    (*s1)[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">    s2[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">    fmt.Println(s1)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"strings\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Adder</span><span class=\"params\">()</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"keyword\">int</span></span><br><span class=\"line\">    f := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(d <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">        x += d</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeSuffix</span><span class=\"params\">(suffix <span class=\"keyword\">string</span>)</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    f := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> strings.HasSuffix(name, suffix) == <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name + suffix</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        f := Adder()</span></span><br><span class=\"line\"><span class=\"comment\">        fmt.Println(f(1))   // 1</span></span><br><span class=\"line\"><span class=\"comment\">        fmt.Println(f(100))     // 101</span></span><br><span class=\"line\"><span class=\"comment\">        fmt.Println(f(1000))    // 1101</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    f1 := makeSuffix(<span class=\"string\">\".bmp\"</span>)</span><br><span class=\"line\">    fmt.Println(f1(<span class=\"string\">\"test\"</span>))</span><br><span class=\"line\">    fmt.Println(f1(<span class=\"string\">\"pic\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    f2 := makeSuffix(<span class=\"string\">\".jpg\"</span>)</span><br><span class=\"line\">    fmt.Println(f2(<span class=\"string\">\"test\"</span>))</span><br><span class=\"line\">    fmt.Println(f2(<span class=\"string\">\"pic\"</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li><p>是同一种数据类型的固定长度的序列，且长度一旦定义就不能改变</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a0 [<span class=\"number\">5</span>]<span class=\"keyword\">int</span> = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125; <span class=\"comment\">// int类型默认值为0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a1 = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">50</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s0 = [<span class=\"number\">5</span>]<span class=\"keyword\">string</span>&#123;<span class=\"number\">3</span>: <span class=\"string\">\"hello\"</span>, <span class=\"number\">4</span>: <span class=\"string\">\"tom\"</span>&#125;\t<span class=\"comment\">// string类型默认值是空字符串</span></span><br><span class=\"line\">fmt.Println(a0)</span><br><span class=\"line\">fmt.Println(a1)</span><br><span class=\"line\">fmt.Println(a2)</span><br><span class=\"line\">fmt.Println(s0)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多维数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age [<span class=\"number\">5</span>][<span class=\"number\">3</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f [<span class=\"number\">2</span>][<span class=\"number\">3</span>]<span class=\"keyword\">int</span> = [...][<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>var a [5]int</code> 与 <code>var a [10]int</code> 不是同一种类型</p>\n</li>\n<li>元素默认初始化为0</li>\n<li><p>数组是值类型，改变副本数组的值不会改变原数组的值，需要修改则要传递地址</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a [<span class=\"number\">10</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//j := 10</span></span><br><span class=\"line\">    a[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"comment\">//a[j] = 200</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">        fmt.Println(a[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, val := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"a[%d]=%d\\n\"</span>, index, val)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test3</span><span class=\"params\">(arr *[5]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    (*arr)[<span class=\"number\">0</span>] = <span class=\"number\">1000</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a [<span class=\"number\">10</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    b := a</span><br><span class=\"line\"></span><br><span class=\"line\">    b[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//test1()</span></span><br><span class=\"line\">    test2()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a [<span class=\"number\">5</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    test3(&amp;a)</span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用非递归的方式实现斐波那契数列，打印前10个数 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Fib</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        n = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//var res [n]int64          // non-constant array bound n</span></span><br><span class=\"line\">    res := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int64</span>, n)\t<span class=\"comment\">// 实例化动态数组(切片)要使用make</span></span><br><span class=\"line\">    res[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">    fmt.Println(res[<span class=\"number\">0</span>])</span><br><span class=\"line\">    res[<span class=\"number\">1</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">    fmt.Println(res[<span class=\"number\">0</span>])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">2</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">        res[i] = res[i<span class=\"number\">-1</span>] + res[i<span class=\"number\">-2</span>]</span><br><span class=\"line\">        fmt.Println(res[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"slice切片\"><a href=\"#slice切片\" class=\"headerlink\" title=\"slice切片\"></a>slice切片</h3><ul>\n<li>是数组的一个引用，因此切片是引用类型</li>\n<li>切片的长度可以改变，因此切片是一个可变数组</li>\n<li>cap()用来求得切片的最大容量 0&lt;=len(slice)&lt;=len(array), 其中array是被引用的数组</li>\n<li>切片的定义 <code>var 变量名 []类型</code> 和数组定义区别于不指定数组长度</li>\n<li>可以使用make来创建切片</li>\n<li>可以使用append函数操作切片</li>\n<li><p>切片扩容，在原切片容量不够的时候，会额外开辟一片有足够容量的内存，将原切片的数据拷贝进来</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testSlice</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a [<span class=\"number\">5</span>]<span class=\"keyword\">int</span> = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">    s := a[<span class=\"number\">1</span>:]</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"before len[%d] cap[%d]\\n\"</span>, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s))</span><br><span class=\"line\">    s[<span class=\"number\">1</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"s=%p a[1]=%p\\n\"</span>, s, &amp;a[<span class=\"number\">1</span>])</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"before a:\"</span>, a)</span><br><span class=\"line\"></span><br><span class=\"line\">    s = <span class=\"built_in\">append</span>(s, <span class=\"number\">10</span>)</span><br><span class=\"line\">    s = <span class=\"built_in\">append</span>(s, <span class=\"number\">10</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"after len[%d] cap[%d]\\n\"</span>, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s))</span><br><span class=\"line\">    s = <span class=\"built_in\">append</span>(s, <span class=\"number\">10</span>)</span><br><span class=\"line\">    s = <span class=\"built_in\">append</span>(s, <span class=\"number\">10</span>)</span><br><span class=\"line\">    s = <span class=\"built_in\">append</span>(s, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    s[<span class=\"number\">1</span>] = <span class=\"number\">1000</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"after a:\"</span>, a)</span><br><span class=\"line\">    fmt.Println(s)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"s=%p a[1]=%p\\n\"</span>, s, &amp;a[<span class=\"number\">1</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拷贝copy()</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testCopy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span> = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">    b := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">copy</span>(b, a)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>string的修改要使用rune()来转换而不是使用[]byte(), 否则不能很好地处理中文字符串</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testModifyString</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    s := <span class=\"string\">\"我hello world\"</span></span><br><span class=\"line\">    s1 := []<span class=\"keyword\">rune</span>(s)</span><br><span class=\"line\"></span><br><span class=\"line\">    s1[<span class=\"number\">0</span>] = <span class=\"number\">200</span></span><br><span class=\"line\">    s1[<span class=\"number\">1</span>] = <span class=\"number\">128</span></span><br><span class=\"line\">    s1[<span class=\"number\">2</span>] = <span class=\"number\">64</span></span><br><span class=\"line\">    str := <span class=\"keyword\">string</span>(s1)</span><br><span class=\"line\">    fmt.Println(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"排序与查找\"><a href=\"#排序与查找\" class=\"headerlink\" title=\"排序与查找\"></a>排序与查找</h3><ul>\n<li><p>排序</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SortCase</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a  = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">58</span>,<span class=\"number\">88</span>,<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">    sort.Ints(a[:])</span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查找，二分查找, 如果是对无序数组进行查找则会先对数组进行排序</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SearchCase</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a  = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">58</span>,<span class=\"number\">88</span>,<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">    sort.Ints(a[:])</span><br><span class=\"line\">    index := sort.SearchInts(a[:], <span class=\"number\">88</span>)</span><br><span class=\"line\">    fmt.Println(index)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"map-字典\"><a href=\"#map-字典\" class=\"headerlink\" title=\"map(字典)\"></a>map(字典)</h3><ul>\n<li>key-value的数据结构，又叫字典或关联数组</li>\n<li><p>声明, 不会分配内存，初始化需要make。<code>var mapCase map[keyType][valueType]</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入和更新</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testMap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">\"key\"</span>: <span class=\"string\">\"value\"</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//a := make(map[string]string, 10)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    a[<span class=\"string\">\"abc\"</span>] = <span class=\"string\">\"efg\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"abc\"</span>] = <span class=\"string\">\"efg\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"abc1\"</span>] = <span class=\"string\">\"efg\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二维map</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testMap2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    a := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key2\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key3\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key4\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key5\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    _, ok := a[<span class=\"string\">\"zhangsan\"</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">        a[<span class=\"string\">\"zhangsan\"</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    a[<span class=\"string\">\"zhangsan\"</span>][<span class=\"string\">\"passwd\"</span>] = <span class=\"string\">\"123456\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"zhangsan\"</span>][<span class=\"string\">\"nickname\"</span>] = <span class=\"string\">\"pangpang\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testMap3</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    a := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    modify(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trans</span><span class=\"params\">(a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">        fmt.Println(k)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k1, v1 := <span class=\"keyword\">range</span> v &#123;</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">\"\\t\"</span>, k1, v1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testMap4</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    a := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key2\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key3\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key4\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"key1\"</span>][<span class=\"string\">\"key5\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a[<span class=\"string\">\"key2\"</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\">    a[<span class=\"string\">\"key2\"</span>][<span class=\"string\">\"key2\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">    a[<span class=\"string\">\"key2\"</span>][<span class=\"string\">\"key3\"</span>] = <span class=\"string\">\"abc\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    trans(a)</span><br><span class=\"line\">    <span class=\"built_in\">delete</span>(a, <span class=\"string\">\"key1\"</span>)</span><br><span class=\"line\">    fmt.Println()</span><br><span class=\"line\">    trans(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"built_in\">len</span>(a))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testMap5</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a []<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    a = <span class=\"built_in\">make</span>([]<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a[<span class=\"number\">0</span>] == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        a[<span class=\"number\">0</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a[<span class=\"number\">0</span>][<span class=\"number\">10</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//testMap()</span></span><br><span class=\"line\">    <span class=\"comment\">//testMap2()</span></span><br><span class=\"line\">    <span class=\"comment\">//testMap3()</span></span><br><span class=\"line\">    <span class=\"comment\">//testMap4()</span></span><br><span class=\"line\">    testMap5()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>map排序，go未提供直接用于map排序的方法</p>\n<p>  排序思路，先获取所有的key，对key进行排序，然后根据排好序的key进行遍历</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"sort\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testMapSort</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    a = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    a[<span class=\"number\">8</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">3</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">2</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">1</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">18</span>] = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys []<span class=\"keyword\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, _ := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">        keys = <span class=\"built_in\">append</span>(keys, k)</span><br><span class=\"line\">        <span class=\"comment\">//fmt.Println(k, v)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sort.Ints(keys)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> keys &#123;</span><br><span class=\"line\">        fmt.Println(v, a[v])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 反转</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testMapReverse</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    b = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    a[<span class=\"string\">\"abc\"</span>] = <span class=\"number\">101</span></span><br><span class=\"line\">    a[<span class=\"string\">\"efg\"</span>] = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">        b[v] = k</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    testMapSort()</span><br><span class=\"line\">    testMapReverse()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h3><ul>\n<li>sync包</li>\n<li>互斥锁 <code>var mu sync.Mutex</code></li>\n<li>读写锁 <code>var mu snyc.RWMutex</code>, 适用于读多写少的应用场景</li>\n<li>原子操作 atomic  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">    <span class=\"string\">\"sync\"</span></span><br><span class=\"line\">    <span class=\"string\">\"sync/atomic\"</span></span><br><span class=\"line\">    <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lock sync.Mutex</span><br><span class=\"line\"><span class=\"keyword\">var</span> rwLock sync.RWMutex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testRWLock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    a = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count <span class=\"keyword\">int32</span></span><br><span class=\"line\">    a[<span class=\"number\">8</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">3</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">2</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">1</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    a[<span class=\"number\">18</span>] = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++ &#123;</span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(b <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//rwLock.Lock() // 读写锁</span></span><br><span class=\"line\">            lock.Lock()  <span class=\"comment\">// 互斥锁</span></span><br><span class=\"line\">            b[<span class=\"number\">8</span>] = rand.Intn(<span class=\"number\">100</span>)</span><br><span class=\"line\">            time.Sleep(<span class=\"number\">10</span> * time.Millisecond)</span><br><span class=\"line\">            lock.Unlock()</span><br><span class=\"line\">            <span class=\"comment\">//rwLock.Unlock()</span></span><br><span class=\"line\">        &#125;(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(b <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">                lock.Lock()\t</span><br><span class=\"line\">                <span class=\"comment\">//rwLock.RLock()</span></span><br><span class=\"line\">                time.Sleep(time.Millisecond)</span><br><span class=\"line\">                <span class=\"comment\">//fmt.Println(a)</span></span><br><span class=\"line\">                <span class=\"comment\">//rwLock.RUnlock()</span></span><br><span class=\"line\">                lock.Unlock()</span><br><span class=\"line\">                atomic.AddInt32(&amp;count, <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    time.Sleep(time.Second * <span class=\"number\">3</span>)</span><br><span class=\"line\">    fmt.Println(atomic.LoadInt32(&amp;count))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    testRWLock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"使用-go-get-安装三方包\"><a href=\"#使用-go-get-安装三方包\" class=\"headerlink\" title=\"使用 go get 安装三方包\"></a>使用 go get 安装三方包</h3>"},{"title":"面向对象","_content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>面向对象</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#121\">12.1　状态</a></li>\n<li><a href=\"#122\">12.2　过程式编程</a></li>\n<li><a href=\"#123\">12.3　函数式编程</a></li>\n<li><a href=\"#124\">12.4　面向对象编程</a></li>\n<li><a href=\"#125\">12.5　术语表</a></li>\n<li><a href=\"#126\">12.6　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“只有两种编程语言：大家抱怨的和没人用的。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——本贾尼 · 斯特劳斯特鲁普（Bjarne Stroustrup）</span></p>\n</blockquote>\n<p><strong>编程范式</strong>（programming paradigm），即编程风格。当前有许多不同的编程范式。要达到专业程序员水平，则需要学习面向对象编程或函数式编程范式。本章中将学习过程式编程、函数式编程和面向对象编程，并着重介绍面向对象编程。</p>\n<h3 id=\"121\">12.1　状态</h3>\n<p>不同编程范式之间的根本区别之一，就是对<strong>状态</strong>（state）的处理。状态，是程序运行时其内部变量的值。<strong>全局状态</strong>（global state）是程序运行时其内部全局变量的值。</p>\n<h3 id=\"122\">12.2　过程式编程</h3>\n<p>本书第一部分的程序，使用的是<strong>过程式编程</strong>（procedural programming）：这种编程风格要求你编写一系列步骤来解决问题，每步都会改变程序的状态。在过程式编程中，写的是“先做这个，再做那个”这样的代码。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jv2rrl8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">5</span>  y = <span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">6</span>  z = <span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">7</span>  xyz = x + y + z\n<span class=\"hljs-number\">8</span>  xyz\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">14</span>\n</code></pre>\n<p>上例中每行代码都改变了程序的状态。首先，定义了 <code>x</code>，随后定义 <code>y</code>，然后是 <code>z</code>。最后，定义 <code>xyz</code> 的值。</p>\n<p>在过程式编程时，我们将数据存储在全局变量中，并通过函数进行处理。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gldykam</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  rock = []\n<span class=\"hljs-number\">05</span>  country = []\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">collect_songs</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">09</span>      song = <span class=\"hljs-string\">\"Enter a song.\"</span>\n<span class=\"hljs-number\">10</span>      ask = <span class=\"hljs-string\">\"Type r or c. q to quit\"</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>      <strong><span class=\"hljs-keyword\">while</span></strong> <span class=\"hljs-keyword\">True</span>:\n<span class=\"hljs-number\">14</span>          genre = input(ask)\n<span class=\"hljs-number\">15</span>          <strong><span class=\"hljs-keyword\">if</span></strong> genre == <span class=\"hljs-string\">\"q\"</span>:\n<span class=\"hljs-number\">16</span>              <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>          <strong><span class=\"hljs-keyword\">if</span></strong> genre == <span class=\"hljs-string\">\"r\"</span>:\n<span class=\"hljs-number\">20</span>              rk = input(song)\n<span class=\"hljs-number\">21</span>              rock.append(rk)\n<span class=\"hljs-number\">22</span>\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>          <strong><span class=\"hljs-keyword\">elif</span></strong> genre ==(<span class=\"hljs-string\">\"c\"</span>):\n<span class=\"hljs-number\">25</span>              cy = input(song)\n<span class=\"hljs-number\">26</span>              country.append(cy)\n<span class=\"hljs-number\">27</span>\n<span class=\"hljs-number\">28</span>\n<span class=\"hljs-number\">29</span>          <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">30</span>              print(<span class=\"hljs-string\">\"Invalid.\"</span>)\n<span class=\"hljs-number\">31</span>      <strong>print</strong>(rock)\n<span class=\"hljs-number\">32</span>      print(country)\n<span class=\"hljs-number\">33</span>\n<span class=\"hljs-number\">34</span>\n<span class=\"hljs-number\">35</span>  collect_songs()\n\n&gt;&gt; Type r <span class=\"hljs-keyword\">or</span> c. q to quit:</code></pre>\n<p>编写类似的简短程序时，使用过程式编程是没有什么问题的，但是由于我们将程序的状态都保存在全局变量中，如果程序慢慢变大就会碰到问题。因为随着程序规模扩大，可能会在多个函数中使用全局变量，我们很难记录都有哪些地方对一个全局变量进行了修改。例如，某个函数可能改变了一个全局变量的值，在后面的程序中又有一个函数改变了相同的变量，因为写第二个函数时程序员忘记了已经在第一个函数中做了修改。这种情况经常发生，会严重破坏程序的数据准确性。</p>\n<p>随着程序越来越复杂，全局变量的数量也逐渐增加。再加上程序需要不断添加新的功能，也需要修改全局变量，这样程序很快会变得无法维护。而且，这种编程方式也会有<strong>副作用</strong>（side effects），其中之一就是会改变全局变量的状态。使用过程式编程时，经常会碰到意料之外的副作用，比如意外递增某个变量两次。</p>\n<p>这些问题促使了面向对象编程和函数式编程的出现，二者采取了不同的方法来解决上述问题。</p>\n<h3 id=\"123\">12.3　函数式编程</h3>\n<p><strong>函数式编程</strong>（functional programming）源自拉姆达运算（lambda calculus）：世界上最小的通用编程语言（由数学家阿隆佐 · 邱奇发明）。函数式编程通过消除全局状态，解决了过程式编程中出现的问题。函数式程序员依靠的是不使用或不改变全局状态的函数，他们唯一使用的状态就是传给函数的参数。一个函数的结果通常被继续传给另一个函数。因此，这些程序员通过函数之间传递状态，避免了全局状态的问题，也因此消除了由此带来的副作用和其他问题。</p>\n<p>函数式编程的专业术语很多，有人下过一个还算精简的定义：“函数式代码有一个特征：没有副作用。它不依赖当前函数之外的数据，也不改变当前函数之外的数据。”并给出了一个带副作用的函数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gu9jpco</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  a = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">increment</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">8</span>      <strong><span class=\"hljs-keyword\">global</span></strong> a\n<span class=\"hljs-number\">9</span>      a += <span class=\"hljs-number\">1</span></code></pre>\n<p>还给出了一个不带副作用的函数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z27k2yl</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">increment</span><span class=\"hljs-params\">(a)</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> a + <span class=\"hljs-number\">1</span></code></pre>\n<p>第一个函数有副作用，因为它依赖函数之外的数据，并改变了当前函数之外的数据——递增了全局变量的值。第二个函数没有副作用，因为它没有依赖或修改自身之外的数据。</p>\n<p>函数式编程的一个优点，在于它消除了所有由全局状态引发的错误（函数式编程中不存在全局状态）。但是也有缺点，即部分问题更容易通过状态进行概念化。例如，设计一个包含全局状态的人机界面，比设计没有全局状态的人机界面要更简单。如果你要写一个程序，通过按钮改变用户看到画面的可见状态，用全局状态来编写该按钮会更简单。你可以创建一个全局变量，值为 True 时画面可见，值为 False 时则不可见。如果不使用全局状态，设计起来就比较困难。</p>\n<h3 id=\"124\">12.4　面向对象编程</h3>\n<p><strong>面向对象</strong>（object-oriented）编程范式也是通过消除全局状态来解决过程式编程引发的问题，但并不是用函数，而是用对象来保存状态。在面向对象编程中，<strong>类</strong>（class）定义了一系列相互之间可进行交互的对象。类是程序员对类似对象进行分类分组的一种手段。假设有一袋橘子，每个橘子是一个对象。所有的橘子都有类似的属性，如颜色和重量，但是这些属性的具体值则各不相同。这里就可以使用类对橘子进行建模，创建属性值不同的橘子对象。例如，可定义一个橘子类，既支持创建深色、重 10 盎司（约 283 克）的橘子对象，也支持创建浅色、重 12 盎司（约 340 克）的橘子对象。</p>\n<p>每个对象都是类的示例。如果定义了一个叫 Orange 的类，然后创建两个 Orange 对象，那么每个对象都是 Orange 类的实例；它们的数据类型相同，都是 Orange。对象和实例这两个术语可以替换使用。在定义类时，该类的所有实例是类似的：都拥有类中定义的属性，如颜色或种类，但是每个实例的具体属性值是不一样的。</p>\n<p>在 Python 中，类是一个复合语句，包含代码头和主体。可使用语法 <code>class [类名]: [代码主体]</code> 来定义类，其中<code>[类名]</code>是类的名称，<code>[代码主体]</code>是定义的类的具体代码。根据惯例，Python 中的类名都是以大写字母开头，且采用驼峰命名法，即如果类名由多个单词组成，每个单词的第一个字母都应该大写，如 <code>LikeThis</code>，而不是用下划线分隔（函数的命令惯例）。类中的代码主体可以是一个单一语句，或一个叫<strong>方法</strong>（method）的复合语句。方法类似于函数，但因为是在类中定义的，只能在类创建的对象上调用方法（如本书第一部分中在字符串上调用 <code>.upper()</code>）。方法的命名则遵循函数命名规则，都是小写，并用下划线分隔。</p>\n<p>方法的定义方式与函数定义方式相同，但有两处区别：一是必须在类的内部定义方法，二是必须接受至少一个参数（特殊情况除外）。按照惯例，方法的第一个参数总是被命名为 <code>self</code>。创建方法时，至少要定义一个参数，因为在对象上调用方法时，Python 会自动将调用方法的对象作为参数传入。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrmjape</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">6</span>          print(<span class=\"hljs-string\">\"Created!\"</span>)</code></pre>\n<p>可使用 <code>self</code> 定义<strong>实例变量</strong>（instance variable）：属于对象的变量。如果创建多个对象，各自都有不同的实例变量值。通过语法 <code>self.[变量名] = [变量值]</code> 定义实例变量。通常是在特殊方法 <code>__init__</code>（代表初始化）中定义实例变量，创建对象时 Python 会调用该方法。</p>\n<p>一个代表橘子的类的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hrf6cus</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-keyword\">self</span>.color = c\n<span class=\"hljs-number\">8</span>          <strong>print</strong>(<span class=\"hljs-string\">\"Created!\"</span>)</code></pre>\n<p>创建 <code>Orange</code> 对象时（上例中没有创建），就会执行 <code>__init__</code> 中的代码，创建两个实例变量：<code>weight</code> 和 <code>color</code>。可以在类的方法中，和使用普通变量一样使用这些实例变量。创建 <code>Orange</code> 对象时，<code>__init__</code> 中的代码还会打印 <code>Created!</code>。双下划线包围的方法（如 <code>__init__</code>），被称为<strong>魔法方法</strong>（magic method），即 Python 用于创建对象等特殊用途的方法。</p>\n<p>创建新 <code>Orange</code> 对象的语法，与调用函数的语法类似：<code>[类名]([参数])</code>，将<code>[类名]</code>替换为想要用来创建对象的类的名称，<code>[参数]</code>替换为 <code>__init__</code> 接受的参数即可。这里不用传入 <code>self</code> 参数，Python 会自动传入。创建新对象的过程，也被称为<strong>创建类的实例</strong>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jlc7pvk</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          print(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">12</span>  print(or1)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; &lt;__main_<span class=\"hljs-number\">_</span>.Orange object at <span class=\"hljs-number\">0x101a787b8</span>&gt;</code></pre>\n<p>定义好类之后，接着用代码 <code>Orange(10, \"dark orange\")</code> 创建了一个 <code>Orange</code> 类的实例，程序会打印出 <code>Created!</code> 字样。然后，再打印新创建的 <code>Orange</code> 对象，Python 告诉我们它是一个 <code>Orange</code> 对象，并打印其在内存中的地址（你在计算机上运行时得到的结果，将不同于本例中的结果）。</p>\n<p>创建对象之后，可使用语法<code>[对象名].[变量名]</code>获取实例变量的值。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/grwzeo4</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          <strong>print</strong>(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">12</span>  print(or1.weight)\n<span class=\"hljs-number\">13</span>  <strong>print</strong>(or1.color)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> dark orange</code></pre>\n<p>也可使用语法<code>[对象名].[变量名] = [新的值]</code>改变实例变量的值：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jsxgw44</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          <strong>print</strong>(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">12</span>  or1.weight = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">13</span>  or1.color = <span class=\"hljs-string\">\"light orange\"</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  print(or1.weight)\n<span class=\"hljs-number\">17</span>  print(or1.color)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; <span class=\"hljs-number\">100</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> light orange</code></pre>\n<p>尽管实例变量 <code>color</code> 和 <code>weight</code> 一开始被赋予了值 <code>\"dark orange\"</code> 和 <code>10</code>，但是我们还是能将其改为 <code>\"light orange\"</code> 和 <code>100</code>。</p>\n<p>可以使用 <code>Orange</code> 类创建多个橘子对象。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jrmxlmo</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          print(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">\"light orange\"</span>)\n<span class=\"hljs-number\">12</span>  or2 = Orange(<span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">13</span>  or3 = Orange(<span class=\"hljs-number\">14</span>, <span class=\"hljs-string\">\"yellow\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; Created!\n&gt;&gt; Created!</code></pre>\n<p>橘子除了颜色和重量等属性之外，还有其他的属性。它可能还会腐烂，这些都可以通过方法来模拟。下面的代码为 <code>Orange</code> 对象增加了腐烂的属性：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcp32pz</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, c)</span>:</span>\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-string\">\"\"\"重量的单位是盎司\"\"\"</span>\n<span class=\"hljs-number\">07</span>          self.weight = w\n<span class=\"hljs-number\">08</span>          self.color = c\n<span class=\"hljs-number\">09</span>          self.mold = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">10</span>          print(<span class=\"hljs-string\">\"Created!\"</span>)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">rot</span><span class=\"hljs-params\">(self, days, temp)</span>:</span>\n<span class=\"hljs-number\">14</span>          self.mold = days * temp\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>  orange = Orange(<span class=\"hljs-number\">6</span>, <span class=\"hljs-string\">\"orange\"</span>)\n<span class=\"hljs-number\">18</span>  <strong>print</strong>(orange.mold)\n<span class=\"hljs-number\">19</span>  orange.rot(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">98</span>)\n<span class=\"hljs-number\">20</span>  <strong>print</strong>(orange.mold)\n\n&gt;&gt; Created!\n&gt;&gt; <span class=\"hljs-number\">0</span>\n&gt;&gt; <span class=\"hljs-number\">98.0</span></code></pre>\n<p><code>rot</code> 方法接受两个参数：橘子被摘下的天数，以及这些天的平均温度。调用该方法时，其使用公式改变了变量 <code>mold</code> 的值，这是因为可以在任意方法中改变实例变量的值。现在，橘子就可以腐烂了。</p>\n<p>可以在类中定义多个方法。下面的代码是一个关于长方形的类，包含一个计算面积的方法和一个改变大小的方法：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j28qoox</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span>():</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.len = l\n08\n09\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">11</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.len\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">change_size</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n<span class=\"hljs-number\">15</span>          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-keyword\">self</span>.len = l\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>  rectangle = Rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">20</span>  <strong>print</strong>(rectangle.area())\n<span class=\"hljs-number\">21</span>  rectangle.change_size(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">40</span>)\n<span class=\"hljs-number\">22</span>  <strong>print</strong>(rectangle.area())\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">200</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">800</span></code></pre>\n<p>本例中，<code>Rectangle</code> 对象有两个实例变量：<code>len</code> 和 <code>width</code>。<code>area</code> 方法将两个实例变量相乘，返回 <code>Rectangle</code> 的面积；<code>change_size</code> 方法为实例变量赋予调用者新传入参数的值，从而改变了大小。</p>\n<p>面向对象编程有多个优点：鼓励代码复用，从而减少了开发和维护的时间；还鼓励拆解问题，使代码更容易维护。但有一个缺点便是编写程序时要多下些功夫，因为要做很多的事前规划和设计。</p>\n<h3 id=\"125\">12.5　术语表</h3>\n<p><strong>编程范式</strong>：编程风格。</p>\n<p><strong>状态</strong>：程序运行时其内变量的值。</p>\n<p><strong>全局状态</strong>：程序运行时其内全局变量的值。</p>\n<p><strong>过程式编程</strong>：该编程风格要求编写一系列步骤来解决问题，每一步都会改变程序的状态。</p>\n<p><strong>函数式编程</strong>：函数式编程通过函数传递消除了全局状态，解决了过程式编程中出现的问题。</p>\n<p><strong>副作用</strong>：改变全局变量的值。</p>\n<p><strong>面向对象</strong>：定义相互之间可交互的对象的编程范式。</p>\n<p><strong>类</strong>：程序员对类似对象进行分类分组的一种手段。</p>\n<p><strong>方法</strong>：类似函数，但其是在类中定义的，只能在类创建的对象上调用方法。</p>\n<p><strong>实例</strong>：每个对象都是类的一个实例。类的每个实例与该类的其他实例拥有相同的数据类型。</p>\n<p><strong>实例变量</strong>：属于对象的变量。</p>\n<p><strong>魔法方法</strong>：Python 在特殊情况下使用的方法，如对象初始化。</p>\n<p><strong>类的实例化</strong>：使用类创建一个新对象。</p>\n<h3 id=\"126\">12.6　挑战练习</h3>\n<p>1．定义一个叫 <code>Apple</code> 的类，创建4个实例变量，表示苹果的4种属性。</p>\n<p>2．定义一个叫 <code>Circle</code> 的类，创建 <code>area</code> 方法计算其面积。然后创建一个 <code>Circle</code> 对象，调用其 <code>area</code> 方法，打印结果。可使用 Python 内置的 <code>math</code> 模块中的 <code>pi</code> 函数。</p>\n<p>3．定义一个叫 <code>Triangle</code> 的类，创建 <code>area</code> 方法计算并返回面积。然后创建一个 <code>Triangle</code> 对象，调用其 <code>area</code> 方法，打印结果。</p>\n<p>4．定义一个叫 <code>Hexagon</code> 的类，创建 <code>cacculate_perimeter</code> 方法，计算并返回其周长。然后创建一个 <code>Hexagon</code> 对象，调用其 <code>calculate_perimeter</code> 方法，并打印结果。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","source":"_posts/Python无师自通/12_oop.html","raw":"---\ntitle: 面向对象\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>面向对象</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#121\">12.1　状态</a></li>\n<li><a href=\"#122\">12.2　过程式编程</a></li>\n<li><a href=\"#123\">12.3　函数式编程</a></li>\n<li><a href=\"#124\">12.4　面向对象编程</a></li>\n<li><a href=\"#125\">12.5　术语表</a></li>\n<li><a href=\"#126\">12.6　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“只有两种编程语言：大家抱怨的和没人用的。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——本贾尼 · 斯特劳斯特鲁普（Bjarne Stroustrup）</span></p>\n</blockquote>\n<p><strong>编程范式</strong>（programming paradigm），即编程风格。当前有许多不同的编程范式。要达到专业程序员水平，则需要学习面向对象编程或函数式编程范式。本章中将学习过程式编程、函数式编程和面向对象编程，并着重介绍面向对象编程。</p>\n<h3 id=\"121\">12.1　状态</h3>\n<p>不同编程范式之间的根本区别之一，就是对<strong>状态</strong>（state）的处理。状态，是程序运行时其内部变量的值。<strong>全局状态</strong>（global state）是程序运行时其内部全局变量的值。</p>\n<h3 id=\"122\">12.2　过程式编程</h3>\n<p>本书第一部分的程序，使用的是<strong>过程式编程</strong>（procedural programming）：这种编程风格要求你编写一系列步骤来解决问题，每步都会改变程序的状态。在过程式编程中，写的是“先做这个，再做那个”这样的代码。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jv2rrl8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">5</span>  y = <span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">6</span>  z = <span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">7</span>  xyz = x + y + z\n<span class=\"hljs-number\">8</span>  xyz\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">14</span>\n</code></pre>\n<p>上例中每行代码都改变了程序的状态。首先，定义了 <code>x</code>，随后定义 <code>y</code>，然后是 <code>z</code>。最后，定义 <code>xyz</code> 的值。</p>\n<p>在过程式编程时，我们将数据存储在全局变量中，并通过函数进行处理。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gldykam</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  rock = []\n<span class=\"hljs-number\">05</span>  country = []\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">collect_songs</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">09</span>      song = <span class=\"hljs-string\">\"Enter a song.\"</span>\n<span class=\"hljs-number\">10</span>      ask = <span class=\"hljs-string\">\"Type r or c. q to quit\"</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>      <strong><span class=\"hljs-keyword\">while</span></strong> <span class=\"hljs-keyword\">True</span>:\n<span class=\"hljs-number\">14</span>          genre = input(ask)\n<span class=\"hljs-number\">15</span>          <strong><span class=\"hljs-keyword\">if</span></strong> genre == <span class=\"hljs-string\">\"q\"</span>:\n<span class=\"hljs-number\">16</span>              <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>          <strong><span class=\"hljs-keyword\">if</span></strong> genre == <span class=\"hljs-string\">\"r\"</span>:\n<span class=\"hljs-number\">20</span>              rk = input(song)\n<span class=\"hljs-number\">21</span>              rock.append(rk)\n<span class=\"hljs-number\">22</span>\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>          <strong><span class=\"hljs-keyword\">elif</span></strong> genre ==(<span class=\"hljs-string\">\"c\"</span>):\n<span class=\"hljs-number\">25</span>              cy = input(song)\n<span class=\"hljs-number\">26</span>              country.append(cy)\n<span class=\"hljs-number\">27</span>\n<span class=\"hljs-number\">28</span>\n<span class=\"hljs-number\">29</span>          <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">30</span>              print(<span class=\"hljs-string\">\"Invalid.\"</span>)\n<span class=\"hljs-number\">31</span>      <strong>print</strong>(rock)\n<span class=\"hljs-number\">32</span>      print(country)\n<span class=\"hljs-number\">33</span>\n<span class=\"hljs-number\">34</span>\n<span class=\"hljs-number\">35</span>  collect_songs()\n\n&gt;&gt; Type r <span class=\"hljs-keyword\">or</span> c. q to quit:</code></pre>\n<p>编写类似的简短程序时，使用过程式编程是没有什么问题的，但是由于我们将程序的状态都保存在全局变量中，如果程序慢慢变大就会碰到问题。因为随着程序规模扩大，可能会在多个函数中使用全局变量，我们很难记录都有哪些地方对一个全局变量进行了修改。例如，某个函数可能改变了一个全局变量的值，在后面的程序中又有一个函数改变了相同的变量，因为写第二个函数时程序员忘记了已经在第一个函数中做了修改。这种情况经常发生，会严重破坏程序的数据准确性。</p>\n<p>随着程序越来越复杂，全局变量的数量也逐渐增加。再加上程序需要不断添加新的功能，也需要修改全局变量，这样程序很快会变得无法维护。而且，这种编程方式也会有<strong>副作用</strong>（side effects），其中之一就是会改变全局变量的状态。使用过程式编程时，经常会碰到意料之外的副作用，比如意外递增某个变量两次。</p>\n<p>这些问题促使了面向对象编程和函数式编程的出现，二者采取了不同的方法来解决上述问题。</p>\n<h3 id=\"123\">12.3　函数式编程</h3>\n<p><strong>函数式编程</strong>（functional programming）源自拉姆达运算（lambda calculus）：世界上最小的通用编程语言（由数学家阿隆佐 · 邱奇发明）。函数式编程通过消除全局状态，解决了过程式编程中出现的问题。函数式程序员依靠的是不使用或不改变全局状态的函数，他们唯一使用的状态就是传给函数的参数。一个函数的结果通常被继续传给另一个函数。因此，这些程序员通过函数之间传递状态，避免了全局状态的问题，也因此消除了由此带来的副作用和其他问题。</p>\n<p>函数式编程的专业术语很多，有人下过一个还算精简的定义：“函数式代码有一个特征：没有副作用。它不依赖当前函数之外的数据，也不改变当前函数之外的数据。”并给出了一个带副作用的函数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gu9jpco</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  a = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">increment</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">8</span>      <strong><span class=\"hljs-keyword\">global</span></strong> a\n<span class=\"hljs-number\">9</span>      a += <span class=\"hljs-number\">1</span></code></pre>\n<p>还给出了一个不带副作用的函数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z27k2yl</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">increment</span><span class=\"hljs-params\">(a)</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> a + <span class=\"hljs-number\">1</span></code></pre>\n<p>第一个函数有副作用，因为它依赖函数之外的数据，并改变了当前函数之外的数据——递增了全局变量的值。第二个函数没有副作用，因为它没有依赖或修改自身之外的数据。</p>\n<p>函数式编程的一个优点，在于它消除了所有由全局状态引发的错误（函数式编程中不存在全局状态）。但是也有缺点，即部分问题更容易通过状态进行概念化。例如，设计一个包含全局状态的人机界面，比设计没有全局状态的人机界面要更简单。如果你要写一个程序，通过按钮改变用户看到画面的可见状态，用全局状态来编写该按钮会更简单。你可以创建一个全局变量，值为 True 时画面可见，值为 False 时则不可见。如果不使用全局状态，设计起来就比较困难。</p>\n<h3 id=\"124\">12.4　面向对象编程</h3>\n<p><strong>面向对象</strong>（object-oriented）编程范式也是通过消除全局状态来解决过程式编程引发的问题，但并不是用函数，而是用对象来保存状态。在面向对象编程中，<strong>类</strong>（class）定义了一系列相互之间可进行交互的对象。类是程序员对类似对象进行分类分组的一种手段。假设有一袋橘子，每个橘子是一个对象。所有的橘子都有类似的属性，如颜色和重量，但是这些属性的具体值则各不相同。这里就可以使用类对橘子进行建模，创建属性值不同的橘子对象。例如，可定义一个橘子类，既支持创建深色、重 10 盎司（约 283 克）的橘子对象，也支持创建浅色、重 12 盎司（约 340 克）的橘子对象。</p>\n<p>每个对象都是类的示例。如果定义了一个叫 Orange 的类，然后创建两个 Orange 对象，那么每个对象都是 Orange 类的实例；它们的数据类型相同，都是 Orange。对象和实例这两个术语可以替换使用。在定义类时，该类的所有实例是类似的：都拥有类中定义的属性，如颜色或种类，但是每个实例的具体属性值是不一样的。</p>\n<p>在 Python 中，类是一个复合语句，包含代码头和主体。可使用语法 <code>class [类名]: [代码主体]</code> 来定义类，其中<code>[类名]</code>是类的名称，<code>[代码主体]</code>是定义的类的具体代码。根据惯例，Python 中的类名都是以大写字母开头，且采用驼峰命名法，即如果类名由多个单词组成，每个单词的第一个字母都应该大写，如 <code>LikeThis</code>，而不是用下划线分隔（函数的命令惯例）。类中的代码主体可以是一个单一语句，或一个叫<strong>方法</strong>（method）的复合语句。方法类似于函数，但因为是在类中定义的，只能在类创建的对象上调用方法（如本书第一部分中在字符串上调用 <code>.upper()</code>）。方法的命名则遵循函数命名规则，都是小写，并用下划线分隔。</p>\n<p>方法的定义方式与函数定义方式相同，但有两处区别：一是必须在类的内部定义方法，二是必须接受至少一个参数（特殊情况除外）。按照惯例，方法的第一个参数总是被命名为 <code>self</code>。创建方法时，至少要定义一个参数，因为在对象上调用方法时，Python 会自动将调用方法的对象作为参数传入。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrmjape</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">6</span>          print(<span class=\"hljs-string\">\"Created!\"</span>)</code></pre>\n<p>可使用 <code>self</code> 定义<strong>实例变量</strong>（instance variable）：属于对象的变量。如果创建多个对象，各自都有不同的实例变量值。通过语法 <code>self.[变量名] = [变量值]</code> 定义实例变量。通常是在特殊方法 <code>__init__</code>（代表初始化）中定义实例变量，创建对象时 Python 会调用该方法。</p>\n<p>一个代表橘子的类的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hrf6cus</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-keyword\">self</span>.color = c\n<span class=\"hljs-number\">8</span>          <strong>print</strong>(<span class=\"hljs-string\">\"Created!\"</span>)</code></pre>\n<p>创建 <code>Orange</code> 对象时（上例中没有创建），就会执行 <code>__init__</code> 中的代码，创建两个实例变量：<code>weight</code> 和 <code>color</code>。可以在类的方法中，和使用普通变量一样使用这些实例变量。创建 <code>Orange</code> 对象时，<code>__init__</code> 中的代码还会打印 <code>Created!</code>。双下划线包围的方法（如 <code>__init__</code>），被称为<strong>魔法方法</strong>（magic method），即 Python 用于创建对象等特殊用途的方法。</p>\n<p>创建新 <code>Orange</code> 对象的语法，与调用函数的语法类似：<code>[类名]([参数])</code>，将<code>[类名]</code>替换为想要用来创建对象的类的名称，<code>[参数]</code>替换为 <code>__init__</code> 接受的参数即可。这里不用传入 <code>self</code> 参数，Python 会自动传入。创建新对象的过程，也被称为<strong>创建类的实例</strong>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jlc7pvk</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          print(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">12</span>  print(or1)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; &lt;__main_<span class=\"hljs-number\">_</span>.Orange object at <span class=\"hljs-number\">0x101a787b8</span>&gt;</code></pre>\n<p>定义好类之后，接着用代码 <code>Orange(10, \"dark orange\")</code> 创建了一个 <code>Orange</code> 类的实例，程序会打印出 <code>Created!</code> 字样。然后，再打印新创建的 <code>Orange</code> 对象，Python 告诉我们它是一个 <code>Orange</code> 对象，并打印其在内存中的地址（你在计算机上运行时得到的结果，将不同于本例中的结果）。</p>\n<p>创建对象之后，可使用语法<code>[对象名].[变量名]</code>获取实例变量的值。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/grwzeo4</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          <strong>print</strong>(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">12</span>  print(or1.weight)\n<span class=\"hljs-number\">13</span>  <strong>print</strong>(or1.color)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> dark orange</code></pre>\n<p>也可使用语法<code>[对象名].[变量名] = [新的值]</code>改变实例变量的值：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jsxgw44</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          <strong>print</strong>(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">12</span>  or1.weight = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">13</span>  or1.color = <span class=\"hljs-string\">\"light orange\"</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  print(or1.weight)\n<span class=\"hljs-number\">17</span>  print(or1.color)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; <span class=\"hljs-number\">100</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> light orange</code></pre>\n<p>尽管实例变量 <code>color</code> 和 <code>weight</code> 一开始被赋予了值 <code>\"dark orange\"</code> 和 <code>10</code>，但是我们还是能将其改为 <code>\"light orange\"</code> 和 <code>100</code>。</p>\n<p>可以使用 <code>Orange</code> 类创建多个橘子对象。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jrmxlmo</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          print(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">\"light orange\"</span>)\n<span class=\"hljs-number\">12</span>  or2 = Orange(<span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">13</span>  or3 = Orange(<span class=\"hljs-number\">14</span>, <span class=\"hljs-string\">\"yellow\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; Created!\n&gt;&gt; Created!</code></pre>\n<p>橘子除了颜色和重量等属性之外，还有其他的属性。它可能还会腐烂，这些都可以通过方法来模拟。下面的代码为 <code>Orange</code> 对象增加了腐烂的属性：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcp32pz</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, c)</span>:</span>\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-string\">\"\"\"重量的单位是盎司\"\"\"</span>\n<span class=\"hljs-number\">07</span>          self.weight = w\n<span class=\"hljs-number\">08</span>          self.color = c\n<span class=\"hljs-number\">09</span>          self.mold = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">10</span>          print(<span class=\"hljs-string\">\"Created!\"</span>)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">rot</span><span class=\"hljs-params\">(self, days, temp)</span>:</span>\n<span class=\"hljs-number\">14</span>          self.mold = days * temp\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>  orange = Orange(<span class=\"hljs-number\">6</span>, <span class=\"hljs-string\">\"orange\"</span>)\n<span class=\"hljs-number\">18</span>  <strong>print</strong>(orange.mold)\n<span class=\"hljs-number\">19</span>  orange.rot(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">98</span>)\n<span class=\"hljs-number\">20</span>  <strong>print</strong>(orange.mold)\n\n&gt;&gt; Created!\n&gt;&gt; <span class=\"hljs-number\">0</span>\n&gt;&gt; <span class=\"hljs-number\">98.0</span></code></pre>\n<p><code>rot</code> 方法接受两个参数：橘子被摘下的天数，以及这些天的平均温度。调用该方法时，其使用公式改变了变量 <code>mold</code> 的值，这是因为可以在任意方法中改变实例变量的值。现在，橘子就可以腐烂了。</p>\n<p>可以在类中定义多个方法。下面的代码是一个关于长方形的类，包含一个计算面积的方法和一个改变大小的方法：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j28qoox</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span>():</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.len = l\n08\n09\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">11</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.len\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">change_size</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n<span class=\"hljs-number\">15</span>          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-keyword\">self</span>.len = l\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>  rectangle = Rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">20</span>  <strong>print</strong>(rectangle.area())\n<span class=\"hljs-number\">21</span>  rectangle.change_size(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">40</span>)\n<span class=\"hljs-number\">22</span>  <strong>print</strong>(rectangle.area())\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">200</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">800</span></code></pre>\n<p>本例中，<code>Rectangle</code> 对象有两个实例变量：<code>len</code> 和 <code>width</code>。<code>area</code> 方法将两个实例变量相乘，返回 <code>Rectangle</code> 的面积；<code>change_size</code> 方法为实例变量赋予调用者新传入参数的值，从而改变了大小。</p>\n<p>面向对象编程有多个优点：鼓励代码复用，从而减少了开发和维护的时间；还鼓励拆解问题，使代码更容易维护。但有一个缺点便是编写程序时要多下些功夫，因为要做很多的事前规划和设计。</p>\n<h3 id=\"125\">12.5　术语表</h3>\n<p><strong>编程范式</strong>：编程风格。</p>\n<p><strong>状态</strong>：程序运行时其内变量的值。</p>\n<p><strong>全局状态</strong>：程序运行时其内全局变量的值。</p>\n<p><strong>过程式编程</strong>：该编程风格要求编写一系列步骤来解决问题，每一步都会改变程序的状态。</p>\n<p><strong>函数式编程</strong>：函数式编程通过函数传递消除了全局状态，解决了过程式编程中出现的问题。</p>\n<p><strong>副作用</strong>：改变全局变量的值。</p>\n<p><strong>面向对象</strong>：定义相互之间可交互的对象的编程范式。</p>\n<p><strong>类</strong>：程序员对类似对象进行分类分组的一种手段。</p>\n<p><strong>方法</strong>：类似函数，但其是在类中定义的，只能在类创建的对象上调用方法。</p>\n<p><strong>实例</strong>：每个对象都是类的一个实例。类的每个实例与该类的其他实例拥有相同的数据类型。</p>\n<p><strong>实例变量</strong>：属于对象的变量。</p>\n<p><strong>魔法方法</strong>：Python 在特殊情况下使用的方法，如对象初始化。</p>\n<p><strong>类的实例化</strong>：使用类创建一个新对象。</p>\n<h3 id=\"126\">12.6　挑战练习</h3>\n<p>1．定义一个叫 <code>Apple</code> 的类，创建4个实例变量，表示苹果的4种属性。</p>\n<p>2．定义一个叫 <code>Circle</code> 的类，创建 <code>area</code> 方法计算其面积。然后创建一个 <code>Circle</code> 对象，调用其 <code>area</code> 方法，打印结果。可使用 Python 内置的 <code>math</code> 模块中的 <code>pi</code> 函数。</p>\n<p>3．定义一个叫 <code>Triangle</code> 的类，创建 <code>area</code> 方法计算并返回面积。然后创建一个 <code>Triangle</code> 对象，调用其 <code>area</code> 方法，打印结果。</p>\n<p>4．定义一个叫 <code>Hexagon</code> 的类，创建 <code>cacculate_perimeter</code> 方法，计算并返回其周长。然后创建一个 <code>Hexagon</code> 对象，调用其 <code>calculate_perimeter</code> 方法，并打印结果。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","slug":"Python无师自通/12_oop","published":1,"date":"2019-06-10T06:32:49.023Z","updated":"2019-06-10T06:32:49.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwq02bo80000g0h7xerw0ud6","content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>面向对象</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#121\">12.1　状态</a></li>\n<li><a href=\"#122\">12.2　过程式编程</a></li>\n<li><a href=\"#123\">12.3　函数式编程</a></li>\n<li><a href=\"#124\">12.4　面向对象编程</a></li>\n<li><a href=\"#125\">12.5　术语表</a></li>\n<li><a href=\"#126\">12.6　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“只有两种编程语言：大家抱怨的和没人用的。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——本贾尼 · 斯特劳斯特鲁普（Bjarne Stroustrup）</span></p>\n</blockquote>\n<p><strong>编程范式</strong>（programming paradigm），即编程风格。当前有许多不同的编程范式。要达到专业程序员水平，则需要学习面向对象编程或函数式编程范式。本章中将学习过程式编程、函数式编程和面向对象编程，并着重介绍面向对象编程。</p>\n<h3 id=\"121\">12.1　状态</h3>\n<p>不同编程范式之间的根本区别之一，就是对<strong>状态</strong>（state）的处理。状态，是程序运行时其内部变量的值。<strong>全局状态</strong>（global state）是程序运行时其内部全局变量的值。</p>\n<h3 id=\"122\">12.2　过程式编程</h3>\n<p>本书第一部分的程序，使用的是<strong>过程式编程</strong>（procedural programming）：这种编程风格要求你编写一系列步骤来解决问题，每步都会改变程序的状态。在过程式编程中，写的是“先做这个，再做那个”这样的代码。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jv2rrl8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">5</span>  y = <span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">6</span>  z = <span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">7</span>  xyz = x + y + z\n<span class=\"hljs-number\">8</span>  xyz\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">14</span>\n</code></pre>\n<p>上例中每行代码都改变了程序的状态。首先，定义了 <code>x</code>，随后定义 <code>y</code>，然后是 <code>z</code>。最后，定义 <code>xyz</code> 的值。</p>\n<p>在过程式编程时，我们将数据存储在全局变量中，并通过函数进行处理。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gldykam</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  rock = []\n<span class=\"hljs-number\">05</span>  country = []\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">collect_songs</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">09</span>      song = <span class=\"hljs-string\">\"Enter a song.\"</span>\n<span class=\"hljs-number\">10</span>      ask = <span class=\"hljs-string\">\"Type r or c. q to quit\"</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>      <strong><span class=\"hljs-keyword\">while</span></strong> <span class=\"hljs-keyword\">True</span>:\n<span class=\"hljs-number\">14</span>          genre = input(ask)\n<span class=\"hljs-number\">15</span>          <strong><span class=\"hljs-keyword\">if</span></strong> genre == <span class=\"hljs-string\">\"q\"</span>:\n<span class=\"hljs-number\">16</span>              <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>          <strong><span class=\"hljs-keyword\">if</span></strong> genre == <span class=\"hljs-string\">\"r\"</span>:\n<span class=\"hljs-number\">20</span>              rk = input(song)\n<span class=\"hljs-number\">21</span>              rock.append(rk)\n<span class=\"hljs-number\">22</span>\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>          <strong><span class=\"hljs-keyword\">elif</span></strong> genre ==(<span class=\"hljs-string\">\"c\"</span>):\n<span class=\"hljs-number\">25</span>              cy = input(song)\n<span class=\"hljs-number\">26</span>              country.append(cy)\n<span class=\"hljs-number\">27</span>\n<span class=\"hljs-number\">28</span>\n<span class=\"hljs-number\">29</span>          <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">30</span>              print(<span class=\"hljs-string\">\"Invalid.\"</span>)\n<span class=\"hljs-number\">31</span>      <strong>print</strong>(rock)\n<span class=\"hljs-number\">32</span>      print(country)\n<span class=\"hljs-number\">33</span>\n<span class=\"hljs-number\">34</span>\n<span class=\"hljs-number\">35</span>  collect_songs()\n\n&gt;&gt; Type r <span class=\"hljs-keyword\">or</span> c. q to quit:</code></pre>\n<p>编写类似的简短程序时，使用过程式编程是没有什么问题的，但是由于我们将程序的状态都保存在全局变量中，如果程序慢慢变大就会碰到问题。因为随着程序规模扩大，可能会在多个函数中使用全局变量，我们很难记录都有哪些地方对一个全局变量进行了修改。例如，某个函数可能改变了一个全局变量的值，在后面的程序中又有一个函数改变了相同的变量，因为写第二个函数时程序员忘记了已经在第一个函数中做了修改。这种情况经常发生，会严重破坏程序的数据准确性。</p>\n<p>随着程序越来越复杂，全局变量的数量也逐渐增加。再加上程序需要不断添加新的功能，也需要修改全局变量，这样程序很快会变得无法维护。而且，这种编程方式也会有<strong>副作用</strong>（side effects），其中之一就是会改变全局变量的状态。使用过程式编程时，经常会碰到意料之外的副作用，比如意外递增某个变量两次。</p>\n<p>这些问题促使了面向对象编程和函数式编程的出现，二者采取了不同的方法来解决上述问题。</p>\n<h3 id=\"123\">12.3　函数式编程</h3>\n<p><strong>函数式编程</strong>（functional programming）源自拉姆达运算（lambda calculus）：世界上最小的通用编程语言（由数学家阿隆佐 · 邱奇发明）。函数式编程通过消除全局状态，解决了过程式编程中出现的问题。函数式程序员依靠的是不使用或不改变全局状态的函数，他们唯一使用的状态就是传给函数的参数。一个函数的结果通常被继续传给另一个函数。因此，这些程序员通过函数之间传递状态，避免了全局状态的问题，也因此消除了由此带来的副作用和其他问题。</p>\n<p>函数式编程的专业术语很多，有人下过一个还算精简的定义：“函数式代码有一个特征：没有副作用。它不依赖当前函数之外的数据，也不改变当前函数之外的数据。”并给出了一个带副作用的函数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gu9jpco</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  a = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">increment</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">8</span>      <strong><span class=\"hljs-keyword\">global</span></strong> a\n<span class=\"hljs-number\">9</span>      a += <span class=\"hljs-number\">1</span></code></pre>\n<p>还给出了一个不带副作用的函数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z27k2yl</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">increment</span><span class=\"hljs-params\">(a)</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> a + <span class=\"hljs-number\">1</span></code></pre>\n<p>第一个函数有副作用，因为它依赖函数之外的数据，并改变了当前函数之外的数据——递增了全局变量的值。第二个函数没有副作用，因为它没有依赖或修改自身之外的数据。</p>\n<p>函数式编程的一个优点，在于它消除了所有由全局状态引发的错误（函数式编程中不存在全局状态）。但是也有缺点，即部分问题更容易通过状态进行概念化。例如，设计一个包含全局状态的人机界面，比设计没有全局状态的人机界面要更简单。如果你要写一个程序，通过按钮改变用户看到画面的可见状态，用全局状态来编写该按钮会更简单。你可以创建一个全局变量，值为 True 时画面可见，值为 False 时则不可见。如果不使用全局状态，设计起来就比较困难。</p>\n<h3 id=\"124\">12.4　面向对象编程</h3>\n<p><strong>面向对象</strong>（object-oriented）编程范式也是通过消除全局状态来解决过程式编程引发的问题，但并不是用函数，而是用对象来保存状态。在面向对象编程中，<strong>类</strong>（class）定义了一系列相互之间可进行交互的对象。类是程序员对类似对象进行分类分组的一种手段。假设有一袋橘子，每个橘子是一个对象。所有的橘子都有类似的属性，如颜色和重量，但是这些属性的具体值则各不相同。这里就可以使用类对橘子进行建模，创建属性值不同的橘子对象。例如，可定义一个橘子类，既支持创建深色、重 10 盎司（约 283 克）的橘子对象，也支持创建浅色、重 12 盎司（约 340 克）的橘子对象。</p>\n<p>每个对象都是类的示例。如果定义了一个叫 Orange 的类，然后创建两个 Orange 对象，那么每个对象都是 Orange 类的实例；它们的数据类型相同，都是 Orange。对象和实例这两个术语可以替换使用。在定义类时，该类的所有实例是类似的：都拥有类中定义的属性，如颜色或种类，但是每个实例的具体属性值是不一样的。</p>\n<p>在 Python 中，类是一个复合语句，包含代码头和主体。可使用语法 <code>class [类名]: [代码主体]</code> 来定义类，其中<code>[类名]</code>是类的名称，<code>[代码主体]</code>是定义的类的具体代码。根据惯例，Python 中的类名都是以大写字母开头，且采用驼峰命名法，即如果类名由多个单词组成，每个单词的第一个字母都应该大写，如 <code>LikeThis</code>，而不是用下划线分隔（函数的命令惯例）。类中的代码主体可以是一个单一语句，或一个叫<strong>方法</strong>（method）的复合语句。方法类似于函数，但因为是在类中定义的，只能在类创建的对象上调用方法（如本书第一部分中在字符串上调用 <code>.upper()</code>）。方法的命名则遵循函数命名规则，都是小写，并用下划线分隔。</p>\n<p>方法的定义方式与函数定义方式相同，但有两处区别：一是必须在类的内部定义方法，二是必须接受至少一个参数（特殊情况除外）。按照惯例，方法的第一个参数总是被命名为 <code>self</code>。创建方法时，至少要定义一个参数，因为在对象上调用方法时，Python 会自动将调用方法的对象作为参数传入。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrmjape</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">6</span>          print(<span class=\"hljs-string\">\"Created!\"</span>)</code></pre>\n<p>可使用 <code>self</code> 定义<strong>实例变量</strong>（instance variable）：属于对象的变量。如果创建多个对象，各自都有不同的实例变量值。通过语法 <code>self.[变量名] = [变量值]</code> 定义实例变量。通常是在特殊方法 <code>__init__</code>（代表初始化）中定义实例变量，创建对象时 Python 会调用该方法。</p>\n<p>一个代表橘子的类的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hrf6cus</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-keyword\">self</span>.color = c\n<span class=\"hljs-number\">8</span>          <strong>print</strong>(<span class=\"hljs-string\">\"Created!\"</span>)</code></pre>\n<p>创建 <code>Orange</code> 对象时（上例中没有创建），就会执行 <code>__init__</code> 中的代码，创建两个实例变量：<code>weight</code> 和 <code>color</code>。可以在类的方法中，和使用普通变量一样使用这些实例变量。创建 <code>Orange</code> 对象时，<code>__init__</code> 中的代码还会打印 <code>Created!</code>。双下划线包围的方法（如 <code>__init__</code>），被称为<strong>魔法方法</strong>（magic method），即 Python 用于创建对象等特殊用途的方法。</p>\n<p>创建新 <code>Orange</code> 对象的语法，与调用函数的语法类似：<code>[类名]([参数])</code>，将<code>[类名]</code>替换为想要用来创建对象的类的名称，<code>[参数]</code>替换为 <code>__init__</code> 接受的参数即可。这里不用传入 <code>self</code> 参数，Python 会自动传入。创建新对象的过程，也被称为<strong>创建类的实例</strong>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jlc7pvk</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          print(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">12</span>  print(or1)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; &lt;__main_<span class=\"hljs-number\">_</span>.Orange object at <span class=\"hljs-number\">0x101a787b8</span>&gt;</code></pre>\n<p>定义好类之后，接着用代码 <code>Orange(10, \"dark orange\")</code> 创建了一个 <code>Orange</code> 类的实例，程序会打印出 <code>Created!</code> 字样。然后，再打印新创建的 <code>Orange</code> 对象，Python 告诉我们它是一个 <code>Orange</code> 对象，并打印其在内存中的地址（你在计算机上运行时得到的结果，将不同于本例中的结果）。</p>\n<p>创建对象之后，可使用语法<code>[对象名].[变量名]</code>获取实例变量的值。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/grwzeo4</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          <strong>print</strong>(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">12</span>  print(or1.weight)\n<span class=\"hljs-number\">13</span>  <strong>print</strong>(or1.color)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> dark orange</code></pre>\n<p>也可使用语法<code>[对象名].[变量名] = [新的值]</code>改变实例变量的值：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jsxgw44</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          <strong>print</strong>(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">12</span>  or1.weight = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">13</span>  or1.color = <span class=\"hljs-string\">\"light orange\"</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  print(or1.weight)\n<span class=\"hljs-number\">17</span>  print(or1.color)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; <span class=\"hljs-number\">100</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> light orange</code></pre>\n<p>尽管实例变量 <code>color</code> 和 <code>weight</code> 一开始被赋予了值 <code>\"dark orange\"</code> 和 <code>10</code>，但是我们还是能将其改为 <code>\"light orange\"</code> 和 <code>100</code>。</p>\n<p>可以使用 <code>Orange</code> 类创建多个橘子对象。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jrmxlmo</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          print(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">\"light orange\"</span>)\n<span class=\"hljs-number\">12</span>  or2 = Orange(<span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">13</span>  or3 = Orange(<span class=\"hljs-number\">14</span>, <span class=\"hljs-string\">\"yellow\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; Created!\n&gt;&gt; Created!</code></pre>\n<p>橘子除了颜色和重量等属性之外，还有其他的属性。它可能还会腐烂，这些都可以通过方法来模拟。下面的代码为 <code>Orange</code> 对象增加了腐烂的属性：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcp32pz</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, c)</span>:</span>\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-string\">\"\"\"重量的单位是盎司\"\"\"</span>\n<span class=\"hljs-number\">07</span>          self.weight = w\n<span class=\"hljs-number\">08</span>          self.color = c\n<span class=\"hljs-number\">09</span>          self.mold = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">10</span>          print(<span class=\"hljs-string\">\"Created!\"</span>)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">rot</span><span class=\"hljs-params\">(self, days, temp)</span>:</span>\n<span class=\"hljs-number\">14</span>          self.mold = days * temp\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>  orange = Orange(<span class=\"hljs-number\">6</span>, <span class=\"hljs-string\">\"orange\"</span>)\n<span class=\"hljs-number\">18</span>  <strong>print</strong>(orange.mold)\n<span class=\"hljs-number\">19</span>  orange.rot(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">98</span>)\n<span class=\"hljs-number\">20</span>  <strong>print</strong>(orange.mold)\n\n&gt;&gt; Created!\n&gt;&gt; <span class=\"hljs-number\">0</span>\n&gt;&gt; <span class=\"hljs-number\">98.0</span></code></pre>\n<p><code>rot</code> 方法接受两个参数：橘子被摘下的天数，以及这些天的平均温度。调用该方法时，其使用公式改变了变量 <code>mold</code> 的值，这是因为可以在任意方法中改变实例变量的值。现在，橘子就可以腐烂了。</p>\n<p>可以在类中定义多个方法。下面的代码是一个关于长方形的类，包含一个计算面积的方法和一个改变大小的方法：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j28qoox</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span>():</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.len = l\n08\n09\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">11</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.len\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">change_size</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n<span class=\"hljs-number\">15</span>          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-keyword\">self</span>.len = l\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>  rectangle = Rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">20</span>  <strong>print</strong>(rectangle.area())\n<span class=\"hljs-number\">21</span>  rectangle.change_size(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">40</span>)\n<span class=\"hljs-number\">22</span>  <strong>print</strong>(rectangle.area())\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">200</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">800</span></code></pre>\n<p>本例中，<code>Rectangle</code> 对象有两个实例变量：<code>len</code> 和 <code>width</code>。<code>area</code> 方法将两个实例变量相乘，返回 <code>Rectangle</code> 的面积；<code>change_size</code> 方法为实例变量赋予调用者新传入参数的值，从而改变了大小。</p>\n<p>面向对象编程有多个优点：鼓励代码复用，从而减少了开发和维护的时间；还鼓励拆解问题，使代码更容易维护。但有一个缺点便是编写程序时要多下些功夫，因为要做很多的事前规划和设计。</p>\n<h3 id=\"125\">12.5　术语表</h3>\n<p><strong>编程范式</strong>：编程风格。</p>\n<p><strong>状态</strong>：程序运行时其内变量的值。</p>\n<p><strong>全局状态</strong>：程序运行时其内全局变量的值。</p>\n<p><strong>过程式编程</strong>：该编程风格要求编写一系列步骤来解决问题，每一步都会改变程序的状态。</p>\n<p><strong>函数式编程</strong>：函数式编程通过函数传递消除了全局状态，解决了过程式编程中出现的问题。</p>\n<p><strong>副作用</strong>：改变全局变量的值。</p>\n<p><strong>面向对象</strong>：定义相互之间可交互的对象的编程范式。</p>\n<p><strong>类</strong>：程序员对类似对象进行分类分组的一种手段。</p>\n<p><strong>方法</strong>：类似函数，但其是在类中定义的，只能在类创建的对象上调用方法。</p>\n<p><strong>实例</strong>：每个对象都是类的一个实例。类的每个实例与该类的其他实例拥有相同的数据类型。</p>\n<p><strong>实例变量</strong>：属于对象的变量。</p>\n<p><strong>魔法方法</strong>：Python 在特殊情况下使用的方法，如对象初始化。</p>\n<p><strong>类的实例化</strong>：使用类创建一个新对象。</p>\n<h3 id=\"126\">12.6　挑战练习</h3>\n<p>1．定义一个叫 <code>Apple</code> 的类，创建4个实例变量，表示苹果的4种属性。</p>\n<p>2．定义一个叫 <code>Circle</code> 的类，创建 <code>area</code> 方法计算其面积。然后创建一个 <code>Circle</code> 对象，调用其 <code>area</code> 方法，打印结果。可使用 Python 内置的 <code>math</code> 模块中的 <code>pi</code> 函数。</p>\n<p>3．定义一个叫 <code>Triangle</code> 的类，创建 <code>area</code> 方法计算并返回面积。然后创建一个 <code>Triangle</code> 对象，调用其 <code>area</code> 方法，打印结果。</p>\n<p>4．定义一个叫 <code>Hexagon</code> 的类，创建 <code>cacculate_perimeter</code> 方法，计算并返回其周长。然后创建一个 <code>Hexagon</code> 对象，调用其 <code>calculate_perimeter</code> 方法，并打印结果。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>面向对象</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#121\">12.1　状态</a></li>\n<li><a href=\"#122\">12.2　过程式编程</a></li>\n<li><a href=\"#123\">12.3　函数式编程</a></li>\n<li><a href=\"#124\">12.4　面向对象编程</a></li>\n<li><a href=\"#125\">12.5　术语表</a></li>\n<li><a href=\"#126\">12.6　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“只有两种编程语言：大家抱怨的和没人用的。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——本贾尼 · 斯特劳斯特鲁普（Bjarne Stroustrup）</span></p>\n</blockquote>\n<p><strong>编程范式</strong>（programming paradigm），即编程风格。当前有许多不同的编程范式。要达到专业程序员水平，则需要学习面向对象编程或函数式编程范式。本章中将学习过程式编程、函数式编程和面向对象编程，并着重介绍面向对象编程。</p>\n<h3 id=\"121\">12.1　状态</h3>\n<p>不同编程范式之间的根本区别之一，就是对<strong>状态</strong>（state）的处理。状态，是程序运行时其内部变量的值。<strong>全局状态</strong>（global state）是程序运行时其内部全局变量的值。</p>\n<h3 id=\"122\">12.2　过程式编程</h3>\n<p>本书第一部分的程序，使用的是<strong>过程式编程</strong>（procedural programming）：这种编程风格要求你编写一系列步骤来解决问题，每步都会改变程序的状态。在过程式编程中，写的是“先做这个，再做那个”这样的代码。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jv2rrl8</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  x = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">5</span>  y = <span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">6</span>  z = <span class=\"hljs-number\">8</span>\n<span class=\"hljs-number\">7</span>  xyz = x + y + z\n<span class=\"hljs-number\">8</span>  xyz\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">14</span>\n</code></pre>\n<p>上例中每行代码都改变了程序的状态。首先，定义了 <code>x</code>，随后定义 <code>y</code>，然后是 <code>z</code>。最后，定义 <code>xyz</code> 的值。</p>\n<p>在过程式编程时，我们将数据存储在全局变量中，并通过函数进行处理。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gldykam</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  rock = []\n<span class=\"hljs-number\">05</span>  country = []\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">collect_songs</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">09</span>      song = <span class=\"hljs-string\">\"Enter a song.\"</span>\n<span class=\"hljs-number\">10</span>      ask = <span class=\"hljs-string\">\"Type r or c. q to quit\"</span>\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>      <strong><span class=\"hljs-keyword\">while</span></strong> <span class=\"hljs-keyword\">True</span>:\n<span class=\"hljs-number\">14</span>          genre = input(ask)\n<span class=\"hljs-number\">15</span>          <strong><span class=\"hljs-keyword\">if</span></strong> genre == <span class=\"hljs-string\">\"q\"</span>:\n<span class=\"hljs-number\">16</span>              <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>          <strong><span class=\"hljs-keyword\">if</span></strong> genre == <span class=\"hljs-string\">\"r\"</span>:\n<span class=\"hljs-number\">20</span>              rk = input(song)\n<span class=\"hljs-number\">21</span>              rock.append(rk)\n<span class=\"hljs-number\">22</span>\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>          <strong><span class=\"hljs-keyword\">elif</span></strong> genre ==(<span class=\"hljs-string\">\"c\"</span>):\n<span class=\"hljs-number\">25</span>              cy = input(song)\n<span class=\"hljs-number\">26</span>              country.append(cy)\n<span class=\"hljs-number\">27</span>\n<span class=\"hljs-number\">28</span>\n<span class=\"hljs-number\">29</span>          <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">30</span>              print(<span class=\"hljs-string\">\"Invalid.\"</span>)\n<span class=\"hljs-number\">31</span>      <strong>print</strong>(rock)\n<span class=\"hljs-number\">32</span>      print(country)\n<span class=\"hljs-number\">33</span>\n<span class=\"hljs-number\">34</span>\n<span class=\"hljs-number\">35</span>  collect_songs()\n\n&gt;&gt; Type r <span class=\"hljs-keyword\">or</span> c. q to quit:</code></pre>\n<p>编写类似的简短程序时，使用过程式编程是没有什么问题的，但是由于我们将程序的状态都保存在全局变量中，如果程序慢慢变大就会碰到问题。因为随着程序规模扩大，可能会在多个函数中使用全局变量，我们很难记录都有哪些地方对一个全局变量进行了修改。例如，某个函数可能改变了一个全局变量的值，在后面的程序中又有一个函数改变了相同的变量，因为写第二个函数时程序员忘记了已经在第一个函数中做了修改。这种情况经常发生，会严重破坏程序的数据准确性。</p>\n<p>随着程序越来越复杂，全局变量的数量也逐渐增加。再加上程序需要不断添加新的功能，也需要修改全局变量，这样程序很快会变得无法维护。而且，这种编程方式也会有<strong>副作用</strong>（side effects），其中之一就是会改变全局变量的状态。使用过程式编程时，经常会碰到意料之外的副作用，比如意外递增某个变量两次。</p>\n<p>这些问题促使了面向对象编程和函数式编程的出现，二者采取了不同的方法来解决上述问题。</p>\n<h3 id=\"123\">12.3　函数式编程</h3>\n<p><strong>函数式编程</strong>（functional programming）源自拉姆达运算（lambda calculus）：世界上最小的通用编程语言（由数学家阿隆佐 · 邱奇发明）。函数式编程通过消除全局状态，解决了过程式编程中出现的问题。函数式程序员依靠的是不使用或不改变全局状态的函数，他们唯一使用的状态就是传给函数的参数。一个函数的结果通常被继续传给另一个函数。因此，这些程序员通过函数之间传递状态，避免了全局状态的问题，也因此消除了由此带来的副作用和其他问题。</p>\n<p>函数式编程的专业术语很多，有人下过一个还算精简的定义：“函数式代码有一个特征：没有副作用。它不依赖当前函数之外的数据，也不改变当前函数之外的数据。”并给出了一个带副作用的函数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gu9jpco</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  a = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">increment</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">8</span>      <strong><span class=\"hljs-keyword\">global</span></strong> a\n<span class=\"hljs-number\">9</span>      a += <span class=\"hljs-number\">1</span></code></pre>\n<p>还给出了一个不带副作用的函数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z27k2yl</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">increment</span><span class=\"hljs-params\">(a)</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-keyword\">return</span></strong> a + <span class=\"hljs-number\">1</span></code></pre>\n<p>第一个函数有副作用，因为它依赖函数之外的数据，并改变了当前函数之外的数据——递增了全局变量的值。第二个函数没有副作用，因为它没有依赖或修改自身之外的数据。</p>\n<p>函数式编程的一个优点，在于它消除了所有由全局状态引发的错误（函数式编程中不存在全局状态）。但是也有缺点，即部分问题更容易通过状态进行概念化。例如，设计一个包含全局状态的人机界面，比设计没有全局状态的人机界面要更简单。如果你要写一个程序，通过按钮改变用户看到画面的可见状态，用全局状态来编写该按钮会更简单。你可以创建一个全局变量，值为 True 时画面可见，值为 False 时则不可见。如果不使用全局状态，设计起来就比较困难。</p>\n<h3 id=\"124\">12.4　面向对象编程</h3>\n<p><strong>面向对象</strong>（object-oriented）编程范式也是通过消除全局状态来解决过程式编程引发的问题，但并不是用函数，而是用对象来保存状态。在面向对象编程中，<strong>类</strong>（class）定义了一系列相互之间可进行交互的对象。类是程序员对类似对象进行分类分组的一种手段。假设有一袋橘子，每个橘子是一个对象。所有的橘子都有类似的属性，如颜色和重量，但是这些属性的具体值则各不相同。这里就可以使用类对橘子进行建模，创建属性值不同的橘子对象。例如，可定义一个橘子类，既支持创建深色、重 10 盎司（约 283 克）的橘子对象，也支持创建浅色、重 12 盎司（约 340 克）的橘子对象。</p>\n<p>每个对象都是类的示例。如果定义了一个叫 Orange 的类，然后创建两个 Orange 对象，那么每个对象都是 Orange 类的实例；它们的数据类型相同，都是 Orange。对象和实例这两个术语可以替换使用。在定义类时，该类的所有实例是类似的：都拥有类中定义的属性，如颜色或种类，但是每个实例的具体属性值是不一样的。</p>\n<p>在 Python 中，类是一个复合语句，包含代码头和主体。可使用语法 <code>class [类名]: [代码主体]</code> 来定义类，其中<code>[类名]</code>是类的名称，<code>[代码主体]</code>是定义的类的具体代码。根据惯例，Python 中的类名都是以大写字母开头，且采用驼峰命名法，即如果类名由多个单词组成，每个单词的第一个字母都应该大写，如 <code>LikeThis</code>，而不是用下划线分隔（函数的命令惯例）。类中的代码主体可以是一个单一语句，或一个叫<strong>方法</strong>（method）的复合语句。方法类似于函数，但因为是在类中定义的，只能在类创建的对象上调用方法（如本书第一部分中在字符串上调用 <code>.upper()</code>）。方法的命名则遵循函数命名规则，都是小写，并用下划线分隔。</p>\n<p>方法的定义方式与函数定义方式相同，但有两处区别：一是必须在类的内部定义方法，二是必须接受至少一个参数（特殊情况除外）。按照惯例，方法的第一个参数总是被命名为 <code>self</code>。创建方法时，至少要定义一个参数，因为在对象上调用方法时，Python 会自动将调用方法的对象作为参数传入。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrmjape</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">6</span>          print(<span class=\"hljs-string\">\"Created!\"</span>)</code></pre>\n<p>可使用 <code>self</code> 定义<strong>实例变量</strong>（instance variable）：属于对象的变量。如果创建多个对象，各自都有不同的实例变量值。通过语法 <code>self.[变量名] = [变量值]</code> 定义实例变量。通常是在特殊方法 <code>__init__</code>（代表初始化）中定义实例变量，创建对象时 Python 会调用该方法。</p>\n<p>一个代表橘子的类的示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hrf6cus</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-keyword\">self</span>.color = c\n<span class=\"hljs-number\">8</span>          <strong>print</strong>(<span class=\"hljs-string\">\"Created!\"</span>)</code></pre>\n<p>创建 <code>Orange</code> 对象时（上例中没有创建），就会执行 <code>__init__</code> 中的代码，创建两个实例变量：<code>weight</code> 和 <code>color</code>。可以在类的方法中，和使用普通变量一样使用这些实例变量。创建 <code>Orange</code> 对象时，<code>__init__</code> 中的代码还会打印 <code>Created!</code>。双下划线包围的方法（如 <code>__init__</code>），被称为<strong>魔法方法</strong>（magic method），即 Python 用于创建对象等特殊用途的方法。</p>\n<p>创建新 <code>Orange</code> 对象的语法，与调用函数的语法类似：<code>[类名]([参数])</code>，将<code>[类名]</code>替换为想要用来创建对象的类的名称，<code>[参数]</code>替换为 <code>__init__</code> 接受的参数即可。这里不用传入 <code>self</code> 参数，Python 会自动传入。创建新对象的过程，也被称为<strong>创建类的实例</strong>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jlc7pvk</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          print(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">12</span>  print(or1)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; &lt;__main_<span class=\"hljs-number\">_</span>.Orange object at <span class=\"hljs-number\">0x101a787b8</span>&gt;</code></pre>\n<p>定义好类之后，接着用代码 <code>Orange(10, \"dark orange\")</code> 创建了一个 <code>Orange</code> 类的实例，程序会打印出 <code>Created!</code> 字样。然后，再打印新创建的 <code>Orange</code> 对象，Python 告诉我们它是一个 <code>Orange</code> 对象，并打印其在内存中的地址（你在计算机上运行时得到的结果，将不同于本例中的结果）。</p>\n<p>创建对象之后，可使用语法<code>[对象名].[变量名]</code>获取实例变量的值。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/grwzeo4</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          <strong>print</strong>(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">12</span>  print(or1.weight)\n<span class=\"hljs-number\">13</span>  <strong>print</strong>(or1.color)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; <span class=\"hljs-number\">10</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> dark orange</code></pre>\n<p>也可使用语法<code>[对象名].[变量名] = [新的值]</code>改变实例变量的值：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jsxgw44</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          <strong>print</strong>(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">12</span>  or1.weight = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">13</span>  or1.color = <span class=\"hljs-string\">\"light orange\"</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  print(or1.weight)\n<span class=\"hljs-number\">17</span>  print(or1.color)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; <span class=\"hljs-number\">100</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> light orange</code></pre>\n<p>尽管实例变量 <code>color</code> 和 <code>weight</code> 一开始被赋予了值 <code>\"dark orange\"</code> 和 <code>10</code>，但是我们还是能将其改为 <code>\"light orange\"</code> 和 <code>100</code>。</p>\n<p>可以使用 <code>Orange</code> 类创建多个橘子对象。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jrmxlmo</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, c)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.weight = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.color = c\n08          print(<span class=\"hljs-string\">\"Created!\"</span>)\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  or1 = Orange(<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">\"light orange\"</span>)\n<span class=\"hljs-number\">12</span>  or2 = Orange(<span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">\"dark orange\"</span>)\n<span class=\"hljs-number\">13</span>  or3 = Orange(<span class=\"hljs-number\">14</span>, <span class=\"hljs-string\">\"yellow\"</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Created!\n&gt;&gt; Created!\n&gt;&gt; Created!</code></pre>\n<p>橘子除了颜色和重量等属性之外，还有其他的属性。它可能还会腐烂，这些都可以通过方法来模拟。下面的代码为 <code>Orange</code> 对象增加了腐烂的属性：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zcp32pz</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Orange</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, c)</span>:</span>\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-string\">\"\"\"重量的单位是盎司\"\"\"</span>\n<span class=\"hljs-number\">07</span>          self.weight = w\n<span class=\"hljs-number\">08</span>          self.color = c\n<span class=\"hljs-number\">09</span>          self.mold = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">10</span>          print(<span class=\"hljs-string\">\"Created!\"</span>)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">rot</span><span class=\"hljs-params\">(self, days, temp)</span>:</span>\n<span class=\"hljs-number\">14</span>          self.mold = days * temp\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>  orange = Orange(<span class=\"hljs-number\">6</span>, <span class=\"hljs-string\">\"orange\"</span>)\n<span class=\"hljs-number\">18</span>  <strong>print</strong>(orange.mold)\n<span class=\"hljs-number\">19</span>  orange.rot(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">98</span>)\n<span class=\"hljs-number\">20</span>  <strong>print</strong>(orange.mold)\n\n&gt;&gt; Created!\n&gt;&gt; <span class=\"hljs-number\">0</span>\n&gt;&gt; <span class=\"hljs-number\">98.0</span></code></pre>\n<p><code>rot</code> 方法接受两个参数：橘子被摘下的天数，以及这些天的平均温度。调用该方法时，其使用公式改变了变量 <code>mold</code> 的值，这是因为可以在任意方法中改变实例变量的值。现在，橘子就可以腐烂了。</p>\n<p>可以在类中定义多个方法。下面的代码是一个关于长方形的类，包含一个计算面积的方法和一个改变大小的方法：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j28qoox</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span>():</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.len = l\n08\n09\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">11</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.len\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">change_size</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n<span class=\"hljs-number\">15</span>          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-keyword\">self</span>.len = l\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>  rectangle = Rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">20</span>  <strong>print</strong>(rectangle.area())\n<span class=\"hljs-number\">21</span>  rectangle.change_size(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">40</span>)\n<span class=\"hljs-number\">22</span>  <strong>print</strong>(rectangle.area())\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">200</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">800</span></code></pre>\n<p>本例中，<code>Rectangle</code> 对象有两个实例变量：<code>len</code> 和 <code>width</code>。<code>area</code> 方法将两个实例变量相乘，返回 <code>Rectangle</code> 的面积；<code>change_size</code> 方法为实例变量赋予调用者新传入参数的值，从而改变了大小。</p>\n<p>面向对象编程有多个优点：鼓励代码复用，从而减少了开发和维护的时间；还鼓励拆解问题，使代码更容易维护。但有一个缺点便是编写程序时要多下些功夫，因为要做很多的事前规划和设计。</p>\n<h3 id=\"125\">12.5　术语表</h3>\n<p><strong>编程范式</strong>：编程风格。</p>\n<p><strong>状态</strong>：程序运行时其内变量的值。</p>\n<p><strong>全局状态</strong>：程序运行时其内全局变量的值。</p>\n<p><strong>过程式编程</strong>：该编程风格要求编写一系列步骤来解决问题，每一步都会改变程序的状态。</p>\n<p><strong>函数式编程</strong>：函数式编程通过函数传递消除了全局状态，解决了过程式编程中出现的问题。</p>\n<p><strong>副作用</strong>：改变全局变量的值。</p>\n<p><strong>面向对象</strong>：定义相互之间可交互的对象的编程范式。</p>\n<p><strong>类</strong>：程序员对类似对象进行分类分组的一种手段。</p>\n<p><strong>方法</strong>：类似函数，但其是在类中定义的，只能在类创建的对象上调用方法。</p>\n<p><strong>实例</strong>：每个对象都是类的一个实例。类的每个实例与该类的其他实例拥有相同的数据类型。</p>\n<p><strong>实例变量</strong>：属于对象的变量。</p>\n<p><strong>魔法方法</strong>：Python 在特殊情况下使用的方法，如对象初始化。</p>\n<p><strong>类的实例化</strong>：使用类创建一个新对象。</p>\n<h3 id=\"126\">12.6　挑战练习</h3>\n<p>1．定义一个叫 <code>Apple</code> 的类，创建4个实例变量，表示苹果的4种属性。</p>\n<p>2．定义一个叫 <code>Circle</code> 的类，创建 <code>area</code> 方法计算其面积。然后创建一个 <code>Circle</code> 对象，调用其 <code>area</code> 方法，打印结果。可使用 Python 内置的 <code>math</code> 模块中的 <code>pi</code> 函数。</p>\n<p>3．定义一个叫 <code>Triangle</code> 的类，创建 <code>area</code> 方法计算并返回面积。然后创建一个 <code>Triangle</code> 对象，调用其 <code>area</code> 方法，打印结果。</p>\n<p>4．定义一个叫 <code>Hexagon</code> 的类，创建 <code>cacculate_perimeter</code> 方法，计算并返回其周长。然后创建一个 <code>Hexagon</code> 对象，调用其 <code>calculate_perimeter</code> 方法，并打印结果。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>"},{"title":"git commit","_content":"\n# Commit messages guide\n\n一个了解 commit 信息重要性和如何更好地编写它的指南。\n\n它可以帮助你了解什么是 commit、为什么编写好的信息很重要、最好的实践案例以及一些技巧来计划和（重新）编写良好的 commit 历史。\n\n## 什么是“commit”？\n\n简单来讲，commit 就是在本地存储库中编写的文件的 _快照_。与印象中不同的是，[git 不仅存储不同版本文件之间的差异，还存储了所有文件的完整版本](https://git-scm.com/book/eo/v1/Ekkomenci-Git-Basics#Snapshots,-Not-Differences)。对于两个 commit 之间没有被修改的文件，git 只存储指向前一个完全相同的文件的链接。\n\n下面的图片展示了 git 如何随着时间存储数据，其中每个 “Version” 都是一个 commit：\n\n![](https://i.stack.imgur.com/AQ5TG.png)\n\n## 为什么 commit 信息很重要？\n\n- 加快和简化代码审查（code reviews）\n- 帮助理解一个更改\n- 解释不能只由代码描述的“为什么”\n- 帮助未来的维护人员弄清楚为什么以及如何产生的更改，从而使故障排查和调试更容易\n\n为了最大化这些结果，我们可以使用下一节中描述的一些好的实践和标准。\n\n## 好的实践\n\n这些是从我的经验、互联网文章和其他指南中整理的一些实践经验。如果你有更多的经验（或持不同意见），请随时提交 Pull Request 提供帮助。\n\n### 使用祈使句\n\n```\n# Good\nUse InventoryBackendPool to retrieve inventory backend\n用 InventoryBackendPool 获取库存\n```\n\n```\n# Bad\nUsed InventoryBackendPool to retrieve inventory backend \nInventoryBackendPool 被用于获取库存\n```\n\n_不过为什么要使用祈使句呢？_\n\ncommit 信息描述的是引用的变更部分实际上**做**了什么，它的效果，而不是因此被做了什么。\n\n[Chris Beams 的这篇优秀的文章](https://chris.beams.io/posts/git-commit/)为我们提供了一些简单的句子，可以帮助我们用祈使句编写更好的 commit 信息：\n\n```\nIf applied, this commit will <commit message> \n如获许可，此提交将会 <提交备注>\n```\n\n例子：\n\n```\n# Good\nIf applied, this commit will use InventoryBackendPool to retrieve inventory backend\n如获许可，此提交将使用 InventoryBackendPool 获取库存\n```\n\n```\n# Bad\nIf applied, this commit will used InventoryBackendPool to retrieve inventory backend \n如获许可，InventoryBackendPool 将会被用于获取库存\n```\n\n### 首字母大写\n\n```\n# Good\nAdd `use` method to Credit model\n```\n\n```\n# Bad\nadd `use` method to Credit model\n```\n\n首字母大写的原因是遵守英文句子开头使用大写字母的语法规则。\n\n这种做法可能因人而异、因团队而异、甚至因语言而异。不管是否大写，重要的是要制定一个标准并遵守它。\n\n### 尽量做到只看注释便可明白而无需查看变更内容\n\n```\n# Good\nAdd `use` method to Credit model \n为 Credit 模块添加 `use` 方法\n\n```\n\n```\n# Bad\nAdd `use` method \n添加 `use` 方法\n```\n\n```\n# Good\nIncrease left padding between textbox and layout frame \n在 textbox 和 layout frame 之间添加向左对齐\n```\n\n```\n# Bad\nAdjust css \n就改了下 css\n```\n\n它在许多场景中（例如多次 commit、多个更改和重构）非常有用，可以帮助审查人员理解提交者的想法。\n\n### 使用信息本身来解释“原因”、“目的”、“手段”和其他的细节\n\n```\n# Good\nFix method name of InventoryBackend child classes\n\nClasses derived from InventoryBackend were not\nrespecting the base class interface.\n\nIt worked because the cart was calling the backend implementation\nincorrectly.\n```\n\n```\n# Good\nSerialize and deserialize credits to json in Cart\n\nConvert the Credit instances to dict for two main reasons:\n\n  - Pickle relies on file path for classes and we do not want to break up\n    everything if a refactor is needed\n  - Dict and built-in types are pickleable by default\n```\n\n```\n# Good\nAdd `use` method to Credit\n\nChange from namedtuple to class because we need to\nsetup a new attribute (in_use_amount) with a new value\n```\n\n信息的主题和正文之间用空行隔开。其他空行被视为信息正文的一部分。\n\n像“-”、“*”和“\\”这样的字符可以提高可读性。\n\n### 避免使用无上下文的信息\n\n```\n# Bad\nFix this\n\nFix stuff\n\nIt should work now\n\nChange stuff\n\nAdjust css\n```\n\n### 限制每行字数\n\n[这里建议](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines)主题最多使用50个字符，正文最多使用72个字符。\n\n### 保持语言的一致性\n\n对于项目所有者而言：选择一种语言并使用该语言编写所有的 commit 信息。理想情况下，它应与代码注释、默认翻译区域（用于本地化项目）等相匹配。\n\n对于贡献者而言：使用与现有 commit 历史相同的语言编写 commit 信息。\n\n```\n# Good\nababab Add `use` method to Credit model\nefefef Use InventoryBackendPool to retrieve inventory backend\nbebebe Fix method name of InventoryBackend child classes\n```\n\n```\n# Good (Portuguese example)\nababab Adiciona o método `use` ao model Credit\nefefef Usa o InventoryBackendPool para recuperar o backend de estoque\nbebebe Corrige nome de método na classe InventoryBackend\n```\n\n```\n# Bad (mixes English and Portuguese)\nababab Usa o InventoryBackendPool para recuperar o backend de estoque\nefefef Add `use` method to Credit model\ncdcdcd Agora vai\n```\n\n### 模板\n\n下面是参考模板，最初由 [Tim Pope](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html) 编写，出现在 [_Pro Git Book_](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project) 中。\n\n```\n用 50 左右或更少的字符描述更改\n\n如有必要，可提供更详细的补充说明，并尽可能将其限定在每行 72 个字符左右。\n在某些情况下，第一行被视为 commit 的主题，文本其余部分被作为正文。\n因此，将主题从正文分割出来的空白行就显得至关重要(除非完全省略正文)。\n如若不然，在使用命令行，如 “log”，“shortlog” 以及 “rebase” 的时候，将会很容易混淆。\n\n解释当前 commit 所解决的问题。\n请重点描述产生此更改的原因，而非手段（代码解释了一切）。\n是否存在副作用以及其他不直观的影响？\n请在这里将其解释清楚。\n\n接下来请另起一行。\n\n - 也可以使用列举要点的格式。\n\n - 通常使用连字符(-)或星号(*)作为要点段落标记，标记与文本之间留一空格，各要点之间留一空行。但这取决于你们的约定。\n\n如果你使用问题跟踪器，请将对它们的引用放在底部，如下所示:\n\nResolves: #123\nSee also: #456, #789\n```\n\n## Rebase vs. Merge\n\n这部分是 Atlassian 的优秀教程(TL;DR)——[\"Merging vs. Rebasing\"](https://www.atlassian.com/git/tutorials/merging-vs-rebasing) 的精华。\n\n![](https://wac-cdn.atlassian.com/dam/jcr:01b0b04e-64f3-4659-af21-c4d86bc7cb0b/01.svg?cdnVersion=hq)\n\n### Rebase\n\n**TL;DR:** 将你的分支逐个应用于基本分支，生成新树。\n\n![](https://wac-cdn.atlassian.com/dam/jcr:5b153a22-38be-40d0-aec8-5f2fffc771e5/03.svg?cdnVersion=hq)\n\n### Merge\n\n**TL;DR:** 创建一个新的 commit，称为 _merge commit_（合并提交），其具有两个分支之间的差异。\n\n![](https://wac-cdn.atlassian.com/dam/jcr:e229fef6-2c2f-4a4f-b270-e1e1baa94055/02.svg?cdnVersion=hq)\n\n### 为什么一些人更喜欢 rebase 而非 merge？\n\n我特别喜欢 rebase 而不是 merge。原因有以下几点：\n\n* 它的历史信息很\"干净\"，没有无用的合并 commit。\n* _所见即所得_，即在代码审查中，所有的更改都能在特定的、有标题的 commit 中找到，避免了隐藏在合并 commit 中的修改。\n* 通常 merge 是由提交者实行的，并会为每个转换成 commit 的 merge 书写准确的信息。\n    * 通常我们不会深挖和复查 merge commit，因此尽量避免使用 merge commit，并确保个变化点都有它们所属的 commit 。\n\n### 什么时候 squash\n\n“Squashing” 是将一系列 commit 压缩成一个的过程。\n\n它在某些情况下很有用，例如：\n\n- 减少那些很少甚至没有上下文（拼写错误、格式化、缺失内容）的 commit\n- 将单独的更改连接在一起使它们更通俗易懂\n- 重写 _work in progress_ 的 commit \n\n### 什么时候避免 rebase 或 squash\n\n避免在多人共同开发的公共 commit 或共享分支上使用 rebase 和 squash。rebase 和 squash 会改写历史记录并覆盖当前 commit，在共享分支的 commit（即推送到远程仓库或来自其他分支的 commit）上执行这些操作可能会引起混乱，由于分支产生分歧及冲突，合作者可能会因此失去他们（本地和远程）的更改。\n\n## 有用的 git 命令\n\n### rebase -i\n\n使用它来压缩提交（squash commits）、 编写信息、 重写/删除/重新编排 commit 等。\n\n```\npick 002a7cc Improve description and update document title\npick 897f66d Add contributing section\npick e9549cf Add a section of Available languages\npick ec003aa Add \"What is a commit\" section\"\npick bbe5361 Add source referencing as a point of help wanted\npick b71115e Add a section explaining the importance of commit messages\npick 669bf2b Add \"Good practices\" section\npick d8340d7 Add capitalization of first letter practice\npick 925f42b Add a practice to encourage good descriptions\npick be05171 Add a section showing good uses of message body\npick d115bb8 Add generic messages and column limit sections\npick 1693840 Add a section about language consistency\npick 80c5f47 Add commit message template\npick 8827962 Fix triple \"m\" typo\npick 9b81c72 Add \"Rebase vs Merge\" section\n\n# Rebase 9e6dc75..9b81c72 onto 9e6dc75 (15 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into the previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n```\n\n#### fixup\n\n使用它可以轻松清理 commit，而不需要复杂的 rebase。[这篇文章](http://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html)提供了很好的示例，说明了如何以及何时进行此操作。\n\n### cherry-pick\n\n它在你 commit 到了错误的分支而不需要重新编码时非常有用。\n\n例子：\n\n```\n$ git cherry-pick 790ab21\n[master 094d820] Fix English grammar in Contributing\n Date: Sun Feb 25 23:14:23 2018 -0300\n 1 file changed, 1 insertion(+), 1 deletion(-)\n```\n\n### add/checkout/reset [--patch | -p]\n\n假设我们有以下冲突：\n\n```diff\ndiff --git a/README.md b/README.md\nindex 7b45277..6b1993c 100644\n--- a/README.md\n+++ b/README.md\n@@ -186,10 +186,13 @@ bebebe Corrige nome de método na classe InventoryBackend\n ``\n # Bad (mixes English and Portuguese)\n ababab Usa o InventoryBackendPool para recuperar o backend de estoque\n-efefef Add `use` method to Credit model\n cdcdcd Agora vai\n ``\n\n+### Template\n+\n+This is a template, [written originally by Tim Pope](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html), which appears in the [_Pro Git Book_](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project).\n+\n ## Contributing\n\n Any kind of help would be appreciated. Example of topics that you can help me with:\n@@ -202,3 +205,4 @@ Any kind of help would be appreciated. Example of topics that you can help me wi\n\n - [How to Write a Git Commit Message](https://chris.beams.io/posts/git-commit/)\n - [Pro Git Book - Commit guidelines](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines)\n+- [A Note About Git Commit Messages](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n```\n\n我们可以使用 `git add -p` 只添加我们想要的补丁，而无需更改已有代码。\n它在将一个大的更改分解为小的 commit 或 reset/checkout 特定的更改时很有用。\n\n```\nStage this hunk [y,n,q,a,d,/,j,J,g,s,e,?]? s\nSplit into 2 hunks.\n```\n\n#### hunk 1\n\n```diff\n@@ -186,7 +186,6 @@\n ``\n # Bad (mixes English and Portuguese)\n ababab Usa o InventoryBackendPool para recuperar o backend de estoque\n-efefef Add `use` method to Credit model\n cdcdcd Agora vai\n ``\n\nStage this hunk [y,n,q,a,d,/,j,J,g,e,?]?\n```\n\n#### hunk 2\n\n```diff\n@@ -190,6 +189,10 @@\n ``\n cdcdcd Agora vai\n ``\n\n+### Template\n+\n+This is a template, [written originally by Tim Pope](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html), which appears in the [_Pro Git Book_](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project).\n+\n ## Contributing\n\n Any kind of help would be appreciated. Example of topics that you can help me with:\nStage this hunk [y,n,q,a,d,/,K,j,J,g,e,?]?\n\n```\n\n#### hunk 3\n\n```diff\n@@ -202,3 +205,4 @@ Any kind of help would be appreciated. Example of topics that you can help me wi\n\n - [How to Write a Git Commit Message](https://chris.beams.io/posts/git-commit/)\n - [Pro Git Book - Commit guidelines](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines)\n+- [A Note About Git Commit Messages](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n```\n\n## 其他有趣的内容\n\nhttps://whatthecommit.com/\n\n## 喜欢它吗？\n\n[点赞！](https://saythanks.io/to/RomuloOliveira)\n\n## 贡献\n\n感谢任何形式的帮助。例如：\n\n- 语法和拼写的纠正\n- 翻译成其他语言\n- 原引用的改进\n- 不正确或不完整的信息\n\n## 灵感、来源以及扩展阅读\n\n- [如何编写 Git Commit Message](https://chris.beams.io/posts/git-commit/)\n- [Pro Git Book - Commit 指南](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines)\n- [关于 Git Commit Messages 的说明](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n- [合并与变基](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n- [Pro Git Book - 改写历史](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History)\n\n## [原文地址](https://github.com/RomuloOliveira/commit-messages-guide/blob/master/README_zh-CN.md)","source":"_posts/git/commit.md","raw":"---\ntitle: git commit\n---\n\n# Commit messages guide\n\n一个了解 commit 信息重要性和如何更好地编写它的指南。\n\n它可以帮助你了解什么是 commit、为什么编写好的信息很重要、最好的实践案例以及一些技巧来计划和（重新）编写良好的 commit 历史。\n\n## 什么是“commit”？\n\n简单来讲，commit 就是在本地存储库中编写的文件的 _快照_。与印象中不同的是，[git 不仅存储不同版本文件之间的差异，还存储了所有文件的完整版本](https://git-scm.com/book/eo/v1/Ekkomenci-Git-Basics#Snapshots,-Not-Differences)。对于两个 commit 之间没有被修改的文件，git 只存储指向前一个完全相同的文件的链接。\n\n下面的图片展示了 git 如何随着时间存储数据，其中每个 “Version” 都是一个 commit：\n\n![](https://i.stack.imgur.com/AQ5TG.png)\n\n## 为什么 commit 信息很重要？\n\n- 加快和简化代码审查（code reviews）\n- 帮助理解一个更改\n- 解释不能只由代码描述的“为什么”\n- 帮助未来的维护人员弄清楚为什么以及如何产生的更改，从而使故障排查和调试更容易\n\n为了最大化这些结果，我们可以使用下一节中描述的一些好的实践和标准。\n\n## 好的实践\n\n这些是从我的经验、互联网文章和其他指南中整理的一些实践经验。如果你有更多的经验（或持不同意见），请随时提交 Pull Request 提供帮助。\n\n### 使用祈使句\n\n```\n# Good\nUse InventoryBackendPool to retrieve inventory backend\n用 InventoryBackendPool 获取库存\n```\n\n```\n# Bad\nUsed InventoryBackendPool to retrieve inventory backend \nInventoryBackendPool 被用于获取库存\n```\n\n_不过为什么要使用祈使句呢？_\n\ncommit 信息描述的是引用的变更部分实际上**做**了什么，它的效果，而不是因此被做了什么。\n\n[Chris Beams 的这篇优秀的文章](https://chris.beams.io/posts/git-commit/)为我们提供了一些简单的句子，可以帮助我们用祈使句编写更好的 commit 信息：\n\n```\nIf applied, this commit will <commit message> \n如获许可，此提交将会 <提交备注>\n```\n\n例子：\n\n```\n# Good\nIf applied, this commit will use InventoryBackendPool to retrieve inventory backend\n如获许可，此提交将使用 InventoryBackendPool 获取库存\n```\n\n```\n# Bad\nIf applied, this commit will used InventoryBackendPool to retrieve inventory backend \n如获许可，InventoryBackendPool 将会被用于获取库存\n```\n\n### 首字母大写\n\n```\n# Good\nAdd `use` method to Credit model\n```\n\n```\n# Bad\nadd `use` method to Credit model\n```\n\n首字母大写的原因是遵守英文句子开头使用大写字母的语法规则。\n\n这种做法可能因人而异、因团队而异、甚至因语言而异。不管是否大写，重要的是要制定一个标准并遵守它。\n\n### 尽量做到只看注释便可明白而无需查看变更内容\n\n```\n# Good\nAdd `use` method to Credit model \n为 Credit 模块添加 `use` 方法\n\n```\n\n```\n# Bad\nAdd `use` method \n添加 `use` 方法\n```\n\n```\n# Good\nIncrease left padding between textbox and layout frame \n在 textbox 和 layout frame 之间添加向左对齐\n```\n\n```\n# Bad\nAdjust css \n就改了下 css\n```\n\n它在许多场景中（例如多次 commit、多个更改和重构）非常有用，可以帮助审查人员理解提交者的想法。\n\n### 使用信息本身来解释“原因”、“目的”、“手段”和其他的细节\n\n```\n# Good\nFix method name of InventoryBackend child classes\n\nClasses derived from InventoryBackend were not\nrespecting the base class interface.\n\nIt worked because the cart was calling the backend implementation\nincorrectly.\n```\n\n```\n# Good\nSerialize and deserialize credits to json in Cart\n\nConvert the Credit instances to dict for two main reasons:\n\n  - Pickle relies on file path for classes and we do not want to break up\n    everything if a refactor is needed\n  - Dict and built-in types are pickleable by default\n```\n\n```\n# Good\nAdd `use` method to Credit\n\nChange from namedtuple to class because we need to\nsetup a new attribute (in_use_amount) with a new value\n```\n\n信息的主题和正文之间用空行隔开。其他空行被视为信息正文的一部分。\n\n像“-”、“*”和“\\”这样的字符可以提高可读性。\n\n### 避免使用无上下文的信息\n\n```\n# Bad\nFix this\n\nFix stuff\n\nIt should work now\n\nChange stuff\n\nAdjust css\n```\n\n### 限制每行字数\n\n[这里建议](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines)主题最多使用50个字符，正文最多使用72个字符。\n\n### 保持语言的一致性\n\n对于项目所有者而言：选择一种语言并使用该语言编写所有的 commit 信息。理想情况下，它应与代码注释、默认翻译区域（用于本地化项目）等相匹配。\n\n对于贡献者而言：使用与现有 commit 历史相同的语言编写 commit 信息。\n\n```\n# Good\nababab Add `use` method to Credit model\nefefef Use InventoryBackendPool to retrieve inventory backend\nbebebe Fix method name of InventoryBackend child classes\n```\n\n```\n# Good (Portuguese example)\nababab Adiciona o método `use` ao model Credit\nefefef Usa o InventoryBackendPool para recuperar o backend de estoque\nbebebe Corrige nome de método na classe InventoryBackend\n```\n\n```\n# Bad (mixes English and Portuguese)\nababab Usa o InventoryBackendPool para recuperar o backend de estoque\nefefef Add `use` method to Credit model\ncdcdcd Agora vai\n```\n\n### 模板\n\n下面是参考模板，最初由 [Tim Pope](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html) 编写，出现在 [_Pro Git Book_](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project) 中。\n\n```\n用 50 左右或更少的字符描述更改\n\n如有必要，可提供更详细的补充说明，并尽可能将其限定在每行 72 个字符左右。\n在某些情况下，第一行被视为 commit 的主题，文本其余部分被作为正文。\n因此，将主题从正文分割出来的空白行就显得至关重要(除非完全省略正文)。\n如若不然，在使用命令行，如 “log”，“shortlog” 以及 “rebase” 的时候，将会很容易混淆。\n\n解释当前 commit 所解决的问题。\n请重点描述产生此更改的原因，而非手段（代码解释了一切）。\n是否存在副作用以及其他不直观的影响？\n请在这里将其解释清楚。\n\n接下来请另起一行。\n\n - 也可以使用列举要点的格式。\n\n - 通常使用连字符(-)或星号(*)作为要点段落标记，标记与文本之间留一空格，各要点之间留一空行。但这取决于你们的约定。\n\n如果你使用问题跟踪器，请将对它们的引用放在底部，如下所示:\n\nResolves: #123\nSee also: #456, #789\n```\n\n## Rebase vs. Merge\n\n这部分是 Atlassian 的优秀教程(TL;DR)——[\"Merging vs. Rebasing\"](https://www.atlassian.com/git/tutorials/merging-vs-rebasing) 的精华。\n\n![](https://wac-cdn.atlassian.com/dam/jcr:01b0b04e-64f3-4659-af21-c4d86bc7cb0b/01.svg?cdnVersion=hq)\n\n### Rebase\n\n**TL;DR:** 将你的分支逐个应用于基本分支，生成新树。\n\n![](https://wac-cdn.atlassian.com/dam/jcr:5b153a22-38be-40d0-aec8-5f2fffc771e5/03.svg?cdnVersion=hq)\n\n### Merge\n\n**TL;DR:** 创建一个新的 commit，称为 _merge commit_（合并提交），其具有两个分支之间的差异。\n\n![](https://wac-cdn.atlassian.com/dam/jcr:e229fef6-2c2f-4a4f-b270-e1e1baa94055/02.svg?cdnVersion=hq)\n\n### 为什么一些人更喜欢 rebase 而非 merge？\n\n我特别喜欢 rebase 而不是 merge。原因有以下几点：\n\n* 它的历史信息很\"干净\"，没有无用的合并 commit。\n* _所见即所得_，即在代码审查中，所有的更改都能在特定的、有标题的 commit 中找到，避免了隐藏在合并 commit 中的修改。\n* 通常 merge 是由提交者实行的，并会为每个转换成 commit 的 merge 书写准确的信息。\n    * 通常我们不会深挖和复查 merge commit，因此尽量避免使用 merge commit，并确保个变化点都有它们所属的 commit 。\n\n### 什么时候 squash\n\n“Squashing” 是将一系列 commit 压缩成一个的过程。\n\n它在某些情况下很有用，例如：\n\n- 减少那些很少甚至没有上下文（拼写错误、格式化、缺失内容）的 commit\n- 将单独的更改连接在一起使它们更通俗易懂\n- 重写 _work in progress_ 的 commit \n\n### 什么时候避免 rebase 或 squash\n\n避免在多人共同开发的公共 commit 或共享分支上使用 rebase 和 squash。rebase 和 squash 会改写历史记录并覆盖当前 commit，在共享分支的 commit（即推送到远程仓库或来自其他分支的 commit）上执行这些操作可能会引起混乱，由于分支产生分歧及冲突，合作者可能会因此失去他们（本地和远程）的更改。\n\n## 有用的 git 命令\n\n### rebase -i\n\n使用它来压缩提交（squash commits）、 编写信息、 重写/删除/重新编排 commit 等。\n\n```\npick 002a7cc Improve description and update document title\npick 897f66d Add contributing section\npick e9549cf Add a section of Available languages\npick ec003aa Add \"What is a commit\" section\"\npick bbe5361 Add source referencing as a point of help wanted\npick b71115e Add a section explaining the importance of commit messages\npick 669bf2b Add \"Good practices\" section\npick d8340d7 Add capitalization of first letter practice\npick 925f42b Add a practice to encourage good descriptions\npick be05171 Add a section showing good uses of message body\npick d115bb8 Add generic messages and column limit sections\npick 1693840 Add a section about language consistency\npick 80c5f47 Add commit message template\npick 8827962 Fix triple \"m\" typo\npick 9b81c72 Add \"Rebase vs Merge\" section\n\n# Rebase 9e6dc75..9b81c72 onto 9e6dc75 (15 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into the previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n```\n\n#### fixup\n\n使用它可以轻松清理 commit，而不需要复杂的 rebase。[这篇文章](http://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html)提供了很好的示例，说明了如何以及何时进行此操作。\n\n### cherry-pick\n\n它在你 commit 到了错误的分支而不需要重新编码时非常有用。\n\n例子：\n\n```\n$ git cherry-pick 790ab21\n[master 094d820] Fix English grammar in Contributing\n Date: Sun Feb 25 23:14:23 2018 -0300\n 1 file changed, 1 insertion(+), 1 deletion(-)\n```\n\n### add/checkout/reset [--patch | -p]\n\n假设我们有以下冲突：\n\n```diff\ndiff --git a/README.md b/README.md\nindex 7b45277..6b1993c 100644\n--- a/README.md\n+++ b/README.md\n@@ -186,10 +186,13 @@ bebebe Corrige nome de método na classe InventoryBackend\n ``\n # Bad (mixes English and Portuguese)\n ababab Usa o InventoryBackendPool para recuperar o backend de estoque\n-efefef Add `use` method to Credit model\n cdcdcd Agora vai\n ``\n\n+### Template\n+\n+This is a template, [written originally by Tim Pope](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html), which appears in the [_Pro Git Book_](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project).\n+\n ## Contributing\n\n Any kind of help would be appreciated. Example of topics that you can help me with:\n@@ -202,3 +205,4 @@ Any kind of help would be appreciated. Example of topics that you can help me wi\n\n - [How to Write a Git Commit Message](https://chris.beams.io/posts/git-commit/)\n - [Pro Git Book - Commit guidelines](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines)\n+- [A Note About Git Commit Messages](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n```\n\n我们可以使用 `git add -p` 只添加我们想要的补丁，而无需更改已有代码。\n它在将一个大的更改分解为小的 commit 或 reset/checkout 特定的更改时很有用。\n\n```\nStage this hunk [y,n,q,a,d,/,j,J,g,s,e,?]? s\nSplit into 2 hunks.\n```\n\n#### hunk 1\n\n```diff\n@@ -186,7 +186,6 @@\n ``\n # Bad (mixes English and Portuguese)\n ababab Usa o InventoryBackendPool para recuperar o backend de estoque\n-efefef Add `use` method to Credit model\n cdcdcd Agora vai\n ``\n\nStage this hunk [y,n,q,a,d,/,j,J,g,e,?]?\n```\n\n#### hunk 2\n\n```diff\n@@ -190,6 +189,10 @@\n ``\n cdcdcd Agora vai\n ``\n\n+### Template\n+\n+This is a template, [written originally by Tim Pope](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html), which appears in the [_Pro Git Book_](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project).\n+\n ## Contributing\n\n Any kind of help would be appreciated. Example of topics that you can help me with:\nStage this hunk [y,n,q,a,d,/,K,j,J,g,e,?]?\n\n```\n\n#### hunk 3\n\n```diff\n@@ -202,3 +205,4 @@ Any kind of help would be appreciated. Example of topics that you can help me wi\n\n - [How to Write a Git Commit Message](https://chris.beams.io/posts/git-commit/)\n - [Pro Git Book - Commit guidelines](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines)\n+- [A Note About Git Commit Messages](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n```\n\n## 其他有趣的内容\n\nhttps://whatthecommit.com/\n\n## 喜欢它吗？\n\n[点赞！](https://saythanks.io/to/RomuloOliveira)\n\n## 贡献\n\n感谢任何形式的帮助。例如：\n\n- 语法和拼写的纠正\n- 翻译成其他语言\n- 原引用的改进\n- 不正确或不完整的信息\n\n## 灵感、来源以及扩展阅读\n\n- [如何编写 Git Commit Message](https://chris.beams.io/posts/git-commit/)\n- [Pro Git Book - Commit 指南](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines)\n- [关于 Git Commit Messages 的说明](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n- [合并与变基](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n- [Pro Git Book - 改写历史](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History)\n\n## [原文地址](https://github.com/RomuloOliveira/commit-messages-guide/blob/master/README_zh-CN.md)","slug":"git/commit","published":1,"date":"2019-06-10T09:01:27.637Z","updated":"2019-06-10T09:01:27.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwq5dc5r0000z8h7e71afbsw","content":"<h1 id=\"Commit-messages-guide\"><a href=\"#Commit-messages-guide\" class=\"headerlink\" title=\"Commit messages guide\"></a>Commit messages guide</h1><p>一个了解 commit 信息重要性和如何更好地编写它的指南。</p>\n<p>它可以帮助你了解什么是 commit、为什么编写好的信息很重要、最好的实践案例以及一些技巧来计划和（重新）编写良好的 commit 历史。</p>\n<h2 id=\"什么是“commit”？\"><a href=\"#什么是“commit”？\" class=\"headerlink\" title=\"什么是“commit”？\"></a>什么是“commit”？</h2><p>简单来讲，commit 就是在本地存储库中编写的文件的 _快照_。与印象中不同的是，<a href=\"https://git-scm.com/book/eo/v1/Ekkomenci-Git-Basics#Snapshots,-Not-Differences\" target=\"_blank\" rel=\"noopener\">git 不仅存储不同版本文件之间的差异，还存储了所有文件的完整版本</a>。对于两个 commit 之间没有被修改的文件，git 只存储指向前一个完全相同的文件的链接。</p>\n<p>下面的图片展示了 git 如何随着时间存储数据，其中每个 “Version” 都是一个 commit：</p>\n<p><img src=\"https://i.stack.imgur.com/AQ5TG.png\" alt></p>\n<h2 id=\"为什么-commit-信息很重要？\"><a href=\"#为什么-commit-信息很重要？\" class=\"headerlink\" title=\"为什么 commit 信息很重要？\"></a>为什么 commit 信息很重要？</h2><ul>\n<li>加快和简化代码审查（code reviews）</li>\n<li>帮助理解一个更改</li>\n<li>解释不能只由代码描述的“为什么”</li>\n<li>帮助未来的维护人员弄清楚为什么以及如何产生的更改，从而使故障排查和调试更容易</li>\n</ul>\n<p>为了最大化这些结果，我们可以使用下一节中描述的一些好的实践和标准。</p>\n<h2 id=\"好的实践\"><a href=\"#好的实践\" class=\"headerlink\" title=\"好的实践\"></a>好的实践</h2><p>这些是从我的经验、互联网文章和其他指南中整理的一些实践经验。如果你有更多的经验（或持不同意见），请随时提交 Pull Request 提供帮助。</p>\n<h3 id=\"使用祈使句\"><a href=\"#使用祈使句\" class=\"headerlink\" title=\"使用祈使句\"></a>使用祈使句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">Use InventoryBackendPool to retrieve inventory backend</span><br><span class=\"line\">用 InventoryBackendPool 获取库存</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bad</span><br><span class=\"line\">Used InventoryBackendPool to retrieve inventory backend </span><br><span class=\"line\">InventoryBackendPool 被用于获取库存</span><br></pre></td></tr></table></figure>\n<p><em>不过为什么要使用祈使句呢？</em></p>\n<p>commit 信息描述的是引用的变更部分实际上<strong>做</strong>了什么，它的效果，而不是因此被做了什么。</p>\n<p><a href=\"https://chris.beams.io/posts/git-commit/\" target=\"_blank\" rel=\"noopener\">Chris Beams 的这篇优秀的文章</a>为我们提供了一些简单的句子，可以帮助我们用祈使句编写更好的 commit 信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If applied, this commit will &lt;commit message&gt; </span><br><span class=\"line\">如获许可，此提交将会 &lt;提交备注&gt;</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">If applied, this commit will use InventoryBackendPool to retrieve inventory backend</span><br><span class=\"line\">如获许可，此提交将使用 InventoryBackendPool 获取库存</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bad</span><br><span class=\"line\">If applied, this commit will used InventoryBackendPool to retrieve inventory backend </span><br><span class=\"line\">如获许可，InventoryBackendPool 将会被用于获取库存</span><br></pre></td></tr></table></figure>\n<h3 id=\"首字母大写\"><a href=\"#首字母大写\" class=\"headerlink\" title=\"首字母大写\"></a>首字母大写</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">Add `use` method to Credit model</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bad</span><br><span class=\"line\">add `use` method to Credit model</span><br></pre></td></tr></table></figure>\n<p>首字母大写的原因是遵守英文句子开头使用大写字母的语法规则。</p>\n<p>这种做法可能因人而异、因团队而异、甚至因语言而异。不管是否大写，重要的是要制定一个标准并遵守它。</p>\n<h3 id=\"尽量做到只看注释便可明白而无需查看变更内容\"><a href=\"#尽量做到只看注释便可明白而无需查看变更内容\" class=\"headerlink\" title=\"尽量做到只看注释便可明白而无需查看变更内容\"></a>尽量做到只看注释便可明白而无需查看变更内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">Add `use` method to Credit model </span><br><span class=\"line\">为 Credit 模块添加 `use` 方法</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bad</span><br><span class=\"line\">Add `use` method </span><br><span class=\"line\">添加 `use` 方法</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">Increase left padding between textbox and layout frame </span><br><span class=\"line\">在 textbox 和 layout frame 之间添加向左对齐</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bad</span><br><span class=\"line\">Adjust css </span><br><span class=\"line\">就改了下 css</span><br></pre></td></tr></table></figure>\n<p>它在许多场景中（例如多次 commit、多个更改和重构）非常有用，可以帮助审查人员理解提交者的想法。</p>\n<h3 id=\"使用信息本身来解释“原因”、“目的”、“手段”和其他的细节\"><a href=\"#使用信息本身来解释“原因”、“目的”、“手段”和其他的细节\" class=\"headerlink\" title=\"使用信息本身来解释“原因”、“目的”、“手段”和其他的细节\"></a>使用信息本身来解释“原因”、“目的”、“手段”和其他的细节</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">Fix method name of InventoryBackend child classes</span><br><span class=\"line\"></span><br><span class=\"line\">Classes derived from InventoryBackend were not</span><br><span class=\"line\">respecting the base class interface.</span><br><span class=\"line\"></span><br><span class=\"line\">It worked because the cart was calling the backend implementation</span><br><span class=\"line\">incorrectly.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">Serialize and deserialize credits to json in Cart</span><br><span class=\"line\"></span><br><span class=\"line\">Convert the Credit instances to dict for two main reasons:</span><br><span class=\"line\"></span><br><span class=\"line\">  - Pickle relies on file path for classes and we do not want to break up</span><br><span class=\"line\">    everything if a refactor is needed</span><br><span class=\"line\">  - Dict and built-in types are pickleable by default</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">Add `use` method to Credit</span><br><span class=\"line\"></span><br><span class=\"line\">Change from namedtuple to class because we need to</span><br><span class=\"line\">setup a new attribute (in_use_amount) with a new value</span><br></pre></td></tr></table></figure>\n<p>信息的主题和正文之间用空行隔开。其他空行被视为信息正文的一部分。</p>\n<p>像“-”、“*”和“\\”这样的字符可以提高可读性。</p>\n<h3 id=\"避免使用无上下文的信息\"><a href=\"#避免使用无上下文的信息\" class=\"headerlink\" title=\"避免使用无上下文的信息\"></a>避免使用无上下文的信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bad</span><br><span class=\"line\">Fix this</span><br><span class=\"line\"></span><br><span class=\"line\">Fix stuff</span><br><span class=\"line\"></span><br><span class=\"line\">It should work now</span><br><span class=\"line\"></span><br><span class=\"line\">Change stuff</span><br><span class=\"line\"></span><br><span class=\"line\">Adjust css</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制每行字数\"><a href=\"#限制每行字数\" class=\"headerlink\" title=\"限制每行字数\"></a>限制每行字数</h3><p><a href=\"https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines\" target=\"_blank\" rel=\"noopener\">这里建议</a>主题最多使用50个字符，正文最多使用72个字符。</p>\n<h3 id=\"保持语言的一致性\"><a href=\"#保持语言的一致性\" class=\"headerlink\" title=\"保持语言的一致性\"></a>保持语言的一致性</h3><p>对于项目所有者而言：选择一种语言并使用该语言编写所有的 commit 信息。理想情况下，它应与代码注释、默认翻译区域（用于本地化项目）等相匹配。</p>\n<p>对于贡献者而言：使用与现有 commit 历史相同的语言编写 commit 信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">ababab Add `use` method to Credit model</span><br><span class=\"line\">efefef Use InventoryBackendPool to retrieve inventory backend</span><br><span class=\"line\">bebebe Fix method name of InventoryBackend child classes</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good (Portuguese example)</span><br><span class=\"line\">ababab Adiciona o método `use` ao model Credit</span><br><span class=\"line\">efefef Usa o InventoryBackendPool para recuperar o backend de estoque</span><br><span class=\"line\">bebebe Corrige nome de método na classe InventoryBackend</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bad (mixes English and Portuguese)</span><br><span class=\"line\">ababab Usa o InventoryBackendPool para recuperar o backend de estoque</span><br><span class=\"line\">efefef Add `use` method to Credit model</span><br><span class=\"line\">cdcdcd Agora vai</span><br></pre></td></tr></table></figure>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><p>下面是参考模板，最初由 <a href=\"http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\" target=\"_blank\" rel=\"noopener\">Tim Pope</a> 编写，出现在 <a href=\"https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project\" target=\"_blank\" rel=\"noopener\"><em>Pro Git Book</em></a> 中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用 50 左右或更少的字符描述更改</span><br><span class=\"line\"></span><br><span class=\"line\">如有必要，可提供更详细的补充说明，并尽可能将其限定在每行 72 个字符左右。</span><br><span class=\"line\">在某些情况下，第一行被视为 commit 的主题，文本其余部分被作为正文。</span><br><span class=\"line\">因此，将主题从正文分割出来的空白行就显得至关重要(除非完全省略正文)。</span><br><span class=\"line\">如若不然，在使用命令行，如 “log”，“shortlog” 以及 “rebase” 的时候，将会很容易混淆。</span><br><span class=\"line\"></span><br><span class=\"line\">解释当前 commit 所解决的问题。</span><br><span class=\"line\">请重点描述产生此更改的原因，而非手段（代码解释了一切）。</span><br><span class=\"line\">是否存在副作用以及其他不直观的影响？</span><br><span class=\"line\">请在这里将其解释清楚。</span><br><span class=\"line\"></span><br><span class=\"line\">接下来请另起一行。</span><br><span class=\"line\"></span><br><span class=\"line\"> - 也可以使用列举要点的格式。</span><br><span class=\"line\"></span><br><span class=\"line\"> - 通常使用连字符(-)或星号(*)作为要点段落标记，标记与文本之间留一空格，各要点之间留一空行。但这取决于你们的约定。</span><br><span class=\"line\"></span><br><span class=\"line\">如果你使用问题跟踪器，请将对它们的引用放在底部，如下所示:</span><br><span class=\"line\"></span><br><span class=\"line\">Resolves: #123</span><br><span class=\"line\">See also: #456, #789</span><br></pre></td></tr></table></figure>\n<h2 id=\"Rebase-vs-Merge\"><a href=\"#Rebase-vs-Merge\" class=\"headerlink\" title=\"Rebase vs. Merge\"></a>Rebase vs. Merge</h2><p>这部分是 Atlassian 的优秀教程(TL;DR)——<a href=\"https://www.atlassian.com/git/tutorials/merging-vs-rebasing\" target=\"_blank\" rel=\"noopener\">“Merging vs. Rebasing”</a> 的精华。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:01b0b04e-64f3-4659-af21-c4d86bc7cb0b/01.svg?cdnVersion=hq\" alt></p>\n<h3 id=\"Rebase\"><a href=\"#Rebase\" class=\"headerlink\" title=\"Rebase\"></a>Rebase</h3><p><strong>TL;DR:</strong> 将你的分支逐个应用于基本分支，生成新树。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:5b153a22-38be-40d0-aec8-5f2fffc771e5/03.svg?cdnVersion=hq\" alt></p>\n<h3 id=\"Merge\"><a href=\"#Merge\" class=\"headerlink\" title=\"Merge\"></a>Merge</h3><p><strong>TL;DR:</strong> 创建一个新的 commit，称为 <em>merge commit</em>（合并提交），其具有两个分支之间的差异。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:e229fef6-2c2f-4a4f-b270-e1e1baa94055/02.svg?cdnVersion=hq\" alt></p>\n<h3 id=\"为什么一些人更喜欢-rebase-而非-merge？\"><a href=\"#为什么一些人更喜欢-rebase-而非-merge？\" class=\"headerlink\" title=\"为什么一些人更喜欢 rebase 而非 merge？\"></a>为什么一些人更喜欢 rebase 而非 merge？</h3><p>我特别喜欢 rebase 而不是 merge。原因有以下几点：</p>\n<ul>\n<li>它的历史信息很”干净”，没有无用的合并 commit。</li>\n<li><em>所见即所得</em>，即在代码审查中，所有的更改都能在特定的、有标题的 commit 中找到，避免了隐藏在合并 commit 中的修改。</li>\n<li>通常 merge 是由提交者实行的，并会为每个转换成 commit 的 merge 书写准确的信息。<ul>\n<li>通常我们不会深挖和复查 merge commit，因此尽量避免使用 merge commit，并确保个变化点都有它们所属的 commit 。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"什么时候-squash\"><a href=\"#什么时候-squash\" class=\"headerlink\" title=\"什么时候 squash\"></a>什么时候 squash</h3><p>“Squashing” 是将一系列 commit 压缩成一个的过程。</p>\n<p>它在某些情况下很有用，例如：</p>\n<ul>\n<li>减少那些很少甚至没有上下文（拼写错误、格式化、缺失内容）的 commit</li>\n<li>将单独的更改连接在一起使它们更通俗易懂</li>\n<li>重写 <em>work in progress</em> 的 commit </li>\n</ul>\n<h3 id=\"什么时候避免-rebase-或-squash\"><a href=\"#什么时候避免-rebase-或-squash\" class=\"headerlink\" title=\"什么时候避免 rebase 或 squash\"></a>什么时候避免 rebase 或 squash</h3><p>避免在多人共同开发的公共 commit 或共享分支上使用 rebase 和 squash。rebase 和 squash 会改写历史记录并覆盖当前 commit，在共享分支的 commit（即推送到远程仓库或来自其他分支的 commit）上执行这些操作可能会引起混乱，由于分支产生分歧及冲突，合作者可能会因此失去他们（本地和远程）的更改。</p>\n<h2 id=\"有用的-git-命令\"><a href=\"#有用的-git-命令\" class=\"headerlink\" title=\"有用的 git 命令\"></a>有用的 git 命令</h2><h3 id=\"rebase-i\"><a href=\"#rebase-i\" class=\"headerlink\" title=\"rebase -i\"></a>rebase -i</h3><p>使用它来压缩提交（squash commits）、 编写信息、 重写/删除/重新编排 commit 等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick 002a7cc Improve description and update document title</span><br><span class=\"line\">pick 897f66d Add contributing section</span><br><span class=\"line\">pick e9549cf Add a section of Available languages</span><br><span class=\"line\">pick ec003aa Add &quot;What is a commit&quot; section&quot;</span><br><span class=\"line\">pick bbe5361 Add source referencing as a point of help wanted</span><br><span class=\"line\">pick b71115e Add a section explaining the importance of commit messages</span><br><span class=\"line\">pick 669bf2b Add &quot;Good practices&quot; section</span><br><span class=\"line\">pick d8340d7 Add capitalization of first letter practice</span><br><span class=\"line\">pick 925f42b Add a practice to encourage good descriptions</span><br><span class=\"line\">pick be05171 Add a section showing good uses of message body</span><br><span class=\"line\">pick d115bb8 Add generic messages and column limit sections</span><br><span class=\"line\">pick 1693840 Add a section about language consistency</span><br><span class=\"line\">pick 80c5f47 Add commit message template</span><br><span class=\"line\">pick 8827962 Fix triple &quot;m&quot; typo</span><br><span class=\"line\">pick 9b81c72 Add &quot;Rebase vs Merge&quot; section</span><br><span class=\"line\"></span><br><span class=\"line\"># Rebase 9e6dc75..9b81c72 onto 9e6dc75 (15 commands)</span><br><span class=\"line\">#</span><br><span class=\"line\"># Commands:</span><br><span class=\"line\"># p, pick = use commit</span><br><span class=\"line\"># r, reword = use commit, but edit the commit message</span><br><span class=\"line\"># e, edit = use commit, but stop for amending</span><br><span class=\"line\"># s, squash = use commit, but meld into the previous commit</span><br><span class=\"line\"># f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message</span><br><span class=\"line\"># x, exec = run command (the rest of the line) using shell</span><br><span class=\"line\"># d, drop = remove commit</span><br><span class=\"line\">#</span><br><span class=\"line\"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class=\"line\">#</span><br><span class=\"line\"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class=\"line\">#</span><br><span class=\"line\"># However, if you remove everything, the rebase will be aborted.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure>\n<h4 id=\"fixup\"><a href=\"#fixup\" class=\"headerlink\" title=\"fixup\"></a>fixup</h4><p>使用它可以轻松清理 commit，而不需要复杂的 rebase。<a href=\"http://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>提供了很好的示例，说明了如何以及何时进行此操作。</p>\n<h3 id=\"cherry-pick\"><a href=\"#cherry-pick\" class=\"headerlink\" title=\"cherry-pick\"></a>cherry-pick</h3><p>它在你 commit 到了错误的分支而不需要重新编码时非常有用。</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick 790ab21</span><br><span class=\"line\">[master 094d820] Fix English grammar in Contributing</span><br><span class=\"line\"> Date: Sun Feb 25 23:14:23 2018 -0300</span><br><span class=\"line\"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>\n<h3 id=\"add-checkout-reset-–patch-p\"><a href=\"#add-checkout-reset-–patch-p\" class=\"headerlink\" title=\"add/checkout/reset [–patch | -p]\"></a>add/checkout/reset [–patch | -p]</h3><p>假设我们有以下冲突：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff --git a/README.md b/README.md</span><br><span class=\"line\">index 7b45277..6b1993c 100644</span><br><span class=\"line\"><span class=\"comment\">--- a/README.md</span></span><br><span class=\"line\"><span class=\"comment\">+++ b/README.md</span></span><br><span class=\"line\">@@ -186,10 +186,13 @@ bebebe Corrige nome de método na classe InventoryBackend</span><br><span class=\"line\"> ``</span><br><span class=\"line\"> # Bad (mixes English and Portuguese)</span><br><span class=\"line\"> ababab Usa o InventoryBackendPool para recuperar o backend de estoque</span><br><span class=\"line\"><span class=\"deletion\">-efefef Add `use` method to Credit model</span></span><br><span class=\"line\"> cdcdcd Agora vai</span><br><span class=\"line\"> ``</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+### Template</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+This is a template, [written originally by Tim Pope](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html), which appears in the [_Pro Git Book_](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project).</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"> ## Contributing</span><br><span class=\"line\"></span><br><span class=\"line\"> Any kind of help would be appreciated. Example of topics that you can help me with:</span><br><span class=\"line\">@@ -202,3 +205,4 @@ Any kind of help would be appreciated. Example of topics that you can help me wi</span><br><span class=\"line\"></span><br><span class=\"line\"> - [How to Write a Git Commit Message](https://chris.beams.io/posts/git-commit/)</span><br><span class=\"line\"> - [Pro Git Book - Commit guidelines](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines)</span><br><span class=\"line\"><span class=\"addition\">+- [A Note About Git Commit Messages](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)</span></span><br></pre></td></tr></table></figure>\n<p>我们可以使用 <code>git add -p</code> 只添加我们想要的补丁，而无需更改已有代码。<br>它在将一个大的更改分解为小的 commit 或 reset/checkout 特定的更改时很有用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stage this hunk [y,n,q,a,d,/,j,J,g,s,e,?]? s</span><br><span class=\"line\">Split into 2 hunks.</span><br></pre></td></tr></table></figure>\n<h4 id=\"hunk-1\"><a href=\"#hunk-1\" class=\"headerlink\" title=\"hunk 1\"></a>hunk 1</h4><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@@ -186,7 +186,6 @@</span></span><br><span class=\"line\"> ``</span><br><span class=\"line\"> # Bad (mixes English and Portuguese)</span><br><span class=\"line\"> ababab Usa o InventoryBackendPool para recuperar o backend de estoque</span><br><span class=\"line\"><span class=\"deletion\">-efefef Add `use` method to Credit model</span></span><br><span class=\"line\"> cdcdcd Agora vai</span><br><span class=\"line\"> ``</span><br><span class=\"line\"></span><br><span class=\"line\">Stage this hunk [y,n,q,a,d,/,j,J,g,e,?]?</span><br></pre></td></tr></table></figure>\n<h4 id=\"hunk-2\"><a href=\"#hunk-2\" class=\"headerlink\" title=\"hunk 2\"></a>hunk 2</h4><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@@ -190,6 +189,10 @@</span></span><br><span class=\"line\"> ``</span><br><span class=\"line\"> cdcdcd Agora vai</span><br><span class=\"line\"> ``</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+### Template</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+This is a template, [written originally by Tim Pope](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html), which appears in the [_Pro Git Book_](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project).</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"> ## Contributing</span><br><span class=\"line\"></span><br><span class=\"line\"> Any kind of help would be appreciated. Example of topics that you can help me with:</span><br><span class=\"line\">Stage this hunk [y,n,q,a,d,/,K,j,J,g,e,?]?</span><br></pre></td></tr></table></figure>\n<h4 id=\"hunk-3\"><a href=\"#hunk-3\" class=\"headerlink\" title=\"hunk 3\"></a>hunk 3</h4><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@ -202,3 +205,4 @@ Any kind of help would be appreciated. Example of topics that you can help me wi</span><br><span class=\"line\"></span><br><span class=\"line\"> - [How to Write a Git Commit Message](https://chris.beams.io/posts/git-commit/)</span><br><span class=\"line\"> - [Pro Git Book - Commit guidelines](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines)</span><br><span class=\"line\"><span class=\"addition\">+- [A Note About Git Commit Messages](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"其他有趣的内容\"><a href=\"#其他有趣的内容\" class=\"headerlink\" title=\"其他有趣的内容\"></a>其他有趣的内容</h2><p><a href=\"https://whatthecommit.com/\" target=\"_blank\" rel=\"noopener\">https://whatthecommit.com/</a></p>\n<h2 id=\"喜欢它吗？\"><a href=\"#喜欢它吗？\" class=\"headerlink\" title=\"喜欢它吗？\"></a>喜欢它吗？</h2><p><a href=\"https://saythanks.io/to/RomuloOliveira\" target=\"_blank\" rel=\"noopener\">点赞！</a></p>\n<h2 id=\"贡献\"><a href=\"#贡献\" class=\"headerlink\" title=\"贡献\"></a>贡献</h2><p>感谢任何形式的帮助。例如：</p>\n<ul>\n<li>语法和拼写的纠正</li>\n<li>翻译成其他语言</li>\n<li>原引用的改进</li>\n<li>不正确或不完整的信息</li>\n</ul>\n<h2 id=\"灵感、来源以及扩展阅读\"><a href=\"#灵感、来源以及扩展阅读\" class=\"headerlink\" title=\"灵感、来源以及扩展阅读\"></a>灵感、来源以及扩展阅读</h2><ul>\n<li><a href=\"https://chris.beams.io/posts/git-commit/\" target=\"_blank\" rel=\"noopener\">如何编写 Git Commit Message</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines\" target=\"_blank\" rel=\"noopener\">Pro Git Book - Commit 指南</a></li>\n<li><a href=\"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\" target=\"_blank\" rel=\"noopener\">关于 Git Commit Messages 的说明</a></li>\n<li><a href=\"https://www.atlassian.com/git/tutorials/merging-vs-rebasing\" target=\"_blank\" rel=\"noopener\">合并与变基</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History\" target=\"_blank\" rel=\"noopener\">Pro Git Book - 改写历史</a></li>\n</ul>\n<h2 id=\"原文地址\"><a href=\"#原文地址\" class=\"headerlink\" title=\"原文地址\"></a><a href=\"https://github.com/RomuloOliveira/commit-messages-guide/blob/master/README_zh-CN.md\" target=\"_blank\" rel=\"noopener\">原文地址</a></h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Commit-messages-guide\"><a href=\"#Commit-messages-guide\" class=\"headerlink\" title=\"Commit messages guide\"></a>Commit messages guide</h1><p>一个了解 commit 信息重要性和如何更好地编写它的指南。</p>\n<p>它可以帮助你了解什么是 commit、为什么编写好的信息很重要、最好的实践案例以及一些技巧来计划和（重新）编写良好的 commit 历史。</p>\n<h2 id=\"什么是“commit”？\"><a href=\"#什么是“commit”？\" class=\"headerlink\" title=\"什么是“commit”？\"></a>什么是“commit”？</h2><p>简单来讲，commit 就是在本地存储库中编写的文件的 _快照_。与印象中不同的是，<a href=\"https://git-scm.com/book/eo/v1/Ekkomenci-Git-Basics#Snapshots,-Not-Differences\" target=\"_blank\" rel=\"noopener\">git 不仅存储不同版本文件之间的差异，还存储了所有文件的完整版本</a>。对于两个 commit 之间没有被修改的文件，git 只存储指向前一个完全相同的文件的链接。</p>\n<p>下面的图片展示了 git 如何随着时间存储数据，其中每个 “Version” 都是一个 commit：</p>\n<p><img src=\"https://i.stack.imgur.com/AQ5TG.png\" alt></p>\n<h2 id=\"为什么-commit-信息很重要？\"><a href=\"#为什么-commit-信息很重要？\" class=\"headerlink\" title=\"为什么 commit 信息很重要？\"></a>为什么 commit 信息很重要？</h2><ul>\n<li>加快和简化代码审查（code reviews）</li>\n<li>帮助理解一个更改</li>\n<li>解释不能只由代码描述的“为什么”</li>\n<li>帮助未来的维护人员弄清楚为什么以及如何产生的更改，从而使故障排查和调试更容易</li>\n</ul>\n<p>为了最大化这些结果，我们可以使用下一节中描述的一些好的实践和标准。</p>\n<h2 id=\"好的实践\"><a href=\"#好的实践\" class=\"headerlink\" title=\"好的实践\"></a>好的实践</h2><p>这些是从我的经验、互联网文章和其他指南中整理的一些实践经验。如果你有更多的经验（或持不同意见），请随时提交 Pull Request 提供帮助。</p>\n<h3 id=\"使用祈使句\"><a href=\"#使用祈使句\" class=\"headerlink\" title=\"使用祈使句\"></a>使用祈使句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">Use InventoryBackendPool to retrieve inventory backend</span><br><span class=\"line\">用 InventoryBackendPool 获取库存</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bad</span><br><span class=\"line\">Used InventoryBackendPool to retrieve inventory backend </span><br><span class=\"line\">InventoryBackendPool 被用于获取库存</span><br></pre></td></tr></table></figure>\n<p><em>不过为什么要使用祈使句呢？</em></p>\n<p>commit 信息描述的是引用的变更部分实际上<strong>做</strong>了什么，它的效果，而不是因此被做了什么。</p>\n<p><a href=\"https://chris.beams.io/posts/git-commit/\" target=\"_blank\" rel=\"noopener\">Chris Beams 的这篇优秀的文章</a>为我们提供了一些简单的句子，可以帮助我们用祈使句编写更好的 commit 信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If applied, this commit will &lt;commit message&gt; </span><br><span class=\"line\">如获许可，此提交将会 &lt;提交备注&gt;</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">If applied, this commit will use InventoryBackendPool to retrieve inventory backend</span><br><span class=\"line\">如获许可，此提交将使用 InventoryBackendPool 获取库存</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bad</span><br><span class=\"line\">If applied, this commit will used InventoryBackendPool to retrieve inventory backend </span><br><span class=\"line\">如获许可，InventoryBackendPool 将会被用于获取库存</span><br></pre></td></tr></table></figure>\n<h3 id=\"首字母大写\"><a href=\"#首字母大写\" class=\"headerlink\" title=\"首字母大写\"></a>首字母大写</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">Add `use` method to Credit model</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bad</span><br><span class=\"line\">add `use` method to Credit model</span><br></pre></td></tr></table></figure>\n<p>首字母大写的原因是遵守英文句子开头使用大写字母的语法规则。</p>\n<p>这种做法可能因人而异、因团队而异、甚至因语言而异。不管是否大写，重要的是要制定一个标准并遵守它。</p>\n<h3 id=\"尽量做到只看注释便可明白而无需查看变更内容\"><a href=\"#尽量做到只看注释便可明白而无需查看变更内容\" class=\"headerlink\" title=\"尽量做到只看注释便可明白而无需查看变更内容\"></a>尽量做到只看注释便可明白而无需查看变更内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">Add `use` method to Credit model </span><br><span class=\"line\">为 Credit 模块添加 `use` 方法</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bad</span><br><span class=\"line\">Add `use` method </span><br><span class=\"line\">添加 `use` 方法</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">Increase left padding between textbox and layout frame </span><br><span class=\"line\">在 textbox 和 layout frame 之间添加向左对齐</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bad</span><br><span class=\"line\">Adjust css </span><br><span class=\"line\">就改了下 css</span><br></pre></td></tr></table></figure>\n<p>它在许多场景中（例如多次 commit、多个更改和重构）非常有用，可以帮助审查人员理解提交者的想法。</p>\n<h3 id=\"使用信息本身来解释“原因”、“目的”、“手段”和其他的细节\"><a href=\"#使用信息本身来解释“原因”、“目的”、“手段”和其他的细节\" class=\"headerlink\" title=\"使用信息本身来解释“原因”、“目的”、“手段”和其他的细节\"></a>使用信息本身来解释“原因”、“目的”、“手段”和其他的细节</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">Fix method name of InventoryBackend child classes</span><br><span class=\"line\"></span><br><span class=\"line\">Classes derived from InventoryBackend were not</span><br><span class=\"line\">respecting the base class interface.</span><br><span class=\"line\"></span><br><span class=\"line\">It worked because the cart was calling the backend implementation</span><br><span class=\"line\">incorrectly.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">Serialize and deserialize credits to json in Cart</span><br><span class=\"line\"></span><br><span class=\"line\">Convert the Credit instances to dict for two main reasons:</span><br><span class=\"line\"></span><br><span class=\"line\">  - Pickle relies on file path for classes and we do not want to break up</span><br><span class=\"line\">    everything if a refactor is needed</span><br><span class=\"line\">  - Dict and built-in types are pickleable by default</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">Add `use` method to Credit</span><br><span class=\"line\"></span><br><span class=\"line\">Change from namedtuple to class because we need to</span><br><span class=\"line\">setup a new attribute (in_use_amount) with a new value</span><br></pre></td></tr></table></figure>\n<p>信息的主题和正文之间用空行隔开。其他空行被视为信息正文的一部分。</p>\n<p>像“-”、“*”和“\\”这样的字符可以提高可读性。</p>\n<h3 id=\"避免使用无上下文的信息\"><a href=\"#避免使用无上下文的信息\" class=\"headerlink\" title=\"避免使用无上下文的信息\"></a>避免使用无上下文的信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bad</span><br><span class=\"line\">Fix this</span><br><span class=\"line\"></span><br><span class=\"line\">Fix stuff</span><br><span class=\"line\"></span><br><span class=\"line\">It should work now</span><br><span class=\"line\"></span><br><span class=\"line\">Change stuff</span><br><span class=\"line\"></span><br><span class=\"line\">Adjust css</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制每行字数\"><a href=\"#限制每行字数\" class=\"headerlink\" title=\"限制每行字数\"></a>限制每行字数</h3><p><a href=\"https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines\" target=\"_blank\" rel=\"noopener\">这里建议</a>主题最多使用50个字符，正文最多使用72个字符。</p>\n<h3 id=\"保持语言的一致性\"><a href=\"#保持语言的一致性\" class=\"headerlink\" title=\"保持语言的一致性\"></a>保持语言的一致性</h3><p>对于项目所有者而言：选择一种语言并使用该语言编写所有的 commit 信息。理想情况下，它应与代码注释、默认翻译区域（用于本地化项目）等相匹配。</p>\n<p>对于贡献者而言：使用与现有 commit 历史相同的语言编写 commit 信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good</span><br><span class=\"line\">ababab Add `use` method to Credit model</span><br><span class=\"line\">efefef Use InventoryBackendPool to retrieve inventory backend</span><br><span class=\"line\">bebebe Fix method name of InventoryBackend child classes</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Good (Portuguese example)</span><br><span class=\"line\">ababab Adiciona o método `use` ao model Credit</span><br><span class=\"line\">efefef Usa o InventoryBackendPool para recuperar o backend de estoque</span><br><span class=\"line\">bebebe Corrige nome de método na classe InventoryBackend</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bad (mixes English and Portuguese)</span><br><span class=\"line\">ababab Usa o InventoryBackendPool para recuperar o backend de estoque</span><br><span class=\"line\">efefef Add `use` method to Credit model</span><br><span class=\"line\">cdcdcd Agora vai</span><br></pre></td></tr></table></figure>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><p>下面是参考模板，最初由 <a href=\"http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\" target=\"_blank\" rel=\"noopener\">Tim Pope</a> 编写，出现在 <a href=\"https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project\" target=\"_blank\" rel=\"noopener\"><em>Pro Git Book</em></a> 中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用 50 左右或更少的字符描述更改</span><br><span class=\"line\"></span><br><span class=\"line\">如有必要，可提供更详细的补充说明，并尽可能将其限定在每行 72 个字符左右。</span><br><span class=\"line\">在某些情况下，第一行被视为 commit 的主题，文本其余部分被作为正文。</span><br><span class=\"line\">因此，将主题从正文分割出来的空白行就显得至关重要(除非完全省略正文)。</span><br><span class=\"line\">如若不然，在使用命令行，如 “log”，“shortlog” 以及 “rebase” 的时候，将会很容易混淆。</span><br><span class=\"line\"></span><br><span class=\"line\">解释当前 commit 所解决的问题。</span><br><span class=\"line\">请重点描述产生此更改的原因，而非手段（代码解释了一切）。</span><br><span class=\"line\">是否存在副作用以及其他不直观的影响？</span><br><span class=\"line\">请在这里将其解释清楚。</span><br><span class=\"line\"></span><br><span class=\"line\">接下来请另起一行。</span><br><span class=\"line\"></span><br><span class=\"line\"> - 也可以使用列举要点的格式。</span><br><span class=\"line\"></span><br><span class=\"line\"> - 通常使用连字符(-)或星号(*)作为要点段落标记，标记与文本之间留一空格，各要点之间留一空行。但这取决于你们的约定。</span><br><span class=\"line\"></span><br><span class=\"line\">如果你使用问题跟踪器，请将对它们的引用放在底部，如下所示:</span><br><span class=\"line\"></span><br><span class=\"line\">Resolves: #123</span><br><span class=\"line\">See also: #456, #789</span><br></pre></td></tr></table></figure>\n<h2 id=\"Rebase-vs-Merge\"><a href=\"#Rebase-vs-Merge\" class=\"headerlink\" title=\"Rebase vs. Merge\"></a>Rebase vs. Merge</h2><p>这部分是 Atlassian 的优秀教程(TL;DR)——<a href=\"https://www.atlassian.com/git/tutorials/merging-vs-rebasing\" target=\"_blank\" rel=\"noopener\">“Merging vs. Rebasing”</a> 的精华。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:01b0b04e-64f3-4659-af21-c4d86bc7cb0b/01.svg?cdnVersion=hq\" alt></p>\n<h3 id=\"Rebase\"><a href=\"#Rebase\" class=\"headerlink\" title=\"Rebase\"></a>Rebase</h3><p><strong>TL;DR:</strong> 将你的分支逐个应用于基本分支，生成新树。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:5b153a22-38be-40d0-aec8-5f2fffc771e5/03.svg?cdnVersion=hq\" alt></p>\n<h3 id=\"Merge\"><a href=\"#Merge\" class=\"headerlink\" title=\"Merge\"></a>Merge</h3><p><strong>TL;DR:</strong> 创建一个新的 commit，称为 <em>merge commit</em>（合并提交），其具有两个分支之间的差异。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:e229fef6-2c2f-4a4f-b270-e1e1baa94055/02.svg?cdnVersion=hq\" alt></p>\n<h3 id=\"为什么一些人更喜欢-rebase-而非-merge？\"><a href=\"#为什么一些人更喜欢-rebase-而非-merge？\" class=\"headerlink\" title=\"为什么一些人更喜欢 rebase 而非 merge？\"></a>为什么一些人更喜欢 rebase 而非 merge？</h3><p>我特别喜欢 rebase 而不是 merge。原因有以下几点：</p>\n<ul>\n<li>它的历史信息很”干净”，没有无用的合并 commit。</li>\n<li><em>所见即所得</em>，即在代码审查中，所有的更改都能在特定的、有标题的 commit 中找到，避免了隐藏在合并 commit 中的修改。</li>\n<li>通常 merge 是由提交者实行的，并会为每个转换成 commit 的 merge 书写准确的信息。<ul>\n<li>通常我们不会深挖和复查 merge commit，因此尽量避免使用 merge commit，并确保个变化点都有它们所属的 commit 。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"什么时候-squash\"><a href=\"#什么时候-squash\" class=\"headerlink\" title=\"什么时候 squash\"></a>什么时候 squash</h3><p>“Squashing” 是将一系列 commit 压缩成一个的过程。</p>\n<p>它在某些情况下很有用，例如：</p>\n<ul>\n<li>减少那些很少甚至没有上下文（拼写错误、格式化、缺失内容）的 commit</li>\n<li>将单独的更改连接在一起使它们更通俗易懂</li>\n<li>重写 <em>work in progress</em> 的 commit </li>\n</ul>\n<h3 id=\"什么时候避免-rebase-或-squash\"><a href=\"#什么时候避免-rebase-或-squash\" class=\"headerlink\" title=\"什么时候避免 rebase 或 squash\"></a>什么时候避免 rebase 或 squash</h3><p>避免在多人共同开发的公共 commit 或共享分支上使用 rebase 和 squash。rebase 和 squash 会改写历史记录并覆盖当前 commit，在共享分支的 commit（即推送到远程仓库或来自其他分支的 commit）上执行这些操作可能会引起混乱，由于分支产生分歧及冲突，合作者可能会因此失去他们（本地和远程）的更改。</p>\n<h2 id=\"有用的-git-命令\"><a href=\"#有用的-git-命令\" class=\"headerlink\" title=\"有用的 git 命令\"></a>有用的 git 命令</h2><h3 id=\"rebase-i\"><a href=\"#rebase-i\" class=\"headerlink\" title=\"rebase -i\"></a>rebase -i</h3><p>使用它来压缩提交（squash commits）、 编写信息、 重写/删除/重新编排 commit 等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick 002a7cc Improve description and update document title</span><br><span class=\"line\">pick 897f66d Add contributing section</span><br><span class=\"line\">pick e9549cf Add a section of Available languages</span><br><span class=\"line\">pick ec003aa Add &quot;What is a commit&quot; section&quot;</span><br><span class=\"line\">pick bbe5361 Add source referencing as a point of help wanted</span><br><span class=\"line\">pick b71115e Add a section explaining the importance of commit messages</span><br><span class=\"line\">pick 669bf2b Add &quot;Good practices&quot; section</span><br><span class=\"line\">pick d8340d7 Add capitalization of first letter practice</span><br><span class=\"line\">pick 925f42b Add a practice to encourage good descriptions</span><br><span class=\"line\">pick be05171 Add a section showing good uses of message body</span><br><span class=\"line\">pick d115bb8 Add generic messages and column limit sections</span><br><span class=\"line\">pick 1693840 Add a section about language consistency</span><br><span class=\"line\">pick 80c5f47 Add commit message template</span><br><span class=\"line\">pick 8827962 Fix triple &quot;m&quot; typo</span><br><span class=\"line\">pick 9b81c72 Add &quot;Rebase vs Merge&quot; section</span><br><span class=\"line\"></span><br><span class=\"line\"># Rebase 9e6dc75..9b81c72 onto 9e6dc75 (15 commands)</span><br><span class=\"line\">#</span><br><span class=\"line\"># Commands:</span><br><span class=\"line\"># p, pick = use commit</span><br><span class=\"line\"># r, reword = use commit, but edit the commit message</span><br><span class=\"line\"># e, edit = use commit, but stop for amending</span><br><span class=\"line\"># s, squash = use commit, but meld into the previous commit</span><br><span class=\"line\"># f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message</span><br><span class=\"line\"># x, exec = run command (the rest of the line) using shell</span><br><span class=\"line\"># d, drop = remove commit</span><br><span class=\"line\">#</span><br><span class=\"line\"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class=\"line\">#</span><br><span class=\"line\"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class=\"line\">#</span><br><span class=\"line\"># However, if you remove everything, the rebase will be aborted.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure>\n<h4 id=\"fixup\"><a href=\"#fixup\" class=\"headerlink\" title=\"fixup\"></a>fixup</h4><p>使用它可以轻松清理 commit，而不需要复杂的 rebase。<a href=\"http://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>提供了很好的示例，说明了如何以及何时进行此操作。</p>\n<h3 id=\"cherry-pick\"><a href=\"#cherry-pick\" class=\"headerlink\" title=\"cherry-pick\"></a>cherry-pick</h3><p>它在你 commit 到了错误的分支而不需要重新编码时非常有用。</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick 790ab21</span><br><span class=\"line\">[master 094d820] Fix English grammar in Contributing</span><br><span class=\"line\"> Date: Sun Feb 25 23:14:23 2018 -0300</span><br><span class=\"line\"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>\n<h3 id=\"add-checkout-reset-–patch-p\"><a href=\"#add-checkout-reset-–patch-p\" class=\"headerlink\" title=\"add/checkout/reset [–patch | -p]\"></a>add/checkout/reset [–patch | -p]</h3><p>假设我们有以下冲突：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff --git a/README.md b/README.md</span><br><span class=\"line\">index 7b45277..6b1993c 100644</span><br><span class=\"line\"><span class=\"comment\">--- a/README.md</span></span><br><span class=\"line\"><span class=\"comment\">+++ b/README.md</span></span><br><span class=\"line\">@@ -186,10 +186,13 @@ bebebe Corrige nome de método na classe InventoryBackend</span><br><span class=\"line\"> ``</span><br><span class=\"line\"> # Bad (mixes English and Portuguese)</span><br><span class=\"line\"> ababab Usa o InventoryBackendPool para recuperar o backend de estoque</span><br><span class=\"line\"><span class=\"deletion\">-efefef Add `use` method to Credit model</span></span><br><span class=\"line\"> cdcdcd Agora vai</span><br><span class=\"line\"> ``</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+### Template</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+This is a template, [written originally by Tim Pope](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html), which appears in the [_Pro Git Book_](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project).</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"> ## Contributing</span><br><span class=\"line\"></span><br><span class=\"line\"> Any kind of help would be appreciated. Example of topics that you can help me with:</span><br><span class=\"line\">@@ -202,3 +205,4 @@ Any kind of help would be appreciated. Example of topics that you can help me wi</span><br><span class=\"line\"></span><br><span class=\"line\"> - [How to Write a Git Commit Message](https://chris.beams.io/posts/git-commit/)</span><br><span class=\"line\"> - [Pro Git Book - Commit guidelines](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines)</span><br><span class=\"line\"><span class=\"addition\">+- [A Note About Git Commit Messages](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)</span></span><br></pre></td></tr></table></figure>\n<p>我们可以使用 <code>git add -p</code> 只添加我们想要的补丁，而无需更改已有代码。<br>它在将一个大的更改分解为小的 commit 或 reset/checkout 特定的更改时很有用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stage this hunk [y,n,q,a,d,/,j,J,g,s,e,?]? s</span><br><span class=\"line\">Split into 2 hunks.</span><br></pre></td></tr></table></figure>\n<h4 id=\"hunk-1\"><a href=\"#hunk-1\" class=\"headerlink\" title=\"hunk 1\"></a>hunk 1</h4><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@@ -186,7 +186,6 @@</span></span><br><span class=\"line\"> ``</span><br><span class=\"line\"> # Bad (mixes English and Portuguese)</span><br><span class=\"line\"> ababab Usa o InventoryBackendPool para recuperar o backend de estoque</span><br><span class=\"line\"><span class=\"deletion\">-efefef Add `use` method to Credit model</span></span><br><span class=\"line\"> cdcdcd Agora vai</span><br><span class=\"line\"> ``</span><br><span class=\"line\"></span><br><span class=\"line\">Stage this hunk [y,n,q,a,d,/,j,J,g,e,?]?</span><br></pre></td></tr></table></figure>\n<h4 id=\"hunk-2\"><a href=\"#hunk-2\" class=\"headerlink\" title=\"hunk 2\"></a>hunk 2</h4><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@@ -190,6 +189,10 @@</span></span><br><span class=\"line\"> ``</span><br><span class=\"line\"> cdcdcd Agora vai</span><br><span class=\"line\"> ``</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+### Template</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+This is a template, [written originally by Tim Pope](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html), which appears in the [_Pro Git Book_](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project).</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"> ## Contributing</span><br><span class=\"line\"></span><br><span class=\"line\"> Any kind of help would be appreciated. Example of topics that you can help me with:</span><br><span class=\"line\">Stage this hunk [y,n,q,a,d,/,K,j,J,g,e,?]?</span><br></pre></td></tr></table></figure>\n<h4 id=\"hunk-3\"><a href=\"#hunk-3\" class=\"headerlink\" title=\"hunk 3\"></a>hunk 3</h4><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@ -202,3 +205,4 @@ Any kind of help would be appreciated. Example of topics that you can help me wi</span><br><span class=\"line\"></span><br><span class=\"line\"> - [How to Write a Git Commit Message](https://chris.beams.io/posts/git-commit/)</span><br><span class=\"line\"> - [Pro Git Book - Commit guidelines](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines)</span><br><span class=\"line\"><span class=\"addition\">+- [A Note About Git Commit Messages](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"其他有趣的内容\"><a href=\"#其他有趣的内容\" class=\"headerlink\" title=\"其他有趣的内容\"></a>其他有趣的内容</h2><p><a href=\"https://whatthecommit.com/\" target=\"_blank\" rel=\"noopener\">https://whatthecommit.com/</a></p>\n<h2 id=\"喜欢它吗？\"><a href=\"#喜欢它吗？\" class=\"headerlink\" title=\"喜欢它吗？\"></a>喜欢它吗？</h2><p><a href=\"https://saythanks.io/to/RomuloOliveira\" target=\"_blank\" rel=\"noopener\">点赞！</a></p>\n<h2 id=\"贡献\"><a href=\"#贡献\" class=\"headerlink\" title=\"贡献\"></a>贡献</h2><p>感谢任何形式的帮助。例如：</p>\n<ul>\n<li>语法和拼写的纠正</li>\n<li>翻译成其他语言</li>\n<li>原引用的改进</li>\n<li>不正确或不完整的信息</li>\n</ul>\n<h2 id=\"灵感、来源以及扩展阅读\"><a href=\"#灵感、来源以及扩展阅读\" class=\"headerlink\" title=\"灵感、来源以及扩展阅读\"></a>灵感、来源以及扩展阅读</h2><ul>\n<li><a href=\"https://chris.beams.io/posts/git-commit/\" target=\"_blank\" rel=\"noopener\">如何编写 Git Commit Message</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines\" target=\"_blank\" rel=\"noopener\">Pro Git Book - Commit 指南</a></li>\n<li><a href=\"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\" target=\"_blank\" rel=\"noopener\">关于 Git Commit Messages 的说明</a></li>\n<li><a href=\"https://www.atlassian.com/git/tutorials/merging-vs-rebasing\" target=\"_blank\" rel=\"noopener\">合并与变基</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History\" target=\"_blank\" rel=\"noopener\">Pro Git Book - 改写历史</a></li>\n</ul>\n<h2 id=\"原文地址\"><a href=\"#原文地址\" class=\"headerlink\" title=\"原文地址\"></a><a href=\"https://github.com/RomuloOliveira/commit-messages-guide/blob/master/README_zh-CN.md\" target=\"_blank\" rel=\"noopener\">原文地址</a></h2>"},{"title":"排序","_content":"\n### 冒泡排序\n\n    func Bsort(a []int) {\n        c := 1\n        for i := 0; i < len(a)-1; i++ {\n            for j := 1; j < len(a)-i; j++ {\n                c ++\n                if a[j-1] > a[j] {\n                    a[j-1], a[j] = a[j], a[j-1]\n                }\n            }\n        }\n        fmt.Println(c)\n    }\n\n    \n### 选择排序\n\n    func Ssort(a []int) {\n        c := 1\n        for i := 0; i < len(a)-1; i++ {\n            for j := i + 1; j < len(a); j++ {\n                c ++\n                if a[i] > a[j] {\n                    a[i], a[j] = a[j], a[i]\n                }\n            }\n        }\n        fmt.Println(c)\n    }\n\n    \n### 插入排序\n    \n    func Isort(a []int)  {\n        // 4,8,5,2,1,9\n        // 4 | 8 5 2 1 9\n        // 4 8 | 5 2 1 9\n        // 4 5 8 | 2 1 9\n        for i:=1; i < len(a); i++ {\n            for j := i; j>=0; j-- {\n                //if a[j-1] < a[j]{\n                if a[j] > a[j-1]{\n                    break\n                }\n                a[j-1], a[j] = a[j], a[j-1]\n            }\n        }\n    }\n\n\n### 快速排序\n","source":"_posts/golang/sort.md","raw":"---\ntitle: 排序\n---\n\n### 冒泡排序\n\n    func Bsort(a []int) {\n        c := 1\n        for i := 0; i < len(a)-1; i++ {\n            for j := 1; j < len(a)-i; j++ {\n                c ++\n                if a[j-1] > a[j] {\n                    a[j-1], a[j] = a[j], a[j-1]\n                }\n            }\n        }\n        fmt.Println(c)\n    }\n\n    \n### 选择排序\n\n    func Ssort(a []int) {\n        c := 1\n        for i := 0; i < len(a)-1; i++ {\n            for j := i + 1; j < len(a); j++ {\n                c ++\n                if a[i] > a[j] {\n                    a[i], a[j] = a[j], a[i]\n                }\n            }\n        }\n        fmt.Println(c)\n    }\n\n    \n### 插入排序\n    \n    func Isort(a []int)  {\n        // 4,8,5,2,1,9\n        // 4 | 8 5 2 1 9\n        // 4 8 | 5 2 1 9\n        // 4 5 8 | 2 1 9\n        for i:=1; i < len(a); i++ {\n            for j := i; j>=0; j-- {\n                //if a[j-1] < a[j]{\n                if a[j] > a[j-1]{\n                    break\n                }\n                a[j-1], a[j] = a[j], a[j-1]\n            }\n        }\n    }\n\n\n### 快速排序\n","slug":"golang/sort","published":1,"date":"2019-06-10T15:10:18.776Z","updated":"2019-06-10T15:10:18.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwqiruii00004472wc3d6849","content":"<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><pre><code>func Bsort(a []int) {\n    c := 1\n    for i := 0; i &lt; len(a)-1; i++ {\n        for j := 1; j &lt; len(a)-i; j++ {\n            c ++\n            if a[j-1] &gt; a[j] {\n                a[j-1], a[j] = a[j], a[j-1]\n            }\n        }\n    }\n    fmt.Println(c)\n}\n</code></pre><h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><pre><code>func Ssort(a []int) {\n    c := 1\n    for i := 0; i &lt; len(a)-1; i++ {\n        for j := i + 1; j &lt; len(a); j++ {\n            c ++\n            if a[i] &gt; a[j] {\n                a[i], a[j] = a[j], a[i]\n            }\n        }\n    }\n    fmt.Println(c)\n}\n</code></pre><h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><pre><code>func Isort(a []int)  {\n    // 4,8,5,2,1,9\n    // 4 | 8 5 2 1 9\n    // 4 8 | 5 2 1 9\n    // 4 5 8 | 2 1 9\n    for i:=1; i &lt; len(a); i++ {\n        for j := i; j&gt;=0; j-- {\n            //if a[j-1] &lt; a[j]{\n            if a[j] &gt; a[j-1]{\n                break\n            }\n            a[j-1], a[j] = a[j], a[j-1]\n        }\n    }\n}\n</code></pre><h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><pre><code>func Bsort(a []int) {\n    c := 1\n    for i := 0; i &lt; len(a)-1; i++ {\n        for j := 1; j &lt; len(a)-i; j++ {\n            c ++\n            if a[j-1] &gt; a[j] {\n                a[j-1], a[j] = a[j], a[j-1]\n            }\n        }\n    }\n    fmt.Println(c)\n}\n</code></pre><h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><pre><code>func Ssort(a []int) {\n    c := 1\n    for i := 0; i &lt; len(a)-1; i++ {\n        for j := i + 1; j &lt; len(a); j++ {\n            c ++\n            if a[i] &gt; a[j] {\n                a[i], a[j] = a[j], a[i]\n            }\n        }\n    }\n    fmt.Println(c)\n}\n</code></pre><h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><pre><code>func Isort(a []int)  {\n    // 4,8,5,2,1,9\n    // 4 | 8 5 2 1 9\n    // 4 8 | 5 2 1 9\n    // 4 5 8 | 2 1 9\n    for i:=1; i &lt; len(a); i++ {\n        for j := i; j&gt;=0; j-- {\n            //if a[j-1] &lt; a[j]{\n            if a[j] &gt; a[j-1]{\n                break\n            }\n            a[j-1], a[j] = a[j], a[j-1]\n        }\n    }\n}\n</code></pre><h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3>"},{"title":"面向对象的四大支柱","_content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>面向对象的四大支柱</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#131\">13.1　封装</a></li>\n<li><a href=\"#132\">13.2　抽象</a></li>\n<li><a href=\"#133\">13.3　多态</a></li>\n<li><a href=\"#134\">13.4　继承</a></li>\n<li><a href=\"#135\">13.5　组合</a></li>\n<li><a href=\"#136\">13.6　术语表</a></li>\n<li><a href=\"#137\">13.7　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“优良设计创造价值的速度，快于其增加成本的速度。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——托马斯 · C. 盖勒（Thomas C.Gale）</span></p>\n</blockquote>\n<p>面向对象编程有四大概念：封装、抽象、多态和继承。它们共同构成了<strong>面向对象编程的四大支柱</strong>。编程语言必须同时支持这 4 个概念，才能被认为是一门面向对象编程的语言，如 Python、Java 和 Ruby。本章将分别学习面向对象编程的 4 个支柱。</p>\n<h3 id=\"131\">13.1　封装</h3>\n<p><strong>封装</strong>（encapsulation）包含两个概念。第一个概念是在面向对象编程中，对象将变量（状态）和方法（用来改变状态或执行涉及状态的计算）集中在一个地方——即对象本身。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j74o5rh</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span>():</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.len = l\n08\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">12</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.len</code></pre>\n<p>上例中，实例变量 <code>len</code> 和 <code>width</code> 保存的是对象的状态，并在 area 方法内集中在相同的地方（对象本身）。该方法使用对象的状态来返回长方形的面积。</p>\n<p>封装包含的第二个概念，指的是隐藏类的内部数据，以避免<strong>客户端</strong>（client）<strong>代码</strong>（即类外部的代码）直接进行访问。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jtz28ha</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Data</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">change_data</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, index, n)</span></span>:\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.nums[index] = n</code></pre>\n<p><code>Data</code> 类有一个叫 <code>num</code> 的实例变量，包含一个整型数列表。创建一个 <code>Data</code> 对象后，有两种方法可以改变 <code>nums</code> 中的元素：使用 <code>change_data</code> 方法，或者直接使用 <code>Data</code> 对象访问其 <code>nums</code> 实例变量。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/huczqr5</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Data</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">change_data</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, index, n)</span></span>:\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.nums[index] = n\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  data_one = Data()\n<span class=\"hljs-number\">14</span>  data_one.nums[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">15</span>  <strong>print</strong>(data_one.nums)\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>  data_two = Data()\n<span class=\"hljs-number\">19</span>  data_two.change_data(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>)\n<span class=\"hljs-number\">20</span>  <strong>print</strong>(data_two.nums)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]</code></pre>\n<p>以上两种方法都有效，但是假如你将实例变量 <code>nums</code> 变成一个元组又该如何操作呢？如果这样改动，任何外部尝试修改 <code>nums</code> 变量的代码都是无效的。<code>nums[0] = 100</code> 这样的代码将无法成功执行，因为元组是不可变的。</p>\n<p>许多编程语言允许程序员定义<strong>私有变量</strong>（private variable）和<strong>私有方法</strong>（private method）来解决这个问题：对象可以访问这些变量和方法，但是客户端代码不行。私有变量和方法适用于如下场景：有一个类内部使用的方法或变量，并且希望后续调整代码实现（或保留选项的灵活），但不想让任何使用该类的人依赖这些方法或变量，因为后续代码可能会调整（到时会导致客户端代码无法执行）。私有变量是封装包含的第二个概念的一种范例；私有变量隐藏了类的内部数据，避免客户端代码直接访问。<strong>公有变量</strong>（public variable）则相反，它是客户端代码可以直接访问的变量。</p>\n<p>Python 中没有私有变量，所有的变量都是可以公开访问的。Python 通过另一种方法解决了私有变量应对的问题：使用命名约定。在 Python 中，如果有调用者不应该访问的变量或方法，则应在名称前加下划线。Python 程序员看见某个方法或变量以下划线开头时，就会知道它们不应该被使用（不过实际仍然是可以使用的）。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jkaorle</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">PublicPrivateExample</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.public = <span class=\"hljs-string\">\"safe\"</span>\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>._unsafe = <span class=\"hljs-string\">\"unsafe\"</span>\n08\n09\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">public_method</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-comment\"># 客户端可以使用</span>\n<span class=\"hljs-number\">12</span>          <strong>pass</strong>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">_unsafe_method</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\"># 客户端不应使用</span>\n<span class=\"hljs-number\">17</span>          <strong>pass</strong></code></pre>\n<p>编写客户端代码的程序员看到上述代码后，会知道变量 <code>self.public</code> 是可以安全使用的，但是不应该使用变量 <code>self._unsafe</code>，因为其以下划线开头。如果非要使用，后续可能会有风险。维护上述代码的程序员，没有义务一直保留 <code>self._unsafe</code>，因为调用者本不应该访问该变量。客户端程序员也能确认 <code>public_method</code> 是可以放心使用的，而 <code>_unsafe_method</code> 则不然，因为其名称同样以下划线开头。</p>\n<h3 id=\"132\">13.2　抽象</h3>\n<p><strong>抽象</strong>（abstraction）指的是“剥离事物的诸多特征，使其只保留最基本的特质”的过程。在面向对象编程中，使用类进行对象建模时就会用到抽象的技巧。</p>\n<p>假设要对人进行建模。人的特征很复杂：头发和眼睛颜色不同，还有身高、体重、种族、性别等诸多特征。如要创建一个类代表人，有一些细节可能与要解决的问题并不相关。举个例子，我们创建一个 <code>Person</code> 类，但是忽略其眼睛颜色和身高等特征，这就是在进行抽象。<code>Person</code> 对象是对人的抽象，代表的是只具备解决当前问题所需的基本特征的人。</p>\n<h3 id=\"133\">13.3　多态</h3>\n<p><strong>多态</strong>（polymorphism）指的是“为不同的基础形态（数据类型）提供相关接口的能力”。接口，指的是函数或方法。下面就是一个多态的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hrxd7gn</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n<span class=\"hljs-number\">5</span>  print(<span class=\"hljs-number\">200</span>)\n<span class=\"hljs-number\">6</span>  <strong>print</strong>(<span class=\"hljs-number\">200.1</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n&gt;&gt; <span class=\"hljs-number\">200</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">200.1</span></code></pre>\n<p><code>print</code> 函数为字符串、整数和浮点数这 3 种不同的数据类型提供了相同的接口。我们不必定义并调用 3 个不同的函数（如调用 <code>print_string</code> 打印字符串，<code>print_int</code> 打印整数，<code>print_float</code> 打印浮点数），只需要调用 <code>print</code> 函数即可支持所有数据类型。</p>\n<p>内置函数 <code>type</code> 可以返回对象的数据类型如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gnxq24x</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  type(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n<span class=\"hljs-number\">5</span>  type(<span class=\"hljs-number\">200</span>)\n<span class=\"hljs-number\">6</span>  type(<span class=\"hljs-number\">200.1</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">str</span>'&gt;</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">int</span>'&gt;</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">float</span>'&gt;</span>\n</code></pre>\n<p>假设我们要编写一个程序，创建 3 个对象，用对象分别画出三角形、正方形和圆形。可以定义 3 个不同的类 <code>Triangle</code>、<code>Square</code> 和 <code>Circle</code>，并各自定义 <code>draw</code> 方法来实现。<code>Triangle.draw()</code> 用来画三角形，<code>Sqaure.draw()</code> 用来画正方形，<code>Circle.draw()</code> 则用来画圆形。这样设计的话，每个对象都有一个 <code>draw</code> 接口，支持画出自身类所对应的图形。这样就为 3 个不同的数据类型提供了相同的接口。</p>\n<p>如果 Python 不支持多态，每个图形就都需要创建一个方法：<code>draw_triangle</code> 画 <code>Triangle</code> 对象，<code>draw_square</code> 画 <code>Sqaure</code> 对象，<code>draw_cirlce</code> 画 <code>Circle</code> 对象。</p>\n<p>另外，如果有一个包含这些对象的列表，且要将每个对象画出来，就必须要检查每个对象的数据类型，然后调用正确的方法。这会让程序规模变大，更难阅读，更难编写，也更加脆弱。这还会使得程序更难以优化，因为每添加一个新图形，必须要找到代码中所有要画出图形的地方，并为新图形添加检查代码（以便确定使用哪个方法），而且还需再调用新的画图函数。下面分别是未使用多态和使用了多态的画图代码示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># 不要执行</span>\n02\n03\n04\n05  <span class=\"hljs-comment\"># 未使用多态的代码画图</span>\n06\n07  shapes = [trl, sql, crl]\n08  <strong><span class=\"hljs-keyword\">for</span></strong> a_shape <strong><span class=\"hljs-keyword\">in</span></strong> shapes:\n09      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-built_in\">type</span>(a_shape) == <span class=\"hljs-string\">\"Triangle\"</span>:\n10          a_shape.draw_triangle()\n11      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-built_in\">type</span>(a_shape) == <span class=\"hljs-string\">\"Square\"</span>:\n12          a_shape.draw_square()\n13      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-built_in\">type</span>(a_shape) == <span class=\"hljs-string\">\"Circle\"</span>:\n14          a_shape.draw_cirlce()\n15\n16\n17  <span class=\"hljs-comment\"># 使用多态的代码画图</span>\n18\n19  shapes = [trl,\n20            swl,\n21            crl]\n22  <strong><span class=\"hljs-keyword\">for</span></strong> a_shape <strong><span class=\"hljs-keyword\">in</span></strong> shapes:\n23      a_shape.draw()</code></pre>\n<p>如果在没有使用多态的代码中添加新图形，则必须修改 <code>for</code> 循环中的代码，检查 <code>a_shape</code> 的类型并调用其画图方法。通过统一多态的接口，可以随意向 <code>shapes</code> 列表中添加新图形，不需要再添加额外的代码即可画出对应图形。</p>\n<h3 id=\"134\">13.4　继承</h3>\n<p>编程语境中的<strong>继承</strong>（inheritance），与基因继承类似。在基因继承中，子女会从父母那继承眼睛颜色等特征。类似地，在创建类时，该类也可以从另一个类那里继承方法和变量。被继承的类，称为<strong>父类</strong>（parent class）；继承的类则被称为<strong>子类</strong>（child class）。本节将使用继承对图形进行建模。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrnqeo3</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  my_shape = Shape(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">25</span>)\n<span class=\"hljs-number\">17</span>  my_shape.print_size()\n\n&gt;&gt; <span class=\"hljs-number\">20</span> by <span class=\"hljs-number\">25</span></code></pre>\n<p>通过该类，我们可以创建拥有 <code>width</code> 和 <code>len</code> 属性的 <code>Shape</code> 对象。<code>Shape</code> 对象有一个方法 <code>print_size</code>，可打印其 <code>width</code> 和 <code>len</code> 的值。</p>\n<p>接下来，定义一个子类。在创建子类时，将父类的变量名传入子类，即可继承父类的属性。下例中 <code>Square</code> 类的继承来自 <code>Shape</code> 类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8lj35s</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span><span class=\"hljs-params\">(Shape)</span>:</span>\n<span class=\"hljs-number\">17</span>      <strong><span class=\"hljs-keyword\">pass</span></strong>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>  a_square = Square(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">21</span>  a_square.print_size()\n\n&gt;&gt; <span class=\"hljs-number\">20</span> by <span class=\"hljs-number\">20</span></code></pre>\n<p>因为我们将 <code>Shape</code> 类作为参数传给了 <code>Square</code> 类，后者就继承了 <code>Shape</code> 类的变量和方法。<code>Sqaure</code> 类中定义的代码只有关键字 <code>keyword</code>，表示不执行任何操作。</p>\n<p>由于继承了父类，我们可以创建 <code>Square</code> 对象，传入宽度和长度参数，并在其上调用 <code>print_size</code> 方法，而不需要再写任何代码（除 <code>pass</code> 外）。由此带来的代码量缩减很重要，因为避免代码重复可以让程序更精简、更可控。</p>\n<p>子类与其他类没有区别，它可以定义新的方法和变量，不会影响父类。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hwjdcy9</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span><span class=\"hljs-params\">(Shape)</span>:</span>\n<span class=\"hljs-number\">17</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">18</span>          <strong><span class=\"hljs-keyword\">return</span></strong> self.width * self.len\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>  a_square = Square(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">22</span>  <strong>print</strong>(a_square.area())\n\n&gt;&gt; <span class=\"hljs-number\">400</span></code></pre>\n<p>当子类继承父类的方法时，我们可以定义一个与继承的方法名称相同的新方法，从而覆盖父类中的方法。子类改变从父类中继承方法的实现能力，被称为<strong>方法覆盖</strong>（method overriding），示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hy9m8ht</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span><span class=\"hljs-params\">(Shape)</span>:</span>\n<span class=\"hljs-number\">17</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">18</span>          <strong><span class=\"hljs-keyword\">return</span></strong> self.width * self.len\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">22</span>          print(<span class=\"hljs-string\">\"\"\"I am {} by {}\n23                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">24</span>                           self.len))\n<span class=\"hljs-number\">25</span>\n<span class=\"hljs-number\">26</span>\n<span class=\"hljs-number\">27</span>  a_square = Square(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">28</span>  a_square.print_size()\n\n&gt;&gt; I am <span class=\"hljs-number\">20</span> by <span class=\"hljs-number\">20</span></code></pre>\n<p>上例中，由于定义了一个叫 <code>print_size</code> 的方法，新定义的方法覆盖了父类中同名的方法，在调用时会打印不同的信息。</p>\n<h3 id=\"135\">13.5　组合</h3>\n<p>介绍完面向对象编程的 4 个支柱之后，这里再介绍一个更重要的概念：<strong>组合</strong>（composition）。通过组合技巧，将一个对象作为变量保存在另一个对象中，可以模拟“拥有”关系。例如，可使用组合来表达狗和其主人之间的关系（狗有主人）。为此，我们首先定义表示狗和人的类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqg488n</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Dog</span>():</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>,\n<span class=\"hljs-number\">06</span>                   name,\n<span class=\"hljs-number\">07</span>                   breed,\n08                   owner)</span></span>:\n09          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.breed = breed\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-keyword\">self</span>.owner = owner\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Person</span>():</span>\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-keyword\">self</span>.name = name</code></pre>\n<p>然后，在创建 <code>Dog</code> 对象时将 <code>Person</code> 对象作为 <code>owner</code> 参数传入：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zlzefd4</span>\n<span class=\"hljs-number\">02</span>  <span class=\"hljs-comment\"># 接上例</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>  mick = Person(<span class=\"hljs-string\">\"Mick Jagger\"</span>)\n<span class=\"hljs-number\">07</span>  stan = Dog(<span class=\"hljs-string\">\"Stanley\"</span>,\n08             <span class=\"hljs-string\">\"Bulldog\"</span>,\n09              mick)\n<span class=\"hljs-number\">10</span>  print(stan.owner.name)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Mick Jagger\n</code></pre>\n<p>这样，<code>stan</code> 对象 <code>\"Stanley\"</code> 就有了一位主人，即名叫 <code>\"Mick Jagger\"</code> 的 <code>Person</code> 对象，保存在其实例变量 <code>owner</code> 中。</p>\n<h3 id=\"136\">13.6　术语表</h3>\n<p><strong>面向对象编程的四大支柱</strong>：封装、抽象、多态和继承。</p>\n<p><strong>继承</strong>：在基因继承中，子女会从父母那继承眼睛颜色等特征。类似地，在创建类时，该类也可以从另一个类那里继承方法和变量。</p>\n<p><strong>父类</strong>：被继承的类。</p>\n<p><strong>子类</strong>：继承父类的类。</p>\n<p><strong>方法覆盖</strong>：子类改变从父类中继承方法的实现能力。</p>\n<p><strong>多态</strong>：多态指的是为不同的基础形态（数据类型）提供相关接口的能力。</p>\n<p><strong>抽象</strong>：抽象指的是剥离事物的诸多特征，使其只保留最基本的特质的过程。</p>\n<p><strong>客户端代码</strong>：使用对象的类之外的代码。</p>\n<p><strong>封装</strong>：封装包含两个概念。第一个概念是在面向对象编程中对象将变量（状态）和方法（用来改变状态或执行涉及状态的计算）集中在一个地方——即对象本身。第二个概念指的是隐藏类的内部数据，以避免客户端代码（即类外部的代码）直接进行访问。</p>\n<p><strong>组合</strong>：通过组合技巧，将一个对象作为变量保存在另一个对象中，可以模拟“拥有”关系。</p>\n<h3 id=\"137\">13.7　挑战练习</h3>\n<p>1．创建 <code>Rectangle</code> 和 <code>Square</code> 类，使它们均有一个叫 <code>calculate_perimeter</code> 的方法，计算其所表示图形的周长。创建 <code>Rectangle</code> 和 <code>Sqaure</code> 对象，并调用二者的周长计算方法。</p>\n<p>2．在 <code>Square</code> 类中，定义一个叫 <code>change_size</code> 的方法，支持传入一个数字，增加或减少（数字为负时）<code>Square</code> 对象的边长。</p>\n<p>3．创建一个叫 <code>Shape</code> 的类。在其中定义一个叫 <code>what_am_i</code> 的方法，被调用时打印 <code>\"I am s shape\"</code>。调整上个挑战中的 <code>Square</code> 和 <code>Rectangle</code> 类，使其继承 <code>Shape</code> 类，然后创建 <code>Sqaure</code> 和 <code>Rectangle</code> 对象，并在二者上调用新方法。</p>\n<p>4．创建一个叫 <code>Horse</code> 的类，以及一个叫 <code>Rider</code> 的类。使用组合，表示一批有骑手的马。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","source":"_posts/Python无师自通/13_4_pillars.html","raw":"---\ntitle: 面向对象的四大支柱\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>面向对象的四大支柱</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#131\">13.1　封装</a></li>\n<li><a href=\"#132\">13.2　抽象</a></li>\n<li><a href=\"#133\">13.3　多态</a></li>\n<li><a href=\"#134\">13.4　继承</a></li>\n<li><a href=\"#135\">13.5　组合</a></li>\n<li><a href=\"#136\">13.6　术语表</a></li>\n<li><a href=\"#137\">13.7　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“优良设计创造价值的速度，快于其增加成本的速度。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——托马斯 · C. 盖勒（Thomas C.Gale）</span></p>\n</blockquote>\n<p>面向对象编程有四大概念：封装、抽象、多态和继承。它们共同构成了<strong>面向对象编程的四大支柱</strong>。编程语言必须同时支持这 4 个概念，才能被认为是一门面向对象编程的语言，如 Python、Java 和 Ruby。本章将分别学习面向对象编程的 4 个支柱。</p>\n<h3 id=\"131\">13.1　封装</h3>\n<p><strong>封装</strong>（encapsulation）包含两个概念。第一个概念是在面向对象编程中，对象将变量（状态）和方法（用来改变状态或执行涉及状态的计算）集中在一个地方——即对象本身。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j74o5rh</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span>():</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.len = l\n08\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">12</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.len</code></pre>\n<p>上例中，实例变量 <code>len</code> 和 <code>width</code> 保存的是对象的状态，并在 area 方法内集中在相同的地方（对象本身）。该方法使用对象的状态来返回长方形的面积。</p>\n<p>封装包含的第二个概念，指的是隐藏类的内部数据，以避免<strong>客户端</strong>（client）<strong>代码</strong>（即类外部的代码）直接进行访问。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jtz28ha</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Data</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">change_data</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, index, n)</span></span>:\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.nums[index] = n</code></pre>\n<p><code>Data</code> 类有一个叫 <code>num</code> 的实例变量，包含一个整型数列表。创建一个 <code>Data</code> 对象后，有两种方法可以改变 <code>nums</code> 中的元素：使用 <code>change_data</code> 方法，或者直接使用 <code>Data</code> 对象访问其 <code>nums</code> 实例变量。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/huczqr5</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Data</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">change_data</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, index, n)</span></span>:\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.nums[index] = n\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  data_one = Data()\n<span class=\"hljs-number\">14</span>  data_one.nums[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">15</span>  <strong>print</strong>(data_one.nums)\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>  data_two = Data()\n<span class=\"hljs-number\">19</span>  data_two.change_data(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>)\n<span class=\"hljs-number\">20</span>  <strong>print</strong>(data_two.nums)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]</code></pre>\n<p>以上两种方法都有效，但是假如你将实例变量 <code>nums</code> 变成一个元组又该如何操作呢？如果这样改动，任何外部尝试修改 <code>nums</code> 变量的代码都是无效的。<code>nums[0] = 100</code> 这样的代码将无法成功执行，因为元组是不可变的。</p>\n<p>许多编程语言允许程序员定义<strong>私有变量</strong>（private variable）和<strong>私有方法</strong>（private method）来解决这个问题：对象可以访问这些变量和方法，但是客户端代码不行。私有变量和方法适用于如下场景：有一个类内部使用的方法或变量，并且希望后续调整代码实现（或保留选项的灵活），但不想让任何使用该类的人依赖这些方法或变量，因为后续代码可能会调整（到时会导致客户端代码无法执行）。私有变量是封装包含的第二个概念的一种范例；私有变量隐藏了类的内部数据，避免客户端代码直接访问。<strong>公有变量</strong>（public variable）则相反，它是客户端代码可以直接访问的变量。</p>\n<p>Python 中没有私有变量，所有的变量都是可以公开访问的。Python 通过另一种方法解决了私有变量应对的问题：使用命名约定。在 Python 中，如果有调用者不应该访问的变量或方法，则应在名称前加下划线。Python 程序员看见某个方法或变量以下划线开头时，就会知道它们不应该被使用（不过实际仍然是可以使用的）。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jkaorle</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">PublicPrivateExample</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.public = <span class=\"hljs-string\">\"safe\"</span>\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>._unsafe = <span class=\"hljs-string\">\"unsafe\"</span>\n08\n09\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">public_method</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-comment\"># 客户端可以使用</span>\n<span class=\"hljs-number\">12</span>          <strong>pass</strong>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">_unsafe_method</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\"># 客户端不应使用</span>\n<span class=\"hljs-number\">17</span>          <strong>pass</strong></code></pre>\n<p>编写客户端代码的程序员看到上述代码后，会知道变量 <code>self.public</code> 是可以安全使用的，但是不应该使用变量 <code>self._unsafe</code>，因为其以下划线开头。如果非要使用，后续可能会有风险。维护上述代码的程序员，没有义务一直保留 <code>self._unsafe</code>，因为调用者本不应该访问该变量。客户端程序员也能确认 <code>public_method</code> 是可以放心使用的，而 <code>_unsafe_method</code> 则不然，因为其名称同样以下划线开头。</p>\n<h3 id=\"132\">13.2　抽象</h3>\n<p><strong>抽象</strong>（abstraction）指的是“剥离事物的诸多特征，使其只保留最基本的特质”的过程。在面向对象编程中，使用类进行对象建模时就会用到抽象的技巧。</p>\n<p>假设要对人进行建模。人的特征很复杂：头发和眼睛颜色不同，还有身高、体重、种族、性别等诸多特征。如要创建一个类代表人，有一些细节可能与要解决的问题并不相关。举个例子，我们创建一个 <code>Person</code> 类，但是忽略其眼睛颜色和身高等特征，这就是在进行抽象。<code>Person</code> 对象是对人的抽象，代表的是只具备解决当前问题所需的基本特征的人。</p>\n<h3 id=\"133\">13.3　多态</h3>\n<p><strong>多态</strong>（polymorphism）指的是“为不同的基础形态（数据类型）提供相关接口的能力”。接口，指的是函数或方法。下面就是一个多态的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hrxd7gn</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n<span class=\"hljs-number\">5</span>  print(<span class=\"hljs-number\">200</span>)\n<span class=\"hljs-number\">6</span>  <strong>print</strong>(<span class=\"hljs-number\">200.1</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n&gt;&gt; <span class=\"hljs-number\">200</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">200.1</span></code></pre>\n<p><code>print</code> 函数为字符串、整数和浮点数这 3 种不同的数据类型提供了相同的接口。我们不必定义并调用 3 个不同的函数（如调用 <code>print_string</code> 打印字符串，<code>print_int</code> 打印整数，<code>print_float</code> 打印浮点数），只需要调用 <code>print</code> 函数即可支持所有数据类型。</p>\n<p>内置函数 <code>type</code> 可以返回对象的数据类型如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gnxq24x</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  type(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n<span class=\"hljs-number\">5</span>  type(<span class=\"hljs-number\">200</span>)\n<span class=\"hljs-number\">6</span>  type(<span class=\"hljs-number\">200.1</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">str</span>'&gt;</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">int</span>'&gt;</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">float</span>'&gt;</span>\n</code></pre>\n<p>假设我们要编写一个程序，创建 3 个对象，用对象分别画出三角形、正方形和圆形。可以定义 3 个不同的类 <code>Triangle</code>、<code>Square</code> 和 <code>Circle</code>，并各自定义 <code>draw</code> 方法来实现。<code>Triangle.draw()</code> 用来画三角形，<code>Sqaure.draw()</code> 用来画正方形，<code>Circle.draw()</code> 则用来画圆形。这样设计的话，每个对象都有一个 <code>draw</code> 接口，支持画出自身类所对应的图形。这样就为 3 个不同的数据类型提供了相同的接口。</p>\n<p>如果 Python 不支持多态，每个图形就都需要创建一个方法：<code>draw_triangle</code> 画 <code>Triangle</code> 对象，<code>draw_square</code> 画 <code>Sqaure</code> 对象，<code>draw_cirlce</code> 画 <code>Circle</code> 对象。</p>\n<p>另外，如果有一个包含这些对象的列表，且要将每个对象画出来，就必须要检查每个对象的数据类型，然后调用正确的方法。这会让程序规模变大，更难阅读，更难编写，也更加脆弱。这还会使得程序更难以优化，因为每添加一个新图形，必须要找到代码中所有要画出图形的地方，并为新图形添加检查代码（以便确定使用哪个方法），而且还需再调用新的画图函数。下面分别是未使用多态和使用了多态的画图代码示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># 不要执行</span>\n02\n03\n04\n05  <span class=\"hljs-comment\"># 未使用多态的代码画图</span>\n06\n07  shapes = [trl, sql, crl]\n08  <strong><span class=\"hljs-keyword\">for</span></strong> a_shape <strong><span class=\"hljs-keyword\">in</span></strong> shapes:\n09      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-built_in\">type</span>(a_shape) == <span class=\"hljs-string\">\"Triangle\"</span>:\n10          a_shape.draw_triangle()\n11      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-built_in\">type</span>(a_shape) == <span class=\"hljs-string\">\"Square\"</span>:\n12          a_shape.draw_square()\n13      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-built_in\">type</span>(a_shape) == <span class=\"hljs-string\">\"Circle\"</span>:\n14          a_shape.draw_cirlce()\n15\n16\n17  <span class=\"hljs-comment\"># 使用多态的代码画图</span>\n18\n19  shapes = [trl,\n20            swl,\n21            crl]\n22  <strong><span class=\"hljs-keyword\">for</span></strong> a_shape <strong><span class=\"hljs-keyword\">in</span></strong> shapes:\n23      a_shape.draw()</code></pre>\n<p>如果在没有使用多态的代码中添加新图形，则必须修改 <code>for</code> 循环中的代码，检查 <code>a_shape</code> 的类型并调用其画图方法。通过统一多态的接口，可以随意向 <code>shapes</code> 列表中添加新图形，不需要再添加额外的代码即可画出对应图形。</p>\n<h3 id=\"134\">13.4　继承</h3>\n<p>编程语境中的<strong>继承</strong>（inheritance），与基因继承类似。在基因继承中，子女会从父母那继承眼睛颜色等特征。类似地，在创建类时，该类也可以从另一个类那里继承方法和变量。被继承的类，称为<strong>父类</strong>（parent class）；继承的类则被称为<strong>子类</strong>（child class）。本节将使用继承对图形进行建模。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrnqeo3</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  my_shape = Shape(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">25</span>)\n<span class=\"hljs-number\">17</span>  my_shape.print_size()\n\n&gt;&gt; <span class=\"hljs-number\">20</span> by <span class=\"hljs-number\">25</span></code></pre>\n<p>通过该类，我们可以创建拥有 <code>width</code> 和 <code>len</code> 属性的 <code>Shape</code> 对象。<code>Shape</code> 对象有一个方法 <code>print_size</code>，可打印其 <code>width</code> 和 <code>len</code> 的值。</p>\n<p>接下来，定义一个子类。在创建子类时，将父类的变量名传入子类，即可继承父类的属性。下例中 <code>Square</code> 类的继承来自 <code>Shape</code> 类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8lj35s</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span><span class=\"hljs-params\">(Shape)</span>:</span>\n<span class=\"hljs-number\">17</span>      <strong><span class=\"hljs-keyword\">pass</span></strong>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>  a_square = Square(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">21</span>  a_square.print_size()\n\n&gt;&gt; <span class=\"hljs-number\">20</span> by <span class=\"hljs-number\">20</span></code></pre>\n<p>因为我们将 <code>Shape</code> 类作为参数传给了 <code>Square</code> 类，后者就继承了 <code>Shape</code> 类的变量和方法。<code>Sqaure</code> 类中定义的代码只有关键字 <code>keyword</code>，表示不执行任何操作。</p>\n<p>由于继承了父类，我们可以创建 <code>Square</code> 对象，传入宽度和长度参数，并在其上调用 <code>print_size</code> 方法，而不需要再写任何代码（除 <code>pass</code> 外）。由此带来的代码量缩减很重要，因为避免代码重复可以让程序更精简、更可控。</p>\n<p>子类与其他类没有区别，它可以定义新的方法和变量，不会影响父类。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hwjdcy9</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span><span class=\"hljs-params\">(Shape)</span>:</span>\n<span class=\"hljs-number\">17</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">18</span>          <strong><span class=\"hljs-keyword\">return</span></strong> self.width * self.len\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>  a_square = Square(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">22</span>  <strong>print</strong>(a_square.area())\n\n&gt;&gt; <span class=\"hljs-number\">400</span></code></pre>\n<p>当子类继承父类的方法时，我们可以定义一个与继承的方法名称相同的新方法，从而覆盖父类中的方法。子类改变从父类中继承方法的实现能力，被称为<strong>方法覆盖</strong>（method overriding），示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hy9m8ht</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span><span class=\"hljs-params\">(Shape)</span>:</span>\n<span class=\"hljs-number\">17</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">18</span>          <strong><span class=\"hljs-keyword\">return</span></strong> self.width * self.len\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">22</span>          print(<span class=\"hljs-string\">\"\"\"I am {} by {}\n23                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">24</span>                           self.len))\n<span class=\"hljs-number\">25</span>\n<span class=\"hljs-number\">26</span>\n<span class=\"hljs-number\">27</span>  a_square = Square(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">28</span>  a_square.print_size()\n\n&gt;&gt; I am <span class=\"hljs-number\">20</span> by <span class=\"hljs-number\">20</span></code></pre>\n<p>上例中，由于定义了一个叫 <code>print_size</code> 的方法，新定义的方法覆盖了父类中同名的方法，在调用时会打印不同的信息。</p>\n<h3 id=\"135\">13.5　组合</h3>\n<p>介绍完面向对象编程的 4 个支柱之后，这里再介绍一个更重要的概念：<strong>组合</strong>（composition）。通过组合技巧，将一个对象作为变量保存在另一个对象中，可以模拟“拥有”关系。例如，可使用组合来表达狗和其主人之间的关系（狗有主人）。为此，我们首先定义表示狗和人的类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqg488n</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Dog</span>():</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>,\n<span class=\"hljs-number\">06</span>                   name,\n<span class=\"hljs-number\">07</span>                   breed,\n08                   owner)</span></span>:\n09          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.breed = breed\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-keyword\">self</span>.owner = owner\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Person</span>():</span>\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-keyword\">self</span>.name = name</code></pre>\n<p>然后，在创建 <code>Dog</code> 对象时将 <code>Person</code> 对象作为 <code>owner</code> 参数传入：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zlzefd4</span>\n<span class=\"hljs-number\">02</span>  <span class=\"hljs-comment\"># 接上例</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>  mick = Person(<span class=\"hljs-string\">\"Mick Jagger\"</span>)\n<span class=\"hljs-number\">07</span>  stan = Dog(<span class=\"hljs-string\">\"Stanley\"</span>,\n08             <span class=\"hljs-string\">\"Bulldog\"</span>,\n09              mick)\n<span class=\"hljs-number\">10</span>  print(stan.owner.name)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Mick Jagger\n</code></pre>\n<p>这样，<code>stan</code> 对象 <code>\"Stanley\"</code> 就有了一位主人，即名叫 <code>\"Mick Jagger\"</code> 的 <code>Person</code> 对象，保存在其实例变量 <code>owner</code> 中。</p>\n<h3 id=\"136\">13.6　术语表</h3>\n<p><strong>面向对象编程的四大支柱</strong>：封装、抽象、多态和继承。</p>\n<p><strong>继承</strong>：在基因继承中，子女会从父母那继承眼睛颜色等特征。类似地，在创建类时，该类也可以从另一个类那里继承方法和变量。</p>\n<p><strong>父类</strong>：被继承的类。</p>\n<p><strong>子类</strong>：继承父类的类。</p>\n<p><strong>方法覆盖</strong>：子类改变从父类中继承方法的实现能力。</p>\n<p><strong>多态</strong>：多态指的是为不同的基础形态（数据类型）提供相关接口的能力。</p>\n<p><strong>抽象</strong>：抽象指的是剥离事物的诸多特征，使其只保留最基本的特质的过程。</p>\n<p><strong>客户端代码</strong>：使用对象的类之外的代码。</p>\n<p><strong>封装</strong>：封装包含两个概念。第一个概念是在面向对象编程中对象将变量（状态）和方法（用来改变状态或执行涉及状态的计算）集中在一个地方——即对象本身。第二个概念指的是隐藏类的内部数据，以避免客户端代码（即类外部的代码）直接进行访问。</p>\n<p><strong>组合</strong>：通过组合技巧，将一个对象作为变量保存在另一个对象中，可以模拟“拥有”关系。</p>\n<h3 id=\"137\">13.7　挑战练习</h3>\n<p>1．创建 <code>Rectangle</code> 和 <code>Square</code> 类，使它们均有一个叫 <code>calculate_perimeter</code> 的方法，计算其所表示图形的周长。创建 <code>Rectangle</code> 和 <code>Sqaure</code> 对象，并调用二者的周长计算方法。</p>\n<p>2．在 <code>Square</code> 类中，定义一个叫 <code>change_size</code> 的方法，支持传入一个数字，增加或减少（数字为负时）<code>Square</code> 对象的边长。</p>\n<p>3．创建一个叫 <code>Shape</code> 的类。在其中定义一个叫 <code>what_am_i</code> 的方法，被调用时打印 <code>\"I am s shape\"</code>。调整上个挑战中的 <code>Square</code> 和 <code>Rectangle</code> 类，使其继承 <code>Shape</code> 类，然后创建 <code>Sqaure</code> 和 <code>Rectangle</code> 对象，并在二者上调用新方法。</p>\n<p>4．创建一个叫 <code>Horse</code> 的类，以及一个叫 <code>Rider</code> 的类。使用组合，表示一批有骑手的马。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","slug":"Python无师自通/13_4_pillars","published":1,"date":"2019-06-11T04:44:49.427Z","updated":"2019-06-11T04:44:49.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwrbn5ve00007nh7t920iall","content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>面向对象的四大支柱</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#131\">13.1　封装</a></li>\n<li><a href=\"#132\">13.2　抽象</a></li>\n<li><a href=\"#133\">13.3　多态</a></li>\n<li><a href=\"#134\">13.4　继承</a></li>\n<li><a href=\"#135\">13.5　组合</a></li>\n<li><a href=\"#136\">13.6　术语表</a></li>\n<li><a href=\"#137\">13.7　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“优良设计创造价值的速度，快于其增加成本的速度。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——托马斯 · C. 盖勒（Thomas C.Gale）</span></p>\n</blockquote>\n<p>面向对象编程有四大概念：封装、抽象、多态和继承。它们共同构成了<strong>面向对象编程的四大支柱</strong>。编程语言必须同时支持这 4 个概念，才能被认为是一门面向对象编程的语言，如 Python、Java 和 Ruby。本章将分别学习面向对象编程的 4 个支柱。</p>\n<h3 id=\"131\">13.1　封装</h3>\n<p><strong>封装</strong>（encapsulation）包含两个概念。第一个概念是在面向对象编程中，对象将变量（状态）和方法（用来改变状态或执行涉及状态的计算）集中在一个地方——即对象本身。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j74o5rh</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span>():</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.len = l\n08\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">12</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.len</code></pre>\n<p>上例中，实例变量 <code>len</code> 和 <code>width</code> 保存的是对象的状态，并在 area 方法内集中在相同的地方（对象本身）。该方法使用对象的状态来返回长方形的面积。</p>\n<p>封装包含的第二个概念，指的是隐藏类的内部数据，以避免<strong>客户端</strong>（client）<strong>代码</strong>（即类外部的代码）直接进行访问。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jtz28ha</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Data</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">change_data</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, index, n)</span></span>:\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.nums[index] = n</code></pre>\n<p><code>Data</code> 类有一个叫 <code>num</code> 的实例变量，包含一个整型数列表。创建一个 <code>Data</code> 对象后，有两种方法可以改变 <code>nums</code> 中的元素：使用 <code>change_data</code> 方法，或者直接使用 <code>Data</code> 对象访问其 <code>nums</code> 实例变量。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/huczqr5</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Data</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">change_data</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, index, n)</span></span>:\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.nums[index] = n\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  data_one = Data()\n<span class=\"hljs-number\">14</span>  data_one.nums[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">15</span>  <strong>print</strong>(data_one.nums)\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>  data_two = Data()\n<span class=\"hljs-number\">19</span>  data_two.change_data(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>)\n<span class=\"hljs-number\">20</span>  <strong>print</strong>(data_two.nums)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]</code></pre>\n<p>以上两种方法都有效，但是假如你将实例变量 <code>nums</code> 变成一个元组又该如何操作呢？如果这样改动，任何外部尝试修改 <code>nums</code> 变量的代码都是无效的。<code>nums[0] = 100</code> 这样的代码将无法成功执行，因为元组是不可变的。</p>\n<p>许多编程语言允许程序员定义<strong>私有变量</strong>（private variable）和<strong>私有方法</strong>（private method）来解决这个问题：对象可以访问这些变量和方法，但是客户端代码不行。私有变量和方法适用于如下场景：有一个类内部使用的方法或变量，并且希望后续调整代码实现（或保留选项的灵活），但不想让任何使用该类的人依赖这些方法或变量，因为后续代码可能会调整（到时会导致客户端代码无法执行）。私有变量是封装包含的第二个概念的一种范例；私有变量隐藏了类的内部数据，避免客户端代码直接访问。<strong>公有变量</strong>（public variable）则相反，它是客户端代码可以直接访问的变量。</p>\n<p>Python 中没有私有变量，所有的变量都是可以公开访问的。Python 通过另一种方法解决了私有变量应对的问题：使用命名约定。在 Python 中，如果有调用者不应该访问的变量或方法，则应在名称前加下划线。Python 程序员看见某个方法或变量以下划线开头时，就会知道它们不应该被使用（不过实际仍然是可以使用的）。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jkaorle</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">PublicPrivateExample</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.public = <span class=\"hljs-string\">\"safe\"</span>\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>._unsafe = <span class=\"hljs-string\">\"unsafe\"</span>\n08\n09\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">public_method</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-comment\"># 客户端可以使用</span>\n<span class=\"hljs-number\">12</span>          <strong>pass</strong>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">_unsafe_method</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\"># 客户端不应使用</span>\n<span class=\"hljs-number\">17</span>          <strong>pass</strong></code></pre>\n<p>编写客户端代码的程序员看到上述代码后，会知道变量 <code>self.public</code> 是可以安全使用的，但是不应该使用变量 <code>self._unsafe</code>，因为其以下划线开头。如果非要使用，后续可能会有风险。维护上述代码的程序员，没有义务一直保留 <code>self._unsafe</code>，因为调用者本不应该访问该变量。客户端程序员也能确认 <code>public_method</code> 是可以放心使用的，而 <code>_unsafe_method</code> 则不然，因为其名称同样以下划线开头。</p>\n<h3 id=\"132\">13.2　抽象</h3>\n<p><strong>抽象</strong>（abstraction）指的是“剥离事物的诸多特征，使其只保留最基本的特质”的过程。在面向对象编程中，使用类进行对象建模时就会用到抽象的技巧。</p>\n<p>假设要对人进行建模。人的特征很复杂：头发和眼睛颜色不同，还有身高、体重、种族、性别等诸多特征。如要创建一个类代表人，有一些细节可能与要解决的问题并不相关。举个例子，我们创建一个 <code>Person</code> 类，但是忽略其眼睛颜色和身高等特征，这就是在进行抽象。<code>Person</code> 对象是对人的抽象，代表的是只具备解决当前问题所需的基本特征的人。</p>\n<h3 id=\"133\">13.3　多态</h3>\n<p><strong>多态</strong>（polymorphism）指的是“为不同的基础形态（数据类型）提供相关接口的能力”。接口，指的是函数或方法。下面就是一个多态的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hrxd7gn</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n<span class=\"hljs-number\">5</span>  print(<span class=\"hljs-number\">200</span>)\n<span class=\"hljs-number\">6</span>  <strong>print</strong>(<span class=\"hljs-number\">200.1</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n&gt;&gt; <span class=\"hljs-number\">200</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">200.1</span></code></pre>\n<p><code>print</code> 函数为字符串、整数和浮点数这 3 种不同的数据类型提供了相同的接口。我们不必定义并调用 3 个不同的函数（如调用 <code>print_string</code> 打印字符串，<code>print_int</code> 打印整数，<code>print_float</code> 打印浮点数），只需要调用 <code>print</code> 函数即可支持所有数据类型。</p>\n<p>内置函数 <code>type</code> 可以返回对象的数据类型如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gnxq24x</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  type(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n<span class=\"hljs-number\">5</span>  type(<span class=\"hljs-number\">200</span>)\n<span class=\"hljs-number\">6</span>  type(<span class=\"hljs-number\">200.1</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">str</span>'&gt;</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">int</span>'&gt;</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">float</span>'&gt;</span>\n</code></pre>\n<p>假设我们要编写一个程序，创建 3 个对象，用对象分别画出三角形、正方形和圆形。可以定义 3 个不同的类 <code>Triangle</code>、<code>Square</code> 和 <code>Circle</code>，并各自定义 <code>draw</code> 方法来实现。<code>Triangle.draw()</code> 用来画三角形，<code>Sqaure.draw()</code> 用来画正方形，<code>Circle.draw()</code> 则用来画圆形。这样设计的话，每个对象都有一个 <code>draw</code> 接口，支持画出自身类所对应的图形。这样就为 3 个不同的数据类型提供了相同的接口。</p>\n<p>如果 Python 不支持多态，每个图形就都需要创建一个方法：<code>draw_triangle</code> 画 <code>Triangle</code> 对象，<code>draw_square</code> 画 <code>Sqaure</code> 对象，<code>draw_cirlce</code> 画 <code>Circle</code> 对象。</p>\n<p>另外，如果有一个包含这些对象的列表，且要将每个对象画出来，就必须要检查每个对象的数据类型，然后调用正确的方法。这会让程序规模变大，更难阅读，更难编写，也更加脆弱。这还会使得程序更难以优化，因为每添加一个新图形，必须要找到代码中所有要画出图形的地方，并为新图形添加检查代码（以便确定使用哪个方法），而且还需再调用新的画图函数。下面分别是未使用多态和使用了多态的画图代码示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># 不要执行</span>\n02\n03\n04\n05  <span class=\"hljs-comment\"># 未使用多态的代码画图</span>\n06\n07  shapes = [trl, sql, crl]\n08  <strong><span class=\"hljs-keyword\">for</span></strong> a_shape <strong><span class=\"hljs-keyword\">in</span></strong> shapes:\n09      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-built_in\">type</span>(a_shape) == <span class=\"hljs-string\">\"Triangle\"</span>:\n10          a_shape.draw_triangle()\n11      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-built_in\">type</span>(a_shape) == <span class=\"hljs-string\">\"Square\"</span>:\n12          a_shape.draw_square()\n13      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-built_in\">type</span>(a_shape) == <span class=\"hljs-string\">\"Circle\"</span>:\n14          a_shape.draw_cirlce()\n15\n16\n17  <span class=\"hljs-comment\"># 使用多态的代码画图</span>\n18\n19  shapes = [trl,\n20            swl,\n21            crl]\n22  <strong><span class=\"hljs-keyword\">for</span></strong> a_shape <strong><span class=\"hljs-keyword\">in</span></strong> shapes:\n23      a_shape.draw()</code></pre>\n<p>如果在没有使用多态的代码中添加新图形，则必须修改 <code>for</code> 循环中的代码，检查 <code>a_shape</code> 的类型并调用其画图方法。通过统一多态的接口，可以随意向 <code>shapes</code> 列表中添加新图形，不需要再添加额外的代码即可画出对应图形。</p>\n<h3 id=\"134\">13.4　继承</h3>\n<p>编程语境中的<strong>继承</strong>（inheritance），与基因继承类似。在基因继承中，子女会从父母那继承眼睛颜色等特征。类似地，在创建类时，该类也可以从另一个类那里继承方法和变量。被继承的类，称为<strong>父类</strong>（parent class）；继承的类则被称为<strong>子类</strong>（child class）。本节将使用继承对图形进行建模。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrnqeo3</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  my_shape = Shape(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">25</span>)\n<span class=\"hljs-number\">17</span>  my_shape.print_size()\n\n&gt;&gt; <span class=\"hljs-number\">20</span> by <span class=\"hljs-number\">25</span></code></pre>\n<p>通过该类，我们可以创建拥有 <code>width</code> 和 <code>len</code> 属性的 <code>Shape</code> 对象。<code>Shape</code> 对象有一个方法 <code>print_size</code>，可打印其 <code>width</code> 和 <code>len</code> 的值。</p>\n<p>接下来，定义一个子类。在创建子类时，将父类的变量名传入子类，即可继承父类的属性。下例中 <code>Square</code> 类的继承来自 <code>Shape</code> 类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8lj35s</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span><span class=\"hljs-params\">(Shape)</span>:</span>\n<span class=\"hljs-number\">17</span>      <strong><span class=\"hljs-keyword\">pass</span></strong>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>  a_square = Square(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">21</span>  a_square.print_size()\n\n&gt;&gt; <span class=\"hljs-number\">20</span> by <span class=\"hljs-number\">20</span></code></pre>\n<p>因为我们将 <code>Shape</code> 类作为参数传给了 <code>Square</code> 类，后者就继承了 <code>Shape</code> 类的变量和方法。<code>Sqaure</code> 类中定义的代码只有关键字 <code>keyword</code>，表示不执行任何操作。</p>\n<p>由于继承了父类，我们可以创建 <code>Square</code> 对象，传入宽度和长度参数，并在其上调用 <code>print_size</code> 方法，而不需要再写任何代码（除 <code>pass</code> 外）。由此带来的代码量缩减很重要，因为避免代码重复可以让程序更精简、更可控。</p>\n<p>子类与其他类没有区别，它可以定义新的方法和变量，不会影响父类。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hwjdcy9</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span><span class=\"hljs-params\">(Shape)</span>:</span>\n<span class=\"hljs-number\">17</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">18</span>          <strong><span class=\"hljs-keyword\">return</span></strong> self.width * self.len\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>  a_square = Square(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">22</span>  <strong>print</strong>(a_square.area())\n\n&gt;&gt; <span class=\"hljs-number\">400</span></code></pre>\n<p>当子类继承父类的方法时，我们可以定义一个与继承的方法名称相同的新方法，从而覆盖父类中的方法。子类改变从父类中继承方法的实现能力，被称为<strong>方法覆盖</strong>（method overriding），示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hy9m8ht</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span><span class=\"hljs-params\">(Shape)</span>:</span>\n<span class=\"hljs-number\">17</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">18</span>          <strong><span class=\"hljs-keyword\">return</span></strong> self.width * self.len\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">22</span>          print(<span class=\"hljs-string\">\"\"\"I am {} by {}\n23                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">24</span>                           self.len))\n<span class=\"hljs-number\">25</span>\n<span class=\"hljs-number\">26</span>\n<span class=\"hljs-number\">27</span>  a_square = Square(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">28</span>  a_square.print_size()\n\n&gt;&gt; I am <span class=\"hljs-number\">20</span> by <span class=\"hljs-number\">20</span></code></pre>\n<p>上例中，由于定义了一个叫 <code>print_size</code> 的方法，新定义的方法覆盖了父类中同名的方法，在调用时会打印不同的信息。</p>\n<h3 id=\"135\">13.5　组合</h3>\n<p>介绍完面向对象编程的 4 个支柱之后，这里再介绍一个更重要的概念：<strong>组合</strong>（composition）。通过组合技巧，将一个对象作为变量保存在另一个对象中，可以模拟“拥有”关系。例如，可使用组合来表达狗和其主人之间的关系（狗有主人）。为此，我们首先定义表示狗和人的类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqg488n</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Dog</span>():</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>,\n<span class=\"hljs-number\">06</span>                   name,\n<span class=\"hljs-number\">07</span>                   breed,\n08                   owner)</span></span>:\n09          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.breed = breed\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-keyword\">self</span>.owner = owner\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Person</span>():</span>\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-keyword\">self</span>.name = name</code></pre>\n<p>然后，在创建 <code>Dog</code> 对象时将 <code>Person</code> 对象作为 <code>owner</code> 参数传入：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zlzefd4</span>\n<span class=\"hljs-number\">02</span>  <span class=\"hljs-comment\"># 接上例</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>  mick = Person(<span class=\"hljs-string\">\"Mick Jagger\"</span>)\n<span class=\"hljs-number\">07</span>  stan = Dog(<span class=\"hljs-string\">\"Stanley\"</span>,\n08             <span class=\"hljs-string\">\"Bulldog\"</span>,\n09              mick)\n<span class=\"hljs-number\">10</span>  print(stan.owner.name)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Mick Jagger\n</code></pre>\n<p>这样，<code>stan</code> 对象 <code>\"Stanley\"</code> 就有了一位主人，即名叫 <code>\"Mick Jagger\"</code> 的 <code>Person</code> 对象，保存在其实例变量 <code>owner</code> 中。</p>\n<h3 id=\"136\">13.6　术语表</h3>\n<p><strong>面向对象编程的四大支柱</strong>：封装、抽象、多态和继承。</p>\n<p><strong>继承</strong>：在基因继承中，子女会从父母那继承眼睛颜色等特征。类似地，在创建类时，该类也可以从另一个类那里继承方法和变量。</p>\n<p><strong>父类</strong>：被继承的类。</p>\n<p><strong>子类</strong>：继承父类的类。</p>\n<p><strong>方法覆盖</strong>：子类改变从父类中继承方法的实现能力。</p>\n<p><strong>多态</strong>：多态指的是为不同的基础形态（数据类型）提供相关接口的能力。</p>\n<p><strong>抽象</strong>：抽象指的是剥离事物的诸多特征，使其只保留最基本的特质的过程。</p>\n<p><strong>客户端代码</strong>：使用对象的类之外的代码。</p>\n<p><strong>封装</strong>：封装包含两个概念。第一个概念是在面向对象编程中对象将变量（状态）和方法（用来改变状态或执行涉及状态的计算）集中在一个地方——即对象本身。第二个概念指的是隐藏类的内部数据，以避免客户端代码（即类外部的代码）直接进行访问。</p>\n<p><strong>组合</strong>：通过组合技巧，将一个对象作为变量保存在另一个对象中，可以模拟“拥有”关系。</p>\n<h3 id=\"137\">13.7　挑战练习</h3>\n<p>1．创建 <code>Rectangle</code> 和 <code>Square</code> 类，使它们均有一个叫 <code>calculate_perimeter</code> 的方法，计算其所表示图形的周长。创建 <code>Rectangle</code> 和 <code>Sqaure</code> 对象，并调用二者的周长计算方法。</p>\n<p>2．在 <code>Square</code> 类中，定义一个叫 <code>change_size</code> 的方法，支持传入一个数字，增加或减少（数字为负时）<code>Square</code> 对象的边长。</p>\n<p>3．创建一个叫 <code>Shape</code> 的类。在其中定义一个叫 <code>what_am_i</code> 的方法，被调用时打印 <code>\"I am s shape\"</code>。调整上个挑战中的 <code>Square</code> 和 <code>Rectangle</code> 类，使其继承 <code>Shape</code> 类，然后创建 <code>Sqaure</code> 和 <code>Rectangle</code> 对象，并在二者上调用新方法。</p>\n<p>4．创建一个叫 <code>Horse</code> 的类，以及一个叫 <code>Rider</code> 的类。使用组合，表示一批有骑手的马。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>面向对象的四大支柱</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#131\">13.1　封装</a></li>\n<li><a href=\"#132\">13.2　抽象</a></li>\n<li><a href=\"#133\">13.3　多态</a></li>\n<li><a href=\"#134\">13.4　继承</a></li>\n<li><a href=\"#135\">13.5　组合</a></li>\n<li><a href=\"#136\">13.6　术语表</a></li>\n<li><a href=\"#137\">13.7　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“优良设计创造价值的速度，快于其增加成本的速度。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——托马斯 · C. 盖勒（Thomas C.Gale）</span></p>\n</blockquote>\n<p>面向对象编程有四大概念：封装、抽象、多态和继承。它们共同构成了<strong>面向对象编程的四大支柱</strong>。编程语言必须同时支持这 4 个概念，才能被认为是一门面向对象编程的语言，如 Python、Java 和 Ruby。本章将分别学习面向对象编程的 4 个支柱。</p>\n<h3 id=\"131\">13.1　封装</h3>\n<p><strong>封装</strong>（encapsulation）包含两个概念。第一个概念是在面向对象编程中，对象将变量（状态）和方法（用来改变状态或执行涉及状态的计算）集中在一个地方——即对象本身。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j74o5rh</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span>():</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>.len = l\n08\n09\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">12</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.len</code></pre>\n<p>上例中，实例变量 <code>len</code> 和 <code>width</code> 保存的是对象的状态，并在 area 方法内集中在相同的地方（对象本身）。该方法使用对象的状态来返回长方形的面积。</p>\n<p>封装包含的第二个概念，指的是隐藏类的内部数据，以避免<strong>客户端</strong>（client）<strong>代码</strong>（即类外部的代码）直接进行访问。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jtz28ha</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Data</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">change_data</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, index, n)</span></span>:\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.nums[index] = n</code></pre>\n<p><code>Data</code> 类有一个叫 <code>num</code> 的实例变量，包含一个整型数列表。创建一个 <code>Data</code> 对象后，有两种方法可以改变 <code>nums</code> 中的元素：使用 <code>change_data</code> 方法，或者直接使用 <code>Data</code> 对象访问其 <code>nums</code> 实例变量。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/huczqr5</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Data</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">change_data</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, index, n)</span></span>:\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.nums[index] = n\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  data_one = Data()\n<span class=\"hljs-number\">14</span>  data_one.nums[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-number\">15</span>  <strong>print</strong>(data_one.nums)\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>  data_two = Data()\n<span class=\"hljs-number\">19</span>  data_two.change_data(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>)\n<span class=\"hljs-number\">20</span>  <strong>print</strong>(data_two.nums)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span> [<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]</code></pre>\n<p>以上两种方法都有效，但是假如你将实例变量 <code>nums</code> 变成一个元组又该如何操作呢？如果这样改动，任何外部尝试修改 <code>nums</code> 变量的代码都是无效的。<code>nums[0] = 100</code> 这样的代码将无法成功执行，因为元组是不可变的。</p>\n<p>许多编程语言允许程序员定义<strong>私有变量</strong>（private variable）和<strong>私有方法</strong>（private method）来解决这个问题：对象可以访问这些变量和方法，但是客户端代码不行。私有变量和方法适用于如下场景：有一个类内部使用的方法或变量，并且希望后续调整代码实现（或保留选项的灵活），但不想让任何使用该类的人依赖这些方法或变量，因为后续代码可能会调整（到时会导致客户端代码无法执行）。私有变量是封装包含的第二个概念的一种范例；私有变量隐藏了类的内部数据，避免客户端代码直接访问。<strong>公有变量</strong>（public variable）则相反，它是客户端代码可以直接访问的变量。</p>\n<p>Python 中没有私有变量，所有的变量都是可以公开访问的。Python 通过另一种方法解决了私有变量应对的问题：使用命名约定。在 Python 中，如果有调用者不应该访问的变量或方法，则应在名称前加下划线。Python 程序员看见某个方法或变量以下划线开头时，就会知道它们不应该被使用（不过实际仍然是可以使用的）。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jkaorle</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">PublicPrivateExample</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.public = <span class=\"hljs-string\">\"safe\"</span>\n<span class=\"hljs-number\">07</span>          <span class=\"hljs-keyword\">self</span>._unsafe = <span class=\"hljs-string\">\"unsafe\"</span>\n08\n09\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">public_method</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-comment\"># 客户端可以使用</span>\n<span class=\"hljs-number\">12</span>          <strong>pass</strong>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">_unsafe_method</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\"># 客户端不应使用</span>\n<span class=\"hljs-number\">17</span>          <strong>pass</strong></code></pre>\n<p>编写客户端代码的程序员看到上述代码后，会知道变量 <code>self.public</code> 是可以安全使用的，但是不应该使用变量 <code>self._unsafe</code>，因为其以下划线开头。如果非要使用，后续可能会有风险。维护上述代码的程序员，没有义务一直保留 <code>self._unsafe</code>，因为调用者本不应该访问该变量。客户端程序员也能确认 <code>public_method</code> 是可以放心使用的，而 <code>_unsafe_method</code> 则不然，因为其名称同样以下划线开头。</p>\n<h3 id=\"132\">13.2　抽象</h3>\n<p><strong>抽象</strong>（abstraction）指的是“剥离事物的诸多特征，使其只保留最基本的特质”的过程。在面向对象编程中，使用类进行对象建模时就会用到抽象的技巧。</p>\n<p>假设要对人进行建模。人的特征很复杂：头发和眼睛颜色不同，还有身高、体重、种族、性别等诸多特征。如要创建一个类代表人，有一些细节可能与要解决的问题并不相关。举个例子，我们创建一个 <code>Person</code> 类，但是忽略其眼睛颜色和身高等特征，这就是在进行抽象。<code>Person</code> 对象是对人的抽象，代表的是只具备解决当前问题所需的基本特征的人。</p>\n<h3 id=\"133\">13.3　多态</h3>\n<p><strong>多态</strong>（polymorphism）指的是“为不同的基础形态（数据类型）提供相关接口的能力”。接口，指的是函数或方法。下面就是一个多态的示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hrxd7gn</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  print(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n<span class=\"hljs-number\">5</span>  print(<span class=\"hljs-number\">200</span>)\n<span class=\"hljs-number\">6</span>  <strong>print</strong>(<span class=\"hljs-number\">200.1</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n&gt;&gt; <span class=\"hljs-number\">200</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">200.1</span></code></pre>\n<p><code>print</code> 函数为字符串、整数和浮点数这 3 种不同的数据类型提供了相同的接口。我们不必定义并调用 3 个不同的函数（如调用 <code>print_string</code> 打印字符串，<code>print_int</code> 打印整数，<code>print_float</code> 打印浮点数），只需要调用 <code>print</code> 函数即可支持所有数据类型。</p>\n<p>内置函数 <code>type</code> 可以返回对象的数据类型如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gnxq24x</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  type(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n<span class=\"hljs-number\">5</span>  type(<span class=\"hljs-number\">200</span>)\n<span class=\"hljs-number\">6</span>  type(<span class=\"hljs-number\">200.1</span>)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">str</span>'&gt;</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">int</span>'&gt;</span>\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">float</span>'&gt;</span>\n</code></pre>\n<p>假设我们要编写一个程序，创建 3 个对象，用对象分别画出三角形、正方形和圆形。可以定义 3 个不同的类 <code>Triangle</code>、<code>Square</code> 和 <code>Circle</code>，并各自定义 <code>draw</code> 方法来实现。<code>Triangle.draw()</code> 用来画三角形，<code>Sqaure.draw()</code> 用来画正方形，<code>Circle.draw()</code> 则用来画圆形。这样设计的话，每个对象都有一个 <code>draw</code> 接口，支持画出自身类所对应的图形。这样就为 3 个不同的数据类型提供了相同的接口。</p>\n<p>如果 Python 不支持多态，每个图形就都需要创建一个方法：<code>draw_triangle</code> 画 <code>Triangle</code> 对象，<code>draw_square</code> 画 <code>Sqaure</code> 对象，<code>draw_cirlce</code> 画 <code>Circle</code> 对象。</p>\n<p>另外，如果有一个包含这些对象的列表，且要将每个对象画出来，就必须要检查每个对象的数据类型，然后调用正确的方法。这会让程序规模变大，更难阅读，更难编写，也更加脆弱。这还会使得程序更难以优化，因为每添加一个新图形，必须要找到代码中所有要画出图形的地方，并为新图形添加检查代码（以便确定使用哪个方法），而且还需再调用新的画图函数。下面分别是未使用多态和使用了多态的画图代码示例：</p>\n<pre class=\"代码无行号\"><code class=\"hljs bash\">01  <span class=\"hljs-comment\"># 不要执行</span>\n02\n03\n04\n05  <span class=\"hljs-comment\"># 未使用多态的代码画图</span>\n06\n07  shapes = [trl, sql, crl]\n08  <strong><span class=\"hljs-keyword\">for</span></strong> a_shape <strong><span class=\"hljs-keyword\">in</span></strong> shapes:\n09      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-built_in\">type</span>(a_shape) == <span class=\"hljs-string\">\"Triangle\"</span>:\n10          a_shape.draw_triangle()\n11      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-built_in\">type</span>(a_shape) == <span class=\"hljs-string\">\"Square\"</span>:\n12          a_shape.draw_square()\n13      <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-built_in\">type</span>(a_shape) == <span class=\"hljs-string\">\"Circle\"</span>:\n14          a_shape.draw_cirlce()\n15\n16\n17  <span class=\"hljs-comment\"># 使用多态的代码画图</span>\n18\n19  shapes = [trl,\n20            swl,\n21            crl]\n22  <strong><span class=\"hljs-keyword\">for</span></strong> a_shape <strong><span class=\"hljs-keyword\">in</span></strong> shapes:\n23      a_shape.draw()</code></pre>\n<p>如果在没有使用多态的代码中添加新图形，则必须修改 <code>for</code> 循环中的代码，检查 <code>a_shape</code> 的类型并调用其画图方法。通过统一多态的接口，可以随意向 <code>shapes</code> 列表中添加新图形，不需要再添加额外的代码即可画出对应图形。</p>\n<h3 id=\"134\">13.4　继承</h3>\n<p>编程语境中的<strong>继承</strong>（inheritance），与基因继承类似。在基因继承中，子女会从父母那继承眼睛颜色等特征。类似地，在创建类时，该类也可以从另一个类那里继承方法和变量。被继承的类，称为<strong>父类</strong>（parent class）；继承的类则被称为<strong>子类</strong>（child class）。本节将使用继承对图形进行建模。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zrnqeo3</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  my_shape = Shape(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">25</span>)\n<span class=\"hljs-number\">17</span>  my_shape.print_size()\n\n&gt;&gt; <span class=\"hljs-number\">20</span> by <span class=\"hljs-number\">25</span></code></pre>\n<p>通过该类，我们可以创建拥有 <code>width</code> 和 <code>len</code> 属性的 <code>Shape</code> 对象。<code>Shape</code> 对象有一个方法 <code>print_size</code>，可打印其 <code>width</code> 和 <code>len</code> 的值。</p>\n<p>接下来，定义一个子类。在创建子类时，将父类的变量名传入子类，即可继承父类的属性。下例中 <code>Square</code> 类的继承来自 <code>Shape</code> 类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j8lj35s</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span><span class=\"hljs-params\">(Shape)</span>:</span>\n<span class=\"hljs-number\">17</span>      <strong><span class=\"hljs-keyword\">pass</span></strong>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>  a_square = Square(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">21</span>  a_square.print_size()\n\n&gt;&gt; <span class=\"hljs-number\">20</span> by <span class=\"hljs-number\">20</span></code></pre>\n<p>因为我们将 <code>Shape</code> 类作为参数传给了 <code>Square</code> 类，后者就继承了 <code>Shape</code> 类的变量和方法。<code>Sqaure</code> 类中定义的代码只有关键字 <code>keyword</code>，表示不执行任何操作。</p>\n<p>由于继承了父类，我们可以创建 <code>Square</code> 对象，传入宽度和长度参数，并在其上调用 <code>print_size</code> 方法，而不需要再写任何代码（除 <code>pass</code> 外）。由此带来的代码量缩减很重要，因为避免代码重复可以让程序更精简、更可控。</p>\n<p>子类与其他类没有区别，它可以定义新的方法和变量，不会影响父类。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hwjdcy9</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          <strong>print</strong>(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span><span class=\"hljs-params\">(Shape)</span>:</span>\n<span class=\"hljs-number\">17</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">18</span>          <strong><span class=\"hljs-keyword\">return</span></strong> self.width * self.len\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>  a_square = Square(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">22</span>  <strong>print</strong>(a_square.area())\n\n&gt;&gt; <span class=\"hljs-number\">400</span></code></pre>\n<p>当子类继承父类的方法时，我们可以定义一个与继承的方法名称相同的新方法，从而覆盖父类中的方法。子类改变从父类中继承方法的实现能力，被称为<strong>方法覆盖</strong>（method overriding），示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hy9m8ht</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Shape</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span><span class=\"hljs-params\">(Shape)</span>:</span>\n<span class=\"hljs-number\">17</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">18</span>          <strong><span class=\"hljs-keyword\">return</span></strong> self.width * self.len\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">22</span>          print(<span class=\"hljs-string\">\"\"\"I am {} by {}\n23                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">24</span>                           self.len))\n<span class=\"hljs-number\">25</span>\n<span class=\"hljs-number\">26</span>\n<span class=\"hljs-number\">27</span>  a_square = Square(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">28</span>  a_square.print_size()\n\n&gt;&gt; I am <span class=\"hljs-number\">20</span> by <span class=\"hljs-number\">20</span></code></pre>\n<p>上例中，由于定义了一个叫 <code>print_size</code> 的方法，新定义的方法覆盖了父类中同名的方法，在调用时会打印不同的信息。</p>\n<h3 id=\"135\">13.5　组合</h3>\n<p>介绍完面向对象编程的 4 个支柱之后，这里再介绍一个更重要的概念：<strong>组合</strong>（composition）。通过组合技巧，将一个对象作为变量保存在另一个对象中，可以模拟“拥有”关系。例如，可使用组合来表达狗和其主人之间的关系（狗有主人）。为此，我们首先定义表示狗和人的类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zqg488n</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Dog</span>():</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>,\n<span class=\"hljs-number\">06</span>                   name,\n<span class=\"hljs-number\">07</span>                   breed,\n08                   owner)</span></span>:\n09          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.breed = breed\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-keyword\">self</span>.owner = owner\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Person</span>():</span>\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">16</span>          <span class=\"hljs-keyword\">self</span>.name = name</code></pre>\n<p>然后，在创建 <code>Dog</code> 对象时将 <code>Person</code> 对象作为 <code>owner</code> 参数传入：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zlzefd4</span>\n<span class=\"hljs-number\">02</span>  <span class=\"hljs-comment\"># 接上例</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>\n<span class=\"hljs-number\">05</span>\n<span class=\"hljs-number\">06</span>  mick = Person(<span class=\"hljs-string\">\"Mick Jagger\"</span>)\n<span class=\"hljs-number\">07</span>  stan = Dog(<span class=\"hljs-string\">\"Stanley\"</span>,\n08             <span class=\"hljs-string\">\"Bulldog\"</span>,\n09              mick)\n<span class=\"hljs-number\">10</span>  print(stan.owner.name)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Mick Jagger\n</code></pre>\n<p>这样，<code>stan</code> 对象 <code>\"Stanley\"</code> 就有了一位主人，即名叫 <code>\"Mick Jagger\"</code> 的 <code>Person</code> 对象，保存在其实例变量 <code>owner</code> 中。</p>\n<h3 id=\"136\">13.6　术语表</h3>\n<p><strong>面向对象编程的四大支柱</strong>：封装、抽象、多态和继承。</p>\n<p><strong>继承</strong>：在基因继承中，子女会从父母那继承眼睛颜色等特征。类似地，在创建类时，该类也可以从另一个类那里继承方法和变量。</p>\n<p><strong>父类</strong>：被继承的类。</p>\n<p><strong>子类</strong>：继承父类的类。</p>\n<p><strong>方法覆盖</strong>：子类改变从父类中继承方法的实现能力。</p>\n<p><strong>多态</strong>：多态指的是为不同的基础形态（数据类型）提供相关接口的能力。</p>\n<p><strong>抽象</strong>：抽象指的是剥离事物的诸多特征，使其只保留最基本的特质的过程。</p>\n<p><strong>客户端代码</strong>：使用对象的类之外的代码。</p>\n<p><strong>封装</strong>：封装包含两个概念。第一个概念是在面向对象编程中对象将变量（状态）和方法（用来改变状态或执行涉及状态的计算）集中在一个地方——即对象本身。第二个概念指的是隐藏类的内部数据，以避免客户端代码（即类外部的代码）直接进行访问。</p>\n<p><strong>组合</strong>：通过组合技巧，将一个对象作为变量保存在另一个对象中，可以模拟“拥有”关系。</p>\n<h3 id=\"137\">13.7　挑战练习</h3>\n<p>1．创建 <code>Rectangle</code> 和 <code>Square</code> 类，使它们均有一个叫 <code>calculate_perimeter</code> 的方法，计算其所表示图形的周长。创建 <code>Rectangle</code> 和 <code>Sqaure</code> 对象，并调用二者的周长计算方法。</p>\n<p>2．在 <code>Square</code> 类中，定义一个叫 <code>change_size</code> 的方法，支持传入一个数字，增加或减少（数字为负时）<code>Square</code> 对象的边长。</p>\n<p>3．创建一个叫 <code>Shape</code> 的类。在其中定义一个叫 <code>what_am_i</code> 的方法，被调用时打印 <code>\"I am s shape\"</code>。调整上个挑战中的 <code>Square</code> 和 <code>Rectangle</code> 类，使其继承 <code>Shape</code> 类，然后创建 <code>Sqaure</code> 和 <code>Rectangle</code> 对象，并在二者上调用新方法。</p>\n<p>4．创建一个叫 <code>Horse</code> 的类，以及一个叫 <code>Rider</code> 的类。使用组合，表示一批有骑手的马。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>"},{"title":"kafka start","_content":"\n### kafka-docker\n[项目地址](git@github.com:wurstmeister/kafka-docker.git)\n- Start a cluster: `docker-compose up -d`\n- Add more brokers: `docker-compose scale kafka=3`\n- Destroy a cluster: `docker-compose stop`\n\n### kafka-manager-docker\n[项目地址](git@github.com:sheepkiller/kafka-manager-docker.git)\n- Quick Start\n    `docker run -it --rm  -p 9000:9000 -e ZK_HOSTS=\"your-zk.domain:2181\" -e APPLICATION_SECRET=letmein sheepkiller/kafka-manager`\n","source":"_posts/kafka/start.md","raw":"---\ntitle: kafka start\n---\n\n### kafka-docker\n[项目地址](git@github.com:wurstmeister/kafka-docker.git)\n- Start a cluster: `docker-compose up -d`\n- Add more brokers: `docker-compose scale kafka=3`\n- Destroy a cluster: `docker-compose stop`\n\n### kafka-manager-docker\n[项目地址](git@github.com:sheepkiller/kafka-manager-docker.git)\n- Quick Start\n    `docker run -it --rm  -p 9000:9000 -e ZK_HOSTS=\"your-zk.domain:2181\" -e APPLICATION_SECRET=letmein sheepkiller/kafka-manager`\n","slug":"kafka/start","published":1,"date":"2019-06-11T09:42:38.057Z","updated":"2019-06-11T09:42:38.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwsqs9b10000rdh7f3qysw75","content":"<h3 id=\"kafka-docker\"><a href=\"#kafka-docker\" class=\"headerlink\" title=\"kafka-docker\"></a>kafka-docker</h3><p><a href=\"git@github.com:wurstmeister/kafka-docker.git\">项目地址</a></p>\n<ul>\n<li>Start a cluster: <code>docker-compose up -d</code></li>\n<li>Add more brokers: <code>docker-compose scale kafka=3</code></li>\n<li>Destroy a cluster: <code>docker-compose stop</code></li>\n</ul>\n<h3 id=\"kafka-manager-docker\"><a href=\"#kafka-manager-docker\" class=\"headerlink\" title=\"kafka-manager-docker\"></a>kafka-manager-docker</h3><p><a href=\"git@github.com:sheepkiller/kafka-manager-docker.git\">项目地址</a></p>\n<ul>\n<li>Quick Start<br>  <code>docker run -it --rm  -p 9000:9000 -e ZK_HOSTS=&quot;your-zk.domain:2181&quot; -e APPLICATION_SECRET=letmein sheepkiller/kafka-manager</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"kafka-docker\"><a href=\"#kafka-docker\" class=\"headerlink\" title=\"kafka-docker\"></a>kafka-docker</h3><p><a href=\"git@github.com:wurstmeister/kafka-docker.git\">项目地址</a></p>\n<ul>\n<li>Start a cluster: <code>docker-compose up -d</code></li>\n<li>Add more brokers: <code>docker-compose scale kafka=3</code></li>\n<li>Destroy a cluster: <code>docker-compose stop</code></li>\n</ul>\n<h3 id=\"kafka-manager-docker\"><a href=\"#kafka-manager-docker\" class=\"headerlink\" title=\"kafka-manager-docker\"></a>kafka-manager-docker</h3><p><a href=\"git@github.com:sheepkiller/kafka-manager-docker.git\">项目地址</a></p>\n<ul>\n<li>Quick Start<br>  <code>docker run -it --rm  -p 9000:9000 -e ZK_HOSTS=&quot;your-zk.domain:2181&quot; -e APPLICATION_SECRET=letmein sheepkiller/kafka-manager</code></li>\n</ul>\n"},{"title":"深入面向对象编程","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>深入面向对象编程</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#141\">14.1　类变量与实例变量</a></li>\n<li><a href=\"#142\">14.2　魔法方法</a></li>\n<li><a href=\"#143is\">14.3　is</a></li>\n<li><a href=\"#144\">14.4　术语表</a></li>\n<li><a href=\"#145\">14.5　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“视代码如诗词，勿要做无所谓的堆砌。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——伊利亚 · 多尔曼（Ilya Dorman）</span></p>\n</blockquote>\n<p>本章将学习与面向对象编程相关的其他概念。</p>\n<h3 id=\"141\">14.1　类变量与实例变量</h3>\n<p>在 Python 中，类即对象。这个理念源自引领了面向对象编程风潮的 Smalltalk 语言。Python 中的每个类，都是 <code>type</code> 类的一个实例对象：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h7ypzmd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong>pass</strong>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  print(Square)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">__main__</span>.<span class=\"hljs-title\">Square</span>'&gt;</span></code></pre>\n<p>本例中，<code>Square</code> 类就是一个对象，我们也将其类型打印出来了。</p>\n<p>类中有两种类型的变量：<strong>类变量</strong>（class variable）和<strong>实例变量</strong>（instance variable）。目前书中出现过的变量，均为实例变量，通过语法 <code>self.[变量名] = [变量值]</code> 定义。实例变量属于对象，示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zmnf47e</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  my_rectangle = Rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">24</span>)\n<span class=\"hljs-number\">17</span>  my_rectangle.print_size()\n\n&gt;&gt; <span class=\"hljs-number\">10</span> by <span class=\"hljs-number\">24</span></code></pre>\n<p>本例中的 <code>width</code> 和 <code>len</code> 都是实例变量。</p>\n<p>类变量属于 Python 为每个类定义创建的对象，以及类本身创建的对象。类变量的定义方式与普通变量相同（但是必须在类内部定义），可以通过类对象访问，也可以通过使用类创建的对象访问。访问方式与实例变量（变量名前面加 <code>self.</code>）的访问方式相同。类变量可以在不使用全局变量的情况下，在类的所有实例之间共享数据。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gu9unfc</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span>():</span>\n<span class=\"hljs-number\">05</span>      recs = []\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n09          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.len = l\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-keyword\">self</span>.recs.append((<span class=\"hljs-keyword\">self</span>.width,\n<span class=\"hljs-number\">12</span>                            <span class=\"hljs-keyword\">self</span>.len))\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">16</span>          print(<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"{} by {}\n17                \"</span><span class=\"hljs-string\">\"\"</span>.format(<span class=\"hljs-keyword\">self</span>.width,\n<span class=\"hljs-number\">18</span>                           <span class=\"hljs-keyword\">self</span>.len))\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>  r1 = Rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">24</span>)\n<span class=\"hljs-number\">22</span>  r2 = Rectangle(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">40</span>)\n<span class=\"hljs-number\">23</span>  r3 = Rectangle(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">200</span>)\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">25</span>\n<span class=\"hljs-number\">26</span>  print(Rectangle.recs)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">24</span>), (<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">40</span>), (<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">200</span>)]</code></pre>\n<p>本例中，我们在类 <code>Rectangle</code> 中添加了一个叫 <code>recs</code> 的类变量，它是在 <code>__init__</code> 方法之外定义的。因为 Python 只有在创建对象时才调用 <code>__init__</code> 方法，而我们希望能够使用类对象（不会调用 <code>__init__</code> 方法）访问类变量。</p>\n<p>接下来，我们创建了 3 个 <code>Rectangle</code> 对象。每创建一个 <code>Rectangle</code> 对象，<code>__init__</code> 方法中的代码就会向 <code>recs</code> 列表中添加一个由新对象宽度和长度组成的元组。这样，每当新创建一个 <code>Rectangle</code> 对象时，就会被自动添加到 <code>recs</code> 列表。通过使用类变量，即可在不使用全局变量的情况下，做到了在类创建的不同实例之间共享数据。</p>\n<h3 id=\"142\">14.2　魔法方法</h3>\n<p>Python 中所有的类，均继承自一个叫 <code>Object</code> 的父类。Python 在不同的情况下会使用从 <code>Object</code> 中继承的方法，如打印对象时：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ze8yr7s</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Lion</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">07</span>\n08\n09  lion = Lion(<span class=\"hljs-string\">\"Dilbert\"</span>)\n<span class=\"hljs-number\">10</span>  print(lion)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;__main_<span class=\"hljs-number\">_</span>.Lion object at <span class=\"hljs-number\">0x101178828</span>&gt;</code></pre>\n<p>打印 <code>Lion</code> 对象时，Python 调用了其从 <code>Object</code> 继承的魔法方法 <code>__repr__</code>，并打印 <code>__repr__</code> 方法返回的结果。我们可以覆盖继承来的 <code>__repr__</code> 方法，以改变打印结果。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j5rocqm</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Lion</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__repr__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">10</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.name\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  lion = Lion(<span class=\"hljs-string\">\"Dilbert\"</span>)\n<span class=\"hljs-number\">14</span>  <strong>print</strong>(lion)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Dilbert</code></pre>\n<p>由于我们覆盖了从 <code>Object</code> 继承的 <code>__repr__</code> 方法，并将其修改为返回 <code>Lion</code> 对象的名称。那么再打印 <code>Lion</code> 对象时，打印的内容就是 <code>Dilbert</code>，而不是原本返回的 <code>&lt;__main__.Lion object at 0x101178828&gt;</code>。</p>\n<p>表达式中的操作数必须有一个运算符是用来对表达式求值的魔法方法。例如，在表达式 2 + 2 中，每个整型数对象都有一个叫 <code>__add__</code> 的方法，Python 在对表达式求值时就会调用该方法。如果我们在类中定义了一个 <code>__add__</code> 方法，那么就可以在表达式中将其创建的对象用作加法运算符的操作数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hlmhrwv</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">AlwaysPositive</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, number)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.n = number\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__add__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, other)</span></span>:\n<span class=\"hljs-number\">10</span>          <strong><span class=\"hljs-keyword\">return</span></strong> abs(<span class=\"hljs-keyword\">self</span>.n +\n<span class=\"hljs-number\">11</span>                     other.n)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  x = AlwaysPositive(-<span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">15</span>  y = AlwaysPositive(<span class=\"hljs-number\">10</span>)\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>  print(x + y)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span></code></pre>\n<p><code>AlwaysPostive</code> 对象可用在包含加法运算符的表达式中，因为已经定义好了一个 <code>__add__</code> 方法。Python 在计算含加法运算符的表达式时，会在第一个操作符上调用 <code>__add__</code>，并将第二个操作符对象作为参数传入 <code>__add__</code>，然后返回结果。</p>\n<p>在本例中，<code>__add__</code> 使用内置函数 <code>abs</code> 返回了两个数字相加后的绝对值。因为像这样定义了 <code>__add__</code>，两个 <code>AlwaysPositive</code> 对象相加之后，将永远返回两个对象之和的绝对值；因此，表达式的结果永远为正。</p>\n<h3 id=\"143is\">14.3　is</h3>\n<p>如果两个对象是相同的对象，关键字 <code>is</code> 返回 <code>True</code>，反之则返回 <code>False</code>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gt28gww</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Person</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.name = <span class=\"hljs-string\">'Bob'</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>  bob = Person()\n<span class=\"hljs-number\">10</span>  same_bob = bob\n<span class=\"hljs-number\">11</span>  <strong>print</strong>(bob <strong><span class=\"hljs-keyword\">is</span></strong> same_bob)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  another_bob = Person()\n<span class=\"hljs-number\">15</span>  <strong>print</strong>(bob <strong><span class=\"hljs-keyword\">is</span></strong> another_bob)\n\n&gt;&gt; <span class=\"hljs-keyword\">True</span>\n&gt;&gt; <span class=\"hljs-keyword\">False</span></code></pre>\n<p>当在表达式中使用 <code>is</code> 关键字，且 <code>bob</code> 和 <code>same_bob</code> 为对比的操作数时，表达式的结果为 <code>True</code>，因为两个变量都指向相同的 <code>Person</code> 对象。在创建一个新的 <code>Person</code> 对象之后，再与最初的 <code>bob</code> 进行对比，表达式的结果则为 <code>False</code>，因为两个变量指向不同的 <code>Person</code> 对象。</p>\n<p>还可以使用关键字 <code>is</code> 检查变量是否为 <code>None</code>，示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jjettn2</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">05</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x <strong><span class=\"hljs-keyword\">is</span></strong> <span class=\"hljs-keyword\">None</span>:\n<span class=\"hljs-number\">06</span>      <strong>print</strong>(<span class=\"hljs-string\">\"x is None :（ \"</span>）\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">08</span>      print(<span class=\"hljs-string\">\"x is not None\"</span>)\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  x = <span class=\"hljs-keyword\">None</span>\n<span class=\"hljs-number\">12</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x <strong><span class=\"hljs-keyword\">is</span></strong> <span class=\"hljs-keyword\">None</span>:\n<span class=\"hljs-number\">13</span>      <strong>print</strong>(<span class=\"hljs-string\">\"x is None\"</span>）\n<span class=\"hljs-number\">14</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">15</span>      <strong>print</strong>(<span class=\"hljs-string\">\"x is None:(\"</span>)\n\n&gt;&gt; x <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">None</span>\n&gt;&gt; x <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">None</span> :（</code></pre>\n<h3 id=\"144\">14.4　术语表</h3>\n<p><strong>类变量</strong>：属于类对象及其创建的对象。</p>\n<p><strong>实例变量</strong>：实例变量属于对象。</p>\n<p><strong>私有变量</strong>：对象可访问，但客户端代码不能访问的变量。</p>\n<p><strong>私有方法</strong>：对象可访问，但客户端代码不能访问的方法。</p>\n<p><strong>公有变量</strong>：客户端代码可访问的变量。</p>\n<h3 id=\"145\">14.5　挑战练习</h3>\n<p>1．向 <code>Square</code> 类中添加一个 <code>square_list</code> 类变量，要求每次新创建一个 <code>Square</code> 对象时，新对象会被自动添加到列表中。</p>\n<p>2．修改 <code>Square</code> 类，要求在打印 <code>Square</code> 对象时，打印的信息为图形 4 个边的长度。例如，假设创建一个 <code>Square(29)</code>，则应打印 <code>29 by 29 by 29 by 29</code>。</p>\n<p>3．编写一个函数，接受两个对象作为参数，如果为相同的对象则返回 <code>True</code>，反之返回 <code>False</code>。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","source":"_posts/Python无师自通/14_depp_opp.html","raw":"---\ntitle: 深入面向对象编程\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>深入面向对象编程</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#141\">14.1　类变量与实例变量</a></li>\n<li><a href=\"#142\">14.2　魔法方法</a></li>\n<li><a href=\"#143is\">14.3　is</a></li>\n<li><a href=\"#144\">14.4　术语表</a></li>\n<li><a href=\"#145\">14.5　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“视代码如诗词，勿要做无所谓的堆砌。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——伊利亚 · 多尔曼（Ilya Dorman）</span></p>\n</blockquote>\n<p>本章将学习与面向对象编程相关的其他概念。</p>\n<h3 id=\"141\">14.1　类变量与实例变量</h3>\n<p>在 Python 中，类即对象。这个理念源自引领了面向对象编程风潮的 Smalltalk 语言。Python 中的每个类，都是 <code>type</code> 类的一个实例对象：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h7ypzmd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong>pass</strong>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  print(Square)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">__main__</span>.<span class=\"hljs-title\">Square</span>'&gt;</span></code></pre>\n<p>本例中，<code>Square</code> 类就是一个对象，我们也将其类型打印出来了。</p>\n<p>类中有两种类型的变量：<strong>类变量</strong>（class variable）和<strong>实例变量</strong>（instance variable）。目前书中出现过的变量，均为实例变量，通过语法 <code>self.[变量名] = [变量值]</code> 定义。实例变量属于对象，示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zmnf47e</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  my_rectangle = Rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">24</span>)\n<span class=\"hljs-number\">17</span>  my_rectangle.print_size()\n\n&gt;&gt; <span class=\"hljs-number\">10</span> by <span class=\"hljs-number\">24</span></code></pre>\n<p>本例中的 <code>width</code> 和 <code>len</code> 都是实例变量。</p>\n<p>类变量属于 Python 为每个类定义创建的对象，以及类本身创建的对象。类变量的定义方式与普通变量相同（但是必须在类内部定义），可以通过类对象访问，也可以通过使用类创建的对象访问。访问方式与实例变量（变量名前面加 <code>self.</code>）的访问方式相同。类变量可以在不使用全局变量的情况下，在类的所有实例之间共享数据。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gu9unfc</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span>():</span>\n<span class=\"hljs-number\">05</span>      recs = []\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n09          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.len = l\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-keyword\">self</span>.recs.append((<span class=\"hljs-keyword\">self</span>.width,\n<span class=\"hljs-number\">12</span>                            <span class=\"hljs-keyword\">self</span>.len))\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">16</span>          print(<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"{} by {}\n17                \"</span><span class=\"hljs-string\">\"\"</span>.format(<span class=\"hljs-keyword\">self</span>.width,\n<span class=\"hljs-number\">18</span>                           <span class=\"hljs-keyword\">self</span>.len))\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>  r1 = Rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">24</span>)\n<span class=\"hljs-number\">22</span>  r2 = Rectangle(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">40</span>)\n<span class=\"hljs-number\">23</span>  r3 = Rectangle(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">200</span>)\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">25</span>\n<span class=\"hljs-number\">26</span>  print(Rectangle.recs)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">24</span>), (<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">40</span>), (<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">200</span>)]</code></pre>\n<p>本例中，我们在类 <code>Rectangle</code> 中添加了一个叫 <code>recs</code> 的类变量，它是在 <code>__init__</code> 方法之外定义的。因为 Python 只有在创建对象时才调用 <code>__init__</code> 方法，而我们希望能够使用类对象（不会调用 <code>__init__</code> 方法）访问类变量。</p>\n<p>接下来，我们创建了 3 个 <code>Rectangle</code> 对象。每创建一个 <code>Rectangle</code> 对象，<code>__init__</code> 方法中的代码就会向 <code>recs</code> 列表中添加一个由新对象宽度和长度组成的元组。这样，每当新创建一个 <code>Rectangle</code> 对象时，就会被自动添加到 <code>recs</code> 列表。通过使用类变量，即可在不使用全局变量的情况下，做到了在类创建的不同实例之间共享数据。</p>\n<h3 id=\"142\">14.2　魔法方法</h3>\n<p>Python 中所有的类，均继承自一个叫 <code>Object</code> 的父类。Python 在不同的情况下会使用从 <code>Object</code> 中继承的方法，如打印对象时：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ze8yr7s</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Lion</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">07</span>\n08\n09  lion = Lion(<span class=\"hljs-string\">\"Dilbert\"</span>)\n<span class=\"hljs-number\">10</span>  print(lion)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;__main_<span class=\"hljs-number\">_</span>.Lion object at <span class=\"hljs-number\">0x101178828</span>&gt;</code></pre>\n<p>打印 <code>Lion</code> 对象时，Python 调用了其从 <code>Object</code> 继承的魔法方法 <code>__repr__</code>，并打印 <code>__repr__</code> 方法返回的结果。我们可以覆盖继承来的 <code>__repr__</code> 方法，以改变打印结果。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j5rocqm</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Lion</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__repr__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">10</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.name\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  lion = Lion(<span class=\"hljs-string\">\"Dilbert\"</span>)\n<span class=\"hljs-number\">14</span>  <strong>print</strong>(lion)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Dilbert</code></pre>\n<p>由于我们覆盖了从 <code>Object</code> 继承的 <code>__repr__</code> 方法，并将其修改为返回 <code>Lion</code> 对象的名称。那么再打印 <code>Lion</code> 对象时，打印的内容就是 <code>Dilbert</code>，而不是原本返回的 <code>&lt;__main__.Lion object at 0x101178828&gt;</code>。</p>\n<p>表达式中的操作数必须有一个运算符是用来对表达式求值的魔法方法。例如，在表达式 2 + 2 中，每个整型数对象都有一个叫 <code>__add__</code> 的方法，Python 在对表达式求值时就会调用该方法。如果我们在类中定义了一个 <code>__add__</code> 方法，那么就可以在表达式中将其创建的对象用作加法运算符的操作数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hlmhrwv</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">AlwaysPositive</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, number)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.n = number\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__add__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, other)</span></span>:\n<span class=\"hljs-number\">10</span>          <strong><span class=\"hljs-keyword\">return</span></strong> abs(<span class=\"hljs-keyword\">self</span>.n +\n<span class=\"hljs-number\">11</span>                     other.n)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  x = AlwaysPositive(-<span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">15</span>  y = AlwaysPositive(<span class=\"hljs-number\">10</span>)\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>  print(x + y)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span></code></pre>\n<p><code>AlwaysPostive</code> 对象可用在包含加法运算符的表达式中，因为已经定义好了一个 <code>__add__</code> 方法。Python 在计算含加法运算符的表达式时，会在第一个操作符上调用 <code>__add__</code>，并将第二个操作符对象作为参数传入 <code>__add__</code>，然后返回结果。</p>\n<p>在本例中，<code>__add__</code> 使用内置函数 <code>abs</code> 返回了两个数字相加后的绝对值。因为像这样定义了 <code>__add__</code>，两个 <code>AlwaysPositive</code> 对象相加之后，将永远返回两个对象之和的绝对值；因此，表达式的结果永远为正。</p>\n<h3 id=\"143is\">14.3　is</h3>\n<p>如果两个对象是相同的对象，关键字 <code>is</code> 返回 <code>True</code>，反之则返回 <code>False</code>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gt28gww</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Person</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.name = <span class=\"hljs-string\">'Bob'</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>  bob = Person()\n<span class=\"hljs-number\">10</span>  same_bob = bob\n<span class=\"hljs-number\">11</span>  <strong>print</strong>(bob <strong><span class=\"hljs-keyword\">is</span></strong> same_bob)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  another_bob = Person()\n<span class=\"hljs-number\">15</span>  <strong>print</strong>(bob <strong><span class=\"hljs-keyword\">is</span></strong> another_bob)\n\n&gt;&gt; <span class=\"hljs-keyword\">True</span>\n&gt;&gt; <span class=\"hljs-keyword\">False</span></code></pre>\n<p>当在表达式中使用 <code>is</code> 关键字，且 <code>bob</code> 和 <code>same_bob</code> 为对比的操作数时，表达式的结果为 <code>True</code>，因为两个变量都指向相同的 <code>Person</code> 对象。在创建一个新的 <code>Person</code> 对象之后，再与最初的 <code>bob</code> 进行对比，表达式的结果则为 <code>False</code>，因为两个变量指向不同的 <code>Person</code> 对象。</p>\n<p>还可以使用关键字 <code>is</code> 检查变量是否为 <code>None</code>，示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jjettn2</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">05</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x <strong><span class=\"hljs-keyword\">is</span></strong> <span class=\"hljs-keyword\">None</span>:\n<span class=\"hljs-number\">06</span>      <strong>print</strong>(<span class=\"hljs-string\">\"x is None :（ \"</span>）\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">08</span>      print(<span class=\"hljs-string\">\"x is not None\"</span>)\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  x = <span class=\"hljs-keyword\">None</span>\n<span class=\"hljs-number\">12</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x <strong><span class=\"hljs-keyword\">is</span></strong> <span class=\"hljs-keyword\">None</span>:\n<span class=\"hljs-number\">13</span>      <strong>print</strong>(<span class=\"hljs-string\">\"x is None\"</span>）\n<span class=\"hljs-number\">14</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">15</span>      <strong>print</strong>(<span class=\"hljs-string\">\"x is None:(\"</span>)\n\n&gt;&gt; x <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">None</span>\n&gt;&gt; x <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">None</span> :（</code></pre>\n<h3 id=\"144\">14.4　术语表</h3>\n<p><strong>类变量</strong>：属于类对象及其创建的对象。</p>\n<p><strong>实例变量</strong>：实例变量属于对象。</p>\n<p><strong>私有变量</strong>：对象可访问，但客户端代码不能访问的变量。</p>\n<p><strong>私有方法</strong>：对象可访问，但客户端代码不能访问的方法。</p>\n<p><strong>公有变量</strong>：客户端代码可访问的变量。</p>\n<h3 id=\"145\">14.5　挑战练习</h3>\n<p>1．向 <code>Square</code> 类中添加一个 <code>square_list</code> 类变量，要求每次新创建一个 <code>Square</code> 对象时，新对象会被自动添加到列表中。</p>\n<p>2．修改 <code>Square</code> 类，要求在打印 <code>Square</code> 对象时，打印的信息为图形 4 个边的长度。例如，假设创建一个 <code>Square(29)</code>，则应打印 <code>29 by 29 by 29 by 29</code>。</p>\n<p>3．编写一个函数，接受两个对象作为参数，如果为相同的对象则返回 <code>True</code>，反之返回 <code>False</code>。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","slug":"Python无师自通/14_depp_opp","published":1,"date":"2019-06-12T04:36:14.881Z","updated":"2019-06-12T04:36:14.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwsqs9cc0001rdh76e7x4y36","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>深入面向对象编程</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#141\">14.1　类变量与实例变量</a></li>\n<li><a href=\"#142\">14.2　魔法方法</a></li>\n<li><a href=\"#143is\">14.3　is</a></li>\n<li><a href=\"#144\">14.4　术语表</a></li>\n<li><a href=\"#145\">14.5　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“视代码如诗词，勿要做无所谓的堆砌。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——伊利亚 · 多尔曼（Ilya Dorman）</span></p>\n</blockquote>\n<p>本章将学习与面向对象编程相关的其他概念。</p>\n<h3 id=\"141\">14.1　类变量与实例变量</h3>\n<p>在 Python 中，类即对象。这个理念源自引领了面向对象编程风潮的 Smalltalk 语言。Python 中的每个类，都是 <code>type</code> 类的一个实例对象：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h7ypzmd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong>pass</strong>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  print(Square)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">__main__</span>.<span class=\"hljs-title\">Square</span>'&gt;</span></code></pre>\n<p>本例中，<code>Square</code> 类就是一个对象，我们也将其类型打印出来了。</p>\n<p>类中有两种类型的变量：<strong>类变量</strong>（class variable）和<strong>实例变量</strong>（instance variable）。目前书中出现过的变量，均为实例变量，通过语法 <code>self.[变量名] = [变量值]</code> 定义。实例变量属于对象，示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zmnf47e</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  my_rectangle = Rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">24</span>)\n<span class=\"hljs-number\">17</span>  my_rectangle.print_size()\n\n&gt;&gt; <span class=\"hljs-number\">10</span> by <span class=\"hljs-number\">24</span></code></pre>\n<p>本例中的 <code>width</code> 和 <code>len</code> 都是实例变量。</p>\n<p>类变量属于 Python 为每个类定义创建的对象，以及类本身创建的对象。类变量的定义方式与普通变量相同（但是必须在类内部定义），可以通过类对象访问，也可以通过使用类创建的对象访问。访问方式与实例变量（变量名前面加 <code>self.</code>）的访问方式相同。类变量可以在不使用全局变量的情况下，在类的所有实例之间共享数据。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gu9unfc</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span>():</span>\n<span class=\"hljs-number\">05</span>      recs = []\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n09          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.len = l\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-keyword\">self</span>.recs.append((<span class=\"hljs-keyword\">self</span>.width,\n<span class=\"hljs-number\">12</span>                            <span class=\"hljs-keyword\">self</span>.len))\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">16</span>          print(<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"{} by {}\n17                \"</span><span class=\"hljs-string\">\"\"</span>.format(<span class=\"hljs-keyword\">self</span>.width,\n<span class=\"hljs-number\">18</span>                           <span class=\"hljs-keyword\">self</span>.len))\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>  r1 = Rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">24</span>)\n<span class=\"hljs-number\">22</span>  r2 = Rectangle(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">40</span>)\n<span class=\"hljs-number\">23</span>  r3 = Rectangle(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">200</span>)\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">25</span>\n<span class=\"hljs-number\">26</span>  print(Rectangle.recs)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">24</span>), (<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">40</span>), (<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">200</span>)]</code></pre>\n<p>本例中，我们在类 <code>Rectangle</code> 中添加了一个叫 <code>recs</code> 的类变量，它是在 <code>__init__</code> 方法之外定义的。因为 Python 只有在创建对象时才调用 <code>__init__</code> 方法，而我们希望能够使用类对象（不会调用 <code>__init__</code> 方法）访问类变量。</p>\n<p>接下来，我们创建了 3 个 <code>Rectangle</code> 对象。每创建一个 <code>Rectangle</code> 对象，<code>__init__</code> 方法中的代码就会向 <code>recs</code> 列表中添加一个由新对象宽度和长度组成的元组。这样，每当新创建一个 <code>Rectangle</code> 对象时，就会被自动添加到 <code>recs</code> 列表。通过使用类变量，即可在不使用全局变量的情况下，做到了在类创建的不同实例之间共享数据。</p>\n<h3 id=\"142\">14.2　魔法方法</h3>\n<p>Python 中所有的类，均继承自一个叫 <code>Object</code> 的父类。Python 在不同的情况下会使用从 <code>Object</code> 中继承的方法，如打印对象时：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ze8yr7s</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Lion</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">07</span>\n08\n09  lion = Lion(<span class=\"hljs-string\">\"Dilbert\"</span>)\n<span class=\"hljs-number\">10</span>  print(lion)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;__main_<span class=\"hljs-number\">_</span>.Lion object at <span class=\"hljs-number\">0x101178828</span>&gt;</code></pre>\n<p>打印 <code>Lion</code> 对象时，Python 调用了其从 <code>Object</code> 继承的魔法方法 <code>__repr__</code>，并打印 <code>__repr__</code> 方法返回的结果。我们可以覆盖继承来的 <code>__repr__</code> 方法，以改变打印结果。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j5rocqm</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Lion</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__repr__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">10</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.name\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  lion = Lion(<span class=\"hljs-string\">\"Dilbert\"</span>)\n<span class=\"hljs-number\">14</span>  <strong>print</strong>(lion)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Dilbert</code></pre>\n<p>由于我们覆盖了从 <code>Object</code> 继承的 <code>__repr__</code> 方法，并将其修改为返回 <code>Lion</code> 对象的名称。那么再打印 <code>Lion</code> 对象时，打印的内容就是 <code>Dilbert</code>，而不是原本返回的 <code>&lt;__main__.Lion object at 0x101178828&gt;</code>。</p>\n<p>表达式中的操作数必须有一个运算符是用来对表达式求值的魔法方法。例如，在表达式 2 + 2 中，每个整型数对象都有一个叫 <code>__add__</code> 的方法，Python 在对表达式求值时就会调用该方法。如果我们在类中定义了一个 <code>__add__</code> 方法，那么就可以在表达式中将其创建的对象用作加法运算符的操作数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hlmhrwv</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">AlwaysPositive</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, number)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.n = number\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__add__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, other)</span></span>:\n<span class=\"hljs-number\">10</span>          <strong><span class=\"hljs-keyword\">return</span></strong> abs(<span class=\"hljs-keyword\">self</span>.n +\n<span class=\"hljs-number\">11</span>                     other.n)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  x = AlwaysPositive(-<span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">15</span>  y = AlwaysPositive(<span class=\"hljs-number\">10</span>)\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>  print(x + y)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span></code></pre>\n<p><code>AlwaysPostive</code> 对象可用在包含加法运算符的表达式中，因为已经定义好了一个 <code>__add__</code> 方法。Python 在计算含加法运算符的表达式时，会在第一个操作符上调用 <code>__add__</code>，并将第二个操作符对象作为参数传入 <code>__add__</code>，然后返回结果。</p>\n<p>在本例中，<code>__add__</code> 使用内置函数 <code>abs</code> 返回了两个数字相加后的绝对值。因为像这样定义了 <code>__add__</code>，两个 <code>AlwaysPositive</code> 对象相加之后，将永远返回两个对象之和的绝对值；因此，表达式的结果永远为正。</p>\n<h3 id=\"143is\">14.3　is</h3>\n<p>如果两个对象是相同的对象，关键字 <code>is</code> 返回 <code>True</code>，反之则返回 <code>False</code>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gt28gww</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Person</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.name = <span class=\"hljs-string\">'Bob'</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>  bob = Person()\n<span class=\"hljs-number\">10</span>  same_bob = bob\n<span class=\"hljs-number\">11</span>  <strong>print</strong>(bob <strong><span class=\"hljs-keyword\">is</span></strong> same_bob)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  another_bob = Person()\n<span class=\"hljs-number\">15</span>  <strong>print</strong>(bob <strong><span class=\"hljs-keyword\">is</span></strong> another_bob)\n\n&gt;&gt; <span class=\"hljs-keyword\">True</span>\n&gt;&gt; <span class=\"hljs-keyword\">False</span></code></pre>\n<p>当在表达式中使用 <code>is</code> 关键字，且 <code>bob</code> 和 <code>same_bob</code> 为对比的操作数时，表达式的结果为 <code>True</code>，因为两个变量都指向相同的 <code>Person</code> 对象。在创建一个新的 <code>Person</code> 对象之后，再与最初的 <code>bob</code> 进行对比，表达式的结果则为 <code>False</code>，因为两个变量指向不同的 <code>Person</code> 对象。</p>\n<p>还可以使用关键字 <code>is</code> 检查变量是否为 <code>None</code>，示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jjettn2</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">05</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x <strong><span class=\"hljs-keyword\">is</span></strong> <span class=\"hljs-keyword\">None</span>:\n<span class=\"hljs-number\">06</span>      <strong>print</strong>(<span class=\"hljs-string\">\"x is None :（ \"</span>）\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">08</span>      print(<span class=\"hljs-string\">\"x is not None\"</span>)\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  x = <span class=\"hljs-keyword\">None</span>\n<span class=\"hljs-number\">12</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x <strong><span class=\"hljs-keyword\">is</span></strong> <span class=\"hljs-keyword\">None</span>:\n<span class=\"hljs-number\">13</span>      <strong>print</strong>(<span class=\"hljs-string\">\"x is None\"</span>）\n<span class=\"hljs-number\">14</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">15</span>      <strong>print</strong>(<span class=\"hljs-string\">\"x is None:(\"</span>)\n\n&gt;&gt; x <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">None</span>\n&gt;&gt; x <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">None</span> :（</code></pre>\n<h3 id=\"144\">14.4　术语表</h3>\n<p><strong>类变量</strong>：属于类对象及其创建的对象。</p>\n<p><strong>实例变量</strong>：实例变量属于对象。</p>\n<p><strong>私有变量</strong>：对象可访问，但客户端代码不能访问的变量。</p>\n<p><strong>私有方法</strong>：对象可访问，但客户端代码不能访问的方法。</p>\n<p><strong>公有变量</strong>：客户端代码可访问的变量。</p>\n<h3 id=\"145\">14.5　挑战练习</h3>\n<p>1．向 <code>Square</code> 类中添加一个 <code>square_list</code> 类变量，要求每次新创建一个 <code>Square</code> 对象时，新对象会被自动添加到列表中。</p>\n<p>2．修改 <code>Square</code> 类，要求在打印 <code>Square</code> 对象时，打印的信息为图形 4 个边的长度。例如，假设创建一个 <code>Square(29)</code>，则应打印 <code>29 by 29 by 29 by 29</code>。</p>\n<p>3．编写一个函数，接受两个对象作为参数，如果为相同的对象则返回 <code>True</code>，反之返回 <code>False</code>。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>深入面向对象编程</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#141\">14.1　类变量与实例变量</a></li>\n<li><a href=\"#142\">14.2　魔法方法</a></li>\n<li><a href=\"#143is\">14.3　is</a></li>\n<li><a href=\"#144\">14.4　术语表</a></li>\n<li><a href=\"#145\">14.5　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“视代码如诗词，勿要做无所谓的堆砌。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——伊利亚 · 多尔曼（Ilya Dorman）</span></p>\n</blockquote>\n<p>本章将学习与面向对象编程相关的其他概念。</p>\n<h3 id=\"141\">14.1　类变量与实例变量</h3>\n<p>在 Python 中，类即对象。这个理念源自引领了面向对象编程风潮的 Smalltalk 语言。Python 中的每个类，都是 <code>type</code> 类的一个实例对象：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/h7ypzmd</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Square</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong>pass</strong>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>  print(Square)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">__main__</span>.<span class=\"hljs-title\">Square</span>'&gt;</span></code></pre>\n<p>本例中，<code>Square</code> 类就是一个对象，我们也将其类型打印出来了。</p>\n<p>类中有两种类型的变量：<strong>类变量</strong>（class variable）和<strong>实例变量</strong>（instance variable）。目前书中出现过的变量，均为实例变量，通过语法 <code>self.[变量名] = [变量值]</code> 定义。实例变量属于对象，示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/zmnf47e</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, w, l)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.width = w\n<span class=\"hljs-number\">07</span>          self.len = l\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">11</span>          print(<span class=\"hljs-string\">\"\"\"{} by {}\n12                \"\"\"</span>.format(self.width,\n<span class=\"hljs-number\">13</span>                           self.len))\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>\n<span class=\"hljs-number\">16</span>  my_rectangle = Rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">24</span>)\n<span class=\"hljs-number\">17</span>  my_rectangle.print_size()\n\n&gt;&gt; <span class=\"hljs-number\">10</span> by <span class=\"hljs-number\">24</span></code></pre>\n<p>本例中的 <code>width</code> 和 <code>len</code> 都是实例变量。</p>\n<p>类变量属于 Python 为每个类定义创建的对象，以及类本身创建的对象。类变量的定义方式与普通变量相同（但是必须在类内部定义），可以通过类对象访问，也可以通过使用类创建的对象访问。访问方式与实例变量（变量名前面加 <code>self.</code>）的访问方式相同。类变量可以在不使用全局变量的情况下，在类的所有实例之间共享数据。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gu9unfc</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Rectangle</span>():</span>\n<span class=\"hljs-number\">05</span>      recs = []\n<span class=\"hljs-number\">06</span>\n<span class=\"hljs-number\">07</span>\n08      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, w, l)</span></span>:\n09          <span class=\"hljs-keyword\">self</span>.width = w\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.len = l\n<span class=\"hljs-number\">11</span>          <span class=\"hljs-keyword\">self</span>.recs.append((<span class=\"hljs-keyword\">self</span>.width,\n<span class=\"hljs-number\">12</span>                            <span class=\"hljs-keyword\">self</span>.len))\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">15</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">print_size</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">16</span>          print(<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"{} by {}\n17                \"</span><span class=\"hljs-string\">\"\"</span>.format(<span class=\"hljs-keyword\">self</span>.width,\n<span class=\"hljs-number\">18</span>                           <span class=\"hljs-keyword\">self</span>.len))\n<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">21</span>  r1 = Rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">24</span>)\n<span class=\"hljs-number\">22</span>  r2 = Rectangle(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">40</span>)\n<span class=\"hljs-number\">23</span>  r3 = Rectangle(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">200</span>)\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">25</span>\n<span class=\"hljs-number\">26</span>  print(Rectangle.recs)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> [(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">24</span>), (<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">40</span>), (<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">200</span>)]</code></pre>\n<p>本例中，我们在类 <code>Rectangle</code> 中添加了一个叫 <code>recs</code> 的类变量，它是在 <code>__init__</code> 方法之外定义的。因为 Python 只有在创建对象时才调用 <code>__init__</code> 方法，而我们希望能够使用类对象（不会调用 <code>__init__</code> 方法）访问类变量。</p>\n<p>接下来，我们创建了 3 个 <code>Rectangle</code> 对象。每创建一个 <code>Rectangle</code> 对象，<code>__init__</code> 方法中的代码就会向 <code>recs</code> 列表中添加一个由新对象宽度和长度组成的元组。这样，每当新创建一个 <code>Rectangle</code> 对象时，就会被自动添加到 <code>recs</code> 列表。通过使用类变量，即可在不使用全局变量的情况下，做到了在类创建的不同实例之间共享数据。</p>\n<h3 id=\"142\">14.2　魔法方法</h3>\n<p>Python 中所有的类，均继承自一个叫 <code>Object</code> 的父类。Python 在不同的情况下会使用从 <code>Object</code> 中继承的方法，如打印对象时：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ze8yr7s</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Lion</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">07</span>\n08\n09  lion = Lion(<span class=\"hljs-string\">\"Dilbert\"</span>)\n<span class=\"hljs-number\">10</span>  print(lion)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> &lt;__main_<span class=\"hljs-number\">_</span>.Lion object at <span class=\"hljs-number\">0x101178828</span>&gt;</code></pre>\n<p>打印 <code>Lion</code> 对象时，Python 调用了其从 <code>Object</code> 继承的魔法方法 <code>__repr__</code>，并打印 <code>__repr__</code> 方法返回的结果。我们可以覆盖继承来的 <code>__repr__</code> 方法，以改变打印结果。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j5rocqm</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Lion</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__repr__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">10</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.name\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>  lion = Lion(<span class=\"hljs-string\">\"Dilbert\"</span>)\n<span class=\"hljs-number\">14</span>  <strong>print</strong>(lion)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> Dilbert</code></pre>\n<p>由于我们覆盖了从 <code>Object</code> 继承的 <code>__repr__</code> 方法，并将其修改为返回 <code>Lion</code> 对象的名称。那么再打印 <code>Lion</code> 对象时，打印的内容就是 <code>Dilbert</code>，而不是原本返回的 <code>&lt;__main__.Lion object at 0x101178828&gt;</code>。</p>\n<p>表达式中的操作数必须有一个运算符是用来对表达式求值的魔法方法。例如，在表达式 2 + 2 中，每个整型数对象都有一个叫 <code>__add__</code> 的方法，Python 在对表达式求值时就会调用该方法。如果我们在类中定义了一个 <code>__add__</code> 方法，那么就可以在表达式中将其创建的对象用作加法运算符的操作数。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hlmhrwv</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">AlwaysPositive</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, number)</span></span>:\n<span class=\"hljs-number\">06</span>          <span class=\"hljs-keyword\">self</span>.n = number\n<span class=\"hljs-number\">07</span>\n08\n09      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__add__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, other)</span></span>:\n<span class=\"hljs-number\">10</span>          <strong><span class=\"hljs-keyword\">return</span></strong> abs(<span class=\"hljs-keyword\">self</span>.n +\n<span class=\"hljs-number\">11</span>                     other.n)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  x = AlwaysPositive(-<span class=\"hljs-number\">20</span>)\n<span class=\"hljs-number\">15</span>  y = AlwaysPositive(<span class=\"hljs-number\">10</span>)\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>  print(x + y)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">10</span></code></pre>\n<p><code>AlwaysPostive</code> 对象可用在包含加法运算符的表达式中，因为已经定义好了一个 <code>__add__</code> 方法。Python 在计算含加法运算符的表达式时，会在第一个操作符上调用 <code>__add__</code>，并将第二个操作符对象作为参数传入 <code>__add__</code>，然后返回结果。</p>\n<p>在本例中，<code>__add__</code> 使用内置函数 <code>abs</code> 返回了两个数字相加后的绝对值。因为像这样定义了 <code>__add__</code>，两个 <code>AlwaysPositive</code> 对象相加之后，将永远返回两个对象之和的绝对值；因此，表达式的结果永远为正。</p>\n<h3 id=\"143is\">14.3　is</h3>\n<p>如果两个对象是相同的对象，关键字 <code>is</code> 返回 <code>True</code>，反之则返回 <code>False</code>。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gt28gww</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Person</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">06</span>          self.name = <span class=\"hljs-string\">'Bob'</span>\n<span class=\"hljs-number\">07</span>\n<span class=\"hljs-number\">08</span>\n<span class=\"hljs-number\">09</span>  bob = Person()\n<span class=\"hljs-number\">10</span>  same_bob = bob\n<span class=\"hljs-number\">11</span>  <strong>print</strong>(bob <strong><span class=\"hljs-keyword\">is</span></strong> same_bob)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>  another_bob = Person()\n<span class=\"hljs-number\">15</span>  <strong>print</strong>(bob <strong><span class=\"hljs-keyword\">is</span></strong> another_bob)\n\n&gt;&gt; <span class=\"hljs-keyword\">True</span>\n&gt;&gt; <span class=\"hljs-keyword\">False</span></code></pre>\n<p>当在表达式中使用 <code>is</code> 关键字，且 <code>bob</code> 和 <code>same_bob</code> 为对比的操作数时，表达式的结果为 <code>True</code>，因为两个变量都指向相同的 <code>Person</code> 对象。在创建一个新的 <code>Person</code> 对象之后，再与最初的 <code>bob</code> 进行对比，表达式的结果则为 <code>False</code>，因为两个变量指向不同的 <code>Person</code> 对象。</p>\n<p>还可以使用关键字 <code>is</code> 检查变量是否为 <code>None</code>，示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jjettn2</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">05</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x <strong><span class=\"hljs-keyword\">is</span></strong> <span class=\"hljs-keyword\">None</span>:\n<span class=\"hljs-number\">06</span>      <strong>print</strong>(<span class=\"hljs-string\">\"x is None :（ \"</span>）\n<span class=\"hljs-number\">07</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">08</span>      print(<span class=\"hljs-string\">\"x is not None\"</span>)\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>  x = <span class=\"hljs-keyword\">None</span>\n<span class=\"hljs-number\">12</span>  <strong><span class=\"hljs-keyword\">if</span></strong> x <strong><span class=\"hljs-keyword\">is</span></strong> <span class=\"hljs-keyword\">None</span>:\n<span class=\"hljs-number\">13</span>      <strong>print</strong>(<span class=\"hljs-string\">\"x is None\"</span>）\n<span class=\"hljs-number\">14</span>  <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">15</span>      <strong>print</strong>(<span class=\"hljs-string\">\"x is None:(\"</span>)\n\n&gt;&gt; x <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">None</span>\n&gt;&gt; x <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">None</span> :（</code></pre>\n<h3 id=\"144\">14.4　术语表</h3>\n<p><strong>类变量</strong>：属于类对象及其创建的对象。</p>\n<p><strong>实例变量</strong>：实例变量属于对象。</p>\n<p><strong>私有变量</strong>：对象可访问，但客户端代码不能访问的变量。</p>\n<p><strong>私有方法</strong>：对象可访问，但客户端代码不能访问的方法。</p>\n<p><strong>公有变量</strong>：客户端代码可访问的变量。</p>\n<h3 id=\"145\">14.5　挑战练习</h3>\n<p>1．向 <code>Square</code> 类中添加一个 <code>square_list</code> 类变量，要求每次新创建一个 <code>Square</code> 对象时，新对象会被自动添加到列表中。</p>\n<p>2．修改 <code>Square</code> 类，要求在打印 <code>Square</code> 对象时，打印的信息为图形 4 个边的长度。例如，假设创建一个 <code>Square(29)</code>，则应打印 <code>29 by 29 by 29 by 29</code>。</p>\n<p>3．编写一个函数，接受两个对象作为参数，如果为相同的对象则返回 <code>True</code>，反之返回 <code>False</code>。</p>\n<p>答案可从异步社区（www.epubit.com）本书详情页的配套资源中下载。</p></div></article>\n</body>\n</html>"},{"title":"day_5","_content":"\n### 结构体\n- 用来自定义复杂的数据结构\n- struct里面可以包含多个字段\n- struct类型可以定义方法，与函数不同\n- struct类型是值类型\n- struct类型可以被嵌套\n- Golang没有class类型\n\n### 定义struct\n```go\ntype YourStructName struct{\n    YourName string\n    YourAge  int\n}\n```\n\n### 访问struct 使用`.`\n```go\nvar stu Student\n\nstu.Name = \"tony”\nstu.Age = 18\nstu.Score=20\n\nfmt.Printf(\"name=%s age=%d score=%d”, \n            stu.Name, stu.Age, stu.Score)\n\n```\n\n### 链表\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n)\n\ntype Student struct {\n\tName  string\n\tAge   int\n\tScore float32\n\tnext  *Student\n}\n\nfunc trans(p *Student) {\n\tfor p != nil {\n\t\tfmt.Println(*p)\n\t\tp = p.next\n\t}\n\n\tfmt.Println()\n}\n\nfunc insertTail(p *Student) {\n\tvar tail = p\n\tfor i := 0; i < 10; i++ {\n\t\tstu := Student{\n\t\t\tName:  fmt.Sprintf(\"stu%d\", i),\n\t\t\tAge:   rand.Intn(100),\n\t\t\tScore: rand.Float32() * 100,\n\t\t}\n\n\t\ttail.next = &stu\n\t\ttail = &stu\n\t}\n}\n\nfunc insertHead(p **Student) {\n\t//var tail = p\n\tfor i := 0; i < 10; i++ {\n\t\tstu := Student{\n\t\t\tName:  fmt.Sprintf(\"stu%d\", i),\n\t\t\tAge:   rand.Intn(100),\n\t\t\tScore: rand.Float32() * 100,\n\t\t}\n\n\t\tstu.next = *p\n\t\t*p = &stu\n\t}\n}\n\nfunc delNode(p *Student) {\n\n\tvar prev *Student = p\n\tfor p != nil {\n\t\tif p.Name == \"stu6\" {\n\t\t\tprev.next = p.next\n\t\t\tbreak\n\t\t}\n\t\tprev = p\n\t\tp = p.next\n\t}\n}\n\nfunc addNode(p *Student, newNode *Student) {\n\n\tfor p != nil {\n\t\tif p.Name == \"stu9\" {\n\t\t\tnewNode.next = p.next\n\t\t\tp.next = newNode\n\t\t\tbreak\n\t\t}\n\n\t\tp = p.next\n\t}\n}\n\nfunc main() {\n\tvar head *Student = new(Student)\n\n\thead.Name = \"hua\"\n\thead.Age = 18\n\thead.Score = 100\n\n\t//insertTail(head)\n\t//trans(head)\n\tinsertHead(&head)\n\ttrans(head)\n\n\tdelNode(head)\n\ttrans(head)\n\n\tvar newNode *Student = new(Student)\n\n\tnewNode.Name = \"stu1000\"\n\tnewNode.Age = 18\n\tnewNode.Score = 100\n\taddNode(head, newNode)\n\ttrans(head)\n}\n\n```","source":"_posts/golang/data_structuer.md","raw":"---\ntitle: day_5\n---\n\n### 结构体\n- 用来自定义复杂的数据结构\n- struct里面可以包含多个字段\n- struct类型可以定义方法，与函数不同\n- struct类型是值类型\n- struct类型可以被嵌套\n- Golang没有class类型\n\n### 定义struct\n```go\ntype YourStructName struct{\n    YourName string\n    YourAge  int\n}\n```\n\n### 访问struct 使用`.`\n```go\nvar stu Student\n\nstu.Name = \"tony”\nstu.Age = 18\nstu.Score=20\n\nfmt.Printf(\"name=%s age=%d score=%d”, \n            stu.Name, stu.Age, stu.Score)\n\n```\n\n### 链表\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n)\n\ntype Student struct {\n\tName  string\n\tAge   int\n\tScore float32\n\tnext  *Student\n}\n\nfunc trans(p *Student) {\n\tfor p != nil {\n\t\tfmt.Println(*p)\n\t\tp = p.next\n\t}\n\n\tfmt.Println()\n}\n\nfunc insertTail(p *Student) {\n\tvar tail = p\n\tfor i := 0; i < 10; i++ {\n\t\tstu := Student{\n\t\t\tName:  fmt.Sprintf(\"stu%d\", i),\n\t\t\tAge:   rand.Intn(100),\n\t\t\tScore: rand.Float32() * 100,\n\t\t}\n\n\t\ttail.next = &stu\n\t\ttail = &stu\n\t}\n}\n\nfunc insertHead(p **Student) {\n\t//var tail = p\n\tfor i := 0; i < 10; i++ {\n\t\tstu := Student{\n\t\t\tName:  fmt.Sprintf(\"stu%d\", i),\n\t\t\tAge:   rand.Intn(100),\n\t\t\tScore: rand.Float32() * 100,\n\t\t}\n\n\t\tstu.next = *p\n\t\t*p = &stu\n\t}\n}\n\nfunc delNode(p *Student) {\n\n\tvar prev *Student = p\n\tfor p != nil {\n\t\tif p.Name == \"stu6\" {\n\t\t\tprev.next = p.next\n\t\t\tbreak\n\t\t}\n\t\tprev = p\n\t\tp = p.next\n\t}\n}\n\nfunc addNode(p *Student, newNode *Student) {\n\n\tfor p != nil {\n\t\tif p.Name == \"stu9\" {\n\t\t\tnewNode.next = p.next\n\t\t\tp.next = newNode\n\t\t\tbreak\n\t\t}\n\n\t\tp = p.next\n\t}\n}\n\nfunc main() {\n\tvar head *Student = new(Student)\n\n\thead.Name = \"hua\"\n\thead.Age = 18\n\thead.Score = 100\n\n\t//insertTail(head)\n\t//trans(head)\n\tinsertHead(&head)\n\ttrans(head)\n\n\tdelNode(head)\n\ttrans(head)\n\n\tvar newNode *Student = new(Student)\n\n\tnewNode.Name = \"stu1000\"\n\tnewNode.Age = 18\n\tnewNode.Score = 100\n\taddNode(head, newNode)\n\ttrans(head)\n}\n\n```","slug":"golang/data_structuer","published":1,"date":"2019-06-12T15:28:58.784Z","updated":"2019-06-12T15:28:58.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwte3ffg0000w072gad2wh28","content":"<h3 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h3><ul>\n<li>用来自定义复杂的数据结构</li>\n<li>struct里面可以包含多个字段</li>\n<li>struct类型可以定义方法，与函数不同</li>\n<li>struct类型是值类型</li>\n<li>struct类型可以被嵌套</li>\n<li>Golang没有class类型</li>\n</ul>\n<h3 id=\"定义struct\"><a href=\"#定义struct\" class=\"headerlink\" title=\"定义struct\"></a>定义struct</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> YourStructName <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    YourName <span class=\"keyword\">string</span></span><br><span class=\"line\">    YourAge  <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问struct-使用\"><a href=\"#访问struct-使用\" class=\"headerlink\" title=\"访问struct 使用.\"></a>访问struct 使用<code>.</code></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stu Student</span><br><span class=\"line\"></span><br><span class=\"line\">stu.Name = <span class=\"string\">\"tony”</span></span><br><span class=\"line\"><span class=\"string\">stu.Age = 18</span></span><br><span class=\"line\"><span class=\"string\">stu.Score=20</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">fmt.Printf(\"</span>name=%s age=%d score=%d”, </span><br><span class=\"line\">            stu.Name, stu.Age, stu.Score)</span><br></pre></td></tr></table></figure>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAge   <span class=\"keyword\">int</span></span><br><span class=\"line\">\tScore <span class=\"keyword\">float32</span></span><br><span class=\"line\">\tnext  *Student</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trans</span><span class=\"params\">(p *Student)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> p != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(*p)</span><br><span class=\"line\">\t\tp = p.next</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">insertTail</span><span class=\"params\">(p *Student)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> tail = p</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tstu := Student&#123;</span><br><span class=\"line\">\t\t\tName:  fmt.Sprintf(<span class=\"string\">\"stu%d\"</span>, i),</span><br><span class=\"line\">\t\t\tAge:   rand.Intn(<span class=\"number\">100</span>),</span><br><span class=\"line\">\t\t\tScore: rand.Float32() * <span class=\"number\">100</span>,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttail.next = &amp;stu</span><br><span class=\"line\">\t\ttail = &amp;stu</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">insertHead</span><span class=\"params\">(p **Student)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//var tail = p</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tstu := Student&#123;</span><br><span class=\"line\">\t\t\tName:  fmt.Sprintf(<span class=\"string\">\"stu%d\"</span>, i),</span><br><span class=\"line\">\t\t\tAge:   rand.Intn(<span class=\"number\">100</span>),</span><br><span class=\"line\">\t\t\tScore: rand.Float32() * <span class=\"number\">100</span>,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tstu.next = *p</span><br><span class=\"line\">\t\t*p = &amp;stu</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">delNode</span><span class=\"params\">(p *Student)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> prev *Student = p</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> p != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> p.Name == <span class=\"string\">\"stu6\"</span> &#123;</span><br><span class=\"line\">\t\t\tprev.next = p.next</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprev = p</span><br><span class=\"line\">\t\tp = p.next</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addNode</span><span class=\"params\">(p *Student, newNode *Student)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> p != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> p.Name == <span class=\"string\">\"stu9\"</span> &#123;</span><br><span class=\"line\">\t\t\tnewNode.next = p.next</span><br><span class=\"line\">\t\t\tp.next = newNode</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tp = p.next</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> head *Student = <span class=\"built_in\">new</span>(Student)</span><br><span class=\"line\"></span><br><span class=\"line\">\thead.Name = <span class=\"string\">\"hua\"</span></span><br><span class=\"line\">\thead.Age = <span class=\"number\">18</span></span><br><span class=\"line\">\thead.Score = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//insertTail(head)</span></span><br><span class=\"line\">\t<span class=\"comment\">//trans(head)</span></span><br><span class=\"line\">\tinsertHead(&amp;head)</span><br><span class=\"line\">\ttrans(head)</span><br><span class=\"line\"></span><br><span class=\"line\">\tdelNode(head)</span><br><span class=\"line\">\ttrans(head)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> newNode *Student = <span class=\"built_in\">new</span>(Student)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnewNode.Name = <span class=\"string\">\"stu1000\"</span></span><br><span class=\"line\">\tnewNode.Age = <span class=\"number\">18</span></span><br><span class=\"line\">\tnewNode.Score = <span class=\"number\">100</span></span><br><span class=\"line\">\taddNode(head, newNode)</span><br><span class=\"line\">\ttrans(head)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h3><ul>\n<li>用来自定义复杂的数据结构</li>\n<li>struct里面可以包含多个字段</li>\n<li>struct类型可以定义方法，与函数不同</li>\n<li>struct类型是值类型</li>\n<li>struct类型可以被嵌套</li>\n<li>Golang没有class类型</li>\n</ul>\n<h3 id=\"定义struct\"><a href=\"#定义struct\" class=\"headerlink\" title=\"定义struct\"></a>定义struct</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> YourStructName <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    YourName <span class=\"keyword\">string</span></span><br><span class=\"line\">    YourAge  <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问struct-使用\"><a href=\"#访问struct-使用\" class=\"headerlink\" title=\"访问struct 使用.\"></a>访问struct 使用<code>.</code></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stu Student</span><br><span class=\"line\"></span><br><span class=\"line\">stu.Name = <span class=\"string\">\"tony”</span></span><br><span class=\"line\"><span class=\"string\">stu.Age = 18</span></span><br><span class=\"line\"><span class=\"string\">stu.Score=20</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">fmt.Printf(\"</span>name=%s age=%d score=%d”, </span><br><span class=\"line\">            stu.Name, stu.Age, stu.Score)</span><br></pre></td></tr></table></figure>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAge   <span class=\"keyword\">int</span></span><br><span class=\"line\">\tScore <span class=\"keyword\">float32</span></span><br><span class=\"line\">\tnext  *Student</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trans</span><span class=\"params\">(p *Student)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> p != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(*p)</span><br><span class=\"line\">\t\tp = p.next</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">insertTail</span><span class=\"params\">(p *Student)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> tail = p</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tstu := Student&#123;</span><br><span class=\"line\">\t\t\tName:  fmt.Sprintf(<span class=\"string\">\"stu%d\"</span>, i),</span><br><span class=\"line\">\t\t\tAge:   rand.Intn(<span class=\"number\">100</span>),</span><br><span class=\"line\">\t\t\tScore: rand.Float32() * <span class=\"number\">100</span>,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttail.next = &amp;stu</span><br><span class=\"line\">\t\ttail = &amp;stu</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">insertHead</span><span class=\"params\">(p **Student)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//var tail = p</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tstu := Student&#123;</span><br><span class=\"line\">\t\t\tName:  fmt.Sprintf(<span class=\"string\">\"stu%d\"</span>, i),</span><br><span class=\"line\">\t\t\tAge:   rand.Intn(<span class=\"number\">100</span>),</span><br><span class=\"line\">\t\t\tScore: rand.Float32() * <span class=\"number\">100</span>,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tstu.next = *p</span><br><span class=\"line\">\t\t*p = &amp;stu</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">delNode</span><span class=\"params\">(p *Student)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> prev *Student = p</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> p != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> p.Name == <span class=\"string\">\"stu6\"</span> &#123;</span><br><span class=\"line\">\t\t\tprev.next = p.next</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprev = p</span><br><span class=\"line\">\t\tp = p.next</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addNode</span><span class=\"params\">(p *Student, newNode *Student)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> p != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> p.Name == <span class=\"string\">\"stu9\"</span> &#123;</span><br><span class=\"line\">\t\t\tnewNode.next = p.next</span><br><span class=\"line\">\t\t\tp.next = newNode</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tp = p.next</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> head *Student = <span class=\"built_in\">new</span>(Student)</span><br><span class=\"line\"></span><br><span class=\"line\">\thead.Name = <span class=\"string\">\"hua\"</span></span><br><span class=\"line\">\thead.Age = <span class=\"number\">18</span></span><br><span class=\"line\">\thead.Score = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//insertTail(head)</span></span><br><span class=\"line\">\t<span class=\"comment\">//trans(head)</span></span><br><span class=\"line\">\tinsertHead(&amp;head)</span><br><span class=\"line\">\ttrans(head)</span><br><span class=\"line\"></span><br><span class=\"line\">\tdelNode(head)</span><br><span class=\"line\">\ttrans(head)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> newNode *Student = <span class=\"built_in\">new</span>(Student)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnewNode.Name = <span class=\"string\">\"stu1000\"</span></span><br><span class=\"line\">\tnewNode.Age = <span class=\"number\">18</span></span><br><span class=\"line\">\tnewNode.Score = <span class=\"number\">100</span></span><br><span class=\"line\">\taddNode(head, newNode)</span><br><span class=\"line\">\ttrans(head)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"综合练习","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>综合练习</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#151\">15.1　卡牌</a></li>\n<li><a href=\"#152\">15.2　牌堆</a></li>\n<li><a href=\"#153\">15.3　玩家</a></li>\n<li><a href=\"#154\">15.4　游戏</a></li>\n<li><a href=\"#155\">15.5　战争</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“代码跑起来我们再聊。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——沃德 · 坎宁汉（Ward Cunningham）</span></p>\n</blockquote>\n<p>本章将学习开发著名的棋牌游戏——战争。在该游戏中，每名玩家从牌堆中抽取一张牌，牌面点数最高的玩家获胜。我们将分别定义表示扑克牌、牌堆、玩家和游戏的类，来逐步开发“战争”。</p>\n<h3 id=\"151\">15.1　卡牌</h3>\n<p>下面是表示扑克牌的类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jj22qv4</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Card</span>:</span>\n<span class=\"hljs-number\">05</span>      suits = [<span class=\"hljs-string\">\"spades\"</span>,\n<span class=\"hljs-number\">06</span>               <span class=\"hljs-string\">\"hearts\"</span>,\n<span class=\"hljs-number\">07</span>               <span class=\"hljs-string\">\"diamonds\"</span>,\n<span class=\"hljs-number\">08</span>               <span class=\"hljs-string\">\"clubs\"</span>]\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>      values = [<span class=\"hljs-keyword\">None</span>, <span class=\"hljs-keyword\">None</span>, <span class=\"hljs-string\">\"2\"</span>, <span class=\"hljs-string\">\"3\"</span>,\n<span class=\"hljs-number\">12</span>                <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"5\"</span>, <span class=\"hljs-string\">\"6\"</span>, <span class=\"hljs-string\">\"7\"</span>,\n<span class=\"hljs-number\">13</span>                <span class=\"hljs-string\">\"8\"</span>, <span class=\"hljs-string\">\"9\"</span>, <span class=\"hljs-string\">\"10\"</span>,\n<span class=\"hljs-number\">14</span>                <span class=\"hljs-string\">\"Jack\"</span>, <span class=\"hljs-string\">\"Queen\"</span>,\n<span class=\"hljs-number\">15</span>                <span class=\"hljs-string\">\"King\"</span>, <span class=\"hljs-string\">\"Ace\"</span> ]\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, v, s)</span>:</span>\n<span class=\"hljs-number\">19</span>          <span class=\"hljs-string\">\"\"\"suit 和 value 的值都为整型数\"\"\"</span>\n<span class=\"hljs-number\">20</span>          self.value = v\n<span class=\"hljs-number\">21</span>          self.suit = s\n<span class=\"hljs-number\">22</span>\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__lt__</span><span class=\"hljs-params\">(self, c2)</span>:</span>\n<span class=\"hljs-number\">25</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value &lt; c2.value:\n<span class=\"hljs-number\">26</span>              <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">27</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value == c2.value:\n<span class=\"hljs-number\">28</span>              <strong><span class=\"hljs-keyword\">if</span></strong> self.suit &lt; c2.suit:\n<span class=\"hljs-number\">29</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">30</span>              <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">31</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">32</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">33</span>\n<span class=\"hljs-number\">34</span>\n<span class=\"hljs-number\">35</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__gt__</span><span class=\"hljs-params\">(self, c2)</span>:</span>\n<span class=\"hljs-number\">36</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value &gt; c2.value:\n<span class=\"hljs-number\">37</span>              <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">38</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value == c2.value:\n<span class=\"hljs-number\">39</span>              <strong><span class=\"hljs-keyword\">if</span></strong> self.suit &gt; c2.suit:\n<span class=\"hljs-number\">40</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">41</span>              <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">42</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">43</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">44</span>\n<span class=\"hljs-number\">45</span>\n<span class=\"hljs-number\">46</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__repr__</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">47</span>          v = self.values[self.value] + <span class=\"hljs-string\">\" of \"</span> \\\n<span class=\"hljs-number\">48</span>          + self.suits[self.suit]\n<span class=\"hljs-number\">49</span>          <strong><span class=\"hljs-keyword\">return</span></strong> v</code></pre>\n<p><code>Card</code> 类有两个类变量：<code>suits</code> 和 <code>values</code>。前者是一个字符串列表，表示扑克牌的花色：<code>spades</code>、<code>hearts</code>、<code>diamonds</code> 和 <code>clubs</code>。后者是一个表示扑克牌数字的字符串列表：<code>2～10</code>、<code>Jack</code>、<code>Queen</code>、<code>King</code> 和 <code>Ace</code>。列表 <code>values</code> 的前两个索引处的元素都是 <code>None</code>，以确保列表中的字符串与其所处的索引相匹配，即 <code>values</code> 列表中的字符串 <code>\"2\"</code> 位于索引 <code>2</code>。</p>\n<p><code>Card</code> 对象有两个实例变量：<code>suit</code> 和 <code>value</code>，均为整型数。二者结合在一起，表示 <code>Card</code> 对象代表的是什么牌。例如，创建 <code>Card</code> 对象时传入参数 <code>2</code> 作为 <code>suit</code> 的值，传入参数 <code>1</code> 作为 <code>value</code> 的值，就意味着创建了一张 <code>2 of hearts</code>（红桃二）。</p>\n<p>由于定义了 <code>__lt__</code> 和 <code>__gt__</code> 这两个魔法方法，就可以在表达式中使用大于和小于运算符比较 <code>Card</code> 对象。魔法方法中的代码会判断当前扑克牌是大于还是小于作为参数传入的扑克牌，同时也会判断两张牌的值是否相同。如果加入两张牌的值都是 <code>10</code>，那么就会通过 <code>suit</code> 来比较。<code>suits</code> 列表中的花色是按大小排列的，即索引值越大的花色，越小；索引值越小的花色，越大。示例如下：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j6donnr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  card1 = Card(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">5</span>  card2 = Card(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-keyword\">print</span>(card1 &lt; card2)\n\n&gt;&gt; <span class=\"hljs-keyword\">True</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hc9ktlr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  card1 = Card(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">5</span>  card2 = Card(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-keyword\">print</span>(card1 &gt; card2)\n\n&gt;&gt; <span class=\"hljs-keyword\">False</span>\n</code></pre>\n<p><code>Card</code> 类中定义的最后一个方法是 <code>__repr__</code>，通过 <code>value</code> 和 <code>suit</code> 实例变量查找扑克牌在 <code>values</code> 和 <code>suits</code> 列表中对应的值和花色，并返回查询结果。示例如下：</p>\n<pre><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z57hc75</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  card = Card(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-built_in\">print</span>(card)\n\n&gt;&gt; <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">of</span> diamonds\n</code></pre>\n<h3 id=\"152\">15.2　牌堆</h3>\n<p>接下来，我们定义一个用来表示牌堆（deck of cards）的类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jz8zfz7</span>\n<span class=\"hljs-number\">2</span>  <strong>from</strong> random <strong>import</strong> shuffle\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Deck</span>:</span>\n<span class=\"hljs-number\">6</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-keyword\">self</span>.cards = []\n08          <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">15</span>):\n09              <strong><span class=\"hljs-keyword\">for</span></strong> j <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">4</span>):\n<span class=\"hljs-number\">10</span>                  <span class=\"hljs-keyword\">self</span>.cards.append(Card(i, j))\n<span class=\"hljs-number\">11</span>          shuffle(<span class=\"hljs-keyword\">self</span>.cards)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">rm_card</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">15</span>          <strong><span class=\"hljs-keyword\">if</span></strong> len(<span class=\"hljs-keyword\">self</span>.cards) == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">16</span>              <strong><span class=\"hljs-keyword\">return</span></strong>\n<span class=\"hljs-number\">17</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.cards.pop()</code></pre>\n<p>在初始化 <code>Deck</code> 对象时，<code>__init__</code> 方法中的两个 <code>for</code> 循环将创建牌堆中所有的 52 张牌，并添加到 <code>cards</code> 列表。第一个循环从 <code>2</code> 到 <code>15</code>，因为扑克牌的第一个值是 <code>2</code>，最后一个值是 <code>14</code>（Ace）。内部的 <code>for</code> 循环每循环一次，就会使用外循环的整型数作为扑克牌的值（如 <code>14</code> 表示 Ace），用内循环的整型数作为扑克牌的花色（如 <code>2</code> 表示红桃），以此创建一张扑克牌，总共创建 52 张，每种花色和数值的组合各创建一张。创建完所有的扑克牌之后，通过 <code>random</code> 模块中的 <code>shuffle</code> 方法随机排列 <code>cards</code> 列表中的元素，模拟洗牌的动作。</p>\n<p>牌堆还有一个叫 <code>rm_card</code> 的方法，从牌堆中返回一张扑克牌对象并将其从 <code>cards</code> 列表内移除，如果牌堆里没有牌时则返回 <code>None</code>。我们使用 <code>Deck</code> 类创建一副牌，并打印其中所有的牌：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsv5n6p</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  deck = Deck()\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">for</span></strong> card <strong><span class=\"hljs-keyword\">in</span></strong> deck.<span class=\"hljs-symbol\">cards:</span>\n<span class=\"hljs-number\">6</span>      print(card)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span> of spades\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">8</span> of hearts\n...</code></pre>\n<h3 id=\"153\">15.3　玩家</h3>\n<p>我们还需要一个类来表示游戏中的玩家，并记录他们手中的牌，以及赢了多少局。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gwyrt2s</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Player</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-keyword\">self</span>.wins = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-keyword\">self</span>.card = None\n<span class=\"hljs-number\">8</span>          <span class=\"hljs-keyword\">self</span>.name = name</code></pre>\n<p><code>Player</code> 类有 3 个实例变量：<code>wins</code> 用来记录玩家赢的局数，<code>card</code> 用来代表玩家当前手中的牌，<code>name</code> 用来记录玩家的姓名。</p>\n<h3 id=\"154\">15.4　游戏</h3>\n<p>最后，还需要一个类来表示游戏本身：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/huwq8mw</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Game</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          name1 = input(<span class=\"hljs-string\">\"p1 name \"</span>)\n<span class=\"hljs-number\">07</span>          name2 = input(<span class=\"hljs-string\">\"p2 name \"</span>)\n08          <span class=\"hljs-keyword\">self</span>.deck = Deck()\n09          <span class=\"hljs-keyword\">self</span>.p1 = Player(name1)\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.p2 = Player(name2)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">wins</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, winner)</span></span>:\n<span class=\"hljs-number\">14</span>          w = <span class=\"hljs-string\">\"{} wins this round\"</span>\n<span class=\"hljs-number\">15</span>          w = w.format(winner)\n<span class=\"hljs-number\">16</span>          <strong>print</strong>(w)\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">draw</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1n, p1c, p2n, p2c)</span></span>:\n<span class=\"hljs-number\">20</span>          d = <span class=\"hljs-string\">\"{} drew {} {} drew {}\"</span>\n<span class=\"hljs-number\">21</span>          d = d.format(p1n, p1c, p2n, p2c)\n<span class=\"hljs-number\">22</span>          <strong>print</strong>(d)\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">25</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">play_game</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">26</span>          cards = <span class=\"hljs-keyword\">self</span>.deck.cards\n<span class=\"hljs-number\">27</span>          <strong>print</strong>(<span class=\"hljs-string\">\"beginning War!\"</span>)\n<span class=\"hljs-number\">28</span>          <strong><span class=\"hljs-keyword\">while</span></strong> len(cards) &gt;= <span class=\"hljs-number\">2</span>:\n<span class=\"hljs-number\">29</span>              m = <span class=\"hljs-string\">\"q to quit. Any \"</span> + <span class=\"hljs-string\">\"key to play:\"</span>\n<span class=\"hljs-number\">30</span>              response = input(m)\n<span class=\"hljs-number\">31</span>              <strong><span class=\"hljs-keyword\">if</span></strong> response = <span class=\"hljs-string\">\"q\"</span>:\n<span class=\"hljs-number\">32</span>                  <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">33</span>              p1c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">34</span>              p2c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">35</span>              p1n = <span class=\"hljs-keyword\">self</span>.p1.name\n<span class=\"hljs-number\">36</span>              p2n = <span class=\"hljs-keyword\">self</span>.p2.name\n<span class=\"hljs-number\">37</span>              <span class=\"hljs-keyword\">self</span>.draw(p1n, p1c, p2n, p2c)\n<span class=\"hljs-number\">38</span>              <strong><span class=\"hljs-keyword\">if</span></strong> p1c &gt; <span class=\"hljs-symbol\">p2c:</span>\n<span class=\"hljs-number\">39</span>                  <span class=\"hljs-keyword\">self</span>.p1.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">40</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p1.name)\n<span class=\"hljs-number\">41</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">42</span>                  <span class=\"hljs-keyword\">self</span>.p2.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">43</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p2.name)\n<span class=\"hljs-number\">44</span>\n<span class=\"hljs-number\">45</span>\n<span class=\"hljs-number\">46</span>          win = <span class=\"hljs-keyword\">self</span>.winner(<span class=\"hljs-keyword\">self</span>.p1, <span class=\"hljs-keyword\">self</span>.p2)\n<span class=\"hljs-number\">47</span>\n<span class=\"hljs-number\">48</span>          <strong>print</strong>(<span class=\"hljs-string\">\"War is over. {} wins\"</span>.format(win))\n<span class=\"hljs-number\">49</span>\n<span class=\"hljs-number\">50</span>\n<span class=\"hljs-number\">51</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">winner</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1, p2)</span></span>:\n<span class=\"hljs-number\">52</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1.wins &gt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">53</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p1.name\n<span class=\"hljs-number\">54</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1 wins &lt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">55</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p2.name\n<span class=\"hljs-number\">56</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-string\">\"It was a tie!\"</span></code></pre>\n<p>创建 <code>Game</code> 对象时，Python 调用其 <code>__init__</code> 方法，其中的 <code>input</code> 函数将收集参与游戏的两名玩家的姓名，并保存在变量 <code>name1</code> 和 <code>name2</code> 中。接下来，创建一个 <code>Deck</code> 对象，保存在实例变量 <code>deck</code> 中，并使用 <code>name1</code> 和 <code>name2</code> 创建两个 <code>Player</code> 对象。</p>\n<p><code>Game</code> 类中的 <code>play_game</code> 方法会开启游戏，其中有一个 <code>while</code> 循环，只要牌堆中剩下两张或两张以上扑克牌，并且 <code>response</code> 变量的值并等于 <code>q</code>，游戏就会一直运行。每次循环，都将用户的输入赋值给 <code>response</code> 变量。游戏只有在有玩家输入 <code>\"q\"</code>，或者牌堆里少于两张牌时才会结束。</p>\n<p>每次循环将抽取两张扑克牌，<code>play_game</code> 方法将第一张牌给 <code>p1</code>，第二张牌给 <code>p2</code>。然后打印每个玩家的名字及抽到的扑克牌，同时比较哪张牌更大，手中牌更大的玩家赢得本轮，其对应 <code>wins</code> 实例变量的值递增 1。</p>\n<p><code>Game</code> 类还有一个叫 <code>winner</code> 的方法，接受两个 <code>Player</code> 对象，将比较各自赢得的局数，并返回获胜次数最多的玩家。</p>\n<p>当 <code>Deck</code> 对象中没有多余的扑克牌后，<code>play_game</code> 方法将打印一段话表示战争已经结束，然后调用 <code>winner</code> 方法（传入 <code>p1</code> 和 <code>p2</code> 作为参数），并打印返回的结果——赢得游戏胜利的玩家的姓名。</p>\n<h3 id=\"155\">15.5　战争</h3>\n<p>以下是完整代码：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">001</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ho7364a</span>\n<span class=\"hljs-number\">002</span>\n<span class=\"hljs-number\">003</span>\n<span class=\"hljs-number\">004</span>  <strong>from</strong> random <strong>import</strong> shuffle\n<span class=\"hljs-number\">005</span>\n<span class=\"hljs-number\">006</span>\n<span class=\"hljs-number\">007</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Card</span>:</span>\n<span class=\"hljs-number\">00</span>8      suits = [<span class=\"hljs-string\">\"spades\"</span>,\n<span class=\"hljs-number\">00</span>9               <span class=\"hljs-string\">\"hearts\"</span>,\n<span class=\"hljs-number\">010</span>               <span class=\"hljs-string\">\"diamonds\"</span>,\n<span class=\"hljs-number\">011</span>               <span class=\"hljs-string\">\"clubs\"</span>]\n<span class=\"hljs-number\">012</span>\n<span class=\"hljs-number\">013</span>\n<span class=\"hljs-number\">014</span>      values = [None, None, <span class=\"hljs-string\">\"2\"</span>, <span class=\"hljs-string\">\"3\"</span>,\n<span class=\"hljs-number\">015</span>                <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"5\"</span>, <span class=\"hljs-string\">\"6\"</span>, <span class=\"hljs-string\">\"7\"</span>,\n<span class=\"hljs-number\">016</span>                <span class=\"hljs-string\">\"8\"</span>, <span class=\"hljs-string\">\"9\"</span>, <span class=\"hljs-string\">\"10\"</span>,\n<span class=\"hljs-number\">017</span>                <span class=\"hljs-string\">\"Jack\"</span>, <span class=\"hljs-string\">\"Queen\"</span>,\n<span class=\"hljs-number\">01</span>8                <span class=\"hljs-string\">\"King\"</span>, <span class=\"hljs-string\">\"Ace\"</span> ]\n<span class=\"hljs-number\">01</span>9\n<span class=\"hljs-number\">020</span>\n<span class=\"hljs-number\">021</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, v, s)</span></span>:\n<span class=\"hljs-number\">022</span>          <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"suit 和 value 的值都为整型数\"</span><span class=\"hljs-string\">\"\"</span>\n<span class=\"hljs-number\">023</span>          <span class=\"hljs-keyword\">self</span>.value = v\n<span class=\"hljs-number\">024</span>          <span class=\"hljs-keyword\">self</span>.suit = s\n<span class=\"hljs-number\">025</span>\n<span class=\"hljs-number\">026</span>\n<span class=\"hljs-number\">027</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__lt__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, c2)</span></span>:\n<span class=\"hljs-number\">02</span>8          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value &lt; c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">02</span>9              <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">030</span>          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value == c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">031</span>              <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.suit &lt; c2.<span class=\"hljs-symbol\">suit:</span>\n<span class=\"hljs-number\">032</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">033</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">034</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">035</span>          <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">036</span>\n<span class=\"hljs-number\">037</span>\n<span class=\"hljs-number\">03</span>8      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__gt__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, c2)</span></span>:\n<span class=\"hljs-number\">03</span>9          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value &gt; c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">040</span>              <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">041</span>          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value == c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">042</span>              <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.suit &gt; c2.<span class=\"hljs-symbol\">suit:</span>\n<span class=\"hljs-number\">043</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">044</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">045</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">046</span>          <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">047</span>\n<span class=\"hljs-number\">04</span>8\n<span class=\"hljs-number\">04</span>9      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__repr__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">050</span>          v = <span class=\"hljs-keyword\">self</span>.values[<span class=\"hljs-keyword\">self</span>.value] + <span class=\"hljs-string\">\" of \"</span> \\\n<span class=\"hljs-number\">051</span>          + <span class=\"hljs-keyword\">self</span>.suits[<span class=\"hljs-keyword\">self</span>.suit]\n<span class=\"hljs-number\">052</span>          <strong><span class=\"hljs-keyword\">return</span></strong> v\n<span class=\"hljs-number\">053</span>\n<span class=\"hljs-number\">054</span>\n<span class=\"hljs-number\">055</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Deck</span>:</span>\n<span class=\"hljs-number\">056</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">057</span>          <span class=\"hljs-keyword\">self</span>.cards = []\n<span class=\"hljs-number\">05</span>8          <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">15</span>):\n<span class=\"hljs-number\">05</span>9              <strong><span class=\"hljs-keyword\">for</span></strong> j <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">4</span>):\n<span class=\"hljs-number\">060</span>                  <span class=\"hljs-keyword\">self</span>.cards.append(Card(i, j))\n<span class=\"hljs-number\">061</span>          shuffle(<span class=\"hljs-keyword\">self</span>.cards)\n<span class=\"hljs-number\">062</span>\n<span class=\"hljs-number\">063</span>\n<span class=\"hljs-number\">064</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">rm_card</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">065</span>          <strong><span class=\"hljs-keyword\">if</span></strong> len(<span class=\"hljs-keyword\">self</span>.cards) == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">066</span>              <strong><span class=\"hljs-keyword\">return</span></strong>\n<span class=\"hljs-number\">067</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.cards.pop()\n<span class=\"hljs-number\">06</span>8\n<span class=\"hljs-number\">06</span>9\n<span class=\"hljs-number\">070</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Player</span>:</span>\n<span class=\"hljs-number\">071</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">072</span>          <span class=\"hljs-keyword\">self</span>.wins = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">073</span>          <span class=\"hljs-keyword\">self</span>.card = None\n<span class=\"hljs-number\">074</span>          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">075</span>\n<span class=\"hljs-number\">076</span>\n<span class=\"hljs-number\">077</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Game</span>:</span>\n<span class=\"hljs-number\">07</span>8      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">07</span>9          name1 = input(<span class=\"hljs-string\">\"p1 name \"</span>)\n08<span class=\"hljs-number\">0</span>          name2 = input(<span class=\"hljs-string\">\"p2 name \"</span>)\n081          <span class=\"hljs-keyword\">self</span>.deck = Deck()\n082          <span class=\"hljs-keyword\">self</span>.p1 = Player(name1)\n083          <span class=\"hljs-keyword\">self</span>.p2 = Player(name2)\n084\n085\n086      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">wins</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, winner)</span></span>:\n087          w = <span class=\"hljs-string\">\"{} wins this round\"</span>\n088          w = w.format(winner)\n089          <strong>print</strong>(w)\n09<span class=\"hljs-number\">0</span>\n091\n092      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">draw</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1n, p1c, p2n, p2c)</span></span>:\n093          d = <span class=\"hljs-string\">\"{} drew {} {} drew {}\"</span>\n094          d = d.format(p1n, p1c, p2n, p2c)\n095          <strong>print</strong>(d)\n096\n097\n098      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">play_game</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n099          cards = <span class=\"hljs-keyword\">self</span>.deck.cards\n<span class=\"hljs-number\">100</span>          <strong>print</strong>(<span class=\"hljs-string\">\"beginning War!\"</span>)\n<span class=\"hljs-number\">101</span>          <strong><span class=\"hljs-keyword\">while</span></strong> len(cards) &gt;= <span class=\"hljs-number\">2</span>:\n<span class=\"hljs-number\">102</span>              m = <span class=\"hljs-string\">\"q to quit. Any \"</span> + <span class=\"hljs-string\">\"key to play:\"</span>\n<span class=\"hljs-number\">103</span>              response = input(m)\n<span class=\"hljs-number\">104</span>              <strong><span class=\"hljs-keyword\">if</span></strong> response == <span class=\"hljs-string\">'q'</span>:\n<span class=\"hljs-number\">105</span>                  <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">106</span>              p1c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">107</span>              p2c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">108</span>              p1n = <span class=\"hljs-keyword\">self</span>.p1.name\n<span class=\"hljs-number\">109</span>              p2n = <span class=\"hljs-keyword\">self</span>.p2.name\n<span class=\"hljs-number\">110</span>              <span class=\"hljs-keyword\">self</span>.draw(p1n, p1c, p2n, p2c)\n<span class=\"hljs-number\">111</span>              <strong><span class=\"hljs-keyword\">if</span></strong> p1c &gt; <span class=\"hljs-symbol\">p2c:</span>\n<span class=\"hljs-number\">112</span>                  <span class=\"hljs-keyword\">self</span>.p1.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">113</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p1.name)\n<span class=\"hljs-number\">114</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">115</span>                  <span class=\"hljs-keyword\">self</span>.p2.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">116</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p2.name)\n<span class=\"hljs-number\">117</span>\n<span class=\"hljs-number\">118</span>\n<span class=\"hljs-number\">119</span>          win = <span class=\"hljs-keyword\">self</span>.winner(<span class=\"hljs-keyword\">self</span>.p1, <span class=\"hljs-keyword\">self</span>.p2)\n<span class=\"hljs-number\">120</span>\n<span class=\"hljs-number\">121</span>          print(<span class=\"hljs-string\">\"War is over. {} wins\"</span>.format(win))\n<span class=\"hljs-number\">122</span>\n<span class=\"hljs-number\">123</span>\n<span class=\"hljs-number\">124</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">winner</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1, p2)</span></span>:\n<span class=\"hljs-number\">125</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1.wins &gt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">126</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p1.name\n<span class=\"hljs-number\">127</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1 wins &lt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">128</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p2.name\n<span class=\"hljs-number\">129</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-string\">\"It was a tie!\"</span>\n<span class=\"hljs-number\">130</span>\n<span class=\"hljs-number\">131</span>\n<span class=\"hljs-number\">132</span>  game = Game()\n<span class=\"hljs-number\">133</span>  game.play_game()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">\"p1 name\"</span>\n…</code></pre></div></article>\n</body>\n</html>","source":"_posts/Python无师自通/15_opp_testing.html","raw":"---\ntitle: 综合练习\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>综合练习</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#151\">15.1　卡牌</a></li>\n<li><a href=\"#152\">15.2　牌堆</a></li>\n<li><a href=\"#153\">15.3　玩家</a></li>\n<li><a href=\"#154\">15.4　游戏</a></li>\n<li><a href=\"#155\">15.5　战争</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“代码跑起来我们再聊。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——沃德 · 坎宁汉（Ward Cunningham）</span></p>\n</blockquote>\n<p>本章将学习开发著名的棋牌游戏——战争。在该游戏中，每名玩家从牌堆中抽取一张牌，牌面点数最高的玩家获胜。我们将分别定义表示扑克牌、牌堆、玩家和游戏的类，来逐步开发“战争”。</p>\n<h3 id=\"151\">15.1　卡牌</h3>\n<p>下面是表示扑克牌的类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jj22qv4</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Card</span>:</span>\n<span class=\"hljs-number\">05</span>      suits = [<span class=\"hljs-string\">\"spades\"</span>,\n<span class=\"hljs-number\">06</span>               <span class=\"hljs-string\">\"hearts\"</span>,\n<span class=\"hljs-number\">07</span>               <span class=\"hljs-string\">\"diamonds\"</span>,\n<span class=\"hljs-number\">08</span>               <span class=\"hljs-string\">\"clubs\"</span>]\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>      values = [<span class=\"hljs-keyword\">None</span>, <span class=\"hljs-keyword\">None</span>, <span class=\"hljs-string\">\"2\"</span>, <span class=\"hljs-string\">\"3\"</span>,\n<span class=\"hljs-number\">12</span>                <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"5\"</span>, <span class=\"hljs-string\">\"6\"</span>, <span class=\"hljs-string\">\"7\"</span>,\n<span class=\"hljs-number\">13</span>                <span class=\"hljs-string\">\"8\"</span>, <span class=\"hljs-string\">\"9\"</span>, <span class=\"hljs-string\">\"10\"</span>,\n<span class=\"hljs-number\">14</span>                <span class=\"hljs-string\">\"Jack\"</span>, <span class=\"hljs-string\">\"Queen\"</span>,\n<span class=\"hljs-number\">15</span>                <span class=\"hljs-string\">\"King\"</span>, <span class=\"hljs-string\">\"Ace\"</span> ]\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, v, s)</span>:</span>\n<span class=\"hljs-number\">19</span>          <span class=\"hljs-string\">\"\"\"suit 和 value 的值都为整型数\"\"\"</span>\n<span class=\"hljs-number\">20</span>          self.value = v\n<span class=\"hljs-number\">21</span>          self.suit = s\n<span class=\"hljs-number\">22</span>\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__lt__</span><span class=\"hljs-params\">(self, c2)</span>:</span>\n<span class=\"hljs-number\">25</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value &lt; c2.value:\n<span class=\"hljs-number\">26</span>              <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">27</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value == c2.value:\n<span class=\"hljs-number\">28</span>              <strong><span class=\"hljs-keyword\">if</span></strong> self.suit &lt; c2.suit:\n<span class=\"hljs-number\">29</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">30</span>              <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">31</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">32</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">33</span>\n<span class=\"hljs-number\">34</span>\n<span class=\"hljs-number\">35</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__gt__</span><span class=\"hljs-params\">(self, c2)</span>:</span>\n<span class=\"hljs-number\">36</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value &gt; c2.value:\n<span class=\"hljs-number\">37</span>              <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">38</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value == c2.value:\n<span class=\"hljs-number\">39</span>              <strong><span class=\"hljs-keyword\">if</span></strong> self.suit &gt; c2.suit:\n<span class=\"hljs-number\">40</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">41</span>              <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">42</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">43</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">44</span>\n<span class=\"hljs-number\">45</span>\n<span class=\"hljs-number\">46</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__repr__</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">47</span>          v = self.values[self.value] + <span class=\"hljs-string\">\" of \"</span> \\\n<span class=\"hljs-number\">48</span>          + self.suits[self.suit]\n<span class=\"hljs-number\">49</span>          <strong><span class=\"hljs-keyword\">return</span></strong> v</code></pre>\n<p><code>Card</code> 类有两个类变量：<code>suits</code> 和 <code>values</code>。前者是一个字符串列表，表示扑克牌的花色：<code>spades</code>、<code>hearts</code>、<code>diamonds</code> 和 <code>clubs</code>。后者是一个表示扑克牌数字的字符串列表：<code>2～10</code>、<code>Jack</code>、<code>Queen</code>、<code>King</code> 和 <code>Ace</code>。列表 <code>values</code> 的前两个索引处的元素都是 <code>None</code>，以确保列表中的字符串与其所处的索引相匹配，即 <code>values</code> 列表中的字符串 <code>\"2\"</code> 位于索引 <code>2</code>。</p>\n<p><code>Card</code> 对象有两个实例变量：<code>suit</code> 和 <code>value</code>，均为整型数。二者结合在一起，表示 <code>Card</code> 对象代表的是什么牌。例如，创建 <code>Card</code> 对象时传入参数 <code>2</code> 作为 <code>suit</code> 的值，传入参数 <code>1</code> 作为 <code>value</code> 的值，就意味着创建了一张 <code>2 of hearts</code>（红桃二）。</p>\n<p>由于定义了 <code>__lt__</code> 和 <code>__gt__</code> 这两个魔法方法，就可以在表达式中使用大于和小于运算符比较 <code>Card</code> 对象。魔法方法中的代码会判断当前扑克牌是大于还是小于作为参数传入的扑克牌，同时也会判断两张牌的值是否相同。如果加入两张牌的值都是 <code>10</code>，那么就会通过 <code>suit</code> 来比较。<code>suits</code> 列表中的花色是按大小排列的，即索引值越大的花色，越小；索引值越小的花色，越大。示例如下：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j6donnr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  card1 = Card(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">5</span>  card2 = Card(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-keyword\">print</span>(card1 &lt; card2)\n\n&gt;&gt; <span class=\"hljs-keyword\">True</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hc9ktlr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  card1 = Card(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">5</span>  card2 = Card(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-keyword\">print</span>(card1 &gt; card2)\n\n&gt;&gt; <span class=\"hljs-keyword\">False</span>\n</code></pre>\n<p><code>Card</code> 类中定义的最后一个方法是 <code>__repr__</code>，通过 <code>value</code> 和 <code>suit</code> 实例变量查找扑克牌在 <code>values</code> 和 <code>suits</code> 列表中对应的值和花色，并返回查询结果。示例如下：</p>\n<pre><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z57hc75</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  card = Card(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-built_in\">print</span>(card)\n\n&gt;&gt; <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">of</span> diamonds\n</code></pre>\n<h3 id=\"152\">15.2　牌堆</h3>\n<p>接下来，我们定义一个用来表示牌堆（deck of cards）的类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jz8zfz7</span>\n<span class=\"hljs-number\">2</span>  <strong>from</strong> random <strong>import</strong> shuffle\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Deck</span>:</span>\n<span class=\"hljs-number\">6</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-keyword\">self</span>.cards = []\n08          <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">15</span>):\n09              <strong><span class=\"hljs-keyword\">for</span></strong> j <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">4</span>):\n<span class=\"hljs-number\">10</span>                  <span class=\"hljs-keyword\">self</span>.cards.append(Card(i, j))\n<span class=\"hljs-number\">11</span>          shuffle(<span class=\"hljs-keyword\">self</span>.cards)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">rm_card</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">15</span>          <strong><span class=\"hljs-keyword\">if</span></strong> len(<span class=\"hljs-keyword\">self</span>.cards) == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">16</span>              <strong><span class=\"hljs-keyword\">return</span></strong>\n<span class=\"hljs-number\">17</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.cards.pop()</code></pre>\n<p>在初始化 <code>Deck</code> 对象时，<code>__init__</code> 方法中的两个 <code>for</code> 循环将创建牌堆中所有的 52 张牌，并添加到 <code>cards</code> 列表。第一个循环从 <code>2</code> 到 <code>15</code>，因为扑克牌的第一个值是 <code>2</code>，最后一个值是 <code>14</code>（Ace）。内部的 <code>for</code> 循环每循环一次，就会使用外循环的整型数作为扑克牌的值（如 <code>14</code> 表示 Ace），用内循环的整型数作为扑克牌的花色（如 <code>2</code> 表示红桃），以此创建一张扑克牌，总共创建 52 张，每种花色和数值的组合各创建一张。创建完所有的扑克牌之后，通过 <code>random</code> 模块中的 <code>shuffle</code> 方法随机排列 <code>cards</code> 列表中的元素，模拟洗牌的动作。</p>\n<p>牌堆还有一个叫 <code>rm_card</code> 的方法，从牌堆中返回一张扑克牌对象并将其从 <code>cards</code> 列表内移除，如果牌堆里没有牌时则返回 <code>None</code>。我们使用 <code>Deck</code> 类创建一副牌，并打印其中所有的牌：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsv5n6p</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  deck = Deck()\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">for</span></strong> card <strong><span class=\"hljs-keyword\">in</span></strong> deck.<span class=\"hljs-symbol\">cards:</span>\n<span class=\"hljs-number\">6</span>      print(card)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span> of spades\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">8</span> of hearts\n...</code></pre>\n<h3 id=\"153\">15.3　玩家</h3>\n<p>我们还需要一个类来表示游戏中的玩家，并记录他们手中的牌，以及赢了多少局。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gwyrt2s</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Player</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-keyword\">self</span>.wins = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-keyword\">self</span>.card = None\n<span class=\"hljs-number\">8</span>          <span class=\"hljs-keyword\">self</span>.name = name</code></pre>\n<p><code>Player</code> 类有 3 个实例变量：<code>wins</code> 用来记录玩家赢的局数，<code>card</code> 用来代表玩家当前手中的牌，<code>name</code> 用来记录玩家的姓名。</p>\n<h3 id=\"154\">15.4　游戏</h3>\n<p>最后，还需要一个类来表示游戏本身：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/huwq8mw</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Game</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          name1 = input(<span class=\"hljs-string\">\"p1 name \"</span>)\n<span class=\"hljs-number\">07</span>          name2 = input(<span class=\"hljs-string\">\"p2 name \"</span>)\n08          <span class=\"hljs-keyword\">self</span>.deck = Deck()\n09          <span class=\"hljs-keyword\">self</span>.p1 = Player(name1)\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.p2 = Player(name2)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">wins</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, winner)</span></span>:\n<span class=\"hljs-number\">14</span>          w = <span class=\"hljs-string\">\"{} wins this round\"</span>\n<span class=\"hljs-number\">15</span>          w = w.format(winner)\n<span class=\"hljs-number\">16</span>          <strong>print</strong>(w)\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">draw</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1n, p1c, p2n, p2c)</span></span>:\n<span class=\"hljs-number\">20</span>          d = <span class=\"hljs-string\">\"{} drew {} {} drew {}\"</span>\n<span class=\"hljs-number\">21</span>          d = d.format(p1n, p1c, p2n, p2c)\n<span class=\"hljs-number\">22</span>          <strong>print</strong>(d)\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">25</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">play_game</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">26</span>          cards = <span class=\"hljs-keyword\">self</span>.deck.cards\n<span class=\"hljs-number\">27</span>          <strong>print</strong>(<span class=\"hljs-string\">\"beginning War!\"</span>)\n<span class=\"hljs-number\">28</span>          <strong><span class=\"hljs-keyword\">while</span></strong> len(cards) &gt;= <span class=\"hljs-number\">2</span>:\n<span class=\"hljs-number\">29</span>              m = <span class=\"hljs-string\">\"q to quit. Any \"</span> + <span class=\"hljs-string\">\"key to play:\"</span>\n<span class=\"hljs-number\">30</span>              response = input(m)\n<span class=\"hljs-number\">31</span>              <strong><span class=\"hljs-keyword\">if</span></strong> response = <span class=\"hljs-string\">\"q\"</span>:\n<span class=\"hljs-number\">32</span>                  <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">33</span>              p1c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">34</span>              p2c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">35</span>              p1n = <span class=\"hljs-keyword\">self</span>.p1.name\n<span class=\"hljs-number\">36</span>              p2n = <span class=\"hljs-keyword\">self</span>.p2.name\n<span class=\"hljs-number\">37</span>              <span class=\"hljs-keyword\">self</span>.draw(p1n, p1c, p2n, p2c)\n<span class=\"hljs-number\">38</span>              <strong><span class=\"hljs-keyword\">if</span></strong> p1c &gt; <span class=\"hljs-symbol\">p2c:</span>\n<span class=\"hljs-number\">39</span>                  <span class=\"hljs-keyword\">self</span>.p1.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">40</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p1.name)\n<span class=\"hljs-number\">41</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">42</span>                  <span class=\"hljs-keyword\">self</span>.p2.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">43</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p2.name)\n<span class=\"hljs-number\">44</span>\n<span class=\"hljs-number\">45</span>\n<span class=\"hljs-number\">46</span>          win = <span class=\"hljs-keyword\">self</span>.winner(<span class=\"hljs-keyword\">self</span>.p1, <span class=\"hljs-keyword\">self</span>.p2)\n<span class=\"hljs-number\">47</span>\n<span class=\"hljs-number\">48</span>          <strong>print</strong>(<span class=\"hljs-string\">\"War is over. {} wins\"</span>.format(win))\n<span class=\"hljs-number\">49</span>\n<span class=\"hljs-number\">50</span>\n<span class=\"hljs-number\">51</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">winner</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1, p2)</span></span>:\n<span class=\"hljs-number\">52</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1.wins &gt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">53</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p1.name\n<span class=\"hljs-number\">54</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1 wins &lt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">55</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p2.name\n<span class=\"hljs-number\">56</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-string\">\"It was a tie!\"</span></code></pre>\n<p>创建 <code>Game</code> 对象时，Python 调用其 <code>__init__</code> 方法，其中的 <code>input</code> 函数将收集参与游戏的两名玩家的姓名，并保存在变量 <code>name1</code> 和 <code>name2</code> 中。接下来，创建一个 <code>Deck</code> 对象，保存在实例变量 <code>deck</code> 中，并使用 <code>name1</code> 和 <code>name2</code> 创建两个 <code>Player</code> 对象。</p>\n<p><code>Game</code> 类中的 <code>play_game</code> 方法会开启游戏，其中有一个 <code>while</code> 循环，只要牌堆中剩下两张或两张以上扑克牌，并且 <code>response</code> 变量的值并等于 <code>q</code>，游戏就会一直运行。每次循环，都将用户的输入赋值给 <code>response</code> 变量。游戏只有在有玩家输入 <code>\"q\"</code>，或者牌堆里少于两张牌时才会结束。</p>\n<p>每次循环将抽取两张扑克牌，<code>play_game</code> 方法将第一张牌给 <code>p1</code>，第二张牌给 <code>p2</code>。然后打印每个玩家的名字及抽到的扑克牌，同时比较哪张牌更大，手中牌更大的玩家赢得本轮，其对应 <code>wins</code> 实例变量的值递增 1。</p>\n<p><code>Game</code> 类还有一个叫 <code>winner</code> 的方法，接受两个 <code>Player</code> 对象，将比较各自赢得的局数，并返回获胜次数最多的玩家。</p>\n<p>当 <code>Deck</code> 对象中没有多余的扑克牌后，<code>play_game</code> 方法将打印一段话表示战争已经结束，然后调用 <code>winner</code> 方法（传入 <code>p1</code> 和 <code>p2</code> 作为参数），并打印返回的结果——赢得游戏胜利的玩家的姓名。</p>\n<h3 id=\"155\">15.5　战争</h3>\n<p>以下是完整代码：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">001</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ho7364a</span>\n<span class=\"hljs-number\">002</span>\n<span class=\"hljs-number\">003</span>\n<span class=\"hljs-number\">004</span>  <strong>from</strong> random <strong>import</strong> shuffle\n<span class=\"hljs-number\">005</span>\n<span class=\"hljs-number\">006</span>\n<span class=\"hljs-number\">007</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Card</span>:</span>\n<span class=\"hljs-number\">00</span>8      suits = [<span class=\"hljs-string\">\"spades\"</span>,\n<span class=\"hljs-number\">00</span>9               <span class=\"hljs-string\">\"hearts\"</span>,\n<span class=\"hljs-number\">010</span>               <span class=\"hljs-string\">\"diamonds\"</span>,\n<span class=\"hljs-number\">011</span>               <span class=\"hljs-string\">\"clubs\"</span>]\n<span class=\"hljs-number\">012</span>\n<span class=\"hljs-number\">013</span>\n<span class=\"hljs-number\">014</span>      values = [None, None, <span class=\"hljs-string\">\"2\"</span>, <span class=\"hljs-string\">\"3\"</span>,\n<span class=\"hljs-number\">015</span>                <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"5\"</span>, <span class=\"hljs-string\">\"6\"</span>, <span class=\"hljs-string\">\"7\"</span>,\n<span class=\"hljs-number\">016</span>                <span class=\"hljs-string\">\"8\"</span>, <span class=\"hljs-string\">\"9\"</span>, <span class=\"hljs-string\">\"10\"</span>,\n<span class=\"hljs-number\">017</span>                <span class=\"hljs-string\">\"Jack\"</span>, <span class=\"hljs-string\">\"Queen\"</span>,\n<span class=\"hljs-number\">01</span>8                <span class=\"hljs-string\">\"King\"</span>, <span class=\"hljs-string\">\"Ace\"</span> ]\n<span class=\"hljs-number\">01</span>9\n<span class=\"hljs-number\">020</span>\n<span class=\"hljs-number\">021</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, v, s)</span></span>:\n<span class=\"hljs-number\">022</span>          <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"suit 和 value 的值都为整型数\"</span><span class=\"hljs-string\">\"\"</span>\n<span class=\"hljs-number\">023</span>          <span class=\"hljs-keyword\">self</span>.value = v\n<span class=\"hljs-number\">024</span>          <span class=\"hljs-keyword\">self</span>.suit = s\n<span class=\"hljs-number\">025</span>\n<span class=\"hljs-number\">026</span>\n<span class=\"hljs-number\">027</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__lt__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, c2)</span></span>:\n<span class=\"hljs-number\">02</span>8          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value &lt; c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">02</span>9              <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">030</span>          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value == c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">031</span>              <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.suit &lt; c2.<span class=\"hljs-symbol\">suit:</span>\n<span class=\"hljs-number\">032</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">033</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">034</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">035</span>          <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">036</span>\n<span class=\"hljs-number\">037</span>\n<span class=\"hljs-number\">03</span>8      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__gt__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, c2)</span></span>:\n<span class=\"hljs-number\">03</span>9          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value &gt; c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">040</span>              <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">041</span>          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value == c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">042</span>              <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.suit &gt; c2.<span class=\"hljs-symbol\">suit:</span>\n<span class=\"hljs-number\">043</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">044</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">045</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">046</span>          <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">047</span>\n<span class=\"hljs-number\">04</span>8\n<span class=\"hljs-number\">04</span>9      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__repr__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">050</span>          v = <span class=\"hljs-keyword\">self</span>.values[<span class=\"hljs-keyword\">self</span>.value] + <span class=\"hljs-string\">\" of \"</span> \\\n<span class=\"hljs-number\">051</span>          + <span class=\"hljs-keyword\">self</span>.suits[<span class=\"hljs-keyword\">self</span>.suit]\n<span class=\"hljs-number\">052</span>          <strong><span class=\"hljs-keyword\">return</span></strong> v\n<span class=\"hljs-number\">053</span>\n<span class=\"hljs-number\">054</span>\n<span class=\"hljs-number\">055</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Deck</span>:</span>\n<span class=\"hljs-number\">056</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">057</span>          <span class=\"hljs-keyword\">self</span>.cards = []\n<span class=\"hljs-number\">05</span>8          <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">15</span>):\n<span class=\"hljs-number\">05</span>9              <strong><span class=\"hljs-keyword\">for</span></strong> j <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">4</span>):\n<span class=\"hljs-number\">060</span>                  <span class=\"hljs-keyword\">self</span>.cards.append(Card(i, j))\n<span class=\"hljs-number\">061</span>          shuffle(<span class=\"hljs-keyword\">self</span>.cards)\n<span class=\"hljs-number\">062</span>\n<span class=\"hljs-number\">063</span>\n<span class=\"hljs-number\">064</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">rm_card</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">065</span>          <strong><span class=\"hljs-keyword\">if</span></strong> len(<span class=\"hljs-keyword\">self</span>.cards) == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">066</span>              <strong><span class=\"hljs-keyword\">return</span></strong>\n<span class=\"hljs-number\">067</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.cards.pop()\n<span class=\"hljs-number\">06</span>8\n<span class=\"hljs-number\">06</span>9\n<span class=\"hljs-number\">070</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Player</span>:</span>\n<span class=\"hljs-number\">071</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">072</span>          <span class=\"hljs-keyword\">self</span>.wins = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">073</span>          <span class=\"hljs-keyword\">self</span>.card = None\n<span class=\"hljs-number\">074</span>          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">075</span>\n<span class=\"hljs-number\">076</span>\n<span class=\"hljs-number\">077</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Game</span>:</span>\n<span class=\"hljs-number\">07</span>8      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">07</span>9          name1 = input(<span class=\"hljs-string\">\"p1 name \"</span>)\n08<span class=\"hljs-number\">0</span>          name2 = input(<span class=\"hljs-string\">\"p2 name \"</span>)\n081          <span class=\"hljs-keyword\">self</span>.deck = Deck()\n082          <span class=\"hljs-keyword\">self</span>.p1 = Player(name1)\n083          <span class=\"hljs-keyword\">self</span>.p2 = Player(name2)\n084\n085\n086      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">wins</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, winner)</span></span>:\n087          w = <span class=\"hljs-string\">\"{} wins this round\"</span>\n088          w = w.format(winner)\n089          <strong>print</strong>(w)\n09<span class=\"hljs-number\">0</span>\n091\n092      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">draw</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1n, p1c, p2n, p2c)</span></span>:\n093          d = <span class=\"hljs-string\">\"{} drew {} {} drew {}\"</span>\n094          d = d.format(p1n, p1c, p2n, p2c)\n095          <strong>print</strong>(d)\n096\n097\n098      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">play_game</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n099          cards = <span class=\"hljs-keyword\">self</span>.deck.cards\n<span class=\"hljs-number\">100</span>          <strong>print</strong>(<span class=\"hljs-string\">\"beginning War!\"</span>)\n<span class=\"hljs-number\">101</span>          <strong><span class=\"hljs-keyword\">while</span></strong> len(cards) &gt;= <span class=\"hljs-number\">2</span>:\n<span class=\"hljs-number\">102</span>              m = <span class=\"hljs-string\">\"q to quit. Any \"</span> + <span class=\"hljs-string\">\"key to play:\"</span>\n<span class=\"hljs-number\">103</span>              response = input(m)\n<span class=\"hljs-number\">104</span>              <strong><span class=\"hljs-keyword\">if</span></strong> response == <span class=\"hljs-string\">'q'</span>:\n<span class=\"hljs-number\">105</span>                  <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">106</span>              p1c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">107</span>              p2c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">108</span>              p1n = <span class=\"hljs-keyword\">self</span>.p1.name\n<span class=\"hljs-number\">109</span>              p2n = <span class=\"hljs-keyword\">self</span>.p2.name\n<span class=\"hljs-number\">110</span>              <span class=\"hljs-keyword\">self</span>.draw(p1n, p1c, p2n, p2c)\n<span class=\"hljs-number\">111</span>              <strong><span class=\"hljs-keyword\">if</span></strong> p1c &gt; <span class=\"hljs-symbol\">p2c:</span>\n<span class=\"hljs-number\">112</span>                  <span class=\"hljs-keyword\">self</span>.p1.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">113</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p1.name)\n<span class=\"hljs-number\">114</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">115</span>                  <span class=\"hljs-keyword\">self</span>.p2.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">116</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p2.name)\n<span class=\"hljs-number\">117</span>\n<span class=\"hljs-number\">118</span>\n<span class=\"hljs-number\">119</span>          win = <span class=\"hljs-keyword\">self</span>.winner(<span class=\"hljs-keyword\">self</span>.p1, <span class=\"hljs-keyword\">self</span>.p2)\n<span class=\"hljs-number\">120</span>\n<span class=\"hljs-number\">121</span>          print(<span class=\"hljs-string\">\"War is over. {} wins\"</span>.format(win))\n<span class=\"hljs-number\">122</span>\n<span class=\"hljs-number\">123</span>\n<span class=\"hljs-number\">124</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">winner</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1, p2)</span></span>:\n<span class=\"hljs-number\">125</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1.wins &gt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">126</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p1.name\n<span class=\"hljs-number\">127</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1 wins &lt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">128</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p2.name\n<span class=\"hljs-number\">129</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-string\">\"It was a tie!\"</span>\n<span class=\"hljs-number\">130</span>\n<span class=\"hljs-number\">131</span>\n<span class=\"hljs-number\">132</span>  game = Game()\n<span class=\"hljs-number\">133</span>  game.play_game()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">\"p1 name\"</span>\n…</code></pre></div></article>\n</body>\n</html>","slug":"Python无师自通/15_opp_testing","published":1,"date":"2019-06-13T05:05:28.992Z","updated":"2019-06-13T05:05:28.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu79prx0000b7h7bbbexurp","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>综合练习</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#151\">15.1　卡牌</a></li>\n<li><a href=\"#152\">15.2　牌堆</a></li>\n<li><a href=\"#153\">15.3　玩家</a></li>\n<li><a href=\"#154\">15.4　游戏</a></li>\n<li><a href=\"#155\">15.5　战争</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“代码跑起来我们再聊。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——沃德 · 坎宁汉（Ward Cunningham）</span></p>\n</blockquote>\n<p>本章将学习开发著名的棋牌游戏——战争。在该游戏中，每名玩家从牌堆中抽取一张牌，牌面点数最高的玩家获胜。我们将分别定义表示扑克牌、牌堆、玩家和游戏的类，来逐步开发“战争”。</p>\n<h3 id=\"151\">15.1　卡牌</h3>\n<p>下面是表示扑克牌的类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jj22qv4</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Card</span>:</span>\n<span class=\"hljs-number\">05</span>      suits = [<span class=\"hljs-string\">\"spades\"</span>,\n<span class=\"hljs-number\">06</span>               <span class=\"hljs-string\">\"hearts\"</span>,\n<span class=\"hljs-number\">07</span>               <span class=\"hljs-string\">\"diamonds\"</span>,\n<span class=\"hljs-number\">08</span>               <span class=\"hljs-string\">\"clubs\"</span>]\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>      values = [<span class=\"hljs-keyword\">None</span>, <span class=\"hljs-keyword\">None</span>, <span class=\"hljs-string\">\"2\"</span>, <span class=\"hljs-string\">\"3\"</span>,\n<span class=\"hljs-number\">12</span>                <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"5\"</span>, <span class=\"hljs-string\">\"6\"</span>, <span class=\"hljs-string\">\"7\"</span>,\n<span class=\"hljs-number\">13</span>                <span class=\"hljs-string\">\"8\"</span>, <span class=\"hljs-string\">\"9\"</span>, <span class=\"hljs-string\">\"10\"</span>,\n<span class=\"hljs-number\">14</span>                <span class=\"hljs-string\">\"Jack\"</span>, <span class=\"hljs-string\">\"Queen\"</span>,\n<span class=\"hljs-number\">15</span>                <span class=\"hljs-string\">\"King\"</span>, <span class=\"hljs-string\">\"Ace\"</span> ]\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, v, s)</span>:</span>\n<span class=\"hljs-number\">19</span>          <span class=\"hljs-string\">\"\"\"suit 和 value 的值都为整型数\"\"\"</span>\n<span class=\"hljs-number\">20</span>          self.value = v\n<span class=\"hljs-number\">21</span>          self.suit = s\n<span class=\"hljs-number\">22</span>\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__lt__</span><span class=\"hljs-params\">(self, c2)</span>:</span>\n<span class=\"hljs-number\">25</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value &lt; c2.value:\n<span class=\"hljs-number\">26</span>              <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">27</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value == c2.value:\n<span class=\"hljs-number\">28</span>              <strong><span class=\"hljs-keyword\">if</span></strong> self.suit &lt; c2.suit:\n<span class=\"hljs-number\">29</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">30</span>              <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">31</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">32</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">33</span>\n<span class=\"hljs-number\">34</span>\n<span class=\"hljs-number\">35</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__gt__</span><span class=\"hljs-params\">(self, c2)</span>:</span>\n<span class=\"hljs-number\">36</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value &gt; c2.value:\n<span class=\"hljs-number\">37</span>              <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">38</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value == c2.value:\n<span class=\"hljs-number\">39</span>              <strong><span class=\"hljs-keyword\">if</span></strong> self.suit &gt; c2.suit:\n<span class=\"hljs-number\">40</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">41</span>              <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">42</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">43</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">44</span>\n<span class=\"hljs-number\">45</span>\n<span class=\"hljs-number\">46</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__repr__</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">47</span>          v = self.values[self.value] + <span class=\"hljs-string\">\" of \"</span> \\\n<span class=\"hljs-number\">48</span>          + self.suits[self.suit]\n<span class=\"hljs-number\">49</span>          <strong><span class=\"hljs-keyword\">return</span></strong> v</code></pre>\n<p><code>Card</code> 类有两个类变量：<code>suits</code> 和 <code>values</code>。前者是一个字符串列表，表示扑克牌的花色：<code>spades</code>、<code>hearts</code>、<code>diamonds</code> 和 <code>clubs</code>。后者是一个表示扑克牌数字的字符串列表：<code>2～10</code>、<code>Jack</code>、<code>Queen</code>、<code>King</code> 和 <code>Ace</code>。列表 <code>values</code> 的前两个索引处的元素都是 <code>None</code>，以确保列表中的字符串与其所处的索引相匹配，即 <code>values</code> 列表中的字符串 <code>\"2\"</code> 位于索引 <code>2</code>。</p>\n<p><code>Card</code> 对象有两个实例变量：<code>suit</code> 和 <code>value</code>，均为整型数。二者结合在一起，表示 <code>Card</code> 对象代表的是什么牌。例如，创建 <code>Card</code> 对象时传入参数 <code>2</code> 作为 <code>suit</code> 的值，传入参数 <code>1</code> 作为 <code>value</code> 的值，就意味着创建了一张 <code>2 of hearts</code>（红桃二）。</p>\n<p>由于定义了 <code>__lt__</code> 和 <code>__gt__</code> 这两个魔法方法，就可以在表达式中使用大于和小于运算符比较 <code>Card</code> 对象。魔法方法中的代码会判断当前扑克牌是大于还是小于作为参数传入的扑克牌，同时也会判断两张牌的值是否相同。如果加入两张牌的值都是 <code>10</code>，那么就会通过 <code>suit</code> 来比较。<code>suits</code> 列表中的花色是按大小排列的，即索引值越大的花色，越小；索引值越小的花色，越大。示例如下：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j6donnr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  card1 = Card(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">5</span>  card2 = Card(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-keyword\">print</span>(card1 &lt; card2)\n\n&gt;&gt; <span class=\"hljs-keyword\">True</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hc9ktlr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  card1 = Card(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">5</span>  card2 = Card(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-keyword\">print</span>(card1 &gt; card2)\n\n&gt;&gt; <span class=\"hljs-keyword\">False</span>\n</code></pre>\n<p><code>Card</code> 类中定义的最后一个方法是 <code>__repr__</code>，通过 <code>value</code> 和 <code>suit</code> 实例变量查找扑克牌在 <code>values</code> 和 <code>suits</code> 列表中对应的值和花色，并返回查询结果。示例如下：</p>\n<pre><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z57hc75</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  card = Card(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-built_in\">print</span>(card)\n\n&gt;&gt; <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">of</span> diamonds\n</code></pre>\n<h3 id=\"152\">15.2　牌堆</h3>\n<p>接下来，我们定义一个用来表示牌堆（deck of cards）的类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jz8zfz7</span>\n<span class=\"hljs-number\">2</span>  <strong>from</strong> random <strong>import</strong> shuffle\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Deck</span>:</span>\n<span class=\"hljs-number\">6</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-keyword\">self</span>.cards = []\n08          <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">15</span>):\n09              <strong><span class=\"hljs-keyword\">for</span></strong> j <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">4</span>):\n<span class=\"hljs-number\">10</span>                  <span class=\"hljs-keyword\">self</span>.cards.append(Card(i, j))\n<span class=\"hljs-number\">11</span>          shuffle(<span class=\"hljs-keyword\">self</span>.cards)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">rm_card</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">15</span>          <strong><span class=\"hljs-keyword\">if</span></strong> len(<span class=\"hljs-keyword\">self</span>.cards) == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">16</span>              <strong><span class=\"hljs-keyword\">return</span></strong>\n<span class=\"hljs-number\">17</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.cards.pop()</code></pre>\n<p>在初始化 <code>Deck</code> 对象时，<code>__init__</code> 方法中的两个 <code>for</code> 循环将创建牌堆中所有的 52 张牌，并添加到 <code>cards</code> 列表。第一个循环从 <code>2</code> 到 <code>15</code>，因为扑克牌的第一个值是 <code>2</code>，最后一个值是 <code>14</code>（Ace）。内部的 <code>for</code> 循环每循环一次，就会使用外循环的整型数作为扑克牌的值（如 <code>14</code> 表示 Ace），用内循环的整型数作为扑克牌的花色（如 <code>2</code> 表示红桃），以此创建一张扑克牌，总共创建 52 张，每种花色和数值的组合各创建一张。创建完所有的扑克牌之后，通过 <code>random</code> 模块中的 <code>shuffle</code> 方法随机排列 <code>cards</code> 列表中的元素，模拟洗牌的动作。</p>\n<p>牌堆还有一个叫 <code>rm_card</code> 的方法，从牌堆中返回一张扑克牌对象并将其从 <code>cards</code> 列表内移除，如果牌堆里没有牌时则返回 <code>None</code>。我们使用 <code>Deck</code> 类创建一副牌，并打印其中所有的牌：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsv5n6p</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  deck = Deck()\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">for</span></strong> card <strong><span class=\"hljs-keyword\">in</span></strong> deck.<span class=\"hljs-symbol\">cards:</span>\n<span class=\"hljs-number\">6</span>      print(card)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span> of spades\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">8</span> of hearts\n...</code></pre>\n<h3 id=\"153\">15.3　玩家</h3>\n<p>我们还需要一个类来表示游戏中的玩家，并记录他们手中的牌，以及赢了多少局。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gwyrt2s</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Player</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-keyword\">self</span>.wins = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-keyword\">self</span>.card = None\n<span class=\"hljs-number\">8</span>          <span class=\"hljs-keyword\">self</span>.name = name</code></pre>\n<p><code>Player</code> 类有 3 个实例变量：<code>wins</code> 用来记录玩家赢的局数，<code>card</code> 用来代表玩家当前手中的牌，<code>name</code> 用来记录玩家的姓名。</p>\n<h3 id=\"154\">15.4　游戏</h3>\n<p>最后，还需要一个类来表示游戏本身：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/huwq8mw</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Game</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          name1 = input(<span class=\"hljs-string\">\"p1 name \"</span>)\n<span class=\"hljs-number\">07</span>          name2 = input(<span class=\"hljs-string\">\"p2 name \"</span>)\n08          <span class=\"hljs-keyword\">self</span>.deck = Deck()\n09          <span class=\"hljs-keyword\">self</span>.p1 = Player(name1)\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.p2 = Player(name2)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">wins</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, winner)</span></span>:\n<span class=\"hljs-number\">14</span>          w = <span class=\"hljs-string\">\"{} wins this round\"</span>\n<span class=\"hljs-number\">15</span>          w = w.format(winner)\n<span class=\"hljs-number\">16</span>          <strong>print</strong>(w)\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">draw</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1n, p1c, p2n, p2c)</span></span>:\n<span class=\"hljs-number\">20</span>          d = <span class=\"hljs-string\">\"{} drew {} {} drew {}\"</span>\n<span class=\"hljs-number\">21</span>          d = d.format(p1n, p1c, p2n, p2c)\n<span class=\"hljs-number\">22</span>          <strong>print</strong>(d)\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">25</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">play_game</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">26</span>          cards = <span class=\"hljs-keyword\">self</span>.deck.cards\n<span class=\"hljs-number\">27</span>          <strong>print</strong>(<span class=\"hljs-string\">\"beginning War!\"</span>)\n<span class=\"hljs-number\">28</span>          <strong><span class=\"hljs-keyword\">while</span></strong> len(cards) &gt;= <span class=\"hljs-number\">2</span>:\n<span class=\"hljs-number\">29</span>              m = <span class=\"hljs-string\">\"q to quit. Any \"</span> + <span class=\"hljs-string\">\"key to play:\"</span>\n<span class=\"hljs-number\">30</span>              response = input(m)\n<span class=\"hljs-number\">31</span>              <strong><span class=\"hljs-keyword\">if</span></strong> response = <span class=\"hljs-string\">\"q\"</span>:\n<span class=\"hljs-number\">32</span>                  <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">33</span>              p1c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">34</span>              p2c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">35</span>              p1n = <span class=\"hljs-keyword\">self</span>.p1.name\n<span class=\"hljs-number\">36</span>              p2n = <span class=\"hljs-keyword\">self</span>.p2.name\n<span class=\"hljs-number\">37</span>              <span class=\"hljs-keyword\">self</span>.draw(p1n, p1c, p2n, p2c)\n<span class=\"hljs-number\">38</span>              <strong><span class=\"hljs-keyword\">if</span></strong> p1c &gt; <span class=\"hljs-symbol\">p2c:</span>\n<span class=\"hljs-number\">39</span>                  <span class=\"hljs-keyword\">self</span>.p1.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">40</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p1.name)\n<span class=\"hljs-number\">41</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">42</span>                  <span class=\"hljs-keyword\">self</span>.p2.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">43</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p2.name)\n<span class=\"hljs-number\">44</span>\n<span class=\"hljs-number\">45</span>\n<span class=\"hljs-number\">46</span>          win = <span class=\"hljs-keyword\">self</span>.winner(<span class=\"hljs-keyword\">self</span>.p1, <span class=\"hljs-keyword\">self</span>.p2)\n<span class=\"hljs-number\">47</span>\n<span class=\"hljs-number\">48</span>          <strong>print</strong>(<span class=\"hljs-string\">\"War is over. {} wins\"</span>.format(win))\n<span class=\"hljs-number\">49</span>\n<span class=\"hljs-number\">50</span>\n<span class=\"hljs-number\">51</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">winner</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1, p2)</span></span>:\n<span class=\"hljs-number\">52</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1.wins &gt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">53</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p1.name\n<span class=\"hljs-number\">54</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1 wins &lt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">55</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p2.name\n<span class=\"hljs-number\">56</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-string\">\"It was a tie!\"</span></code></pre>\n<p>创建 <code>Game</code> 对象时，Python 调用其 <code>__init__</code> 方法，其中的 <code>input</code> 函数将收集参与游戏的两名玩家的姓名，并保存在变量 <code>name1</code> 和 <code>name2</code> 中。接下来，创建一个 <code>Deck</code> 对象，保存在实例变量 <code>deck</code> 中，并使用 <code>name1</code> 和 <code>name2</code> 创建两个 <code>Player</code> 对象。</p>\n<p><code>Game</code> 类中的 <code>play_game</code> 方法会开启游戏，其中有一个 <code>while</code> 循环，只要牌堆中剩下两张或两张以上扑克牌，并且 <code>response</code> 变量的值并等于 <code>q</code>，游戏就会一直运行。每次循环，都将用户的输入赋值给 <code>response</code> 变量。游戏只有在有玩家输入 <code>\"q\"</code>，或者牌堆里少于两张牌时才会结束。</p>\n<p>每次循环将抽取两张扑克牌，<code>play_game</code> 方法将第一张牌给 <code>p1</code>，第二张牌给 <code>p2</code>。然后打印每个玩家的名字及抽到的扑克牌，同时比较哪张牌更大，手中牌更大的玩家赢得本轮，其对应 <code>wins</code> 实例变量的值递增 1。</p>\n<p><code>Game</code> 类还有一个叫 <code>winner</code> 的方法，接受两个 <code>Player</code> 对象，将比较各自赢得的局数，并返回获胜次数最多的玩家。</p>\n<p>当 <code>Deck</code> 对象中没有多余的扑克牌后，<code>play_game</code> 方法将打印一段话表示战争已经结束，然后调用 <code>winner</code> 方法（传入 <code>p1</code> 和 <code>p2</code> 作为参数），并打印返回的结果——赢得游戏胜利的玩家的姓名。</p>\n<h3 id=\"155\">15.5　战争</h3>\n<p>以下是完整代码：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">001</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ho7364a</span>\n<span class=\"hljs-number\">002</span>\n<span class=\"hljs-number\">003</span>\n<span class=\"hljs-number\">004</span>  <strong>from</strong> random <strong>import</strong> shuffle\n<span class=\"hljs-number\">005</span>\n<span class=\"hljs-number\">006</span>\n<span class=\"hljs-number\">007</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Card</span>:</span>\n<span class=\"hljs-number\">00</span>8      suits = [<span class=\"hljs-string\">\"spades\"</span>,\n<span class=\"hljs-number\">00</span>9               <span class=\"hljs-string\">\"hearts\"</span>,\n<span class=\"hljs-number\">010</span>               <span class=\"hljs-string\">\"diamonds\"</span>,\n<span class=\"hljs-number\">011</span>               <span class=\"hljs-string\">\"clubs\"</span>]\n<span class=\"hljs-number\">012</span>\n<span class=\"hljs-number\">013</span>\n<span class=\"hljs-number\">014</span>      values = [None, None, <span class=\"hljs-string\">\"2\"</span>, <span class=\"hljs-string\">\"3\"</span>,\n<span class=\"hljs-number\">015</span>                <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"5\"</span>, <span class=\"hljs-string\">\"6\"</span>, <span class=\"hljs-string\">\"7\"</span>,\n<span class=\"hljs-number\">016</span>                <span class=\"hljs-string\">\"8\"</span>, <span class=\"hljs-string\">\"9\"</span>, <span class=\"hljs-string\">\"10\"</span>,\n<span class=\"hljs-number\">017</span>                <span class=\"hljs-string\">\"Jack\"</span>, <span class=\"hljs-string\">\"Queen\"</span>,\n<span class=\"hljs-number\">01</span>8                <span class=\"hljs-string\">\"King\"</span>, <span class=\"hljs-string\">\"Ace\"</span> ]\n<span class=\"hljs-number\">01</span>9\n<span class=\"hljs-number\">020</span>\n<span class=\"hljs-number\">021</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, v, s)</span></span>:\n<span class=\"hljs-number\">022</span>          <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"suit 和 value 的值都为整型数\"</span><span class=\"hljs-string\">\"\"</span>\n<span class=\"hljs-number\">023</span>          <span class=\"hljs-keyword\">self</span>.value = v\n<span class=\"hljs-number\">024</span>          <span class=\"hljs-keyword\">self</span>.suit = s\n<span class=\"hljs-number\">025</span>\n<span class=\"hljs-number\">026</span>\n<span class=\"hljs-number\">027</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__lt__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, c2)</span></span>:\n<span class=\"hljs-number\">02</span>8          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value &lt; c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">02</span>9              <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">030</span>          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value == c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">031</span>              <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.suit &lt; c2.<span class=\"hljs-symbol\">suit:</span>\n<span class=\"hljs-number\">032</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">033</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">034</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">035</span>          <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">036</span>\n<span class=\"hljs-number\">037</span>\n<span class=\"hljs-number\">03</span>8      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__gt__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, c2)</span></span>:\n<span class=\"hljs-number\">03</span>9          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value &gt; c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">040</span>              <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">041</span>          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value == c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">042</span>              <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.suit &gt; c2.<span class=\"hljs-symbol\">suit:</span>\n<span class=\"hljs-number\">043</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">044</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">045</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">046</span>          <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">047</span>\n<span class=\"hljs-number\">04</span>8\n<span class=\"hljs-number\">04</span>9      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__repr__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">050</span>          v = <span class=\"hljs-keyword\">self</span>.values[<span class=\"hljs-keyword\">self</span>.value] + <span class=\"hljs-string\">\" of \"</span> \\\n<span class=\"hljs-number\">051</span>          + <span class=\"hljs-keyword\">self</span>.suits[<span class=\"hljs-keyword\">self</span>.suit]\n<span class=\"hljs-number\">052</span>          <strong><span class=\"hljs-keyword\">return</span></strong> v\n<span class=\"hljs-number\">053</span>\n<span class=\"hljs-number\">054</span>\n<span class=\"hljs-number\">055</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Deck</span>:</span>\n<span class=\"hljs-number\">056</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">057</span>          <span class=\"hljs-keyword\">self</span>.cards = []\n<span class=\"hljs-number\">05</span>8          <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">15</span>):\n<span class=\"hljs-number\">05</span>9              <strong><span class=\"hljs-keyword\">for</span></strong> j <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">4</span>):\n<span class=\"hljs-number\">060</span>                  <span class=\"hljs-keyword\">self</span>.cards.append(Card(i, j))\n<span class=\"hljs-number\">061</span>          shuffle(<span class=\"hljs-keyword\">self</span>.cards)\n<span class=\"hljs-number\">062</span>\n<span class=\"hljs-number\">063</span>\n<span class=\"hljs-number\">064</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">rm_card</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">065</span>          <strong><span class=\"hljs-keyword\">if</span></strong> len(<span class=\"hljs-keyword\">self</span>.cards) == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">066</span>              <strong><span class=\"hljs-keyword\">return</span></strong>\n<span class=\"hljs-number\">067</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.cards.pop()\n<span class=\"hljs-number\">06</span>8\n<span class=\"hljs-number\">06</span>9\n<span class=\"hljs-number\">070</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Player</span>:</span>\n<span class=\"hljs-number\">071</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">072</span>          <span class=\"hljs-keyword\">self</span>.wins = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">073</span>          <span class=\"hljs-keyword\">self</span>.card = None\n<span class=\"hljs-number\">074</span>          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">075</span>\n<span class=\"hljs-number\">076</span>\n<span class=\"hljs-number\">077</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Game</span>:</span>\n<span class=\"hljs-number\">07</span>8      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">07</span>9          name1 = input(<span class=\"hljs-string\">\"p1 name \"</span>)\n08<span class=\"hljs-number\">0</span>          name2 = input(<span class=\"hljs-string\">\"p2 name \"</span>)\n081          <span class=\"hljs-keyword\">self</span>.deck = Deck()\n082          <span class=\"hljs-keyword\">self</span>.p1 = Player(name1)\n083          <span class=\"hljs-keyword\">self</span>.p2 = Player(name2)\n084\n085\n086      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">wins</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, winner)</span></span>:\n087          w = <span class=\"hljs-string\">\"{} wins this round\"</span>\n088          w = w.format(winner)\n089          <strong>print</strong>(w)\n09<span class=\"hljs-number\">0</span>\n091\n092      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">draw</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1n, p1c, p2n, p2c)</span></span>:\n093          d = <span class=\"hljs-string\">\"{} drew {} {} drew {}\"</span>\n094          d = d.format(p1n, p1c, p2n, p2c)\n095          <strong>print</strong>(d)\n096\n097\n098      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">play_game</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n099          cards = <span class=\"hljs-keyword\">self</span>.deck.cards\n<span class=\"hljs-number\">100</span>          <strong>print</strong>(<span class=\"hljs-string\">\"beginning War!\"</span>)\n<span class=\"hljs-number\">101</span>          <strong><span class=\"hljs-keyword\">while</span></strong> len(cards) &gt;= <span class=\"hljs-number\">2</span>:\n<span class=\"hljs-number\">102</span>              m = <span class=\"hljs-string\">\"q to quit. Any \"</span> + <span class=\"hljs-string\">\"key to play:\"</span>\n<span class=\"hljs-number\">103</span>              response = input(m)\n<span class=\"hljs-number\">104</span>              <strong><span class=\"hljs-keyword\">if</span></strong> response == <span class=\"hljs-string\">'q'</span>:\n<span class=\"hljs-number\">105</span>                  <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">106</span>              p1c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">107</span>              p2c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">108</span>              p1n = <span class=\"hljs-keyword\">self</span>.p1.name\n<span class=\"hljs-number\">109</span>              p2n = <span class=\"hljs-keyword\">self</span>.p2.name\n<span class=\"hljs-number\">110</span>              <span class=\"hljs-keyword\">self</span>.draw(p1n, p1c, p2n, p2c)\n<span class=\"hljs-number\">111</span>              <strong><span class=\"hljs-keyword\">if</span></strong> p1c &gt; <span class=\"hljs-symbol\">p2c:</span>\n<span class=\"hljs-number\">112</span>                  <span class=\"hljs-keyword\">self</span>.p1.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">113</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p1.name)\n<span class=\"hljs-number\">114</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">115</span>                  <span class=\"hljs-keyword\">self</span>.p2.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">116</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p2.name)\n<span class=\"hljs-number\">117</span>\n<span class=\"hljs-number\">118</span>\n<span class=\"hljs-number\">119</span>          win = <span class=\"hljs-keyword\">self</span>.winner(<span class=\"hljs-keyword\">self</span>.p1, <span class=\"hljs-keyword\">self</span>.p2)\n<span class=\"hljs-number\">120</span>\n<span class=\"hljs-number\">121</span>          print(<span class=\"hljs-string\">\"War is over. {} wins\"</span>.format(win))\n<span class=\"hljs-number\">122</span>\n<span class=\"hljs-number\">123</span>\n<span class=\"hljs-number\">124</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">winner</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1, p2)</span></span>:\n<span class=\"hljs-number\">125</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1.wins &gt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">126</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p1.name\n<span class=\"hljs-number\">127</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1 wins &lt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">128</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p2.name\n<span class=\"hljs-number\">129</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-string\">\"It was a tie!\"</span>\n<span class=\"hljs-number\">130</span>\n<span class=\"hljs-number\">131</span>\n<span class=\"hljs-number\">132</span>  game = Game()\n<span class=\"hljs-number\">133</span>  game.play_game()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">\"p1 name\"</span>\n…</code></pre></div></article>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>综合练习</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#151\">15.1　卡牌</a></li>\n<li><a href=\"#152\">15.2　牌堆</a></li>\n<li><a href=\"#153\">15.3　玩家</a></li>\n<li><a href=\"#154\">15.4　游戏</a></li>\n<li><a href=\"#155\">15.5　战争</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“代码跑起来我们再聊。”</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——沃德 · 坎宁汉（Ward Cunningham）</span></p>\n</blockquote>\n<p>本章将学习开发著名的棋牌游戏——战争。在该游戏中，每名玩家从牌堆中抽取一张牌，牌面点数最高的玩家获胜。我们将分别定义表示扑克牌、牌堆、玩家和游戏的类，来逐步开发“战争”。</p>\n<h3 id=\"151\">15.1　卡牌</h3>\n<p>下面是表示扑克牌的类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs python\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jj22qv4</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Card</span>:</span>\n<span class=\"hljs-number\">05</span>      suits = [<span class=\"hljs-string\">\"spades\"</span>,\n<span class=\"hljs-number\">06</span>               <span class=\"hljs-string\">\"hearts\"</span>,\n<span class=\"hljs-number\">07</span>               <span class=\"hljs-string\">\"diamonds\"</span>,\n<span class=\"hljs-number\">08</span>               <span class=\"hljs-string\">\"clubs\"</span>]\n<span class=\"hljs-number\">09</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>      values = [<span class=\"hljs-keyword\">None</span>, <span class=\"hljs-keyword\">None</span>, <span class=\"hljs-string\">\"2\"</span>, <span class=\"hljs-string\">\"3\"</span>,\n<span class=\"hljs-number\">12</span>                <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"5\"</span>, <span class=\"hljs-string\">\"6\"</span>, <span class=\"hljs-string\">\"7\"</span>,\n<span class=\"hljs-number\">13</span>                <span class=\"hljs-string\">\"8\"</span>, <span class=\"hljs-string\">\"9\"</span>, <span class=\"hljs-string\">\"10\"</span>,\n<span class=\"hljs-number\">14</span>                <span class=\"hljs-string\">\"Jack\"</span>, <span class=\"hljs-string\">\"Queen\"</span>,\n<span class=\"hljs-number\">15</span>                <span class=\"hljs-string\">\"King\"</span>, <span class=\"hljs-string\">\"Ace\"</span> ]\n<span class=\"hljs-number\">16</span>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, v, s)</span>:</span>\n<span class=\"hljs-number\">19</span>          <span class=\"hljs-string\">\"\"\"suit 和 value 的值都为整型数\"\"\"</span>\n<span class=\"hljs-number\">20</span>          self.value = v\n<span class=\"hljs-number\">21</span>          self.suit = s\n<span class=\"hljs-number\">22</span>\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__lt__</span><span class=\"hljs-params\">(self, c2)</span>:</span>\n<span class=\"hljs-number\">25</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value &lt; c2.value:\n<span class=\"hljs-number\">26</span>              <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">27</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value == c2.value:\n<span class=\"hljs-number\">28</span>              <strong><span class=\"hljs-keyword\">if</span></strong> self.suit &lt; c2.suit:\n<span class=\"hljs-number\">29</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">30</span>              <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">31</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">32</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">33</span>\n<span class=\"hljs-number\">34</span>\n<span class=\"hljs-number\">35</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__gt__</span><span class=\"hljs-params\">(self, c2)</span>:</span>\n<span class=\"hljs-number\">36</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value &gt; c2.value:\n<span class=\"hljs-number\">37</span>              <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">38</span>          <strong><span class=\"hljs-keyword\">if</span></strong> self.value == c2.value:\n<span class=\"hljs-number\">39</span>              <strong><span class=\"hljs-keyword\">if</span></strong> self.suit &gt; c2.suit:\n<span class=\"hljs-number\">40</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">True</span>\n<span class=\"hljs-number\">41</span>              <strong><span class=\"hljs-keyword\">else</span></strong>:\n<span class=\"hljs-number\">42</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">43</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-number\">44</span>\n<span class=\"hljs-number\">45</span>\n<span class=\"hljs-number\">46</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__repr__</span><span class=\"hljs-params\">(self)</span>:</span>\n<span class=\"hljs-number\">47</span>          v = self.values[self.value] + <span class=\"hljs-string\">\" of \"</span> \\\n<span class=\"hljs-number\">48</span>          + self.suits[self.suit]\n<span class=\"hljs-number\">49</span>          <strong><span class=\"hljs-keyword\">return</span></strong> v</code></pre>\n<p><code>Card</code> 类有两个类变量：<code>suits</code> 和 <code>values</code>。前者是一个字符串列表，表示扑克牌的花色：<code>spades</code>、<code>hearts</code>、<code>diamonds</code> 和 <code>clubs</code>。后者是一个表示扑克牌数字的字符串列表：<code>2～10</code>、<code>Jack</code>、<code>Queen</code>、<code>King</code> 和 <code>Ace</code>。列表 <code>values</code> 的前两个索引处的元素都是 <code>None</code>，以确保列表中的字符串与其所处的索引相匹配，即 <code>values</code> 列表中的字符串 <code>\"2\"</code> 位于索引 <code>2</code>。</p>\n<p><code>Card</code> 对象有两个实例变量：<code>suit</code> 和 <code>value</code>，均为整型数。二者结合在一起，表示 <code>Card</code> 对象代表的是什么牌。例如，创建 <code>Card</code> 对象时传入参数 <code>2</code> 作为 <code>suit</code> 的值，传入参数 <code>1</code> 作为 <code>value</code> 的值，就意味着创建了一张 <code>2 of hearts</code>（红桃二）。</p>\n<p>由于定义了 <code>__lt__</code> 和 <code>__gt__</code> 这两个魔法方法，就可以在表达式中使用大于和小于运算符比较 <code>Card</code> 对象。魔法方法中的代码会判断当前扑克牌是大于还是小于作为参数传入的扑克牌，同时也会判断两张牌的值是否相同。如果加入两张牌的值都是 <code>10</code>，那么就会通过 <code>suit</code> 来比较。<code>suits</code> 列表中的花色是按大小排列的，即索引值越大的花色，越小；索引值越小的花色，越大。示例如下：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/j6donnr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  card1 = Card(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">5</span>  card2 = Card(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-keyword\">print</span>(card1 &lt; card2)\n\n&gt;&gt; <span class=\"hljs-keyword\">True</span>\n\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hc9ktlr</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  card1 = Card(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">5</span>  card2 = Card(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-number\">6</span>  <span class=\"hljs-keyword\">print</span>(card1 &gt; card2)\n\n&gt;&gt; <span class=\"hljs-keyword\">False</span>\n</code></pre>\n<p><code>Card</code> 类中定义的最后一个方法是 <code>__repr__</code>，通过 <code>value</code> 和 <code>suit</code> 实例变量查找扑克牌在 <code>values</code> 和 <code>suits</code> 列表中对应的值和花色，并返回查询结果。示例如下：</p>\n<pre><code class=\"hljs coffeescript\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/z57hc75</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  card = Card(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">5</span>  <span class=\"hljs-built_in\">print</span>(card)\n\n&gt;&gt; <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">of</span> diamonds\n</code></pre>\n<h3 id=\"152\">15.2　牌堆</h3>\n<p>接下来，我们定义一个用来表示牌堆（deck of cards）的类：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/jz8zfz7</span>\n<span class=\"hljs-number\">2</span>  <strong>from</strong> random <strong>import</strong> shuffle\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Deck</span>:</span>\n<span class=\"hljs-number\">6</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-keyword\">self</span>.cards = []\n08          <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">15</span>):\n09              <strong><span class=\"hljs-keyword\">for</span></strong> j <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">4</span>):\n<span class=\"hljs-number\">10</span>                  <span class=\"hljs-keyword\">self</span>.cards.append(Card(i, j))\n<span class=\"hljs-number\">11</span>          shuffle(<span class=\"hljs-keyword\">self</span>.cards)\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>\n<span class=\"hljs-number\">14</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">rm_card</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">15</span>          <strong><span class=\"hljs-keyword\">if</span></strong> len(<span class=\"hljs-keyword\">self</span>.cards) == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">16</span>              <strong><span class=\"hljs-keyword\">return</span></strong>\n<span class=\"hljs-number\">17</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.cards.pop()</code></pre>\n<p>在初始化 <code>Deck</code> 对象时，<code>__init__</code> 方法中的两个 <code>for</code> 循环将创建牌堆中所有的 52 张牌，并添加到 <code>cards</code> 列表。第一个循环从 <code>2</code> 到 <code>15</code>，因为扑克牌的第一个值是 <code>2</code>，最后一个值是 <code>14</code>（Ace）。内部的 <code>for</code> 循环每循环一次，就会使用外循环的整型数作为扑克牌的值（如 <code>14</code> 表示 Ace），用内循环的整型数作为扑克牌的花色（如 <code>2</code> 表示红桃），以此创建一张扑克牌，总共创建 52 张，每种花色和数值的组合各创建一张。创建完所有的扑克牌之后，通过 <code>random</code> 模块中的 <code>shuffle</code> 方法随机排列 <code>cards</code> 列表中的元素，模拟洗牌的动作。</p>\n<p>牌堆还有一个叫 <code>rm_card</code> 的方法，从牌堆中返回一张扑克牌对象并将其从 <code>cards</code> 列表内移除，如果牌堆里没有牌时则返回 <code>None</code>。我们使用 <code>Deck</code> 类创建一副牌，并打印其中所有的牌：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/hsv5n6p</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  deck = Deck()\n<span class=\"hljs-number\">5</span>  <strong><span class=\"hljs-keyword\">for</span></strong> card <strong><span class=\"hljs-keyword\">in</span></strong> deck.<span class=\"hljs-symbol\">cards:</span>\n<span class=\"hljs-number\">6</span>      print(card)\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">4</span> of spades\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">8</span> of hearts\n...</code></pre>\n<h3 id=\"153\">15.3　玩家</h3>\n<p>我们还需要一个类来表示游戏中的玩家，并记录他们手中的牌，以及赢了多少局。示例如下：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># http://tinyurl.com/gwyrt2s</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Player</span>:</span>\n<span class=\"hljs-number\">5</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">6</span>          <span class=\"hljs-keyword\">self</span>.wins = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">7</span>          <span class=\"hljs-keyword\">self</span>.card = None\n<span class=\"hljs-number\">8</span>          <span class=\"hljs-keyword\">self</span>.name = name</code></pre>\n<p><code>Player</code> 类有 3 个实例变量：<code>wins</code> 用来记录玩家赢的局数，<code>card</code> 用来代表玩家当前手中的牌，<code>name</code> 用来记录玩家的姓名。</p>\n<h3 id=\"154\">15.4　游戏</h3>\n<p>最后，还需要一个类来表示游戏本身：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">01</span>  <span class=\"hljs-comment\"># http://tinyurl.com/huwq8mw</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n<span class=\"hljs-number\">04</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Game</span>:</span>\n<span class=\"hljs-number\">05</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">06</span>          name1 = input(<span class=\"hljs-string\">\"p1 name \"</span>)\n<span class=\"hljs-number\">07</span>          name2 = input(<span class=\"hljs-string\">\"p2 name \"</span>)\n08          <span class=\"hljs-keyword\">self</span>.deck = Deck()\n09          <span class=\"hljs-keyword\">self</span>.p1 = Player(name1)\n<span class=\"hljs-number\">10</span>          <span class=\"hljs-keyword\">self</span>.p2 = Player(name2)\n<span class=\"hljs-number\">11</span>\n<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">13</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">wins</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, winner)</span></span>:\n<span class=\"hljs-number\">14</span>          w = <span class=\"hljs-string\">\"{} wins this round\"</span>\n<span class=\"hljs-number\">15</span>          w = w.format(winner)\n<span class=\"hljs-number\">16</span>          <strong>print</strong>(w)\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">18</span>\n<span class=\"hljs-number\">19</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">draw</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1n, p1c, p2n, p2c)</span></span>:\n<span class=\"hljs-number\">20</span>          d = <span class=\"hljs-string\">\"{} drew {} {} drew {}\"</span>\n<span class=\"hljs-number\">21</span>          d = d.format(p1n, p1c, p2n, p2c)\n<span class=\"hljs-number\">22</span>          <strong>print</strong>(d)\n<span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">25</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">play_game</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">26</span>          cards = <span class=\"hljs-keyword\">self</span>.deck.cards\n<span class=\"hljs-number\">27</span>          <strong>print</strong>(<span class=\"hljs-string\">\"beginning War!\"</span>)\n<span class=\"hljs-number\">28</span>          <strong><span class=\"hljs-keyword\">while</span></strong> len(cards) &gt;= <span class=\"hljs-number\">2</span>:\n<span class=\"hljs-number\">29</span>              m = <span class=\"hljs-string\">\"q to quit. Any \"</span> + <span class=\"hljs-string\">\"key to play:\"</span>\n<span class=\"hljs-number\">30</span>              response = input(m)\n<span class=\"hljs-number\">31</span>              <strong><span class=\"hljs-keyword\">if</span></strong> response = <span class=\"hljs-string\">\"q\"</span>:\n<span class=\"hljs-number\">32</span>                  <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">33</span>              p1c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">34</span>              p2c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">35</span>              p1n = <span class=\"hljs-keyword\">self</span>.p1.name\n<span class=\"hljs-number\">36</span>              p2n = <span class=\"hljs-keyword\">self</span>.p2.name\n<span class=\"hljs-number\">37</span>              <span class=\"hljs-keyword\">self</span>.draw(p1n, p1c, p2n, p2c)\n<span class=\"hljs-number\">38</span>              <strong><span class=\"hljs-keyword\">if</span></strong> p1c &gt; <span class=\"hljs-symbol\">p2c:</span>\n<span class=\"hljs-number\">39</span>                  <span class=\"hljs-keyword\">self</span>.p1.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">40</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p1.name)\n<span class=\"hljs-number\">41</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">42</span>                  <span class=\"hljs-keyword\">self</span>.p2.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">43</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p2.name)\n<span class=\"hljs-number\">44</span>\n<span class=\"hljs-number\">45</span>\n<span class=\"hljs-number\">46</span>          win = <span class=\"hljs-keyword\">self</span>.winner(<span class=\"hljs-keyword\">self</span>.p1, <span class=\"hljs-keyword\">self</span>.p2)\n<span class=\"hljs-number\">47</span>\n<span class=\"hljs-number\">48</span>          <strong>print</strong>(<span class=\"hljs-string\">\"War is over. {} wins\"</span>.format(win))\n<span class=\"hljs-number\">49</span>\n<span class=\"hljs-number\">50</span>\n<span class=\"hljs-number\">51</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">winner</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1, p2)</span></span>:\n<span class=\"hljs-number\">52</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1.wins &gt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">53</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p1.name\n<span class=\"hljs-number\">54</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1 wins &lt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">55</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p2.name\n<span class=\"hljs-number\">56</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-string\">\"It was a tie!\"</span></code></pre>\n<p>创建 <code>Game</code> 对象时，Python 调用其 <code>__init__</code> 方法，其中的 <code>input</code> 函数将收集参与游戏的两名玩家的姓名，并保存在变量 <code>name1</code> 和 <code>name2</code> 中。接下来，创建一个 <code>Deck</code> 对象，保存在实例变量 <code>deck</code> 中，并使用 <code>name1</code> 和 <code>name2</code> 创建两个 <code>Player</code> 对象。</p>\n<p><code>Game</code> 类中的 <code>play_game</code> 方法会开启游戏，其中有一个 <code>while</code> 循环，只要牌堆中剩下两张或两张以上扑克牌，并且 <code>response</code> 变量的值并等于 <code>q</code>，游戏就会一直运行。每次循环，都将用户的输入赋值给 <code>response</code> 变量。游戏只有在有玩家输入 <code>\"q\"</code>，或者牌堆里少于两张牌时才会结束。</p>\n<p>每次循环将抽取两张扑克牌，<code>play_game</code> 方法将第一张牌给 <code>p1</code>，第二张牌给 <code>p2</code>。然后打印每个玩家的名字及抽到的扑克牌，同时比较哪张牌更大，手中牌更大的玩家赢得本轮，其对应 <code>wins</code> 实例变量的值递增 1。</p>\n<p><code>Game</code> 类还有一个叫 <code>winner</code> 的方法，接受两个 <code>Player</code> 对象，将比较各自赢得的局数，并返回获胜次数最多的玩家。</p>\n<p>当 <code>Deck</code> 对象中没有多余的扑克牌后，<code>play_game</code> 方法将打印一段话表示战争已经结束，然后调用 <code>winner</code> 方法（传入 <code>p1</code> 和 <code>p2</code> 作为参数），并打印返回的结果——赢得游戏胜利的玩家的姓名。</p>\n<h3 id=\"155\">15.5　战争</h3>\n<p>以下是完整代码：</p>\n<pre class=\"代码无行号\"><code class=\"hljs ruby\"><span class=\"hljs-number\">001</span>  <span class=\"hljs-comment\"># http://tinyurl.com/ho7364a</span>\n<span class=\"hljs-number\">002</span>\n<span class=\"hljs-number\">003</span>\n<span class=\"hljs-number\">004</span>  <strong>from</strong> random <strong>import</strong> shuffle\n<span class=\"hljs-number\">005</span>\n<span class=\"hljs-number\">006</span>\n<span class=\"hljs-number\">007</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Card</span>:</span>\n<span class=\"hljs-number\">00</span>8      suits = [<span class=\"hljs-string\">\"spades\"</span>,\n<span class=\"hljs-number\">00</span>9               <span class=\"hljs-string\">\"hearts\"</span>,\n<span class=\"hljs-number\">010</span>               <span class=\"hljs-string\">\"diamonds\"</span>,\n<span class=\"hljs-number\">011</span>               <span class=\"hljs-string\">\"clubs\"</span>]\n<span class=\"hljs-number\">012</span>\n<span class=\"hljs-number\">013</span>\n<span class=\"hljs-number\">014</span>      values = [None, None, <span class=\"hljs-string\">\"2\"</span>, <span class=\"hljs-string\">\"3\"</span>,\n<span class=\"hljs-number\">015</span>                <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"5\"</span>, <span class=\"hljs-string\">\"6\"</span>, <span class=\"hljs-string\">\"7\"</span>,\n<span class=\"hljs-number\">016</span>                <span class=\"hljs-string\">\"8\"</span>, <span class=\"hljs-string\">\"9\"</span>, <span class=\"hljs-string\">\"10\"</span>,\n<span class=\"hljs-number\">017</span>                <span class=\"hljs-string\">\"Jack\"</span>, <span class=\"hljs-string\">\"Queen\"</span>,\n<span class=\"hljs-number\">01</span>8                <span class=\"hljs-string\">\"King\"</span>, <span class=\"hljs-string\">\"Ace\"</span> ]\n<span class=\"hljs-number\">01</span>9\n<span class=\"hljs-number\">020</span>\n<span class=\"hljs-number\">021</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, v, s)</span></span>:\n<span class=\"hljs-number\">022</span>          <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"suit 和 value 的值都为整型数\"</span><span class=\"hljs-string\">\"\"</span>\n<span class=\"hljs-number\">023</span>          <span class=\"hljs-keyword\">self</span>.value = v\n<span class=\"hljs-number\">024</span>          <span class=\"hljs-keyword\">self</span>.suit = s\n<span class=\"hljs-number\">025</span>\n<span class=\"hljs-number\">026</span>\n<span class=\"hljs-number\">027</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__lt__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, c2)</span></span>:\n<span class=\"hljs-number\">02</span>8          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value &lt; c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">02</span>9              <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">030</span>          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value == c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">031</span>              <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.suit &lt; c2.<span class=\"hljs-symbol\">suit:</span>\n<span class=\"hljs-number\">032</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">033</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">034</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">035</span>          <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">036</span>\n<span class=\"hljs-number\">037</span>\n<span class=\"hljs-number\">03</span>8      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__gt__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, c2)</span></span>:\n<span class=\"hljs-number\">03</span>9          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value &gt; c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">040</span>              <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">041</span>          <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.value == c2.<span class=\"hljs-symbol\">value:</span>\n<span class=\"hljs-number\">042</span>              <strong><span class=\"hljs-keyword\">if</span></strong> <span class=\"hljs-keyword\">self</span>.suit &gt; c2.<span class=\"hljs-symbol\">suit:</span>\n<span class=\"hljs-number\">043</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> True\n<span class=\"hljs-number\">044</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">045</span>                  <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">046</span>          <strong><span class=\"hljs-keyword\">return</span></strong> False\n<span class=\"hljs-number\">047</span>\n<span class=\"hljs-number\">04</span>8\n<span class=\"hljs-number\">04</span>9      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__repr__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">050</span>          v = <span class=\"hljs-keyword\">self</span>.values[<span class=\"hljs-keyword\">self</span>.value] + <span class=\"hljs-string\">\" of \"</span> \\\n<span class=\"hljs-number\">051</span>          + <span class=\"hljs-keyword\">self</span>.suits[<span class=\"hljs-keyword\">self</span>.suit]\n<span class=\"hljs-number\">052</span>          <strong><span class=\"hljs-keyword\">return</span></strong> v\n<span class=\"hljs-number\">053</span>\n<span class=\"hljs-number\">054</span>\n<span class=\"hljs-number\">055</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Deck</span>:</span>\n<span class=\"hljs-number\">056</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">057</span>          <span class=\"hljs-keyword\">self</span>.cards = []\n<span class=\"hljs-number\">05</span>8          <strong><span class=\"hljs-keyword\">for</span></strong> i <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">15</span>):\n<span class=\"hljs-number\">05</span>9              <strong><span class=\"hljs-keyword\">for</span></strong> j <strong><span class=\"hljs-keyword\">in</span></strong> range(<span class=\"hljs-number\">4</span>):\n<span class=\"hljs-number\">060</span>                  <span class=\"hljs-keyword\">self</span>.cards.append(Card(i, j))\n<span class=\"hljs-number\">061</span>          shuffle(<span class=\"hljs-keyword\">self</span>.cards)\n<span class=\"hljs-number\">062</span>\n<span class=\"hljs-number\">063</span>\n<span class=\"hljs-number\">064</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">rm_card</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">065</span>          <strong><span class=\"hljs-keyword\">if</span></strong> len(<span class=\"hljs-keyword\">self</span>.cards) == <span class=\"hljs-number\">0</span>:\n<span class=\"hljs-number\">066</span>              <strong><span class=\"hljs-keyword\">return</span></strong>\n<span class=\"hljs-number\">067</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-keyword\">self</span>.cards.pop()\n<span class=\"hljs-number\">06</span>8\n<span class=\"hljs-number\">06</span>9\n<span class=\"hljs-number\">070</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Player</span>:</span>\n<span class=\"hljs-number\">071</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:\n<span class=\"hljs-number\">072</span>          <span class=\"hljs-keyword\">self</span>.wins = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">073</span>          <span class=\"hljs-keyword\">self</span>.card = None\n<span class=\"hljs-number\">074</span>          <span class=\"hljs-keyword\">self</span>.name = name\n<span class=\"hljs-number\">075</span>\n<span class=\"hljs-number\">076</span>\n<span class=\"hljs-number\">077</span>  <strong><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></strong><span class=\"hljs-class\"> <span class=\"hljs-title\">Game</span>:</span>\n<span class=\"hljs-number\">07</span>8      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n<span class=\"hljs-number\">07</span>9          name1 = input(<span class=\"hljs-string\">\"p1 name \"</span>)\n08<span class=\"hljs-number\">0</span>          name2 = input(<span class=\"hljs-string\">\"p2 name \"</span>)\n081          <span class=\"hljs-keyword\">self</span>.deck = Deck()\n082          <span class=\"hljs-keyword\">self</span>.p1 = Player(name1)\n083          <span class=\"hljs-keyword\">self</span>.p2 = Player(name2)\n084\n085\n086      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">wins</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, winner)</span></span>:\n087          w = <span class=\"hljs-string\">\"{} wins this round\"</span>\n088          w = w.format(winner)\n089          <strong>print</strong>(w)\n09<span class=\"hljs-number\">0</span>\n091\n092      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">draw</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1n, p1c, p2n, p2c)</span></span>:\n093          d = <span class=\"hljs-string\">\"{} drew {} {} drew {}\"</span>\n094          d = d.format(p1n, p1c, p2n, p2c)\n095          <strong>print</strong>(d)\n096\n097\n098      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">play_game</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:\n099          cards = <span class=\"hljs-keyword\">self</span>.deck.cards\n<span class=\"hljs-number\">100</span>          <strong>print</strong>(<span class=\"hljs-string\">\"beginning War!\"</span>)\n<span class=\"hljs-number\">101</span>          <strong><span class=\"hljs-keyword\">while</span></strong> len(cards) &gt;= <span class=\"hljs-number\">2</span>:\n<span class=\"hljs-number\">102</span>              m = <span class=\"hljs-string\">\"q to quit. Any \"</span> + <span class=\"hljs-string\">\"key to play:\"</span>\n<span class=\"hljs-number\">103</span>              response = input(m)\n<span class=\"hljs-number\">104</span>              <strong><span class=\"hljs-keyword\">if</span></strong> response == <span class=\"hljs-string\">'q'</span>:\n<span class=\"hljs-number\">105</span>                  <strong><span class=\"hljs-keyword\">break</span></strong>\n<span class=\"hljs-number\">106</span>              p1c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">107</span>              p2c = <span class=\"hljs-keyword\">self</span>.deck.rm_card()\n<span class=\"hljs-number\">108</span>              p1n = <span class=\"hljs-keyword\">self</span>.p1.name\n<span class=\"hljs-number\">109</span>              p2n = <span class=\"hljs-keyword\">self</span>.p2.name\n<span class=\"hljs-number\">110</span>              <span class=\"hljs-keyword\">self</span>.draw(p1n, p1c, p2n, p2c)\n<span class=\"hljs-number\">111</span>              <strong><span class=\"hljs-keyword\">if</span></strong> p1c &gt; <span class=\"hljs-symbol\">p2c:</span>\n<span class=\"hljs-number\">112</span>                  <span class=\"hljs-keyword\">self</span>.p1.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">113</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p1.name)\n<span class=\"hljs-number\">114</span>              <strong><span class=\"hljs-symbol\">else</span></strong><span class=\"hljs-symbol\">:</span>\n<span class=\"hljs-number\">115</span>                  <span class=\"hljs-keyword\">self</span>.p2.wins += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">116</span>                  <span class=\"hljs-keyword\">self</span>.wins(<span class=\"hljs-keyword\">self</span>.p2.name)\n<span class=\"hljs-number\">117</span>\n<span class=\"hljs-number\">118</span>\n<span class=\"hljs-number\">119</span>          win = <span class=\"hljs-keyword\">self</span>.winner(<span class=\"hljs-keyword\">self</span>.p1, <span class=\"hljs-keyword\">self</span>.p2)\n<span class=\"hljs-number\">120</span>\n<span class=\"hljs-number\">121</span>          print(<span class=\"hljs-string\">\"War is over. {} wins\"</span>.format(win))\n<span class=\"hljs-number\">122</span>\n<span class=\"hljs-number\">123</span>\n<span class=\"hljs-number\">124</span>      <strong><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span></span></strong><span class=\"hljs-function\"> <span class=\"hljs-title\">winner</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, p1, p2)</span></span>:\n<span class=\"hljs-number\">125</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1.wins &gt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">126</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p1.name\n<span class=\"hljs-number\">127</span>          <strong><span class=\"hljs-keyword\">if</span></strong> p1 wins &lt; p2.<span class=\"hljs-symbol\">wins:</span>\n<span class=\"hljs-number\">128</span>              <strong><span class=\"hljs-keyword\">return</span></strong> p2.name\n<span class=\"hljs-number\">129</span>          <strong><span class=\"hljs-keyword\">return</span></strong> <span class=\"hljs-string\">\"It was a tie!\"</span>\n<span class=\"hljs-number\">130</span>\n<span class=\"hljs-number\">131</span>\n<span class=\"hljs-number\">132</span>  game = Game()\n<span class=\"hljs-number\">133</span>  game.play_game()\n\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-string\">\"p1 name\"</span>\n…</code></pre></div></article>\n</body>\n</html>"},{"title":"me","_content":"### 个人信息\n- 姓名：欧阳举相\n- 手机：17673502448\n- 邮箱：oyjx0525@dingtalk.com\n- 求职意向：Python/Golang 后端开发\n\n### 教育背景\n- 湘南学院 2015.9-2019.6\n- 软件与通信工程学院 通信工程专业\n\n\n### 技术栈\n- Python、Golang基础知识扎实,熟悉常用的数据结构、多线程和协程;\n- 使用Keras、TensorFlow搭建神经网络,使用Pandas、Numpy处理数据;\n- 使用Sanic/Flask+Gunicorn+Docker提供HTTP接口服务;\n- 了解MySQL数据库多表联查及优化,有Redis、MongoDB等非关系型数据库使用经验;\n- 了解Git和Linux操作系统。\n\n\n### 实习经历\n- **深圳市前海喜越科技有限公司** *2018.4-2019.6/ Python工程师*\n\n\n### 项目经验\n\n***\n\n`我隶属于公司的技术开发组，基本以计算接口开发为主，以下是部分项目的描述`\n\n- HDataMindr系统\n\n  > 1. 该系统主要负责公司业务基础数据处理，结合机器学习思想通过特征工程构建VSM;\n  > 2. 结合业务设计并使用Keras、TensorFlow实现算法，产生匹配、分类、预测等模型;\n  > 3. 选用Sainc/Flask作为Web框架, 使用Gunicorn代理, 采用Docker部署服务, 提供各功能数据交互接口;\n  > 4. 选择Redis做定时缓存以及分布式事务锁存储, 使用MongoDB存储非结构化数据, RabbitMQ作为消息队列。\n\n- Koasys供应商对接\n\n  > 1. 该项目主要功能是同步Koasys集团业务数据，开发周期约1个月;\n  > 2. 使用Golang基于`go routine`和`channel`开发Koasys集团数据拉取工具、数据结构体定义与解析;\n  > 3. 使用Golang开发拉取报价、二次验价、订单创建、订单查询、订单取消接口;\n  > 4. 供应商静态数据同步工具开发以及入库，本地功能单元测试，业务集成测试。\n\n\n`在校期间参加大学生软件开发部分项目描述`\n\n- 职业罗盘\n  > 1. 该项目为大学生互联网+创新创业项目，主要目的是开发一款基于大数据的就业推荐系统;\n  > 2. 使用Pandas处理数据以及统计分析，使用MySQL存储，基于定向TopN进行匹配推荐;\n  > 3. 提供微信小程序、基于Ionic3框架开发的移动端。\n    \n- 基于电商评论的数据分析系统\n  > 1. 该项目为湖南省第十三届大学生程序设计竞赛应用开发类作品，荣获二等奖;\n  > 2. 数据采集: 使用Python做主体语言编写、利用Selenium模拟用户行为、使用XPath定位数据以及BS4解析数据;\n  > 3. 数据分析: 使用Jieba对文本分析、利用SnowNLP计算情感系数，采用Python+Pymongo对分析结果进行持久化存储;\n \n### 博客\n- [GitHub](https://github.com/1005281342/)\n- [Blog](https://1005281342.github.io)","source":"_posts/me.md","raw":"---\ntitle: me\n---\n### 个人信息\n- 姓名：欧阳举相\n- 手机：17673502448\n- 邮箱：oyjx0525@dingtalk.com\n- 求职意向：Python/Golang 后端开发\n\n### 教育背景\n- 湘南学院 2015.9-2019.6\n- 软件与通信工程学院 通信工程专业\n\n\n### 技术栈\n- Python、Golang基础知识扎实,熟悉常用的数据结构、多线程和协程;\n- 使用Keras、TensorFlow搭建神经网络,使用Pandas、Numpy处理数据;\n- 使用Sanic/Flask+Gunicorn+Docker提供HTTP接口服务;\n- 了解MySQL数据库多表联查及优化,有Redis、MongoDB等非关系型数据库使用经验;\n- 了解Git和Linux操作系统。\n\n\n### 实习经历\n- **深圳市前海喜越科技有限公司** *2018.4-2019.6/ Python工程师*\n\n\n### 项目经验\n\n***\n\n`我隶属于公司的技术开发组，基本以计算接口开发为主，以下是部分项目的描述`\n\n- HDataMindr系统\n\n  > 1. 该系统主要负责公司业务基础数据处理，结合机器学习思想通过特征工程构建VSM;\n  > 2. 结合业务设计并使用Keras、TensorFlow实现算法，产生匹配、分类、预测等模型;\n  > 3. 选用Sainc/Flask作为Web框架, 使用Gunicorn代理, 采用Docker部署服务, 提供各功能数据交互接口;\n  > 4. 选择Redis做定时缓存以及分布式事务锁存储, 使用MongoDB存储非结构化数据, RabbitMQ作为消息队列。\n\n- Koasys供应商对接\n\n  > 1. 该项目主要功能是同步Koasys集团业务数据，开发周期约1个月;\n  > 2. 使用Golang基于`go routine`和`channel`开发Koasys集团数据拉取工具、数据结构体定义与解析;\n  > 3. 使用Golang开发拉取报价、二次验价、订单创建、订单查询、订单取消接口;\n  > 4. 供应商静态数据同步工具开发以及入库，本地功能单元测试，业务集成测试。\n\n\n`在校期间参加大学生软件开发部分项目描述`\n\n- 职业罗盘\n  > 1. 该项目为大学生互联网+创新创业项目，主要目的是开发一款基于大数据的就业推荐系统;\n  > 2. 使用Pandas处理数据以及统计分析，使用MySQL存储，基于定向TopN进行匹配推荐;\n  > 3. 提供微信小程序、基于Ionic3框架开发的移动端。\n    \n- 基于电商评论的数据分析系统\n  > 1. 该项目为湖南省第十三届大学生程序设计竞赛应用开发类作品，荣获二等奖;\n  > 2. 数据采集: 使用Python做主体语言编写、利用Selenium模拟用户行为、使用XPath定位数据以及BS4解析数据;\n  > 3. 数据分析: 使用Jieba对文本分析、利用SnowNLP计算情感系数，采用Python+Pymongo对分析结果进行持久化存储;\n \n### 博客\n- [GitHub](https://github.com/1005281342/)\n- [Blog](https://1005281342.github.io)","slug":"me","published":1,"date":"2019-06-13T15:58:50.697Z","updated":"2019-06-13T15:58:50.697Z","_id":"cjwuucxht0000h5721ncm80vf","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h3><ul>\n<li>姓名：欧阳举相</li>\n<li>手机：17673502448</li>\n<li>邮箱：<a href=\"mailto:oyjx0525@dingtalk.com\" target=\"_blank\" rel=\"noopener\">oyjx0525@dingtalk.com</a></li>\n<li>求职意向：Python/Golang 后端开发</li>\n</ul>\n<h3 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h3><ul>\n<li>湘南学院 2015.9-2019.6</li>\n<li>软件与通信工程学院 通信工程专业</li>\n</ul>\n<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><ul>\n<li>Python、Golang基础知识扎实,熟悉常用的数据结构、多线程和协程;</li>\n<li>使用Keras、TensorFlow搭建神经网络,使用Pandas、Numpy处理数据;</li>\n<li>使用Sanic/Flask+Gunicorn+Docker提供HTTP接口服务;</li>\n<li>了解MySQL数据库多表联查及优化,有Redis、MongoDB等非关系型数据库使用经验;</li>\n<li>了解Git和Linux操作系统。</li>\n</ul>\n<h3 id=\"实习经历\"><a href=\"#实习经历\" class=\"headerlink\" title=\"实习经历\"></a>实习经历</h3><ul>\n<li><strong>深圳市前海喜越科技有限公司</strong> <em>2018.4-2019.6/ Python工程师</em></li>\n</ul>\n<h3 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h3><hr>\n<p><code>我隶属于公司的技术开发组，基本以计算接口开发为主，以下是部分项目的描述</code></p>\n<ul>\n<li><p>HDataMindr系统</p>\n<blockquote>\n<ol>\n<li>该系统主要负责公司业务基础数据处理，结合机器学习思想通过特征工程构建VSM;</li>\n<li>结合业务设计并使用Keras、TensorFlow实现算法，产生匹配、分类、预测等模型;</li>\n<li>选用Sainc/Flask作为Web框架, 使用Gunicorn代理, 采用Docker部署服务, 提供各功能数据交互接口;</li>\n<li>选择Redis做定时缓存以及分布式事务锁存储, 使用MongoDB存储非结构化数据, RabbitMQ作为消息队列。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>Koasys供应商对接</p>\n<blockquote>\n<ol>\n<li>该项目主要功能是同步Koasys集团业务数据，开发周期约1个月;</li>\n<li>使用Golang基于<code>go routine</code>和<code>channel</code>开发Koasys集团数据拉取工具、数据结构体定义与解析;</li>\n<li>使用Golang开发拉取报价、二次验价、订单创建、订单查询、订单取消接口;</li>\n<li>供应商静态数据同步工具开发以及入库，本地功能单元测试，业务集成测试。</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<p><code>在校期间参加大学生软件开发部分项目描述</code></p>\n<ul>\n<li><p>职业罗盘</p>\n<blockquote>\n<ol>\n<li>该项目为大学生互联网+创新创业项目，主要目的是开发一款基于大数据的就业推荐系统;</li>\n<li>使用Pandas处理数据以及统计分析，使用MySQL存储，基于定向TopN进行匹配推荐;</li>\n<li>提供微信小程序、基于Ionic3框架开发的移动端。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>基于电商评论的数据分析系统</p>\n<blockquote>\n<ol>\n<li>该项目为湖南省第十三届大学生程序设计竞赛应用开发类作品，荣获二等奖;</li>\n<li>数据采集: 使用Python做主体语言编写、利用Selenium模拟用户行为、使用XPath定位数据以及BS4解析数据;</li>\n<li>数据分析: 使用Jieba对文本分析、利用SnowNLP计算情感系数，采用Python+Pymongo对分析结果进行持久化存储;</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h3><ul>\n<li><a href=\"https://github.com/1005281342/\" target=\"_blank\" rel=\"noopener\">GitHub</a></li>\n<li><a href=\"https://1005281342.github.io\" target=\"_blank\" rel=\"noopener\">Blog</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h3><ul>\n<li>姓名：欧阳举相</li>\n<li>手机：17673502448</li>\n<li>邮箱：<a href=\"mailto:oyjx0525@dingtalk.com\" target=\"_blank\" rel=\"noopener\">oyjx0525@dingtalk.com</a></li>\n<li>求职意向：Python/Golang 后端开发</li>\n</ul>\n<h3 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h3><ul>\n<li>湘南学院 2015.9-2019.6</li>\n<li>软件与通信工程学院 通信工程专业</li>\n</ul>\n<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><ul>\n<li>Python、Golang基础知识扎实,熟悉常用的数据结构、多线程和协程;</li>\n<li>使用Keras、TensorFlow搭建神经网络,使用Pandas、Numpy处理数据;</li>\n<li>使用Sanic/Flask+Gunicorn+Docker提供HTTP接口服务;</li>\n<li>了解MySQL数据库多表联查及优化,有Redis、MongoDB等非关系型数据库使用经验;</li>\n<li>了解Git和Linux操作系统。</li>\n</ul>\n<h3 id=\"实习经历\"><a href=\"#实习经历\" class=\"headerlink\" title=\"实习经历\"></a>实习经历</h3><ul>\n<li><strong>深圳市前海喜越科技有限公司</strong> <em>2018.4-2019.6/ Python工程师</em></li>\n</ul>\n<h3 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h3><hr>\n<p><code>我隶属于公司的技术开发组，基本以计算接口开发为主，以下是部分项目的描述</code></p>\n<ul>\n<li><p>HDataMindr系统</p>\n<blockquote>\n<ol>\n<li>该系统主要负责公司业务基础数据处理，结合机器学习思想通过特征工程构建VSM;</li>\n<li>结合业务设计并使用Keras、TensorFlow实现算法，产生匹配、分类、预测等模型;</li>\n<li>选用Sainc/Flask作为Web框架, 使用Gunicorn代理, 采用Docker部署服务, 提供各功能数据交互接口;</li>\n<li>选择Redis做定时缓存以及分布式事务锁存储, 使用MongoDB存储非结构化数据, RabbitMQ作为消息队列。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>Koasys供应商对接</p>\n<blockquote>\n<ol>\n<li>该项目主要功能是同步Koasys集团业务数据，开发周期约1个月;</li>\n<li>使用Golang基于<code>go routine</code>和<code>channel</code>开发Koasys集团数据拉取工具、数据结构体定义与解析;</li>\n<li>使用Golang开发拉取报价、二次验价、订单创建、订单查询、订单取消接口;</li>\n<li>供应商静态数据同步工具开发以及入库，本地功能单元测试，业务集成测试。</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<p><code>在校期间参加大学生软件开发部分项目描述</code></p>\n<ul>\n<li><p>职业罗盘</p>\n<blockquote>\n<ol>\n<li>该项目为大学生互联网+创新创业项目，主要目的是开发一款基于大数据的就业推荐系统;</li>\n<li>使用Pandas处理数据以及统计分析，使用MySQL存储，基于定向TopN进行匹配推荐;</li>\n<li>提供微信小程序、基于Ionic3框架开发的移动端。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>基于电商评论的数据分析系统</p>\n<blockquote>\n<ol>\n<li>该项目为湖南省第十三届大学生程序设计竞赛应用开发类作品，荣获二等奖;</li>\n<li>数据采集: 使用Python做主体语言编写、利用Selenium模拟用户行为、使用XPath定位数据以及BS4解析数据;</li>\n<li>数据分析: 使用Jieba对文本分析、利用SnowNLP计算情感系数，采用Python+Pymongo对分析结果进行持久化存储;</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h3><ul>\n<li><a href=\"https://github.com/1005281342/\" target=\"_blank\" rel=\"noopener\">GitHub</a></li>\n<li><a href=\"https://1005281342.github.io\" target=\"_blank\" rel=\"noopener\">Blog</a></li>\n</ul>\n"},{"title":"Bash","_content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Bash</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#161\">16.1　跟随练习</a></li>\n<li><a href=\"#162bash\">16.2　找到 Bash</a></li>\n<li><a href=\"#163\">16.3　命令</a></li>\n<li><a href=\"#164\">16.4　最近命令</a></li>\n<li><a href=\"#165\">16.5　相对路径与绝对路径</a></li>\n<li><a href=\"#166\">16.6　导航</a></li>\n<li><a href=\"#167\">16.7　旗标</a></li>\n<li><a href=\"#168\">16.8　隐藏文件</a></li>\n<li><a href=\"#169\">16.9　管道</a></li>\n<li><a href=\"#1610\">16.10　环境变量</a></li>\n<li><a href=\"#1611\">16.11　用户</a></li>\n<li><a href=\"#1612\">16.12　了解更多</a></li>\n<li><a href=\"#1613\">16.13　术语表</a></li>\n<li><a href=\"#1614\">16.14　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“除了计算机编程外，我想不出还有其他让我感兴趣的工作。我可以无中生有地创造出精美的范式和结构，在此过程中也解决了无数的小谜团。</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——皮特 · 范德林登（Peter Van Der Linden）</span></p>\n</blockquote>\n<p>本章将学习使用一种被称为 <strong>Bash</strong> 的<strong>命令行接口</strong>（command-line interface）。命令行接口是一种可以支持用户输入指令，并由操作系统执行的程序。Bash 则是大部分类 UNIX 操作系统都具备的命令行接口实现。因此，本章中命令行接口和<strong>命令行</strong>可交替使用。</p>\n<p>笔者刚得到第一份编程工作时，犯了将所有时间都用来练习编程的错误。当然，要想做到职业编程的水平，需要一定的天赋。但是还有其他应该掌握的技能，比如命令行的使用。命令行是除了编码之外，其他工作的“控制中心”。</p>\n<p>例如，本书后续章节将会提到如何使用包管理器安装他人的程序，以及如何使用版本控制系统与他人进行协作。这两个工具都需要从命令行进行操作。另外，如今大部分软件都需要从互联网获取数据，而世界上大部分 Web 服务器运行的都是 Linux 系统。这些服务器没有图形化的用户界面，只能通过命令行访问。</p>\n<p>命令行、包管理器、正则表达式和版本控制，这些都是程序员工具库中的核心成员。笔者所共事过的团队中，没有成员不擅长使用这些工具。</p>\n<p>当你以编程为职业时，也需要做到可以熟练使用上述工具。笔者花了很长时间才做到这点，也很后悔当初没有更早地学习如何使用这些工具。</p>\n<h3 id=\"161\">16.1　跟随练习</h3>\n<p>如果你使用的是 Ubuntu 或 UNIX 系统，那么计算机中会自带 Bash。如果使用的是 Windows 系统，其自带的命令行接口叫做<strong>命令提示符</strong>（Command Prompt），本章中并没有用到。最新版的 Windows 10 操作系统中已经提供了 Bash。可以前往网页 http://theselftaughtprogrammer.io/windows10bash 了解如何在 Windows 10 操作系统中使用 Bash。</p>\n<p>如果你的计算机是 Windows 操作系统，那么可以使用亚马逊的 AWS 服务创建一个运行 Ubuntu 的免费 Web 服务器。服务器的搭建很简单，而且 AWS 在编程圈子里使用也很广泛，因此对你来说这是非常有价值的经验。可以前往 http://theselftaughtprogrammer.io/aws 进行了解。</p>\n<p>如果使用的是 Windows 操作系统，又不想搭建服务器，那么可以打开网页 http://theselftaughtprogrammer.io/bashapp，里面有一个 Web 应用的链接，可以模拟 Bash 的行为，用来跟随本章中的大部分练习示例。</p>\n<p>接下来的两章中，可以使用 Windows 的命令操作符来完成练习示例。按下运行窗口键后，搜索 <code>Command Prompt</code> 即可打开。</p>\n<h3 id=\"162bash\">16.2　找到 Bash</h3>\n<p>如果你使用的是 Ubuntu，可以点击名为搜索本地和在线资源的图标，搜索 <code>Terminal</code> 即可找到 Bash；如果你使用的是 Mac，则可通过 Spotlight 搜索查找 Bash，如图 16-1 所示。</p>\n<p><img src=\"https://images.gitbook.cn/aabba550-7011-11e9-be31-a34bfde053f0\" alt=\"enter image description here\"></p>\n<p>图 16-1　Bash</p>\n<h3 id=\"163\">16.3　命令</h3>\n<p>Bash 与 Python 的 shell 类似，可以向其中输入命令（类似 Python 中的函数）。然后输入空格，以及传入命令的参数，按下回车键后，Bash 就会返回结果。<code>echo</code> 命令类似 Python 中的 <code>print</code> 函数。</p>\n<p>在本书或其他编程文档中看到美元符号后面跟着一个命令时，就意味着需要在命令行输入命令。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/junx62n</span>\n$ echo Hello, World!\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>首先键入的是命令 <code>echo</code>，然后是一个空格符，以及参数 <code>Hello, World!</code>。按下回车之后，Bash 就会打印出 <code>Hello, World!</code>。</p>\n<p>也可以从命令行直接使用 Python 等已经安装好的程序。输入命令 <code>python3</code>（在编写本书时，模拟 Bash 的 Web 应用还不支持 Python3。那么则输入 <code>Python</code> 使用 Python2）：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/htoospk</span></span>\n$ python3\n</code></pre>\n<p>现在可以执行 Python 代码了：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/jk2acua</span>\nprint(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>输入 <code>exit()</code> 可退出 Python。</p>\n<h3 id=\"164\">16.4　最近命令</h3>\n<p>可通过上下箭头按键，查看在 Bash 中近期执行的命令。如需查看所有最近命令的列表，可使用命令 <code>history</code> 查看：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/go2spbt</span>\n$ history\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>. echo Hello, World!\n</code></pre>\n<h3 id=\"165\">16.5　相对路径与绝对路径</h3>\n<p>操作系统中包含各种目录和文件。<strong>目录</strong>（directory）是文件夹的另一种叫法。所有的目录和文件都有一个路径，即目录或文件在操作系统中的存放地址。在使用 Bash 时，其必然是会位于某个目录中。可使用命令 <code>pwd[表示打印工作目录（working directory）]</code> 来打印当前所在的目录的名称：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/hptsqhp</span>\n$ pwd\n<span class=\"hljs-meta\">&gt;&gt;</span> /Users/coryalthoff\n</code></pre>\n<p>操作系统使用树状结构来表示其目录和目录位置。在计算机科学中，树状结构是一种非常重要的数据结构（本书第四部分会详细介绍）。在树状结构中，位于顶部的是根，根可以有多个分支，每个分支又可以拥有其他分支，以此类推，直至无穷。图 16-2 所示是一个表示操作系统中目录结构的树状结构示例：</p>\n<p><img src=\"https://images.gitbook.cn/21e6b200-7012-11e9-83ce-bf64b45f6e99\" alt=\"enter image description here\"></p>\n<p>图 16-2　树状结构</p>\n<p>树状结构的每个分支就是一个目录，包括根目录在内。该结构显示了目录之间是如何连接的。只要是在使用 Bash 时，就必然位于操作系统树状结构的某个位置。<strong>路径</strong>（path）就是表达该位置的一种方式。类 UNIX 操作系统中一个文件或目录的路径，有两种表示方式：<strong>绝对路径</strong>（absolute path）和<strong>相对路径</strong>（relative path）。</p>\n<p>绝对路径提供的是从根目录开始的文件或目录的位置，由树结构中的目录名称组成，按照与根目录之间的距离从近至远依次用斜杠分隔。例如笔者的计算机中 <code>bernie</code> 目录的绝对路径（如图 16-2 所示）是 <code>/home/bernie</code>。第一个斜杠表示的是根目录，之后是 <code>home</code> 目录，然后是一个斜杠和 <code>bernie</code> 目录的名称。</p>\n<p>表示目录在计算机中所处位置的另一种方法，是相对路径。相对路径是从当前工作目录开始，而非根目录。如果路径不是以斜杠开头，Bash 会明白使用的是相对路径。假设我们目前如上例中所示正位于图 16-2 所示的 <code>home</code> 目录下，<code>projects</code> 目录的相对路径则是 <code>bernie/projects</code>。如果我们位于 <code>home</code> 目录下，<code>bernie</code> 目录的相对路径就是 <code>bernie</code>。如果我们位于 <code>root</code> 目录下，<code>projects</code> 目录的相对路径则为 <code>home/bernie/projects</code>。</p>\n<h3 id=\"166\">16.6　导航</h3>\n<p>将绝对路径或相对路径作为参数传给命令 <code>cd</code>，即可改变当前所在的目录。输入 <code>cd</code> 命令，在之后输入绝对路径 <code>/</code>，前往操作系统的根目录。示例如下：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># http://tinyurl.com/hjgz79h</span>\n$ <span class=\"hljs-built_in\">cd</span> /\n</code></pre>\n<p>可通过命令 pwd 验证当前所在的位置：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/j6ax35s</span>\n$ pwd\n<span class=\"hljs-meta\">&gt;&gt;</span> /\n</code></pre>\n<p><code>ls</code> 命令可打印当前工作目录下的所有目录和文件夹：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/gw4d5yw</span>\n$ ls\n<span class=\"hljs-meta\">&gt;&gt;</span> bin dev initrd.img lost+found ...\n</code></pre>\n<p>将希望创建的目录名称传给 <code>mkdir</code> 命令，即可新建目录。目录名称中不能有空格。前往 <code>home</code> 目录（<code>~</code> 是类 UNIX 操作系统中 <code>home</code> 目录的快捷键），并使用 <code>mkdir</code> 命令创建一个名为 <code>tstp</code> 的新目录。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/zavhjeq</span>\n$ cd ~\n$ mkdir tstp\n</code></pre>\n<p>通过 <code>ls</code> 命令，验证新目录是否创建成功：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/hneq2f6</span>\n$ ls\n<span class=\"hljs-meta\">&gt;&gt;</span> tstp\n</code></pre>\n<p>接着，使用 <code>cd</code> 命令进入 <code>tstp</code> 目录。将 <code>tstp</code> 作为参数传给 <code>cd</code> 命令即可实现：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># http://tinyurl.com/zp3nb21</span>\n$ <span class=\"hljs-built_in\">cd</span> tstp\n</code></pre>\n<p><code>cd</code> 命令后接两个英文句号，可以回到上一层目录：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># http://tinyurl.com/z2gevk2</span>\n$ <span class=\"hljs-built_in\">cd</span> ..\n</code></pre>\n<p>使用命令 <code>rmdir</code> 可删除目录。这里使用该命令删除 <code>tstp</code> 目录：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/jkjjo6s</span></span>\n% rmdir tstp\n</code></pre>\n<p>最后，通过 <code>ls</code> 命令验证是否成功删除目录：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/z32xn2n</span></span>\n$ ls\n</code></pre>\n<h3 id=\"167\">16.7　旗标</h3>\n<p>命令支持一个叫旗标（flag）的概念，可以改变命令的执行方式。旗标对于命令来说，是一些值为 <code>True</code> 或 <code>False</code> 的执行选项。一个命令的所有旗标默认置为 <code>False</code>。如果向命令中添加一个旗标，Bash 将把该旗标的值设为 <code>True</code>，命令的执行方式也会随之改变。在旗标的名称前面加一个（-）或两个连字符（--），即可将旗标置为 <code>True</code>。</p>\n<p>例如，可在 <code>ls</code> 命令后加上旗标 <code>--author</code>，并将 <code>author</code> 旗标设置为 <code>True</code>。加上该旗标后，<code>ls</code> 命令的执行方式将会改变，除了打印目录下所有的目录和文件之外，还将打印创建目录或文件的作者名字。</p>\n<p>在 UNIX 系统中，需要在旗标前使用一个连字符：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/j4y5kz4</span>\n$ ls -author\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">13</span> coryalthoff <span class=\"hljs-number\">442</span>B Sep <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">17</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">25</span> Pictures\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">25</span> coryalthoff <span class=\"hljs-number\">850</span>B Nov <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">18</span><span class=\"hljs-symbol\">:</span>09 Documents\n</code></pre>\n<p>在 Linux 系统中，需使用两个连字符：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/hu9c54q</span>\n$ ls --author\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">13</span> coryalthoff <span class=\"hljs-number\">442</span>B Sep <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">17</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">25</span> Pictures\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">25</span> coryalthoff <span class=\"hljs-number\">850</span>B Nov <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">18</span><span class=\"hljs-symbol\">:</span>09 Documents\n</code></pre>\n<h3 id=\"168\">16.8　隐藏文件</h3>\n<p>操作系统和很多程序都会将数据保存在隐藏文件中。隐藏文件指的是默认不会展示给用户的文件，因为修改隐藏文件会影响依赖这些文件的程序。隐藏文件的名称以英文句点开头，如 <code>.hidden</code>。在 <code>ls</code> 命令后加上旗标 <code>-a</code>（表示所有文件），即可查看隐藏文件。<code>touch</code> 命令支持从命令行新建文件。</p>\n<p><code>touch</code> 命令可新建文件。这里使用该命令创建一个名为 <code>.self_taught</code> 的隐藏文件：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/hfawo8t</span></span>\n$ touch .self_taught\n</code></pre>\n<p>使用命令 <code>ls</code> 和 <code>ls-a</code> 检查是否可以看到隐藏文件。</p>\n<h3 id=\"169\">16.9　管道</h3>\n<p>在类 UNIX 操作性系统中，竖直线“<code>|</code>”被称为<strong>管道</strong>（pipe）。可使用管道将一个命令的输出，传入另一个命令作为输入。例如，可使用 <code>ls</code> 命令的输出，作为 <code>less</code> 命令的输入（需确保当前目录不是空目录）：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zjne9f5</span></span>\n$ ls | less\n&gt;&gt; Applications ...\n</code></pre>\n<p>执行结果是一个用 less 程序打开的文本文件，内容为 <code>ls</code> 命令的输出（按 <code>q</code> 推出 less 程序）。</p>\n<h3 id=\"1610\">16.10　环境变量</h3>\n<p><strong>环境变量</strong>（environment variable）是保存在操作系统中的变量，程序可通过这些变量获取当前运行环境的相关数据，如运行程序的计算机的名称，或运行程序的用户的名称。使用语法 <code>export[变量名]=[变量值]</code>，即可在 Bash 中新建一个环境变量。如需在 Bash 中引用环境变量，必须在其名称前加一个美元符号。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/jjbc9v2</span>\n$ export x=<span class=\"hljs-number\">100</span>\n$ echo $x\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>这样创建的环境变量只能存在于当前的 Bash 窗口。如果退出 Bash 之后再打开，输入 <code>echo $x</code> 将不会打印 <code>100</code>，因为环境变量 <code>x</code> 已经不存在了。</p>\n<p>将环境变量添加到类 UNIX 操作系统使用的一个隐藏文件中，可使得环境变量持久存在。该隐藏文件位于 <code>home</code> 目录下，名为 <code>.profile</code>。使用图形用户界面前往 <code>home</code> 目录。可在命令行输入 <code>pwd ~</code>，找到 <code>home</code> 目录的绝对路径。然后，使用文本编辑器创建一个名为 <code>.profile</code> 的文件，在第一行输入 <code>export x=100</code> 并保存文件。之后，退出并重新打开 Bash，这时就能够打印环境变量 <code>x</code> 了。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/j5wjwdf</span>\n$ echo $x\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>只要 <code>.profile</code> 文件中包含该变量，即可持久性地使用。从 <code>.profile</code> 中移除相关内容，即可删除变量。</p>\n<h3 id=\"1611\">16.11　用户</h3>\n<p>操作系统支持多用户使用。用户指的是使用操作系统的人。每个用户都分配了用户名和密码，可用来登录和使用操作系统。每个用户还有对应的权限：能够执行的操作范围。使用命令 <code>whoami</code> 可打印操作系统用户的名称（本节的示例无法在 Windows 系统的 Bash 或 Web 应用上复现）：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>　$ whoami\n<span class=\"hljs-meta\">&gt;&gt;</span> coryalthoff\n</code></pre>\n<p>正常情况下，打印的就是在安装操作系统时所创建的用户。但该用户并不是操作系统中权限最高的用户。权限最高的用户被称为根用户。每个系统都有一个根用户，可以创建或删除其他用户。</p>\n<p>由于安全原因，我们通常不会以根用户身份登录系统。在需要以根用户权限执行命令时，可在命令前加上 <code>sudo</code>（superuser do 的简称）。<code>sudo</code> 可在不影响操作系统安全性的前提下，让我们以根用户的身份执行命令。下面是通过 <code>sudo</code> 使用 <code>echo</code> 命令的示例：</p>\n<pre><code class=\"hljs ruby\">$ sudo echo Hello, World!\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>如果已经设置过密码，使用 <code>sudo</code> 时程序将要求你输入密码。<code>sudo</code> 会穿透那些保护操作系统的屏障，因此除非你自信命令不会损害操作系统，否则不要随便执行 <code>sudo</code> 命令。</p>\n<h3 id=\"1612\">16.12　了解更多</h3>\n<p>本章中只介绍了 Bash 的基础知识。如需了解更多，可访问 http://theselftaughtprogrammer.io/bash。</p>\n<h3 id=\"1613\">16.13　术语表</h3>\n<p><strong>命令行接口</strong>：一种可以支持用户输入指令，由操作系统执行的程序。</p>\n<p><strong>命令行</strong>：命令行接口的另一个叫法。</p>\n<p><strong>Bash</strong>：大部分类 UNIX 操作系统都具备的命令行接口实现。</p>\n<p><strong>命令提示符</strong>：Windows 操作系统提供的命令行接口。</p>\n<p><strong>目录</strong>：文件夹的另一个叫法。</p>\n<p><strong>工作目录</strong>：当前所在的目录。</p>\n<p><strong>路径</strong>：表示目录或文件在操作系统中的存放地址的一种方式。</p>\n<p><strong>绝对路径</strong>：绝对路径提供的是从根目录开始的文件或目录的位置。</p>\n<p><strong>相对路径</strong>：相对路径是从当前工作目录开始，而非根目录。</p>\n<p><strong>管道</strong>：竖直线 <code>|</code>。可使用管道将一个命令的输出，传入另一个命令作为输入。</p>\n<p><strong>环境变量</strong>：操作系统和其他程序用来保存数据的变量。</p>\n<p><strong>$PATH</strong>：在 Bash 中输入该命令时，Bash 将从名为 <code>'$PATH'</code> 的环境变量所保存的所有目录中查到对应命令。</p>\n<p><strong>用户</strong>：使用操作系统的人。</p>\n<p><strong>权限</strong>：操作系统用户可以执行的操作范围。</p>\n<p><strong>根用户</strong>：在操作系统中拥有最高权限的用户。</p>\n<h3 id=\"1614\">16.14　挑战练习</h3>\n<p>1．在 Bash 中打印 <code>Self-taught</code>。</p>\n<p>2．使用绝对路径和相对路径，从一个目录前往 <code>home</code> 目录。</p>\n<p>3．创建一个名为 <code>$python_projects</code> 的环境变量，其值为保存 Python 文件的目录的绝对路径。将变量保存在 <code>.profile</code> 文件中，然后使用 <code>cd $python_projects</code> 命令进入该目录。</p>\n</div></article>\n</body>\n</html>","source":"_posts/Python无师自通/16_bash.html","raw":"---\ntitle: Bash\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Bash</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#161\">16.1　跟随练习</a></li>\n<li><a href=\"#162bash\">16.2　找到 Bash</a></li>\n<li><a href=\"#163\">16.3　命令</a></li>\n<li><a href=\"#164\">16.4　最近命令</a></li>\n<li><a href=\"#165\">16.5　相对路径与绝对路径</a></li>\n<li><a href=\"#166\">16.6　导航</a></li>\n<li><a href=\"#167\">16.7　旗标</a></li>\n<li><a href=\"#168\">16.8　隐藏文件</a></li>\n<li><a href=\"#169\">16.9　管道</a></li>\n<li><a href=\"#1610\">16.10　环境变量</a></li>\n<li><a href=\"#1611\">16.11　用户</a></li>\n<li><a href=\"#1612\">16.12　了解更多</a></li>\n<li><a href=\"#1613\">16.13　术语表</a></li>\n<li><a href=\"#1614\">16.14　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“除了计算机编程外，我想不出还有其他让我感兴趣的工作。我可以无中生有地创造出精美的范式和结构，在此过程中也解决了无数的小谜团。</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——皮特 · 范德林登（Peter Van Der Linden）</span></p>\n</blockquote>\n<p>本章将学习使用一种被称为 <strong>Bash</strong> 的<strong>命令行接口</strong>（command-line interface）。命令行接口是一种可以支持用户输入指令，并由操作系统执行的程序。Bash 则是大部分类 UNIX 操作系统都具备的命令行接口实现。因此，本章中命令行接口和<strong>命令行</strong>可交替使用。</p>\n<p>笔者刚得到第一份编程工作时，犯了将所有时间都用来练习编程的错误。当然，要想做到职业编程的水平，需要一定的天赋。但是还有其他应该掌握的技能，比如命令行的使用。命令行是除了编码之外，其他工作的“控制中心”。</p>\n<p>例如，本书后续章节将会提到如何使用包管理器安装他人的程序，以及如何使用版本控制系统与他人进行协作。这两个工具都需要从命令行进行操作。另外，如今大部分软件都需要从互联网获取数据，而世界上大部分 Web 服务器运行的都是 Linux 系统。这些服务器没有图形化的用户界面，只能通过命令行访问。</p>\n<p>命令行、包管理器、正则表达式和版本控制，这些都是程序员工具库中的核心成员。笔者所共事过的团队中，没有成员不擅长使用这些工具。</p>\n<p>当你以编程为职业时，也需要做到可以熟练使用上述工具。笔者花了很长时间才做到这点，也很后悔当初没有更早地学习如何使用这些工具。</p>\n<h3 id=\"161\">16.1　跟随练习</h3>\n<p>如果你使用的是 Ubuntu 或 UNIX 系统，那么计算机中会自带 Bash。如果使用的是 Windows 系统，其自带的命令行接口叫做<strong>命令提示符</strong>（Command Prompt），本章中并没有用到。最新版的 Windows 10 操作系统中已经提供了 Bash。可以前往网页 http://theselftaughtprogrammer.io/windows10bash 了解如何在 Windows 10 操作系统中使用 Bash。</p>\n<p>如果你的计算机是 Windows 操作系统，那么可以使用亚马逊的 AWS 服务创建一个运行 Ubuntu 的免费 Web 服务器。服务器的搭建很简单，而且 AWS 在编程圈子里使用也很广泛，因此对你来说这是非常有价值的经验。可以前往 http://theselftaughtprogrammer.io/aws 进行了解。</p>\n<p>如果使用的是 Windows 操作系统，又不想搭建服务器，那么可以打开网页 http://theselftaughtprogrammer.io/bashapp，里面有一个 Web 应用的链接，可以模拟 Bash 的行为，用来跟随本章中的大部分练习示例。</p>\n<p>接下来的两章中，可以使用 Windows 的命令操作符来完成练习示例。按下运行窗口键后，搜索 <code>Command Prompt</code> 即可打开。</p>\n<h3 id=\"162bash\">16.2　找到 Bash</h3>\n<p>如果你使用的是 Ubuntu，可以点击名为搜索本地和在线资源的图标，搜索 <code>Terminal</code> 即可找到 Bash；如果你使用的是 Mac，则可通过 Spotlight 搜索查找 Bash，如图 16-1 所示。</p>\n<p><img src=\"https://images.gitbook.cn/aabba550-7011-11e9-be31-a34bfde053f0\" alt=\"enter image description here\"></p>\n<p>图 16-1　Bash</p>\n<h3 id=\"163\">16.3　命令</h3>\n<p>Bash 与 Python 的 shell 类似，可以向其中输入命令（类似 Python 中的函数）。然后输入空格，以及传入命令的参数，按下回车键后，Bash 就会返回结果。<code>echo</code> 命令类似 Python 中的 <code>print</code> 函数。</p>\n<p>在本书或其他编程文档中看到美元符号后面跟着一个命令时，就意味着需要在命令行输入命令。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/junx62n</span>\n$ echo Hello, World!\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>首先键入的是命令 <code>echo</code>，然后是一个空格符，以及参数 <code>Hello, World!</code>。按下回车之后，Bash 就会打印出 <code>Hello, World!</code>。</p>\n<p>也可以从命令行直接使用 Python 等已经安装好的程序。输入命令 <code>python3</code>（在编写本书时，模拟 Bash 的 Web 应用还不支持 Python3。那么则输入 <code>Python</code> 使用 Python2）：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/htoospk</span></span>\n$ python3\n</code></pre>\n<p>现在可以执行 Python 代码了：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/jk2acua</span>\nprint(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>输入 <code>exit()</code> 可退出 Python。</p>\n<h3 id=\"164\">16.4　最近命令</h3>\n<p>可通过上下箭头按键，查看在 Bash 中近期执行的命令。如需查看所有最近命令的列表，可使用命令 <code>history</code> 查看：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/go2spbt</span>\n$ history\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>. echo Hello, World!\n</code></pre>\n<h3 id=\"165\">16.5　相对路径与绝对路径</h3>\n<p>操作系统中包含各种目录和文件。<strong>目录</strong>（directory）是文件夹的另一种叫法。所有的目录和文件都有一个路径，即目录或文件在操作系统中的存放地址。在使用 Bash 时，其必然是会位于某个目录中。可使用命令 <code>pwd[表示打印工作目录（working directory）]</code> 来打印当前所在的目录的名称：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/hptsqhp</span>\n$ pwd\n<span class=\"hljs-meta\">&gt;&gt;</span> /Users/coryalthoff\n</code></pre>\n<p>操作系统使用树状结构来表示其目录和目录位置。在计算机科学中，树状结构是一种非常重要的数据结构（本书第四部分会详细介绍）。在树状结构中，位于顶部的是根，根可以有多个分支，每个分支又可以拥有其他分支，以此类推，直至无穷。图 16-2 所示是一个表示操作系统中目录结构的树状结构示例：</p>\n<p><img src=\"https://images.gitbook.cn/21e6b200-7012-11e9-83ce-bf64b45f6e99\" alt=\"enter image description here\"></p>\n<p>图 16-2　树状结构</p>\n<p>树状结构的每个分支就是一个目录，包括根目录在内。该结构显示了目录之间是如何连接的。只要是在使用 Bash 时，就必然位于操作系统树状结构的某个位置。<strong>路径</strong>（path）就是表达该位置的一种方式。类 UNIX 操作系统中一个文件或目录的路径，有两种表示方式：<strong>绝对路径</strong>（absolute path）和<strong>相对路径</strong>（relative path）。</p>\n<p>绝对路径提供的是从根目录开始的文件或目录的位置，由树结构中的目录名称组成，按照与根目录之间的距离从近至远依次用斜杠分隔。例如笔者的计算机中 <code>bernie</code> 目录的绝对路径（如图 16-2 所示）是 <code>/home/bernie</code>。第一个斜杠表示的是根目录，之后是 <code>home</code> 目录，然后是一个斜杠和 <code>bernie</code> 目录的名称。</p>\n<p>表示目录在计算机中所处位置的另一种方法，是相对路径。相对路径是从当前工作目录开始，而非根目录。如果路径不是以斜杠开头，Bash 会明白使用的是相对路径。假设我们目前如上例中所示正位于图 16-2 所示的 <code>home</code> 目录下，<code>projects</code> 目录的相对路径则是 <code>bernie/projects</code>。如果我们位于 <code>home</code> 目录下，<code>bernie</code> 目录的相对路径就是 <code>bernie</code>。如果我们位于 <code>root</code> 目录下，<code>projects</code> 目录的相对路径则为 <code>home/bernie/projects</code>。</p>\n<h3 id=\"166\">16.6　导航</h3>\n<p>将绝对路径或相对路径作为参数传给命令 <code>cd</code>，即可改变当前所在的目录。输入 <code>cd</code> 命令，在之后输入绝对路径 <code>/</code>，前往操作系统的根目录。示例如下：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># http://tinyurl.com/hjgz79h</span>\n$ <span class=\"hljs-built_in\">cd</span> /\n</code></pre>\n<p>可通过命令 pwd 验证当前所在的位置：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/j6ax35s</span>\n$ pwd\n<span class=\"hljs-meta\">&gt;&gt;</span> /\n</code></pre>\n<p><code>ls</code> 命令可打印当前工作目录下的所有目录和文件夹：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/gw4d5yw</span>\n$ ls\n<span class=\"hljs-meta\">&gt;&gt;</span> bin dev initrd.img lost+found ...\n</code></pre>\n<p>将希望创建的目录名称传给 <code>mkdir</code> 命令，即可新建目录。目录名称中不能有空格。前往 <code>home</code> 目录（<code>~</code> 是类 UNIX 操作系统中 <code>home</code> 目录的快捷键），并使用 <code>mkdir</code> 命令创建一个名为 <code>tstp</code> 的新目录。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/zavhjeq</span>\n$ cd ~\n$ mkdir tstp\n</code></pre>\n<p>通过 <code>ls</code> 命令，验证新目录是否创建成功：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/hneq2f6</span>\n$ ls\n<span class=\"hljs-meta\">&gt;&gt;</span> tstp\n</code></pre>\n<p>接着，使用 <code>cd</code> 命令进入 <code>tstp</code> 目录。将 <code>tstp</code> 作为参数传给 <code>cd</code> 命令即可实现：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># http://tinyurl.com/zp3nb21</span>\n$ <span class=\"hljs-built_in\">cd</span> tstp\n</code></pre>\n<p><code>cd</code> 命令后接两个英文句号，可以回到上一层目录：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># http://tinyurl.com/z2gevk2</span>\n$ <span class=\"hljs-built_in\">cd</span> ..\n</code></pre>\n<p>使用命令 <code>rmdir</code> 可删除目录。这里使用该命令删除 <code>tstp</code> 目录：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/jkjjo6s</span></span>\n% rmdir tstp\n</code></pre>\n<p>最后，通过 <code>ls</code> 命令验证是否成功删除目录：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/z32xn2n</span></span>\n$ ls\n</code></pre>\n<h3 id=\"167\">16.7　旗标</h3>\n<p>命令支持一个叫旗标（flag）的概念，可以改变命令的执行方式。旗标对于命令来说，是一些值为 <code>True</code> 或 <code>False</code> 的执行选项。一个命令的所有旗标默认置为 <code>False</code>。如果向命令中添加一个旗标，Bash 将把该旗标的值设为 <code>True</code>，命令的执行方式也会随之改变。在旗标的名称前面加一个（-）或两个连字符（--），即可将旗标置为 <code>True</code>。</p>\n<p>例如，可在 <code>ls</code> 命令后加上旗标 <code>--author</code>，并将 <code>author</code> 旗标设置为 <code>True</code>。加上该旗标后，<code>ls</code> 命令的执行方式将会改变，除了打印目录下所有的目录和文件之外，还将打印创建目录或文件的作者名字。</p>\n<p>在 UNIX 系统中，需要在旗标前使用一个连字符：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/j4y5kz4</span>\n$ ls -author\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">13</span> coryalthoff <span class=\"hljs-number\">442</span>B Sep <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">17</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">25</span> Pictures\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">25</span> coryalthoff <span class=\"hljs-number\">850</span>B Nov <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">18</span><span class=\"hljs-symbol\">:</span>09 Documents\n</code></pre>\n<p>在 Linux 系统中，需使用两个连字符：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/hu9c54q</span>\n$ ls --author\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">13</span> coryalthoff <span class=\"hljs-number\">442</span>B Sep <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">17</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">25</span> Pictures\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">25</span> coryalthoff <span class=\"hljs-number\">850</span>B Nov <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">18</span><span class=\"hljs-symbol\">:</span>09 Documents\n</code></pre>\n<h3 id=\"168\">16.8　隐藏文件</h3>\n<p>操作系统和很多程序都会将数据保存在隐藏文件中。隐藏文件指的是默认不会展示给用户的文件，因为修改隐藏文件会影响依赖这些文件的程序。隐藏文件的名称以英文句点开头，如 <code>.hidden</code>。在 <code>ls</code> 命令后加上旗标 <code>-a</code>（表示所有文件），即可查看隐藏文件。<code>touch</code> 命令支持从命令行新建文件。</p>\n<p><code>touch</code> 命令可新建文件。这里使用该命令创建一个名为 <code>.self_taught</code> 的隐藏文件：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/hfawo8t</span></span>\n$ touch .self_taught\n</code></pre>\n<p>使用命令 <code>ls</code> 和 <code>ls-a</code> 检查是否可以看到隐藏文件。</p>\n<h3 id=\"169\">16.9　管道</h3>\n<p>在类 UNIX 操作性系统中，竖直线“<code>|</code>”被称为<strong>管道</strong>（pipe）。可使用管道将一个命令的输出，传入另一个命令作为输入。例如，可使用 <code>ls</code> 命令的输出，作为 <code>less</code> 命令的输入（需确保当前目录不是空目录）：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zjne9f5</span></span>\n$ ls | less\n&gt;&gt; Applications ...\n</code></pre>\n<p>执行结果是一个用 less 程序打开的文本文件，内容为 <code>ls</code> 命令的输出（按 <code>q</code> 推出 less 程序）。</p>\n<h3 id=\"1610\">16.10　环境变量</h3>\n<p><strong>环境变量</strong>（environment variable）是保存在操作系统中的变量，程序可通过这些变量获取当前运行环境的相关数据，如运行程序的计算机的名称，或运行程序的用户的名称。使用语法 <code>export[变量名]=[变量值]</code>，即可在 Bash 中新建一个环境变量。如需在 Bash 中引用环境变量，必须在其名称前加一个美元符号。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/jjbc9v2</span>\n$ export x=<span class=\"hljs-number\">100</span>\n$ echo $x\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>这样创建的环境变量只能存在于当前的 Bash 窗口。如果退出 Bash 之后再打开，输入 <code>echo $x</code> 将不会打印 <code>100</code>，因为环境变量 <code>x</code> 已经不存在了。</p>\n<p>将环境变量添加到类 UNIX 操作系统使用的一个隐藏文件中，可使得环境变量持久存在。该隐藏文件位于 <code>home</code> 目录下，名为 <code>.profile</code>。使用图形用户界面前往 <code>home</code> 目录。可在命令行输入 <code>pwd ~</code>，找到 <code>home</code> 目录的绝对路径。然后，使用文本编辑器创建一个名为 <code>.profile</code> 的文件，在第一行输入 <code>export x=100</code> 并保存文件。之后，退出并重新打开 Bash，这时就能够打印环境变量 <code>x</code> 了。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/j5wjwdf</span>\n$ echo $x\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>只要 <code>.profile</code> 文件中包含该变量，即可持久性地使用。从 <code>.profile</code> 中移除相关内容，即可删除变量。</p>\n<h3 id=\"1611\">16.11　用户</h3>\n<p>操作系统支持多用户使用。用户指的是使用操作系统的人。每个用户都分配了用户名和密码，可用来登录和使用操作系统。每个用户还有对应的权限：能够执行的操作范围。使用命令 <code>whoami</code> 可打印操作系统用户的名称（本节的示例无法在 Windows 系统的 Bash 或 Web 应用上复现）：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>　$ whoami\n<span class=\"hljs-meta\">&gt;&gt;</span> coryalthoff\n</code></pre>\n<p>正常情况下，打印的就是在安装操作系统时所创建的用户。但该用户并不是操作系统中权限最高的用户。权限最高的用户被称为根用户。每个系统都有一个根用户，可以创建或删除其他用户。</p>\n<p>由于安全原因，我们通常不会以根用户身份登录系统。在需要以根用户权限执行命令时，可在命令前加上 <code>sudo</code>（superuser do 的简称）。<code>sudo</code> 可在不影响操作系统安全性的前提下，让我们以根用户的身份执行命令。下面是通过 <code>sudo</code> 使用 <code>echo</code> 命令的示例：</p>\n<pre><code class=\"hljs ruby\">$ sudo echo Hello, World!\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>如果已经设置过密码，使用 <code>sudo</code> 时程序将要求你输入密码。<code>sudo</code> 会穿透那些保护操作系统的屏障，因此除非你自信命令不会损害操作系统，否则不要随便执行 <code>sudo</code> 命令。</p>\n<h3 id=\"1612\">16.12　了解更多</h3>\n<p>本章中只介绍了 Bash 的基础知识。如需了解更多，可访问 http://theselftaughtprogrammer.io/bash。</p>\n<h3 id=\"1613\">16.13　术语表</h3>\n<p><strong>命令行接口</strong>：一种可以支持用户输入指令，由操作系统执行的程序。</p>\n<p><strong>命令行</strong>：命令行接口的另一个叫法。</p>\n<p><strong>Bash</strong>：大部分类 UNIX 操作系统都具备的命令行接口实现。</p>\n<p><strong>命令提示符</strong>：Windows 操作系统提供的命令行接口。</p>\n<p><strong>目录</strong>：文件夹的另一个叫法。</p>\n<p><strong>工作目录</strong>：当前所在的目录。</p>\n<p><strong>路径</strong>：表示目录或文件在操作系统中的存放地址的一种方式。</p>\n<p><strong>绝对路径</strong>：绝对路径提供的是从根目录开始的文件或目录的位置。</p>\n<p><strong>相对路径</strong>：相对路径是从当前工作目录开始，而非根目录。</p>\n<p><strong>管道</strong>：竖直线 <code>|</code>。可使用管道将一个命令的输出，传入另一个命令作为输入。</p>\n<p><strong>环境变量</strong>：操作系统和其他程序用来保存数据的变量。</p>\n<p><strong>$PATH</strong>：在 Bash 中输入该命令时，Bash 将从名为 <code>'$PATH'</code> 的环境变量所保存的所有目录中查到对应命令。</p>\n<p><strong>用户</strong>：使用操作系统的人。</p>\n<p><strong>权限</strong>：操作系统用户可以执行的操作范围。</p>\n<p><strong>根用户</strong>：在操作系统中拥有最高权限的用户。</p>\n<h3 id=\"1614\">16.14　挑战练习</h3>\n<p>1．在 Bash 中打印 <code>Self-taught</code>。</p>\n<p>2．使用绝对路径和相对路径，从一个目录前往 <code>home</code> 目录。</p>\n<p>3．创建一个名为 <code>$python_projects</code> 的环境变量，其值为保存 Python 文件的目录的绝对路径。将变量保存在 <code>.profile</code> 文件中，然后使用 <code>cd $python_projects</code> 命令进入该目录。</p>\n</div></article>\n</body>\n</html>","slug":"Python无师自通/16_bash","published":1,"date":"2019-06-14T04:49:28.566Z","updated":"2019-06-14T04:49:28.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvm4q9200003eh7hcu93j6g","content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>Bash</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#161\">16.1　跟随练习</a></li>\n<li><a href=\"#162bash\">16.2　找到 Bash</a></li>\n<li><a href=\"#163\">16.3　命令</a></li>\n<li><a href=\"#164\">16.4　最近命令</a></li>\n<li><a href=\"#165\">16.5　相对路径与绝对路径</a></li>\n<li><a href=\"#166\">16.6　导航</a></li>\n<li><a href=\"#167\">16.7　旗标</a></li>\n<li><a href=\"#168\">16.8　隐藏文件</a></li>\n<li><a href=\"#169\">16.9　管道</a></li>\n<li><a href=\"#1610\">16.10　环境变量</a></li>\n<li><a href=\"#1611\">16.11　用户</a></li>\n<li><a href=\"#1612\">16.12　了解更多</a></li>\n<li><a href=\"#1613\">16.13　术语表</a></li>\n<li><a href=\"#1614\">16.14　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“除了计算机编程外，我想不出还有其他让我感兴趣的工作。我可以无中生有地创造出精美的范式和结构，在此过程中也解决了无数的小谜团。</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——皮特 · 范德林登（Peter Van Der Linden）</span></p>\n</blockquote>\n<p>本章将学习使用一种被称为 <strong>Bash</strong> 的<strong>命令行接口</strong>（command-line interface）。命令行接口是一种可以支持用户输入指令，并由操作系统执行的程序。Bash 则是大部分类 UNIX 操作系统都具备的命令行接口实现。因此，本章中命令行接口和<strong>命令行</strong>可交替使用。</p>\n<p>笔者刚得到第一份编程工作时，犯了将所有时间都用来练习编程的错误。当然，要想做到职业编程的水平，需要一定的天赋。但是还有其他应该掌握的技能，比如命令行的使用。命令行是除了编码之外，其他工作的“控制中心”。</p>\n<p>例如，本书后续章节将会提到如何使用包管理器安装他人的程序，以及如何使用版本控制系统与他人进行协作。这两个工具都需要从命令行进行操作。另外，如今大部分软件都需要从互联网获取数据，而世界上大部分 Web 服务器运行的都是 Linux 系统。这些服务器没有图形化的用户界面，只能通过命令行访问。</p>\n<p>命令行、包管理器、正则表达式和版本控制，这些都是程序员工具库中的核心成员。笔者所共事过的团队中，没有成员不擅长使用这些工具。</p>\n<p>当你以编程为职业时，也需要做到可以熟练使用上述工具。笔者花了很长时间才做到这点，也很后悔当初没有更早地学习如何使用这些工具。</p>\n<h3 id=\"161\">16.1　跟随练习</h3>\n<p>如果你使用的是 Ubuntu 或 UNIX 系统，那么计算机中会自带 Bash。如果使用的是 Windows 系统，其自带的命令行接口叫做<strong>命令提示符</strong>（Command Prompt），本章中并没有用到。最新版的 Windows 10 操作系统中已经提供了 Bash。可以前往网页 http://theselftaughtprogrammer.io/windows10bash 了解如何在 Windows 10 操作系统中使用 Bash。</p>\n<p>如果你的计算机是 Windows 操作系统，那么可以使用亚马逊的 AWS 服务创建一个运行 Ubuntu 的免费 Web 服务器。服务器的搭建很简单，而且 AWS 在编程圈子里使用也很广泛，因此对你来说这是非常有价值的经验。可以前往 http://theselftaughtprogrammer.io/aws 进行了解。</p>\n<p>如果使用的是 Windows 操作系统，又不想搭建服务器，那么可以打开网页 http://theselftaughtprogrammer.io/bashapp，里面有一个 Web 应用的链接，可以模拟 Bash 的行为，用来跟随本章中的大部分练习示例。</p>\n<p>接下来的两章中，可以使用 Windows 的命令操作符来完成练习示例。按下运行窗口键后，搜索 <code>Command Prompt</code> 即可打开。</p>\n<h3 id=\"162bash\">16.2　找到 Bash</h3>\n<p>如果你使用的是 Ubuntu，可以点击名为搜索本地和在线资源的图标，搜索 <code>Terminal</code> 即可找到 Bash；如果你使用的是 Mac，则可通过 Spotlight 搜索查找 Bash，如图 16-1 所示。</p>\n<p><img src=\"https://images.gitbook.cn/aabba550-7011-11e9-be31-a34bfde053f0\" alt=\"enter image description here\"></p>\n<p>图 16-1　Bash</p>\n<h3 id=\"163\">16.3　命令</h3>\n<p>Bash 与 Python 的 shell 类似，可以向其中输入命令（类似 Python 中的函数）。然后输入空格，以及传入命令的参数，按下回车键后，Bash 就会返回结果。<code>echo</code> 命令类似 Python 中的 <code>print</code> 函数。</p>\n<p>在本书或其他编程文档中看到美元符号后面跟着一个命令时，就意味着需要在命令行输入命令。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/junx62n</span>\n$ echo Hello, World!\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>首先键入的是命令 <code>echo</code>，然后是一个空格符，以及参数 <code>Hello, World!</code>。按下回车之后，Bash 就会打印出 <code>Hello, World!</code>。</p>\n<p>也可以从命令行直接使用 Python 等已经安装好的程序。输入命令 <code>python3</code>（在编写本书时，模拟 Bash 的 Web 应用还不支持 Python3。那么则输入 <code>Python</code> 使用 Python2）：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/htoospk</span></span>\n$ python3\n</code></pre>\n<p>现在可以执行 Python 代码了：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/jk2acua</span>\nprint(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>输入 <code>exit()</code> 可退出 Python。</p>\n<h3 id=\"164\">16.4　最近命令</h3>\n<p>可通过上下箭头按键，查看在 Bash 中近期执行的命令。如需查看所有最近命令的列表，可使用命令 <code>history</code> 查看：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/go2spbt</span>\n$ history\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>. echo Hello, World!\n</code></pre>\n<h3 id=\"165\">16.5　相对路径与绝对路径</h3>\n<p>操作系统中包含各种目录和文件。<strong>目录</strong>（directory）是文件夹的另一种叫法。所有的目录和文件都有一个路径，即目录或文件在操作系统中的存放地址。在使用 Bash 时，其必然是会位于某个目录中。可使用命令 <code>pwd[表示打印工作目录（working directory）]</code> 来打印当前所在的目录的名称：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/hptsqhp</span>\n$ pwd\n<span class=\"hljs-meta\">&gt;&gt;</span> /Users/coryalthoff\n</code></pre>\n<p>操作系统使用树状结构来表示其目录和目录位置。在计算机科学中，树状结构是一种非常重要的数据结构（本书第四部分会详细介绍）。在树状结构中，位于顶部的是根，根可以有多个分支，每个分支又可以拥有其他分支，以此类推，直至无穷。图 16-2 所示是一个表示操作系统中目录结构的树状结构示例：</p>\n<p><img src=\"https://images.gitbook.cn/21e6b200-7012-11e9-83ce-bf64b45f6e99\" alt=\"enter image description here\"></p>\n<p>图 16-2　树状结构</p>\n<p>树状结构的每个分支就是一个目录，包括根目录在内。该结构显示了目录之间是如何连接的。只要是在使用 Bash 时，就必然位于操作系统树状结构的某个位置。<strong>路径</strong>（path）就是表达该位置的一种方式。类 UNIX 操作系统中一个文件或目录的路径，有两种表示方式：<strong>绝对路径</strong>（absolute path）和<strong>相对路径</strong>（relative path）。</p>\n<p>绝对路径提供的是从根目录开始的文件或目录的位置，由树结构中的目录名称组成，按照与根目录之间的距离从近至远依次用斜杠分隔。例如笔者的计算机中 <code>bernie</code> 目录的绝对路径（如图 16-2 所示）是 <code>/home/bernie</code>。第一个斜杠表示的是根目录，之后是 <code>home</code> 目录，然后是一个斜杠和 <code>bernie</code> 目录的名称。</p>\n<p>表示目录在计算机中所处位置的另一种方法，是相对路径。相对路径是从当前工作目录开始，而非根目录。如果路径不是以斜杠开头，Bash 会明白使用的是相对路径。假设我们目前如上例中所示正位于图 16-2 所示的 <code>home</code> 目录下，<code>projects</code> 目录的相对路径则是 <code>bernie/projects</code>。如果我们位于 <code>home</code> 目录下，<code>bernie</code> 目录的相对路径就是 <code>bernie</code>。如果我们位于 <code>root</code> 目录下，<code>projects</code> 目录的相对路径则为 <code>home/bernie/projects</code>。</p>\n<h3 id=\"166\">16.6　导航</h3>\n<p>将绝对路径或相对路径作为参数传给命令 <code>cd</code>，即可改变当前所在的目录。输入 <code>cd</code> 命令，在之后输入绝对路径 <code>/</code>，前往操作系统的根目录。示例如下：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># http://tinyurl.com/hjgz79h</span>\n$ <span class=\"hljs-built_in\">cd</span> /\n</code></pre>\n<p>可通过命令 pwd 验证当前所在的位置：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/j6ax35s</span>\n$ pwd\n<span class=\"hljs-meta\">&gt;&gt;</span> /\n</code></pre>\n<p><code>ls</code> 命令可打印当前工作目录下的所有目录和文件夹：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/gw4d5yw</span>\n$ ls\n<span class=\"hljs-meta\">&gt;&gt;</span> bin dev initrd.img lost+found ...\n</code></pre>\n<p>将希望创建的目录名称传给 <code>mkdir</code> 命令，即可新建目录。目录名称中不能有空格。前往 <code>home</code> 目录（<code>~</code> 是类 UNIX 操作系统中 <code>home</code> 目录的快捷键），并使用 <code>mkdir</code> 命令创建一个名为 <code>tstp</code> 的新目录。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/zavhjeq</span>\n$ cd ~\n$ mkdir tstp\n</code></pre>\n<p>通过 <code>ls</code> 命令，验证新目录是否创建成功：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/hneq2f6</span>\n$ ls\n<span class=\"hljs-meta\">&gt;&gt;</span> tstp\n</code></pre>\n<p>接着，使用 <code>cd</code> 命令进入 <code>tstp</code> 目录。将 <code>tstp</code> 作为参数传给 <code>cd</code> 命令即可实现：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># http://tinyurl.com/zp3nb21</span>\n$ <span class=\"hljs-built_in\">cd</span> tstp\n</code></pre>\n<p><code>cd</code> 命令后接两个英文句号，可以回到上一层目录：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># http://tinyurl.com/z2gevk2</span>\n$ <span class=\"hljs-built_in\">cd</span> ..\n</code></pre>\n<p>使用命令 <code>rmdir</code> 可删除目录。这里使用该命令删除 <code>tstp</code> 目录：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/jkjjo6s</span></span>\n% rmdir tstp\n</code></pre>\n<p>最后，通过 <code>ls</code> 命令验证是否成功删除目录：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/z32xn2n</span></span>\n$ ls\n</code></pre>\n<h3 id=\"167\">16.7　旗标</h3>\n<p>命令支持一个叫旗标（flag）的概念，可以改变命令的执行方式。旗标对于命令来说，是一些值为 <code>True</code> 或 <code>False</code> 的执行选项。一个命令的所有旗标默认置为 <code>False</code>。如果向命令中添加一个旗标，Bash 将把该旗标的值设为 <code>True</code>，命令的执行方式也会随之改变。在旗标的名称前面加一个（-）或两个连字符（--），即可将旗标置为 <code>True</code>。</p>\n<p>例如，可在 <code>ls</code> 命令后加上旗标 <code>--author</code>，并将 <code>author</code> 旗标设置为 <code>True</code>。加上该旗标后，<code>ls</code> 命令的执行方式将会改变，除了打印目录下所有的目录和文件之外，还将打印创建目录或文件的作者名字。</p>\n<p>在 UNIX 系统中，需要在旗标前使用一个连字符：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/j4y5kz4</span>\n$ ls -author\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">13</span> coryalthoff <span class=\"hljs-number\">442</span>B Sep <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">17</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">25</span> Pictures\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">25</span> coryalthoff <span class=\"hljs-number\">850</span>B Nov <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">18</span><span class=\"hljs-symbol\">:</span>09 Documents\n</code></pre>\n<p>在 Linux 系统中，需使用两个连字符：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/hu9c54q</span>\n$ ls --author\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">13</span> coryalthoff <span class=\"hljs-number\">442</span>B Sep <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">17</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">25</span> Pictures\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">25</span> coryalthoff <span class=\"hljs-number\">850</span>B Nov <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">18</span><span class=\"hljs-symbol\">:</span>09 Documents\n</code></pre>\n<h3 id=\"168\">16.8　隐藏文件</h3>\n<p>操作系统和很多程序都会将数据保存在隐藏文件中。隐藏文件指的是默认不会展示给用户的文件，因为修改隐藏文件会影响依赖这些文件的程序。隐藏文件的名称以英文句点开头，如 <code>.hidden</code>。在 <code>ls</code> 命令后加上旗标 <code>-a</code>（表示所有文件），即可查看隐藏文件。<code>touch</code> 命令支持从命令行新建文件。</p>\n<p><code>touch</code> 命令可新建文件。这里使用该命令创建一个名为 <code>.self_taught</code> 的隐藏文件：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/hfawo8t</span></span>\n$ touch .self_taught\n</code></pre>\n<p>使用命令 <code>ls</code> 和 <code>ls-a</code> 检查是否可以看到隐藏文件。</p>\n<h3 id=\"169\">16.9　管道</h3>\n<p>在类 UNIX 操作性系统中，竖直线“<code>|</code>”被称为<strong>管道</strong>（pipe）。可使用管道将一个命令的输出，传入另一个命令作为输入。例如，可使用 <code>ls</code> 命令的输出，作为 <code>less</code> 命令的输入（需确保当前目录不是空目录）：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zjne9f5</span></span>\n$ ls | less\n&gt;&gt; Applications ...\n</code></pre>\n<p>执行结果是一个用 less 程序打开的文本文件，内容为 <code>ls</code> 命令的输出（按 <code>q</code> 推出 less 程序）。</p>\n<h3 id=\"1610\">16.10　环境变量</h3>\n<p><strong>环境变量</strong>（environment variable）是保存在操作系统中的变量，程序可通过这些变量获取当前运行环境的相关数据，如运行程序的计算机的名称，或运行程序的用户的名称。使用语法 <code>export[变量名]=[变量值]</code>，即可在 Bash 中新建一个环境变量。如需在 Bash 中引用环境变量，必须在其名称前加一个美元符号。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/jjbc9v2</span>\n$ export x=<span class=\"hljs-number\">100</span>\n$ echo $x\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>这样创建的环境变量只能存在于当前的 Bash 窗口。如果退出 Bash 之后再打开，输入 <code>echo $x</code> 将不会打印 <code>100</code>，因为环境变量 <code>x</code> 已经不存在了。</p>\n<p>将环境变量添加到类 UNIX 操作系统使用的一个隐藏文件中，可使得环境变量持久存在。该隐藏文件位于 <code>home</code> 目录下，名为 <code>.profile</code>。使用图形用户界面前往 <code>home</code> 目录。可在命令行输入 <code>pwd ~</code>，找到 <code>home</code> 目录的绝对路径。然后，使用文本编辑器创建一个名为 <code>.profile</code> 的文件，在第一行输入 <code>export x=100</code> 并保存文件。之后，退出并重新打开 Bash，这时就能够打印环境变量 <code>x</code> 了。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/j5wjwdf</span>\n$ echo $x\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>只要 <code>.profile</code> 文件中包含该变量，即可持久性地使用。从 <code>.profile</code> 中移除相关内容，即可删除变量。</p>\n<h3 id=\"1611\">16.11　用户</h3>\n<p>操作系统支持多用户使用。用户指的是使用操作系统的人。每个用户都分配了用户名和密码，可用来登录和使用操作系统。每个用户还有对应的权限：能够执行的操作范围。使用命令 <code>whoami</code> 可打印操作系统用户的名称（本节的示例无法在 Windows 系统的 Bash 或 Web 应用上复现）：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>　$ whoami\n<span class=\"hljs-meta\">&gt;&gt;</span> coryalthoff\n</code></pre>\n<p>正常情况下，打印的就是在安装操作系统时所创建的用户。但该用户并不是操作系统中权限最高的用户。权限最高的用户被称为根用户。每个系统都有一个根用户，可以创建或删除其他用户。</p>\n<p>由于安全原因，我们通常不会以根用户身份登录系统。在需要以根用户权限执行命令时，可在命令前加上 <code>sudo</code>（superuser do 的简称）。<code>sudo</code> 可在不影响操作系统安全性的前提下，让我们以根用户的身份执行命令。下面是通过 <code>sudo</code> 使用 <code>echo</code> 命令的示例：</p>\n<pre><code class=\"hljs ruby\">$ sudo echo Hello, World!\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>如果已经设置过密码，使用 <code>sudo</code> 时程序将要求你输入密码。<code>sudo</code> 会穿透那些保护操作系统的屏障，因此除非你自信命令不会损害操作系统，否则不要随便执行 <code>sudo</code> 命令。</p>\n<h3 id=\"1612\">16.12　了解更多</h3>\n<p>本章中只介绍了 Bash 的基础知识。如需了解更多，可访问 http://theselftaughtprogrammer.io/bash。</p>\n<h3 id=\"1613\">16.13　术语表</h3>\n<p><strong>命令行接口</strong>：一种可以支持用户输入指令，由操作系统执行的程序。</p>\n<p><strong>命令行</strong>：命令行接口的另一个叫法。</p>\n<p><strong>Bash</strong>：大部分类 UNIX 操作系统都具备的命令行接口实现。</p>\n<p><strong>命令提示符</strong>：Windows 操作系统提供的命令行接口。</p>\n<p><strong>目录</strong>：文件夹的另一个叫法。</p>\n<p><strong>工作目录</strong>：当前所在的目录。</p>\n<p><strong>路径</strong>：表示目录或文件在操作系统中的存放地址的一种方式。</p>\n<p><strong>绝对路径</strong>：绝对路径提供的是从根目录开始的文件或目录的位置。</p>\n<p><strong>相对路径</strong>：相对路径是从当前工作目录开始，而非根目录。</p>\n<p><strong>管道</strong>：竖直线 <code>|</code>。可使用管道将一个命令的输出，传入另一个命令作为输入。</p>\n<p><strong>环境变量</strong>：操作系统和其他程序用来保存数据的变量。</p>\n<p><strong>$PATH</strong>：在 Bash 中输入该命令时，Bash 将从名为 <code>'$PATH'</code> 的环境变量所保存的所有目录中查到对应命令。</p>\n<p><strong>用户</strong>：使用操作系统的人。</p>\n<p><strong>权限</strong>：操作系统用户可以执行的操作范围。</p>\n<p><strong>根用户</strong>：在操作系统中拥有最高权限的用户。</p>\n<h3 id=\"1614\">16.14　挑战练习</h3>\n<p>1．在 Bash 中打印 <code>Self-taught</code>。</p>\n<p>2．使用绝对路径和相对路径，从一个目录前往 <code>home</code> 目录。</p>\n<p>3．创建一个名为 <code>$python_projects</code> 的环境变量，其值为保存 Python 文件的目录的绝对路径。将变量保存在 <code>.profile</code> 文件中，然后使用 <code>cd $python_projects</code> 命令进入该目录。</p>\n</div></article>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>Bash</title>\n</head>\n<body>\n<article id=\"articleDiv\"><div class=\"mazi-article-content dont-break-out\"><p></p><div class=\"toc\">\n<ul>\n<li><ul>\n<li><ul>\n<li><a href=\"#161\">16.1　跟随练习</a></li>\n<li><a href=\"#162bash\">16.2　找到 Bash</a></li>\n<li><a href=\"#163\">16.3　命令</a></li>\n<li><a href=\"#164\">16.4　最近命令</a></li>\n<li><a href=\"#165\">16.5　相对路径与绝对路径</a></li>\n<li><a href=\"#166\">16.6　导航</a></li>\n<li><a href=\"#167\">16.7　旗标</a></li>\n<li><a href=\"#168\">16.8　隐藏文件</a></li>\n<li><a href=\"#169\">16.9　管道</a></li>\n<li><a href=\"#1610\">16.10　环境变量</a></li>\n<li><a href=\"#1611\">16.11　用户</a></li>\n<li><a href=\"#1612\">16.12　了解更多</a></li>\n<li><a href=\"#1613\">16.13　术语表</a></li>\n<li><a href=\"#1614\">16.14　挑战练习</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<p></p>\n<blockquote>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">“除了计算机编程外，我想不出还有其他让我感兴趣的工作。我可以无中生有地创造出精美的范式和结构，在此过程中也解决了无数的小谜团。</span></p>\n  <p><span style=\"font-family: Times New Roman,楷体_GB2312\">——皮特 · 范德林登（Peter Van Der Linden）</span></p>\n</blockquote>\n<p>本章将学习使用一种被称为 <strong>Bash</strong> 的<strong>命令行接口</strong>（command-line interface）。命令行接口是一种可以支持用户输入指令，并由操作系统执行的程序。Bash 则是大部分类 UNIX 操作系统都具备的命令行接口实现。因此，本章中命令行接口和<strong>命令行</strong>可交替使用。</p>\n<p>笔者刚得到第一份编程工作时，犯了将所有时间都用来练习编程的错误。当然，要想做到职业编程的水平，需要一定的天赋。但是还有其他应该掌握的技能，比如命令行的使用。命令行是除了编码之外，其他工作的“控制中心”。</p>\n<p>例如，本书后续章节将会提到如何使用包管理器安装他人的程序，以及如何使用版本控制系统与他人进行协作。这两个工具都需要从命令行进行操作。另外，如今大部分软件都需要从互联网获取数据，而世界上大部分 Web 服务器运行的都是 Linux 系统。这些服务器没有图形化的用户界面，只能通过命令行访问。</p>\n<p>命令行、包管理器、正则表达式和版本控制，这些都是程序员工具库中的核心成员。笔者所共事过的团队中，没有成员不擅长使用这些工具。</p>\n<p>当你以编程为职业时，也需要做到可以熟练使用上述工具。笔者花了很长时间才做到这点，也很后悔当初没有更早地学习如何使用这些工具。</p>\n<h3 id=\"161\">16.1　跟随练习</h3>\n<p>如果你使用的是 Ubuntu 或 UNIX 系统，那么计算机中会自带 Bash。如果使用的是 Windows 系统，其自带的命令行接口叫做<strong>命令提示符</strong>（Command Prompt），本章中并没有用到。最新版的 Windows 10 操作系统中已经提供了 Bash。可以前往网页 http://theselftaughtprogrammer.io/windows10bash 了解如何在 Windows 10 操作系统中使用 Bash。</p>\n<p>如果你的计算机是 Windows 操作系统，那么可以使用亚马逊的 AWS 服务创建一个运行 Ubuntu 的免费 Web 服务器。服务器的搭建很简单，而且 AWS 在编程圈子里使用也很广泛，因此对你来说这是非常有价值的经验。可以前往 http://theselftaughtprogrammer.io/aws 进行了解。</p>\n<p>如果使用的是 Windows 操作系统，又不想搭建服务器，那么可以打开网页 http://theselftaughtprogrammer.io/bashapp，里面有一个 Web 应用的链接，可以模拟 Bash 的行为，用来跟随本章中的大部分练习示例。</p>\n<p>接下来的两章中，可以使用 Windows 的命令操作符来完成练习示例。按下运行窗口键后，搜索 <code>Command Prompt</code> 即可打开。</p>\n<h3 id=\"162bash\">16.2　找到 Bash</h3>\n<p>如果你使用的是 Ubuntu，可以点击名为搜索本地和在线资源的图标，搜索 <code>Terminal</code> 即可找到 Bash；如果你使用的是 Mac，则可通过 Spotlight 搜索查找 Bash，如图 16-1 所示。</p>\n<p><img src=\"https://images.gitbook.cn/aabba550-7011-11e9-be31-a34bfde053f0\" alt=\"enter image description here\"></p>\n<p>图 16-1　Bash</p>\n<h3 id=\"163\">16.3　命令</h3>\n<p>Bash 与 Python 的 shell 类似，可以向其中输入命令（类似 Python 中的函数）。然后输入空格，以及传入命令的参数，按下回车键后，Bash 就会返回结果。<code>echo</code> 命令类似 Python 中的 <code>print</code> 函数。</p>\n<p>在本书或其他编程文档中看到美元符号后面跟着一个命令时，就意味着需要在命令行输入命令。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/junx62n</span>\n$ echo Hello, World!\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>首先键入的是命令 <code>echo</code>，然后是一个空格符，以及参数 <code>Hello, World!</code>。按下回车之后，Bash 就会打印出 <code>Hello, World!</code>。</p>\n<p>也可以从命令行直接使用 Python 等已经安装好的程序。输入命令 <code>python3</code>（在编写本书时，模拟 Bash 的 Web 应用还不支持 Python3。那么则输入 <code>Python</code> 使用 Python2）：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/htoospk</span></span>\n$ python3\n</code></pre>\n<p>现在可以执行 Python 代码了：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/jk2acua</span>\nprint(<span class=\"hljs-string\">\"Hello, World!\"</span>)\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>输入 <code>exit()</code> 可退出 Python。</p>\n<h3 id=\"164\">16.4　最近命令</h3>\n<p>可通过上下箭头按键，查看在 Bash 中近期执行的命令。如需查看所有最近命令的列表，可使用命令 <code>history</code> 查看：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/go2spbt</span>\n$ history\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">1</span>. echo Hello, World!\n</code></pre>\n<h3 id=\"165\">16.5　相对路径与绝对路径</h3>\n<p>操作系统中包含各种目录和文件。<strong>目录</strong>（directory）是文件夹的另一种叫法。所有的目录和文件都有一个路径，即目录或文件在操作系统中的存放地址。在使用 Bash 时，其必然是会位于某个目录中。可使用命令 <code>pwd[表示打印工作目录（working directory）]</code> 来打印当前所在的目录的名称：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/hptsqhp</span>\n$ pwd\n<span class=\"hljs-meta\">&gt;&gt;</span> /Users/coryalthoff\n</code></pre>\n<p>操作系统使用树状结构来表示其目录和目录位置。在计算机科学中，树状结构是一种非常重要的数据结构（本书第四部分会详细介绍）。在树状结构中，位于顶部的是根，根可以有多个分支，每个分支又可以拥有其他分支，以此类推，直至无穷。图 16-2 所示是一个表示操作系统中目录结构的树状结构示例：</p>\n<p><img src=\"https://images.gitbook.cn/21e6b200-7012-11e9-83ce-bf64b45f6e99\" alt=\"enter image description here\"></p>\n<p>图 16-2　树状结构</p>\n<p>树状结构的每个分支就是一个目录，包括根目录在内。该结构显示了目录之间是如何连接的。只要是在使用 Bash 时，就必然位于操作系统树状结构的某个位置。<strong>路径</strong>（path）就是表达该位置的一种方式。类 UNIX 操作系统中一个文件或目录的路径，有两种表示方式：<strong>绝对路径</strong>（absolute path）和<strong>相对路径</strong>（relative path）。</p>\n<p>绝对路径提供的是从根目录开始的文件或目录的位置，由树结构中的目录名称组成，按照与根目录之间的距离从近至远依次用斜杠分隔。例如笔者的计算机中 <code>bernie</code> 目录的绝对路径（如图 16-2 所示）是 <code>/home/bernie</code>。第一个斜杠表示的是根目录，之后是 <code>home</code> 目录，然后是一个斜杠和 <code>bernie</code> 目录的名称。</p>\n<p>表示目录在计算机中所处位置的另一种方法，是相对路径。相对路径是从当前工作目录开始，而非根目录。如果路径不是以斜杠开头，Bash 会明白使用的是相对路径。假设我们目前如上例中所示正位于图 16-2 所示的 <code>home</code> 目录下，<code>projects</code> 目录的相对路径则是 <code>bernie/projects</code>。如果我们位于 <code>home</code> 目录下，<code>bernie</code> 目录的相对路径就是 <code>bernie</code>。如果我们位于 <code>root</code> 目录下，<code>projects</code> 目录的相对路径则为 <code>home/bernie/projects</code>。</p>\n<h3 id=\"166\">16.6　导航</h3>\n<p>将绝对路径或相对路径作为参数传给命令 <code>cd</code>，即可改变当前所在的目录。输入 <code>cd</code> 命令，在之后输入绝对路径 <code>/</code>，前往操作系统的根目录。示例如下：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># http://tinyurl.com/hjgz79h</span>\n$ <span class=\"hljs-built_in\">cd</span> /\n</code></pre>\n<p>可通过命令 pwd 验证当前所在的位置：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/j6ax35s</span>\n$ pwd\n<span class=\"hljs-meta\">&gt;&gt;</span> /\n</code></pre>\n<p><code>ls</code> 命令可打印当前工作目录下的所有目录和文件夹：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/gw4d5yw</span>\n$ ls\n<span class=\"hljs-meta\">&gt;&gt;</span> bin dev initrd.img lost+found ...\n</code></pre>\n<p>将希望创建的目录名称传给 <code>mkdir</code> 命令，即可新建目录。目录名称中不能有空格。前往 <code>home</code> 目录（<code>~</code> 是类 UNIX 操作系统中 <code>home</code> 目录的快捷键），并使用 <code>mkdir</code> 命令创建一个名为 <code>tstp</code> 的新目录。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/zavhjeq</span>\n$ cd ~\n$ mkdir tstp\n</code></pre>\n<p>通过 <code>ls</code> 命令，验证新目录是否创建成功：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/hneq2f6</span>\n$ ls\n<span class=\"hljs-meta\">&gt;&gt;</span> tstp\n</code></pre>\n<p>接着，使用 <code>cd</code> 命令进入 <code>tstp</code> 目录。将 <code>tstp</code> 作为参数传给 <code>cd</code> 命令即可实现：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># http://tinyurl.com/zp3nb21</span>\n$ <span class=\"hljs-built_in\">cd</span> tstp\n</code></pre>\n<p><code>cd</code> 命令后接两个英文句号，可以回到上一层目录：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># http://tinyurl.com/z2gevk2</span>\n$ <span class=\"hljs-built_in\">cd</span> ..\n</code></pre>\n<p>使用命令 <code>rmdir</code> 可删除目录。这里使用该命令删除 <code>tstp</code> 目录：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/jkjjo6s</span></span>\n% rmdir tstp\n</code></pre>\n<p>最后，通过 <code>ls</code> 命令验证是否成功删除目录：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/z32xn2n</span></span>\n$ ls\n</code></pre>\n<h3 id=\"167\">16.7　旗标</h3>\n<p>命令支持一个叫旗标（flag）的概念，可以改变命令的执行方式。旗标对于命令来说，是一些值为 <code>True</code> 或 <code>False</code> 的执行选项。一个命令的所有旗标默认置为 <code>False</code>。如果向命令中添加一个旗标，Bash 将把该旗标的值设为 <code>True</code>，命令的执行方式也会随之改变。在旗标的名称前面加一个（-）或两个连字符（--），即可将旗标置为 <code>True</code>。</p>\n<p>例如，可在 <code>ls</code> 命令后加上旗标 <code>--author</code>，并将 <code>author</code> 旗标设置为 <code>True</code>。加上该旗标后，<code>ls</code> 命令的执行方式将会改变，除了打印目录下所有的目录和文件之外，还将打印创建目录或文件的作者名字。</p>\n<p>在 UNIX 系统中，需要在旗标前使用一个连字符：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/j4y5kz4</span>\n$ ls -author\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">13</span> coryalthoff <span class=\"hljs-number\">442</span>B Sep <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">17</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">25</span> Pictures\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">25</span> coryalthoff <span class=\"hljs-number\">850</span>B Nov <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">18</span><span class=\"hljs-symbol\">:</span>09 Documents\n</code></pre>\n<p>在 Linux 系统中，需使用两个连字符：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/hu9c54q</span>\n$ ls --author\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">13</span> coryalthoff <span class=\"hljs-number\">442</span>B Sep <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">17</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">25</span> Pictures\n<span class=\"hljs-meta\">&gt;&gt;</span> drwx------+ <span class=\"hljs-number\">25</span> coryalthoff <span class=\"hljs-number\">850</span>B Nov <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">18</span><span class=\"hljs-symbol\">:</span>09 Documents\n</code></pre>\n<h3 id=\"168\">16.8　隐藏文件</h3>\n<p>操作系统和很多程序都会将数据保存在隐藏文件中。隐藏文件指的是默认不会展示给用户的文件，因为修改隐藏文件会影响依赖这些文件的程序。隐藏文件的名称以英文句点开头，如 <code>.hidden</code>。在 <code>ls</code> 命令后加上旗标 <code>-a</code>（表示所有文件），即可查看隐藏文件。<code>touch</code> 命令支持从命令行新建文件。</p>\n<p><code>touch</code> 命令可新建文件。这里使用该命令创建一个名为 <code>.self_taught</code> 的隐藏文件：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/hfawo8t</span></span>\n$ touch .self_taught\n</code></pre>\n<p>使用命令 <code>ls</code> 和 <code>ls-a</code> 检查是否可以看到隐藏文件。</p>\n<h3 id=\"169\">16.9　管道</h3>\n<p>在类 UNIX 操作性系统中，竖直线“<code>|</code>”被称为<strong>管道</strong>（pipe）。可使用管道将一个命令的输出，传入另一个命令作为输入。例如，可使用 <code>ls</code> 命令的输出，作为 <code>less</code> 命令的输入（需确保当前目录不是空目录）：</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-meta\"># http:<span class=\"hljs-comment\">//tinyurl.com/zjne9f5</span></span>\n$ ls | less\n&gt;&gt; Applications ...\n</code></pre>\n<p>执行结果是一个用 less 程序打开的文本文件，内容为 <code>ls</code> 命令的输出（按 <code>q</code> 推出 less 程序）。</p>\n<h3 id=\"1610\">16.10　环境变量</h3>\n<p><strong>环境变量</strong>（environment variable）是保存在操作系统中的变量，程序可通过这些变量获取当前运行环境的相关数据，如运行程序的计算机的名称，或运行程序的用户的名称。使用语法 <code>export[变量名]=[变量值]</code>，即可在 Bash 中新建一个环境变量。如需在 Bash 中引用环境变量，必须在其名称前加一个美元符号。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/jjbc9v2</span>\n$ export x=<span class=\"hljs-number\">100</span>\n$ echo $x\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>这样创建的环境变量只能存在于当前的 Bash 窗口。如果退出 Bash 之后再打开，输入 <code>echo $x</code> 将不会打印 <code>100</code>，因为环境变量 <code>x</code> 已经不存在了。</p>\n<p>将环境变量添加到类 UNIX 操作系统使用的一个隐藏文件中，可使得环境变量持久存在。该隐藏文件位于 <code>home</code> 目录下，名为 <code>.profile</code>。使用图形用户界面前往 <code>home</code> 目录。可在命令行输入 <code>pwd ~</code>，找到 <code>home</code> 目录的绝对路径。然后，使用文本编辑器创建一个名为 <code>.profile</code> 的文件，在第一行输入 <code>export x=100</code> 并保存文件。之后，退出并重新打开 Bash，这时就能够打印环境变量 <code>x</code> 了。示例如下：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># http://tinyurl.com/j5wjwdf</span>\n$ echo $x\n<span class=\"hljs-meta\">&gt;&gt;</span> <span class=\"hljs-number\">100</span>\n</code></pre>\n<p>只要 <code>.profile</code> 文件中包含该变量，即可持久性地使用。从 <code>.profile</code> 中移除相关内容，即可删除变量。</p>\n<h3 id=\"1611\">16.11　用户</h3>\n<p>操作系统支持多用户使用。用户指的是使用操作系统的人。每个用户都分配了用户名和密码，可用来登录和使用操作系统。每个用户还有对应的权限：能够执行的操作范围。使用命令 <code>whoami</code> 可打印操作系统用户的名称（本节的示例无法在 Windows 系统的 Bash 或 Web 应用上复现）：</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-number\">1</span>　$ whoami\n<span class=\"hljs-meta\">&gt;&gt;</span> coryalthoff\n</code></pre>\n<p>正常情况下，打印的就是在安装操作系统时所创建的用户。但该用户并不是操作系统中权限最高的用户。权限最高的用户被称为根用户。每个系统都有一个根用户，可以创建或删除其他用户。</p>\n<p>由于安全原因，我们通常不会以根用户身份登录系统。在需要以根用户权限执行命令时，可在命令前加上 <code>sudo</code>（superuser do 的简称）。<code>sudo</code> 可在不影响操作系统安全性的前提下，让我们以根用户的身份执行命令。下面是通过 <code>sudo</code> 使用 <code>echo</code> 命令的示例：</p>\n<pre><code class=\"hljs ruby\">$ sudo echo Hello, World!\n<span class=\"hljs-meta\">&gt;&gt;</span> Hello, World!\n</code></pre>\n<p>如果已经设置过密码，使用 <code>sudo</code> 时程序将要求你输入密码。<code>sudo</code> 会穿透那些保护操作系统的屏障，因此除非你自信命令不会损害操作系统，否则不要随便执行 <code>sudo</code> 命令。</p>\n<h3 id=\"1612\">16.12　了解更多</h3>\n<p>本章中只介绍了 Bash 的基础知识。如需了解更多，可访问 http://theselftaughtprogrammer.io/bash。</p>\n<h3 id=\"1613\">16.13　术语表</h3>\n<p><strong>命令行接口</strong>：一种可以支持用户输入指令，由操作系统执行的程序。</p>\n<p><strong>命令行</strong>：命令行接口的另一个叫法。</p>\n<p><strong>Bash</strong>：大部分类 UNIX 操作系统都具备的命令行接口实现。</p>\n<p><strong>命令提示符</strong>：Windows 操作系统提供的命令行接口。</p>\n<p><strong>目录</strong>：文件夹的另一个叫法。</p>\n<p><strong>工作目录</strong>：当前所在的目录。</p>\n<p><strong>路径</strong>：表示目录或文件在操作系统中的存放地址的一种方式。</p>\n<p><strong>绝对路径</strong>：绝对路径提供的是从根目录开始的文件或目录的位置。</p>\n<p><strong>相对路径</strong>：相对路径是从当前工作目录开始，而非根目录。</p>\n<p><strong>管道</strong>：竖直线 <code>|</code>。可使用管道将一个命令的输出，传入另一个命令作为输入。</p>\n<p><strong>环境变量</strong>：操作系统和其他程序用来保存数据的变量。</p>\n<p><strong>$PATH</strong>：在 Bash 中输入该命令时，Bash 将从名为 <code>'$PATH'</code> 的环境变量所保存的所有目录中查到对应命令。</p>\n<p><strong>用户</strong>：使用操作系统的人。</p>\n<p><strong>权限</strong>：操作系统用户可以执行的操作范围。</p>\n<p><strong>根用户</strong>：在操作系统中拥有最高权限的用户。</p>\n<h3 id=\"1614\">16.14　挑战练习</h3>\n<p>1．在 Bash 中打印 <code>Self-taught</code>。</p>\n<p>2．使用绝对路径和相对路径，从一个目录前往 <code>home</code> 目录。</p>\n<p>3．创建一个名为 <code>$python_projects</code> 的环境变量，其值为保存 Python 文件的目录的绝对路径。将变量保存在 <code>.profile</code> 文件中，然后使用 <code>cd $python_projects</code> 命令进入该目录。</p>\n</div></article>\n</body>\n</html>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}